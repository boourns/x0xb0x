   1               		.file	"midi.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_19
  12               	__vector_19:
  13               	.LFB1:
  14               		.file 1 "midi.c"
   1:midi.c        **** /* 
   2:midi.c        ****  * The software for the x0xb0x is available for use in accordance with the 
   3:midi.c        ****  * following open source license (MIT License). For more information about
   4:midi.c        ****  * OS licensing, please visit -> http://www.opensource.org/
   5:midi.c        ****  *
   6:midi.c        ****  * For more information about the x0xb0x project, please visit
   7:midi.c        ****  * -> http://www.ladyada.net/make/x0xb0x
   8:midi.c        ****  *
   9:midi.c        ****  *                                     *****
  10:midi.c        ****  * Copyright (c) 2005 Limor Fried
  11:midi.c        ****  *
  12:midi.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a 
  13:midi.c        ****  * copy of this software and associated documentation files (the "Software"), 
  14:midi.c        ****  * to deal in the Software without restriction, including without limitation 
  15:midi.c        ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  16:midi.c        ****  * and/or sell copies of the Software, and to permit persons to whom the 
  17:midi.c        ****  * Software is furnished to do so, subject to the following conditions:
  18:midi.c        ****  *
  19:midi.c        ****  * The above copyright notice and this permission notice shall be included in 
  20:midi.c        ****  * all copies or substantial portions of the Software.
  21:midi.c        ****  *
  22:midi.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
  23:midi.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  24:midi.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
  25:midi.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
  26:midi.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  27:midi.c        ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
  28:midi.c        ****  * IN THE SOFTWARE.
  29:midi.c        ****  *                                     *****
  30:midi.c        ****  *
  31:midi.c        ****  */
  32:midi.c        **** 
  33:midi.c        **** #include <avr/io.h>
  34:midi.c        **** #include <avr/interrupt.h>
  35:midi.c        **** #include <avr/signal.h>
  36:midi.c        **** #include <stdio.h>
  37:midi.c        **** #include "midi.h"
  38:midi.c        **** #include "switch.h"
  39:midi.c        **** #include "synth.h"
  40:midi.c        **** #include "main.h"
  41:midi.c        **** #include "led.h"
  42:midi.c        **** #include "dinsync.h"
  43:midi.c        **** #include "delay.h"
  44:midi.c        **** 
  45:midi.c        **** uint8_t midion_accent_velocity = 127;
  46:midi.c        **** uint8_t midioff_velocity = 32;
  47:midi.c        **** uint8_t midion_noaccent_velocity = 100;
  48:midi.c        **** 
  49:midi.c        **** uint8_t midi_out_addr;  // store this in EEPROM
  50:midi.c        **** uint8_t midi_in_addr;   // store this in EEPROM, too!
  51:midi.c        **** 
  52:midi.c        **** extern volatile uint8_t dinsync_clock_timeout;
  53:midi.c        **** 
  54:midi.c        **** uint8_t midi_running_status = 0;  // suck!
  55:midi.c        **** volatile int16_t midisync_clocked = 0;
  56:midi.c        **** 
  57:midi.c        **** extern uint8_t function, bank;
  58:midi.c        **** #define function_changed (function != MIDI_CONTROL_FUNC)
  59:midi.c        **** 
  60:midi.c        **** extern uint8_t playing;
  61:midi.c        **** extern uint8_t sync;
  62:midi.c        **** 
  63:midi.c        **** extern uint8_t prev_note;
  64:midi.c        **** 
  65:midi.c        **** #define ACCENT_THRESH 100
  66:midi.c        **** 
  67:midi.c        **** #define MIDI_Q_SIZE 32
  68:midi.c        **** volatile uint8_t midi_q[MIDI_Q_SIZE];      // cyclic queue for midi msgs
  69:midi.c        **** volatile static uint8_t head_idx = 0;
  70:midi.c        **** volatile static uint8_t tail_idx = 0;
  71:midi.c        **** 
  72:midi.c        **** // interrupt on receive char
  73:midi.c        **** SIGNAL(SIG_USART0_RECV) {
  15               		.loc 1 73 25 view -0
  16               		.cfi_startproc
  17 0000 1F92 1FB6 		__gcc_isr 1
  17      1F92 1124 
  17      8F93 
  18 000a 9F93      		push r25
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 25, -2
  21 000c EF93      		push r30
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 30, -3
  24 000e FF93      		push r31
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 31, -4
  27               	/* prologue: Signal */
  28               	/* frame size = 0 */
  29               	/* stack size = 3...7 */
  30               	.L__stack_usage = 3 + __gcc_isr.n_pushed
  74:midi.c        ****   char c = UDR0;
  31               		.loc 1 74 3 view .LVU1
  32               		.loc 1 74 8 is_stmt 0 view .LVU2
  33 0010 8CB1      		in r24,0xc
  34               	.LVL0:
  75:midi.c        ****   
  76:midi.c        ****   if (c == MIDI_START) {
  35               		.loc 1 76 3 is_stmt 1 view .LVU3
  36               		.loc 1 76 6 is_stmt 0 view .LVU4
  37 0012 8A3F      		cpi r24,lo8(-6)
  38 0014 01F4      		brne .L2
  77:midi.c        ****     // we handle the clock counter here so that it is processed in order, otherwise
  78:midi.c        ****     // we potentially skip a clock
  79:midi.c        **** 
  80:midi.c        ****     midisync_clocked = 0;
  39               		.loc 1 80 5 is_stmt 1 view .LVU5
  40               		.loc 1 80 22 is_stmt 0 view .LVU6
  41 0016 1092 0000 		sts midisync_clocked+1,__zero_reg__
  42 001a 1092 0000 		sts midisync_clocked,__zero_reg__
  43               	.L3:
  81:midi.c        ****     
  82:midi.c        ****     // don't return, let MIDI_START be enqueued for the rest of the start logic
  83:midi.c        ****   } else if (c == MIDI_CLOCK) {
  84:midi.c        **** 
  85:midi.c        ****     // raise dinsync clk immediately, and also sched. to drop clock
  86:midi.c        ****     // (MIDISYNC -> DINSYNC conversion);
  87:midi.c        ****     if (sync == MIDI_SYNC ) {
  88:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  89:midi.c        ****       dinsync_clock_timeout = 5;      // in 5ms drop the edge, is this enough?
  90:midi.c        ****     }
  91:midi.c        **** 
  92:midi.c        ****     midisync_clocked++;
  93:midi.c        ****     return;
  94:midi.c        ****   }
  95:midi.c        **** 
  96:midi.c        ****   //putstring("0x"); putnum_uh(c); putstring("   ");
  97:midi.c        ****   midi_q[tail_idx++] = c;    // place at end of q
  44               		.loc 1 97 3 is_stmt 1 view .LVU7
  45               		.loc 1 97 18 is_stmt 0 view .LVU8
  46 001e E091 0000 		lds r30,tail_idx
  47 0022 91E0      		ldi r25,lo8(1)
  48 0024 9E0F      		add r25,r30
  49 0026 9093 0000 		sts tail_idx,r25
  50 002a F0E0      		ldi r31,0
  51               		.loc 1 97 22 view .LVU9
  52 002c E050      		subi r30,lo8(-(midi_q))
  53 002e F040      		sbci r31,hi8(-(midi_q))
  54 0030 8083      		st Z,r24
  98:midi.c        ****   tail_idx %= MIDI_Q_SIZE;
  55               		.loc 1 98 3 is_stmt 1 view .LVU10
  56               		.loc 1 98 12 is_stmt 0 view .LVU11
  57 0032 8091 0000 		lds r24,tail_idx
  58               	.LVL1:
  59               		.loc 1 98 12 view .LVU12
  60 0036 8F71      		andi r24,lo8(31)
  61 0038 8093 0000 		sts tail_idx,r24
  62               	.LVL2:
  99:midi.c        **** 
 100:midi.c        ****   if (tail_idx == head_idx) {
  63               		.loc 1 100 3 is_stmt 1 view .LVU13
  64               		.loc 1 100 16 is_stmt 0 view .LVU14
  65 003c 9091 0000 		lds r25,tail_idx
  66 0040 8091 0000 		lds r24,head_idx
  67               		.loc 1 100 6 view .LVU15
  68 0044 9813      		cpse r25,r24
  69 0046 00C0      		rjmp .L1
 101:midi.c        ****     // i.e. there are too many msgs in the q
 102:midi.c        ****     // drop the oldest msg?
 103:midi.c        ****     head_idx++;
  70               		.loc 1 103 5 is_stmt 1 view .LVU16
  71               		.loc 1 103 13 is_stmt 0 view .LVU17
  72 0048 8091 0000 		lds r24,head_idx
  73 004c 8F5F      		subi r24,lo8(-(1))
  74 004e 8093 0000 		sts head_idx,r24
 104:midi.c        ****     head_idx %= MIDI_Q_SIZE;
  75               		.loc 1 104 5 is_stmt 1 view .LVU18
  76               		.loc 1 104 14 is_stmt 0 view .LVU19
  77 0052 8091 0000 		lds r24,head_idx
  78 0056 8F71      		andi r24,lo8(31)
  79 0058 8093 0000 		sts head_idx,r24
  80 005c 00C0      		rjmp .L1
  81               	.LVL3:
  82               	.L2:
  83:midi.c        **** 
  83               		.loc 1 83 10 is_stmt 1 view .LVU20
  83:midi.c        **** 
  84               		.loc 1 83 13 is_stmt 0 view .LVU21
  85 005e 883F      		cpi r24,lo8(-8)
  86 0060 01F4      		brne .L3
  87:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  87               		.loc 1 87 5 is_stmt 1 view .LVU22
  87:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  88               		.loc 1 87 8 is_stmt 0 view .LVU23
  89 0062 8091 0000 		lds r24,sync
  90               	.LVL4:
  87:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  91               		.loc 1 87 8 view .LVU24
  92 0066 8230      		cpi r24,lo8(2)
  93 0068 01F4      		brne .L4
  88:midi.c        ****       dinsync_clock_timeout = 5;      // in 5ms drop the edge, is this enough?
  94               		.loc 1 88 7 is_stmt 1 view .LVU25
  95 006a 949A      		sbi 0x12,4
  89:midi.c        ****     }
  96               		.loc 1 89 7 view .LVU26
  89:midi.c        ****     }
  97               		.loc 1 89 29 is_stmt 0 view .LVU27
  98 006c 85E0      		ldi r24,lo8(5)
  99 006e 8093 0000 		sts dinsync_clock_timeout,r24
 100               	.L4:
  92:midi.c        ****     return;
 101               		.loc 1 92 5 is_stmt 1 view .LVU28
  92:midi.c        ****     return;
 102               		.loc 1 92 21 is_stmt 0 view .LVU29
 103 0072 8091 0000 		lds r24,midisync_clocked
 104 0076 9091 0000 		lds r25,midisync_clocked+1
 105 007a 0196      		adiw r24,1
 106 007c 9093 0000 		sts midisync_clocked+1,r25
 107 0080 8093 0000 		sts midisync_clocked,r24
  93:midi.c        ****   }
 108               		.loc 1 93 5 is_stmt 1 view .LVU30
 109               	.L1:
 110               	/* epilogue start */
 105:midi.c        ****   }
 106:midi.c        **** }
 111               		.loc 1 106 1 is_stmt 0 view .LVU31
 112 0084 FF91      		pop r31
 113 0086 EF91      		pop r30
 114 0088 9F91      		pop r25
 115 008a 8F91 1F90 		__gcc_isr 2
 115      1FBE 1F90 
 116 0092 1895      		reti
 117               		__gcc_isr 0,r24
 118               		.cfi_endproc
 119               	.LFE1:
 121               	.global	get_midi_addr
 123               	get_midi_addr:
 124               	.LVL5:
 125               	.LFB2:
 107:midi.c        **** 
 108:midi.c        **** 
 109:midi.c        **** uint8_t get_midi_addr(uint8_t eeaddr) {
 126               		.loc 1 109 39 is_stmt 1 view -0
 127               		.cfi_startproc
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
 110:midi.c        ****   uint8_t midi_addr;
 132               		.loc 1 110 3 view .LVU33
 111:midi.c        ****   
 112:midi.c        ****   midi_addr = internal_eeprom_read8(eeaddr);
 133               		.loc 1 112 3 view .LVU34
 134               		.loc 1 112 15 is_stmt 0 view .LVU35
 135 0094 90E0      		ldi r25,0
 136 0096 0E94 0000 		call internal_eeprom_read8
 137               	.LVL6:
 113:midi.c        ****   if (midi_addr > 15)
 138               		.loc 1 113 3 is_stmt 1 view .LVU36
 114:midi.c        ****     midi_addr = 15;
 115:midi.c        ****   return midi_addr;
 139               		.loc 1 115 3 view .LVU37
 140               		.loc 1 115 10 is_stmt 0 view .LVU38
 141 009a 8031      		cpi r24,lo8(16)
 142 009c 00F0      		brlo .L7
 143 009e 8FE0      		ldi r24,lo8(15)
 144               	.L7:
 145               	/* epilogue start */
 116:midi.c        **** }
 146               		.loc 1 116 1 view .LVU39
 147 00a0 0895      		ret
 148               		.cfi_endproc
 149               	.LFE2:
 151               	.global	init_midi
 153               	init_midi:
 154               	.LFB3:
 117:midi.c        **** 
 118:midi.c        **** 
 119:midi.c        **** void init_midi(void) {
 155               		.loc 1 119 22 is_stmt 1 view -0
 156               		.cfi_startproc
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
 120:midi.c        ****   midi_in_addr = get_midi_addr(MIDIIN_ADDR_EEADDR);
 161               		.loc 1 120 3 view .LVU41
 162               		.loc 1 120 18 is_stmt 0 view .LVU42
 163 00a2 83E0      		ldi r24,lo8(3)
 164 00a4 0E94 0000 		call get_midi_addr
 165               	.LVL7:
 166               		.loc 1 120 16 view .LVU43
 167 00a8 8093 0000 		sts midi_in_addr,r24
 121:midi.c        ****   midi_out_addr = get_midi_addr(MIDIOUT_ADDR_EEADDR);
 168               		.loc 1 121 3 is_stmt 1 view .LVU44
 169               		.loc 1 121 19 is_stmt 0 view .LVU45
 170 00ac 84E0      		ldi r24,lo8(4)
 171 00ae 0E94 0000 		call get_midi_addr
 172               	.LVL8:
 173               		.loc 1 121 17 view .LVU46
 174 00b2 8093 0000 		sts midi_out_addr,r24
 175               	/* epilogue start */
 122:midi.c        **** }
 176               		.loc 1 122 1 view .LVU47
 177 00b6 0895      		ret
 178               		.cfi_endproc
 179               	.LFE3:
 181               	.global	midi_note_off
 183               	midi_note_off:
 184               	.LVL9:
 185               	.LFB6:
 123:midi.c        **** 
 124:midi.c        **** void do_midi_mode(void) {
 125:midi.c        ****   char c;
 126:midi.c        ****   uint8_t last_bank;
 127:midi.c        ****   uint8_t note, velocity;
 128:midi.c        **** 
 129:midi.c        ****   // turn tempo off!
 130:midi.c        ****   turn_off_tempo();
 131:midi.c        **** 
 132:midi.c        ****   // show midi addr on bank leds
 133:midi.c        ****   clear_bank_leds();
 134:midi.c        ****   set_bank_led(midi_in_addr);
 135:midi.c        **** 
 136:midi.c        ****   read_switches();
 137:midi.c        ****   delay_ms(100);
 138:midi.c        ****   read_switches();
 139:midi.c        ****   delay_ms(100);
 140:midi.c        ****   read_switches();
 141:midi.c        ****   last_bank = bank;
 142:midi.c        ****   prev_note = 255;        // no notes played yet
 143:midi.c        **** 
 144:midi.c        ****   while (1) {
 145:midi.c        ****     read_switches();
 146:midi.c        ****     if (function_changed) {
 147:midi.c        ****       midi_notesoff(); // clear any stuck notes
 148:midi.c        ****       return;
 149:midi.c        ****     }
 150:midi.c        **** 
 151:midi.c        ****     if (last_bank != bank) {
 152:midi.c        ****       // bank knob was changed, change the midi address
 153:midi.c        ****       midi_in_addr = bank;
 154:midi.c        **** 
 155:midi.c        ****       // set the new midi address (burn to EEPROM)
 156:midi.c        ****       internal_eeprom_write8(MIDIIN_ADDR_EEADDR, midi_in_addr);
 157:midi.c        **** 
 158:midi.c        ****       clear_bank_leds();
 159:midi.c        ****       set_bank_led(midi_in_addr);
 160:midi.c        **** 
 161:midi.c        ****       last_bank = bank;
 162:midi.c        ****     }
 163:midi.c        **** 
 164:midi.c        ****     // if theres a char waiting in midi queue...
 165:midi.c        ****     if (midi_getch()) {
 166:midi.c        ****       // if its a command & either for our address or 0xF,
 167:midi.c        ****       // set the midi_running_status
 168:midi.c        ****       c = midi_getchar();
 169:midi.c        **** 
 170:midi.c        ****       if (c >> 7) {       // if the top bit is high, this is a command
 171:midi.c        **** 	if ((c >> 4 == 0xF) ||    // universal cmd, no addressing
 172:midi.c        **** 	    ((c & 0xF) == midi_in_addr)) {  // matches our addr
 173:midi.c        **** 	  midi_running_status = c >> 4;
 174:midi.c        **** 	} else {
 175:midi.c        **** 	  // not for us, continue!
 176:midi.c        **** 	  midi_running_status = MIDI_IGNORE; 
 177:midi.c        **** 	  continue;
 178:midi.c        **** 	}
 179:midi.c        ****       }
 180:midi.c        **** 
 181:midi.c        ****       switch (midi_running_status) {
 182:midi.c        ****       case MIDI_IGNORE:
 183:midi.c        **** 	{
 184:midi.c        **** 	  // somebody else's data, ignore
 185:midi.c        **** 	  break;
 186:midi.c        **** 	} 
 187:midi.c        ****       case MIDI_NOTE_ON:
 188:midi.c        **** 	{
 189:midi.c        **** 	  if (c >> 7)  // if the last byte was a command then we have to get the note
 190:midi.c        **** 	    note = midi_getchar();
 191:midi.c        **** 	  else
 192:midi.c        **** 	    note = c;  // otherwise, this was a running status, and c is the note
 193:midi.c        **** 
 194:midi.c        **** 	  velocity = midi_getchar();
 195:midi.c        **** 	  /*
 196:midi.c        **** 	    putstring("MIDI note on (note "); putnum_ud(note);
 197:midi.c        **** 	    putstring(") (velocity "); putnum_ud(velocity);
 198:midi.c        **** 	    putstring(")\n\r");
 199:midi.c        **** 	  */
 200:midi.c        **** 
 201:midi.c        **** 	  midi_note_on(note, velocity);
 202:midi.c        **** 	  break;
 203:midi.c        **** 	}
 204:midi.c        ****       case MIDI_NOTE_OFF:
 205:midi.c        **** 	{
 206:midi.c        **** 	  if (c >> 7) 
 207:midi.c        **** 	    note = midi_getchar();
 208:midi.c        **** 	  else
 209:midi.c        **** 	    note = c;
 210:midi.c        **** 
 211:midi.c        **** 	  velocity = midi_getchar();
 212:midi.c        **** 	  /*
 213:midi.c        **** 	    putstring("MIDI note off (note "); putnum_ud(note);
 214:midi.c        **** 	    putstring(") (velocity "); putnum_ud(velocity);
 215:midi.c        **** 	    putstring(")\n\r");
 216:midi.c        **** 	  */
 217:midi.c        **** 	  
 218:midi.c        **** 	  midi_note_off(note, velocity);
 219:midi.c        **** 	  
 220:midi.c        **** 	  break;
 221:midi.c        **** 	} 
 222:midi.c        ****       case MIDI_PITCHBEND:
 223:midi.c        **** 	{
 224:midi.c        **** 	  //putstring("MIDI Slide\n\r");
 225:midi.c        **** 
 226:midi.c        **** 	  break;
 227:midi.c        **** 	}
 228:midi.c        ****       default:
 229:midi.c        **** 	/*putstring("Received Unknown MIDI: 0x"); putnum_uh(c); 
 230:midi.c        **** 	  putstring("\n\r"); */
 231:midi.c        **** 	break;
 232:midi.c        ****       }
 233:midi.c        ****     }
 234:midi.c        ****   }
 235:midi.c        **** }
 236:midi.c        ****   // midi handling code!
 237:midi.c        **** 
 238:midi.c        **** uint8_t midi_recv_cmd(void) {
 239:midi.c        ****   uint8_t c;
 240:midi.c        **** 
 241:midi.c        ****   if (midi_getch()) {
 242:midi.c        ****     c = midi_getchar();
 243:midi.c        ****     if (c >> 7) {       // if the top bit is high, this is a command
 244:midi.c        ****       if (c >> 4 == 0xF)     // universal cmd, no addressing
 245:midi.c        **** 	return c;
 246:midi.c        ****       
 247:midi.c        ****       if ((c & 0xF) == midi_in_addr) {
 248:midi.c        **** 	midi_running_status = c >> 4;
 249:midi.c        **** 	return c;
 250:midi.c        ****       }
 251:midi.c        ****     }
 252:midi.c        ****   }
 253:midi.c        ****   return 0;
 254:midi.c        **** }
 255:midi.c        **** 
 256:midi.c        **** void midi_note_off(uint8_t note, uint8_t velocity) {
 186               		.loc 1 256 52 is_stmt 1 view -0
 187               		.cfi_startproc
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
 257:midi.c        ****   if (note == prev_note) {
 192               		.loc 1 257 3 view .LVU49
 193               		.loc 1 257 6 is_stmt 0 view .LVU50
 194 00b8 9091 0000 		lds r25,prev_note
 195 00bc 9813      		cpse r25,r24
 196 00be 00C0      		rjmp .L9
 258:midi.c        ****     note_off(0);
 197               		.loc 1 258 5 is_stmt 1 view .LVU51
 198 00c0 80E0      		ldi r24,0
 199               	.LVL10:
 200               		.loc 1 258 5 is_stmt 0 view .LVU52
 201 00c2 0E94 0000 		call note_off
 202               	.LVL11:
 259:midi.c        ****     prev_note = 255;
 203               		.loc 1 259 5 is_stmt 1 view .LVU53
 204               		.loc 1 259 15 is_stmt 0 view .LVU54
 205 00c6 8FEF      		ldi r24,lo8(-1)
 206 00c8 8093 0000 		sts prev_note,r24
 207               	.L9:
 208               	/* epilogue start */
 260:midi.c        ****   }
 261:midi.c        **** }
 209               		.loc 1 261 1 view .LVU55
 210 00cc 0895      		ret
 211               		.cfi_endproc
 212               	.LFE6:
 214               	.global	midi_note_on
 216               	midi_note_on:
 217               	.LVL12:
 218               	.LFB7:
 262:midi.c        **** 
 263:midi.c        **** void midi_note_on(uint8_t note, uint8_t velocity) {
 219               		.loc 1 263 51 is_stmt 1 view -0
 220               		.cfi_startproc
 221               	/* prologue: function */
 222               	/* frame size = 0 */
 223               	/* stack size = 0 */
 224               	.L__stack_usage = 0
 225               		.loc 1 263 51 is_stmt 0 view .LVU57
 226 00ce 962F      		mov r25,r22
 264:midi.c        ****   uint8_t slide = 0;
 227               		.loc 1 264 3 is_stmt 1 view .LVU58
 228               	.LVL13:
 265:midi.c        **** 
 266:midi.c        ****   if (velocity == 0 && note != 0) {
 229               		.loc 1 266 3 view .LVU59
 230               		.loc 1 266 6 is_stmt 0 view .LVU60
 231 00d0 6111      		cpse r22,__zero_reg__
 232 00d2 00C0      		rjmp .L12
 233               		.loc 1 266 21 discriminator 1 view .LVU61
 234 00d4 8823      		tst r24
 235 00d6 01F0      		breq .L12
 267:midi.c        ****     // strange midi thing: velocity 0 -> note off!
 268:midi.c        ****     midi_note_off(note, velocity);
 236               		.loc 1 268 5 is_stmt 1 view .LVU62
 237 00d8 60E0      		ldi r22,0
 238               	.LVL14:
 239               		.loc 1 268 5 is_stmt 0 view .LVU63
 240 00da 0E94 0000 		call midi_note_off
 241               	.LVL15:
 242               		.loc 1 268 5 view .LVU64
 243 00de 0895      		ret
 244               	.LVL16:
 245               	.L12:
 269:midi.c        ****   } else {
 270:midi.c        ****     if (prev_note != 255)
 246               		.loc 1 270 5 is_stmt 1 view .LVU65
 247               		.loc 1 270 19 is_stmt 0 view .LVU66
 248 00e0 2091 0000 		lds r18,prev_note
 249               	.LVL17:
 271:midi.c        ****       slide = 1;
 272:midi.c        **** 	  prev_note = note;	  
 250               		.loc 1 272 4 is_stmt 1 view .LVU67
 251               		.loc 1 272 14 is_stmt 0 view .LVU68
 252 00e4 8093 0000 		sts prev_note,r24
 273:midi.c        **** 	  if (note == 0) note = 0x19;
 253               		.loc 1 273 4 is_stmt 1 view .LVU69
 254               		.loc 1 273 7 is_stmt 0 view .LVU70
 255 00e8 8111      		cpse r24,__zero_reg__
 256 00ea 00C0      		rjmp .L14
 257               		.loc 1 273 24 view .LVU71
 258 00ec 89E1      		ldi r24,lo8(25)
 259               	.LVL18:
 260               	.L14:
 270:midi.c        ****       slide = 1;
 261               		.loc 1 270 8 view .LVU72
 262 00ee 61E0      		ldi r22,lo8(1)
 263               	.LVL19:
 270:midi.c        ****       slide = 1;
 264               		.loc 1 270 8 view .LVU73
 265 00f0 2F3F      		cpi r18,lo8(-1)
 266 00f2 01F4      		brne .L15
 267 00f4 60E0      		ldi r22,0
 268               	.L15:
 269               	.LVL20:
 274:midi.c        ****     if (velocity > ACCENT_THRESH) {
 270               		.loc 1 274 5 is_stmt 1 view .LVU74
 271 00f6 8951      		subi r24,lo8(-(-25))
 272               	.LVL21:
 275:midi.c        ****       note_on(note - 0x19, slide, 1); // with accent
 273               		.loc 1 275 7 is_stmt 0 view .LVU75
 274 00f8 41E0      		ldi r20,lo8(1)
 274:midi.c        ****     if (velocity > ACCENT_THRESH) {
 275               		.loc 1 274 8 view .LVU76
 276 00fa 9536      		cpi r25,lo8(101)
 277 00fc 00F4      		brsh .L20
 276:midi.c        ****     } else {
 277:midi.c        ****       note_on(note - 0x19, slide, 0); // no accent
 278               		.loc 1 277 7 is_stmt 1 view .LVU77
 279 00fe 40E0      		ldi r20,0
 280               	.L20:
 281 0100 0E94 0000 		call note_on
 282               	.LVL22:
 283               	/* epilogue start */
 278:midi.c        ****     }
 279:midi.c        **** 
 280:midi.c        **** //    prev_note = note;
 281:midi.c        ****   }
 282:midi.c        **** }
 284               		.loc 1 282 1 is_stmt 0 view .LVU78
 285 0104 0895      		ret
 286               		.cfi_endproc
 287               	.LFE7:
 289               	.global	midi_putchar
 291               	midi_putchar:
 292               	.LFB10:
 283:midi.c        **** 
 284:midi.c        **** void midi_send_note_on(uint8_t note) {
 285:midi.c        ****   midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
 286:midi.c        **** 
 287:midi.c        ****   if ( (note & 0x3F) == 0) {
 288:midi.c        ****     midi_putchar(0);                                 // rest
 289:midi.c        **** 	//080602
 290:midi.c        ****     midi_putchar(0);                                 // velocity 0(= note off)
 291:midi.c        **** 	}
 292:midi.c        ****   else {
 293:midi.c        ****     midi_putchar((note & 0x3F) + 0x19);              // note
 294:midi.c        **** 
 295:midi.c        ****   if ((note >> 6) & 0x1)              // if theres an accent, give high velocity 
 296:midi.c        ****     midi_putchar(midion_accent_velocity);
 297:midi.c        ****   else
 298:midi.c        ****     midi_putchar(midion_noaccent_velocity);
 299:midi.c        ****   }
 300:midi.c        **** }
 301:midi.c        **** 
 302:midi.c        **** void midi_send_note_off(uint8_t note) {
 303:midi.c        ****   midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr);  // command
 304:midi.c        **** 
 305:midi.c        ****   if ((note & 0x3F) == 0)
 306:midi.c        ****     midi_putchar(0);                                 // rest
 307:midi.c        ****   else 
 308:midi.c        ****     midi_putchar((note & 0x3F) + 0x19);              // note
 309:midi.c        **** 
 310:midi.c        **** 
 311:midi.c        ****   midi_putchar(midioff_velocity);                   // velocity
 312:midi.c        **** }
 313:midi.c        **** 
 314:midi.c        **** 
 315:midi.c        **** int midi_putchar(char c)
 316:midi.c        **** {
 293               		.loc 1 316 1 is_stmt 1 view -0
 294               		.cfi_startproc
 295               	/* prologue: function */
 296               	/* frame size = 0 */
 297               	/* stack size = 0 */
 298               	.L__stack_usage = 0
 299               	.LVL23:
 300               	.L22:
 317:midi.c        ****    loop_until_bit_is_set(UCSR0A, UDRE0);
 301               		.loc 1 317 4 discriminator 1 view .LVU80
 302               		.loc 1 317 4 discriminator 1 view .LVU81
 303 0106 5D9B      		sbis 0xb,5
 304 0108 00C0      		rjmp .L22
 318:midi.c        ****    UDR0 = c;
 305               		.loc 1 318 4 view .LVU82
 306               		.loc 1 318 9 is_stmt 0 view .LVU83
 307 010a 8CB9      		out 0xc,r24
 319:midi.c        ****    return 0;
 308               		.loc 1 319 4 is_stmt 1 view .LVU84
 320:midi.c        **** }
 309               		.loc 1 320 1 is_stmt 0 view .LVU85
 310 010c 90E0      		ldi r25,0
 311 010e 80E0      		ldi r24,0
 312               	.LVL24:
 313               	/* epilogue start */
 314               		.loc 1 320 1 view .LVU86
 315 0110 0895      		ret
 316               		.cfi_endproc
 317               	.LFE10:
 319               	.global	midi_send_note_on
 321               	midi_send_note_on:
 322               	.LVL25:
 323               	.LFB8:
 284:midi.c        ****   midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
 324               		.loc 1 284 38 is_stmt 1 view -0
 325               		.cfi_startproc
 284:midi.c        ****   midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
 326               		.loc 1 284 38 is_stmt 0 view .LVU88
 327 0112 CF93      		push r28
 328               		.cfi_def_cfa_offset 3
 329               		.cfi_offset 28, -2
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 1 */
 333               	.L__stack_usage = 1
 334 0114 C82F      		mov r28,r24
 285:midi.c        **** 
 335               		.loc 1 285 3 is_stmt 1 view .LVU89
 336 0116 8091 0000 		lds r24,midi_out_addr
 337               	.LVL26:
 285:midi.c        **** 
 338               		.loc 1 285 3 is_stmt 0 view .LVU90
 339 011a 8069      		ori r24,lo8(-112)
 340 011c 0E94 0000 		call midi_putchar
 341               	.LVL27:
 287:midi.c        ****     midi_putchar(0);                                 // rest
 342               		.loc 1 287 3 is_stmt 1 view .LVU91
 343 0120 8C2F      		mov r24,r28
 344 0122 8F73      		andi r24,lo8(63)
 287:midi.c        ****     midi_putchar(0);                                 // rest
 345               		.loc 1 287 6 is_stmt 0 view .LVU92
 346 0124 01F4      		brne .L26
 288:midi.c        **** 	//080602
 347               		.loc 1 288 5 is_stmt 1 view .LVU93
 348 0126 0E94 0000 		call midi_putchar
 349               	.LVL28:
 290:midi.c        **** 	}
 350               		.loc 1 290 5 view .LVU94
 351 012a 80E0      		ldi r24,0
 352               	.L29:
 298:midi.c        ****   }
 353               		.loc 1 298 5 is_stmt 0 view .LVU95
 354 012c 0E94 0000 		call midi_putchar
 355               	.LVL29:
 356               	/* epilogue start */
 300:midi.c        **** 
 357               		.loc 1 300 1 view .LVU96
 358 0130 CF91      		pop r28
 359               	.LVL30:
 300:midi.c        **** 
 360               		.loc 1 300 1 view .LVU97
 361 0132 0895      		ret
 362               	.LVL31:
 363               	.L26:
 293:midi.c        **** 
 364               		.loc 1 293 5 is_stmt 1 view .LVU98
 365 0134 875E      		subi r24,lo8(-(25))
 366 0136 0E94 0000 		call midi_putchar
 367               	.LVL32:
 295:midi.c        ****     midi_putchar(midion_accent_velocity);
 368               		.loc 1 295 3 view .LVU99
 296:midi.c        ****   else
 369               		.loc 1 296 5 is_stmt 0 view .LVU100
 370 013a 8091 0000 		lds r24,midion_accent_velocity
 295:midi.c        ****     midi_putchar(midion_accent_velocity);
 371               		.loc 1 295 6 view .LVU101
 372 013e C6FD      		sbrc r28,6
 373 0140 00C0      		rjmp .L29
 298:midi.c        ****   }
 374               		.loc 1 298 5 is_stmt 1 view .LVU102
 375 0142 8091 0000 		lds r24,midion_noaccent_velocity
 376 0146 00C0      		rjmp .L29
 377               		.cfi_endproc
 378               	.LFE8:
 380               	.global	midi_send_note_off
 382               	midi_send_note_off:
 383               	.LVL33:
 384               	.LFB9:
 302:midi.c        ****   midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr);  // command
 385               		.loc 1 302 39 view -0
 386               		.cfi_startproc
 302:midi.c        ****   midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr);  // command
 387               		.loc 1 302 39 is_stmt 0 view .LVU104
 388 0148 CF93      		push r28
 389               		.cfi_def_cfa_offset 3
 390               		.cfi_offset 28, -2
 391               	/* prologue: function */
 392               	/* frame size = 0 */
 393               	/* stack size = 1 */
 394               	.L__stack_usage = 1
 395 014a C82F      		mov r28,r24
 303:midi.c        **** 
 396               		.loc 1 303 3 is_stmt 1 view .LVU105
 397 014c 8091 0000 		lds r24,midi_out_addr
 398               	.LVL34:
 303:midi.c        **** 
 399               		.loc 1 303 3 is_stmt 0 view .LVU106
 400 0150 8068      		ori r24,lo8(-128)
 401 0152 0E94 0000 		call midi_putchar
 402               	.LVL35:
 305:midi.c        ****     midi_putchar(0);                                 // rest
 403               		.loc 1 305 3 is_stmt 1 view .LVU107
 404 0156 8C2F      		mov r24,r28
 405 0158 8F73      		andi r24,lo8(63)
 305:midi.c        ****     midi_putchar(0);                                 // rest
 406               		.loc 1 305 6 is_stmt 0 view .LVU108
 407 015a 01F4      		brne .L31
 408               	.L33:
 308:midi.c        **** 
 409               		.loc 1 308 5 view .LVU109
 410 015c 0E94 0000 		call midi_putchar
 411               	.LVL36:
 311:midi.c        **** }
 412               		.loc 1 311 3 is_stmt 1 view .LVU110
 413 0160 8091 0000 		lds r24,midioff_velocity
 414 0164 0E94 0000 		call midi_putchar
 415               	.LVL37:
 416               	/* epilogue start */
 312:midi.c        **** 
 417               		.loc 1 312 1 is_stmt 0 view .LVU111
 418 0168 CF91      		pop r28
 419               	.LVL38:
 312:midi.c        **** 
 420               		.loc 1 312 1 view .LVU112
 421 016a 0895      		ret
 422               	.LVL39:
 423               	.L31:
 308:midi.c        **** 
 424               		.loc 1 308 5 is_stmt 1 view .LVU113
 425 016c 875E      		subi r24,lo8(-(25))
 426 016e 00C0      		rjmp .L33
 427               		.cfi_endproc
 428               	.LFE9:
 430               	.global	midi_getch
 432               	midi_getch:
 433               	.LFB11:
 321:midi.c        **** 
 322:midi.c        **** int midi_getch(void) {     // checks if there is a character waiting!
 434               		.loc 1 322 22 view -0
 435               		.cfi_startproc
 436               	/* prologue: function */
 437               	/* frame size = 0 */
 438               	/* stack size = 0 */
 439               	.L__stack_usage = 0
 323:midi.c        ****   if (head_idx != tail_idx)
 440               		.loc 1 323 3 view .LVU115
 441               		.loc 1 323 16 is_stmt 0 view .LVU116
 442 0170 3091 0000 		lds r19,head_idx
 443 0174 2091 0000 		lds r18,tail_idx
 444               		.loc 1 323 6 view .LVU117
 445 0178 81E0      		ldi r24,lo8(1)
 446 017a 90E0      		ldi r25,0
 447 017c 3213      		cpse r19,r18
 448 017e 00C0      		rjmp .L35
 449 0180 90E0      		ldi r25,0
 450 0182 80E0      		ldi r24,0
 451               	.L35:
 452               	/* epilogue start */
 324:midi.c        ****     return 1;
 325:midi.c        ****   return 0;
 326:midi.c        **** }
 453               		.loc 1 326 1 view .LVU118
 454 0184 0895      		ret
 455               		.cfi_endproc
 456               	.LFE11:
 458               	.global	midi_getchar
 460               	midi_getchar:
 461               	.LFB12:
 327:midi.c        **** 
 328:midi.c        **** int midi_getchar(void) {
 462               		.loc 1 328 24 is_stmt 1 view -0
 463               		.cfi_startproc
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468               	.L37:
 329:midi.c        ****   char c;
 330:midi.c        **** 
 331:midi.c        ****   while (head_idx == tail_idx);
 469               		.loc 1 331 31 discriminator 1 view .LVU120
 470               		.loc 1 331 19 is_stmt 0 discriminator 1 view .LVU121
 471 0186 9091 0000 		lds r25,head_idx
 472 018a 8091 0000 		lds r24,tail_idx
 473               		.loc 1 331 9 discriminator 1 view .LVU122
 474 018e 9817      		cp r25,r24
 475 0190 01F0      		breq .L37
 332:midi.c        **** 
 333:midi.c        ****   cli();
 476               		.loc 1 333 3 is_stmt 1 view .LVU123
 477               	/* #APP */
 478               	 ;  333 "midi.c" 1
 479 0192 F894      		cli
 480               	 ;  0 "" 2
 334:midi.c        ****   c = midi_q[head_idx++];
 481               		.loc 1 334 3 view .LVU124
 482               		.loc 1 334 22 is_stmt 0 view .LVU125
 483               	/* #NOAPP */
 484 0194 E091 0000 		lds r30,head_idx
 485 0198 81E0      		ldi r24,lo8(1)
 486 019a 8E0F      		add r24,r30
 487 019c 8093 0000 		sts head_idx,r24
 488 01a0 F0E0      		ldi r31,0
 489               		.loc 1 334 5 view .LVU126
 490 01a2 E050      		subi r30,lo8(-(midi_q))
 491 01a4 F040      		sbci r31,hi8(-(midi_q))
 492 01a6 8081      		ld r24,Z
 493               	.LVL40:
 335:midi.c        ****   head_idx %= MIDI_Q_SIZE;
 494               		.loc 1 335 3 is_stmt 1 view .LVU127
 495               		.loc 1 335 12 is_stmt 0 view .LVU128
 496 01a8 9091 0000 		lds r25,head_idx
 497 01ac 9F71      		andi r25,lo8(31)
 498 01ae 9093 0000 		sts head_idx,r25
 336:midi.c        ****   sei();
 499               		.loc 1 336 3 is_stmt 1 view .LVU129
 500               	/* #APP */
 501               	 ;  336 "midi.c" 1
 502 01b2 7894      		sei
 503               	 ;  0 "" 2
 337:midi.c        **** 
 338:midi.c        ****   return c;
 504               		.loc 1 338 3 view .LVU130
 339:midi.c        **** }
 505               		.loc 1 339 1 is_stmt 0 view .LVU131
 506               	/* #NOAPP */
 507 01b4 90E0      		ldi r25,0
 508               	/* epilogue start */
 509 01b6 0895      		ret
 510               		.cfi_endproc
 511               	.LFE12:
 513               	.global	midi_recv_cmd
 515               	midi_recv_cmd:
 516               	.LFB5:
 238:midi.c        ****   uint8_t c;
 517               		.loc 1 238 29 is_stmt 1 view -0
 518               		.cfi_startproc
 519               	/* prologue: function */
 520               	/* frame size = 0 */
 521               	/* stack size = 0 */
 522               	.L__stack_usage = 0
 239:midi.c        **** 
 523               		.loc 1 239 3 view .LVU133
 241:midi.c        ****     c = midi_getchar();
 524               		.loc 1 241 3 view .LVU134
 241:midi.c        ****     c = midi_getchar();
 525               		.loc 1 241 7 is_stmt 0 view .LVU135
 526 01b8 0E94 0000 		call midi_getch
 527               	.LVL41:
 241:midi.c        ****     c = midi_getchar();
 528               		.loc 1 241 6 view .LVU136
 529 01bc 892B      		or r24,r25
 530 01be 01F4      		brne .L40
 531               	.L42:
 253:midi.c        **** }
 532               		.loc 1 253 10 view .LVU137
 533 01c0 80E0      		ldi r24,0
 534 01c2 0895      		ret
 535               	.L40:
 242:midi.c        ****     if (c >> 7) {       // if the top bit is high, this is a command
 536               		.loc 1 242 5 is_stmt 1 view .LVU138
 242:midi.c        ****     if (c >> 7) {       // if the top bit is high, this is a command
 537               		.loc 1 242 9 is_stmt 0 view .LVU139
 538 01c4 0E94 0000 		call midi_getchar
 539               	.LVL42:
 540 01c8 9C01      		movw r18,r24
 541               	.LVL43:
 243:midi.c        ****       if (c >> 4 == 0xF)     // universal cmd, no addressing
 542               		.loc 1 243 5 is_stmt 1 view .LVU140
 243:midi.c        ****       if (c >> 4 == 0xF)     // universal cmd, no addressing
 543               		.loc 1 243 8 is_stmt 0 view .LVU141
 544 01ca 87FF      		sbrs r24,7
 545 01cc 00C0      		rjmp .L42
 244:midi.c        **** 	return c;
 546               		.loc 1 244 7 is_stmt 1 view .LVU142
 244:midi.c        **** 	return c;
 547               		.loc 1 244 18 is_stmt 0 view .LVU143
 548 01ce 982F      		mov r25,r24
 549 01d0 9295      		swap r25
 550 01d2 9F70      		andi r25,lo8(15)
 244:midi.c        **** 	return c;
 551               		.loc 1 244 10 view .LVU144
 552 01d4 9F30      		cpi r25,lo8(15)
 553 01d6 01F0      		breq .L39
 247:midi.c        **** 	midi_running_status = c >> 4;
 554               		.loc 1 247 7 is_stmt 1 view .LVU145
 247:midi.c        **** 	midi_running_status = c >> 4;
 555               		.loc 1 247 14 is_stmt 0 view .LVU146
 556 01d8 2F70      		andi r18,15
 557 01da 3327      		clr r19
 558               	.LVL44:
 247:midi.c        **** 	midi_running_status = c >> 4;
 559               		.loc 1 247 21 view .LVU147
 560 01dc 4091 0000 		lds r20,midi_in_addr
 247:midi.c        **** 	midi_running_status = c >> 4;
 561               		.loc 1 247 10 view .LVU148
 562 01e0 4217      		cp r20,r18
 563 01e2 1306      		cpc __zero_reg__,r19
 564 01e4 01F4      		brne .L42
 248:midi.c        **** 	return c;
 565               		.loc 1 248 2 is_stmt 1 view .LVU149
 248:midi.c        **** 	return c;
 566               		.loc 1 248 22 is_stmt 0 view .LVU150
 567 01e6 9093 0000 		sts midi_running_status,r25
 249:midi.c        ****       }
 568               		.loc 1 249 2 is_stmt 1 view .LVU151
 569               	.L39:
 570               	/* epilogue start */
 254:midi.c        **** 
 571               		.loc 1 254 1 is_stmt 0 view .LVU152
 572 01ea 0895      		ret
 573               		.cfi_endproc
 574               	.LFE5:
 576               	.global	midi_notesoff
 578               	midi_notesoff:
 579               	.LFB14:
 340:midi.c        **** 
 341:midi.c        **** // sends a midi stop and 'all notes off' message
 342:midi.c        **** void midi_stop(void) {
 343:midi.c        ****   // if we were generating midi, stop all notes and send a clockstop signal
 344:midi.c        ****   if (sync != MIDI_SYNC) { 
 345:midi.c        ****     midi_putchar(MIDI_STOP);
 346:midi.c        ****     midi_notesoff();
 347:midi.c        ****   }
 348:midi.c        **** }
 349:midi.c        **** 
 350:midi.c        **** void midi_notesoff(void) {
 580               		.loc 1 350 26 is_stmt 1 view -0
 581               		.cfi_startproc
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 351:midi.c        ****   midi_putchar((MIDI_CONTROLLER<<4) | midi_out_addr);
 586               		.loc 1 351 3 view .LVU154
 587 01ec 8091 0000 		lds r24,midi_out_addr
 588 01f0 806B      		ori r24,lo8(-80)
 589 01f2 0E94 0000 		call midi_putchar
 590               	.LVL45:
 352:midi.c        ****   midi_putchar(MIDI_ALL_NOTES_OFF);
 591               		.loc 1 352 3 view .LVU155
 592 01f6 8BE7      		ldi r24,lo8(123)
 593 01f8 0E94 0000 		call midi_putchar
 594               	.LVL46:
 353:midi.c        ****   midi_putchar(0);
 595               		.loc 1 353 3 view .LVU156
 596 01fc 80E0      		ldi r24,0
 597 01fe 0E94 0000 		call midi_putchar
 598               	.LVL47:
 599               	/* epilogue start */
 354:midi.c        **** }
 600               		.loc 1 354 1 is_stmt 0 view .LVU157
 601 0202 0895      		ret
 602               		.cfi_endproc
 603               	.LFE14:
 605               	.global	do_midi_mode
 607               	do_midi_mode:
 608               	.LFB4:
 124:midi.c        ****   char c;
 609               		.loc 1 124 25 is_stmt 1 view -0
 610               		.cfi_startproc
 611 0204 CF93      		push r28
 612               		.cfi_def_cfa_offset 3
 613               		.cfi_offset 28, -2
 614 0206 DF93      		push r29
 615               		.cfi_def_cfa_offset 4
 616               		.cfi_offset 29, -3
 617               	/* prologue: function */
 618               	/* frame size = 0 */
 619               	/* stack size = 2 */
 620               	.L__stack_usage = 2
 125:midi.c        ****   uint8_t last_bank;
 621               		.loc 1 125 3 view .LVU159
 126:midi.c        ****   uint8_t note, velocity;
 622               		.loc 1 126 3 view .LVU160
 127:midi.c        **** 
 623               		.loc 1 127 3 view .LVU161
 130:midi.c        **** 
 624               		.loc 1 130 3 view .LVU162
 625 0208 0E94 0000 		call turn_off_tempo
 626               	.LVL48:
 133:midi.c        ****   set_bank_led(midi_in_addr);
 627               		.loc 1 133 3 view .LVU163
 628 020c 0E94 0000 		call clear_bank_leds
 629               	.LVL49:
 134:midi.c        **** 
 630               		.loc 1 134 3 view .LVU164
 631 0210 8091 0000 		lds r24,midi_in_addr
 632 0214 0E94 0000 		call set_bank_led
 633               	.LVL50:
 136:midi.c        ****   delay_ms(100);
 634               		.loc 1 136 3 view .LVU165
 635 0218 0E94 0000 		call read_switches
 636               	.LVL51:
 137:midi.c        ****   read_switches();
 637               		.loc 1 137 3 view .LVU166
 638 021c 84E6      		ldi r24,lo8(100)
 639 021e 0E94 0000 		call delay_ms
 640               	.LVL52:
 138:midi.c        ****   delay_ms(100);
 641               		.loc 1 138 3 view .LVU167
 642 0222 0E94 0000 		call read_switches
 643               	.LVL53:
 139:midi.c        ****   read_switches();
 644               		.loc 1 139 3 view .LVU168
 645 0226 84E6      		ldi r24,lo8(100)
 646 0228 0E94 0000 		call delay_ms
 647               	.LVL54:
 140:midi.c        ****   last_bank = bank;
 648               		.loc 1 140 3 view .LVU169
 649 022c 0E94 0000 		call read_switches
 650               	.LVL55:
 141:midi.c        ****   prev_note = 255;        // no notes played yet
 651               		.loc 1 141 3 view .LVU170
 141:midi.c        ****   prev_note = 255;        // no notes played yet
 652               		.loc 1 141 13 is_stmt 0 view .LVU171
 653 0230 D091 0000 		lds r29,bank
 654               	.LVL56:
 142:midi.c        **** 
 655               		.loc 1 142 3 is_stmt 1 view .LVU172
 142:midi.c        **** 
 656               		.loc 1 142 13 is_stmt 0 view .LVU173
 657 0234 8FEF      		ldi r24,lo8(-1)
 658 0236 8093 0000 		sts prev_note,r24
 659               	.L48:
 144:midi.c        ****     read_switches();
 660               		.loc 1 144 3 is_stmt 1 view .LVU174
 145:midi.c        ****     if (function_changed) {
 661               		.loc 1 145 5 view .LVU175
 662 023a 0E94 0000 		call read_switches
 663               	.LVL57:
 146:midi.c        ****       midi_notesoff(); // clear any stuck notes
 664               		.loc 1 146 5 view .LVU176
 146:midi.c        ****       midi_notesoff(); // clear any stuck notes
 665               		.loc 1 146 8 is_stmt 0 view .LVU177
 666 023e 8091 0000 		lds r24,function
 667 0242 8823      		tst r24
 668 0244 01F0      		breq .L49
 147:midi.c        ****       return;
 669               		.loc 1 147 7 is_stmt 1 view .LVU178
 670 0246 0E94 0000 		call midi_notesoff
 671               	.LVL58:
 148:midi.c        ****     }
 672               		.loc 1 148 7 view .LVU179
 673               	/* epilogue start */
 235:midi.c        ****   // midi handling code!
 674               		.loc 1 235 1 is_stmt 0 view .LVU180
 675 024a DF91      		pop r29
 676               	.LVL59:
 235:midi.c        ****   // midi handling code!
 677               		.loc 1 235 1 view .LVU181
 678 024c CF91      		pop r28
 679 024e 0895      		ret
 680               	.LVL60:
 681               	.L49:
 151:midi.c        ****       // bank knob was changed, change the midi address
 682               		.loc 1 151 5 is_stmt 1 view .LVU182
 151:midi.c        ****       // bank knob was changed, change the midi address
 683               		.loc 1 151 19 is_stmt 0 view .LVU183
 684 0250 6091 0000 		lds r22,bank
 151:midi.c        ****       // bank knob was changed, change the midi address
 685               		.loc 1 151 8 view .LVU184
 686 0254 6D17      		cp r22,r29
 687 0256 01F0      		breq .L50
 153:midi.c        **** 
 688               		.loc 1 153 7 is_stmt 1 view .LVU185
 153:midi.c        **** 
 689               		.loc 1 153 20 is_stmt 0 view .LVU186
 690 0258 6093 0000 		sts midi_in_addr,r22
 156:midi.c        **** 
 691               		.loc 1 156 7 is_stmt 1 view .LVU187
 692 025c 83E0      		ldi r24,lo8(3)
 693 025e 90E0      		ldi r25,0
 694 0260 0E94 0000 		call internal_eeprom_write8
 695               	.LVL61:
 158:midi.c        ****       set_bank_led(midi_in_addr);
 696               		.loc 1 158 7 view .LVU188
 697 0264 0E94 0000 		call clear_bank_leds
 698               	.LVL62:
 159:midi.c        **** 
 699               		.loc 1 159 7 view .LVU189
 700 0268 8091 0000 		lds r24,midi_in_addr
 701 026c 0E94 0000 		call set_bank_led
 702               	.LVL63:
 161:midi.c        ****     }
 703               		.loc 1 161 7 view .LVU190
 161:midi.c        ****     }
 704               		.loc 1 161 17 is_stmt 0 view .LVU191
 705 0270 D091 0000 		lds r29,bank
 706               	.LVL64:
 707               	.L50:
 165:midi.c        ****       // if its a command & either for our address or 0xF,
 708               		.loc 1 165 5 is_stmt 1 view .LVU192
 165:midi.c        ****       // if its a command & either for our address or 0xF,
 709               		.loc 1 165 9 is_stmt 0 view .LVU193
 710 0274 0E94 0000 		call midi_getch
 711               	.LVL65:
 165:midi.c        ****       // if its a command & either for our address or 0xF,
 712               		.loc 1 165 8 view .LVU194
 713 0278 892B      		or r24,r25
 714 027a 01F0      		breq .L48
 168:midi.c        **** 
 715               		.loc 1 168 7 is_stmt 1 view .LVU195
 168:midi.c        **** 
 716               		.loc 1 168 11 is_stmt 0 view .LVU196
 717 027c 0E94 0000 		call midi_getchar
 718               	.LVL66:
 719 0280 9C01      		movw r18,r24
 168:midi.c        **** 
 720               		.loc 1 168 9 view .LVU197
 721 0282 C82F      		mov r28,r24
 722               	.LVL67:
 170:midi.c        **** 	if ((c >> 4 == 0xF) ||    // universal cmd, no addressing
 723               		.loc 1 170 7 is_stmt 1 view .LVU198
 170:midi.c        **** 	if ((c >> 4 == 0xF) ||    // universal cmd, no addressing
 724               		.loc 1 170 10 is_stmt 0 view .LVU199
 725 0284 87FF      		sbrs r24,7
 726 0286 00C0      		rjmp .L52
 171:midi.c        **** 	    ((c & 0xF) == midi_in_addr)) {  // matches our addr
 727               		.loc 1 171 2 is_stmt 1 view .LVU200
 171:midi.c        **** 	    ((c & 0xF) == midi_in_addr)) {  // matches our addr
 728               		.loc 1 171 14 is_stmt 0 view .LVU201
 729 0288 982F      		mov r25,r24
 730 028a 9295      		swap r25
 731 028c 9F70      		andi r25,lo8(15)
 171:midi.c        **** 	    ((c & 0xF) == midi_in_addr)) {  // matches our addr
 732               		.loc 1 171 5 view .LVU202
 733 028e 9F30      		cpi r25,lo8(15)
 734 0290 01F0      		breq .L53
 172:midi.c        **** 	  midi_running_status = c >> 4;
 735               		.loc 1 172 10 discriminator 1 view .LVU203
 736 0292 2F70      		andi r18,15
 737 0294 3327      		clr r19
 738               	.LVL68:
 172:midi.c        **** 	  midi_running_status = c >> 4;
 739               		.loc 1 172 17 discriminator 1 view .LVU204
 740 0296 4091 0000 		lds r20,midi_in_addr
 171:midi.c        **** 	    ((c & 0xF) == midi_in_addr)) {  // matches our addr
 741               		.loc 1 171 22 discriminator 1 view .LVU205
 742 029a 4217      		cp r20,r18
 743 029c 1306      		cpc __zero_reg__,r19
 744 029e 01F4      		brne .L54
 745               	.L53:
 173:midi.c        **** 	} else {
 746               		.loc 1 173 4 is_stmt 1 view .LVU206
 173:midi.c        **** 	} else {
 747               		.loc 1 173 24 is_stmt 0 view .LVU207
 748 02a0 9093 0000 		sts midi_running_status,r25
 749               	.L52:
 181:midi.c        ****       case MIDI_IGNORE:
 750               		.loc 1 181 7 is_stmt 1 view .LVU208
 751 02a4 9091 0000 		lds r25,midi_running_status
 752 02a8 9830      		cpi r25,lo8(8)
 753 02aa 01F0      		breq .L55
 754 02ac 9930      		cpi r25,lo8(9)
 755 02ae 01F4      		brne .L48
 189:midi.c        **** 	    note = midi_getchar();
 756               		.loc 1 189 4 view .LVU209
 189:midi.c        **** 	    note = midi_getchar();
 757               		.loc 1 189 7 is_stmt 0 view .LVU210
 758 02b0 87FF      		sbrs r24,7
 759 02b2 00C0      		rjmp .L56
 190:midi.c        **** 	  else
 760               		.loc 1 190 6 is_stmt 1 view .LVU211
 190:midi.c        **** 	  else
 761               		.loc 1 190 13 is_stmt 0 view .LVU212
 762 02b4 0E94 0000 		call midi_getchar
 763               	.LVL69:
 190:midi.c        **** 	  else
 764               		.loc 1 190 13 view .LVU213
 765 02b8 C82F      		mov r28,r24
 766               	.LVL70:
 767               	.L56:
 194:midi.c        **** 	  /*
 768               		.loc 1 194 4 is_stmt 1 view .LVU214
 194:midi.c        **** 	  /*
 769               		.loc 1 194 15 is_stmt 0 view .LVU215
 770 02ba 0E94 0000 		call midi_getchar
 771               	.LVL71:
 772 02be 682F      		mov r22,r24
 773               	.LVL72:
 201:midi.c        **** 	  break;
 774               		.loc 1 201 4 is_stmt 1 view .LVU216
 775 02c0 8C2F      		mov r24,r28
 776 02c2 0E94 0000 		call midi_note_on
 777               	.LVL73:
 202:midi.c        **** 	}
 778               		.loc 1 202 4 view .LVU217
 779 02c6 00C0      		rjmp .L48
 780               	.LVL74:
 781               	.L54:
 176:midi.c        **** 	  continue;
 782               		.loc 1 176 4 view .LVU218
 176:midi.c        **** 	  continue;
 783               		.loc 1 176 24 is_stmt 0 view .LVU219
 784 02c8 1092 0000 		sts midi_running_status,__zero_reg__
 177:midi.c        **** 	}
 785               		.loc 1 177 4 is_stmt 1 view .LVU220
 786 02cc 00C0      		rjmp .L48
 787               	.L55:
 206:midi.c        **** 	    note = midi_getchar();
 788               		.loc 1 206 4 view .LVU221
 206:midi.c        **** 	    note = midi_getchar();
 789               		.loc 1 206 7 is_stmt 0 view .LVU222
 790 02ce 87FF      		sbrs r24,7
 791 02d0 00C0      		rjmp .L57
 207:midi.c        **** 	  else
 792               		.loc 1 207 6 is_stmt 1 view .LVU223
 207:midi.c        **** 	  else
 793               		.loc 1 207 13 is_stmt 0 view .LVU224
 794 02d2 0E94 0000 		call midi_getchar
 795               	.LVL75:
 207:midi.c        **** 	  else
 796               		.loc 1 207 13 view .LVU225
 797 02d6 C82F      		mov r28,r24
 798               	.LVL76:
 799               	.L57:
 211:midi.c        **** 	  /*
 800               		.loc 1 211 4 is_stmt 1 view .LVU226
 211:midi.c        **** 	  /*
 801               		.loc 1 211 15 is_stmt 0 view .LVU227
 802 02d8 0E94 0000 		call midi_getchar
 803               	.LVL77:
 804 02dc 682F      		mov r22,r24
 805               	.LVL78:
 218:midi.c        **** 	  
 806               		.loc 1 218 4 is_stmt 1 view .LVU228
 807 02de 8C2F      		mov r24,r28
 808 02e0 0E94 0000 		call midi_note_off
 809               	.LVL79:
 220:midi.c        **** 	} 
 810               		.loc 1 220 4 view .LVU229
 811 02e4 00C0      		rjmp .L48
 812               		.cfi_endproc
 813               	.LFE4:
 815               	.global	midi_stop
 817               	midi_stop:
 818               	.LFB13:
 342:midi.c        ****   // if we were generating midi, stop all notes and send a clockstop signal
 819               		.loc 1 342 22 view -0
 820               		.cfi_startproc
 821               	/* prologue: function */
 822               	/* frame size = 0 */
 823               	/* stack size = 0 */
 824               	.L__stack_usage = 0
 344:midi.c        ****     midi_putchar(MIDI_STOP);
 825               		.loc 1 344 3 view .LVU231
 344:midi.c        ****     midi_putchar(MIDI_STOP);
 826               		.loc 1 344 6 is_stmt 0 view .LVU232
 827 02e6 8091 0000 		lds r24,sync
 828 02ea 8230      		cpi r24,lo8(2)
 829 02ec 01F0      		breq .L65
 345:midi.c        ****     midi_notesoff();
 830               		.loc 1 345 5 is_stmt 1 view .LVU233
 831 02ee 8CEF      		ldi r24,lo8(-4)
 832 02f0 0E94 0000 		call midi_putchar
 833               	.LVL80:
 346:midi.c        ****   }
 834               		.loc 1 346 5 view .LVU234
 835 02f4 0E94 0000 		call midi_notesoff
 836               	.LVL81:
 837               	.L65:
 838               	/* epilogue start */
 348:midi.c        **** 
 839               		.loc 1 348 1 is_stmt 0 view .LVU235
 840 02f8 0895      		ret
 841               		.cfi_endproc
 842               	.LFE13:
 844               		.local	tail_idx
 845               		.comm	tail_idx,1,1
 846               		.local	head_idx
 847               		.comm	head_idx,1,1
 848               		.comm	midi_q,32,1
 849               	.global	midisync_clocked
 850               		.section .bss
 853               	midisync_clocked:
 854 0000 0000      		.zero	2
 855               	.global	midi_running_status
 858               	midi_running_status:
 859 0002 00        		.zero	1
 860               		.comm	midi_in_addr,1,1
 861               		.comm	midi_out_addr,1,1
 862               	.global	midion_noaccent_velocity
 863               		.data
 866               	midion_noaccent_velocity:
 867 0000 64        		.byte	100
 868               	.global	midioff_velocity
 871               	midioff_velocity:
 872 0001 20        		.byte	32
 873               	.global	midion_accent_velocity
 876               	midion_accent_velocity:
 877 0002 7F        		.byte	127
 878               		.text
 879               	.Letext0:
 880               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 881               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 882               		.file 4 "synth.h"
 883               		.file 5 "main.h"
 884               		.file 6 "led.h"
 885               		.file 7 "switch.h"
 886               		.file 8 "delay.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 midi.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:12     .text:0000000000000000 __vector_19
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:853    .bss:0000000000000000 midisync_clocked
                             .bss:0000000000000003 tail_idx
                            *COM*:0000000000000020 midi_q
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:845    .bss:0000000000000004 head_idx
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:123    .text:0000000000000094 get_midi_addr
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:153    .text:00000000000000a2 init_midi
                            *COM*:0000000000000001 midi_in_addr
                            *COM*:0000000000000001 midi_out_addr
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:183    .text:00000000000000b8 midi_note_off
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:216    .text:00000000000000ce midi_note_on
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:291    .text:0000000000000106 midi_putchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:321    .text:0000000000000112 midi_send_note_on
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:876    .data:0000000000000002 midion_accent_velocity
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:866    .data:0000000000000000 midion_noaccent_velocity
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:382    .text:0000000000000148 midi_send_note_off
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:871    .data:0000000000000001 midioff_velocity
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:432    .text:0000000000000170 midi_getch
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:460    .text:0000000000000186 midi_getchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:515    .text:00000000000001b8 midi_recv_cmd
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:858    .bss:0000000000000002 midi_running_status
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:578    .text:00000000000001ec midi_notesoff
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:607    .text:0000000000000204 do_midi_mode
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccXvFV69.s:817    .text:00000000000002e6 midi_stop

UNDEFINED SYMBOLS
sync
dinsync_clock_timeout
internal_eeprom_read8
prev_note
note_off
note_on
turn_off_tempo
clear_bank_leds
set_bank_led
read_switches
delay_ms
bank
function
internal_eeprom_write8
__do_copy_data
__do_clear_bss
