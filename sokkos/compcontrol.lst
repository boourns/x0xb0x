   1               		.file	"compcontrol.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	send_msg
  12               	send_msg:
  13               	.LVL0:
  14               	.LFB2:
  15               		.file 1 "compcontrol.c"
   1:compcontrol.c **** /* 
   2:compcontrol.c ****  * The software for the x0xb0x is available for use in accordance with the 
   3:compcontrol.c ****  * following open source license (MIT License). For more information about
   4:compcontrol.c ****  * OS licensing, please visit -> http://www.opensource.org/
   5:compcontrol.c ****  *
   6:compcontrol.c ****  * For more information about the x0xb0x project, please visit
   7:compcontrol.c ****  * -> http://www.ladyada.net/make/x0xb0x
   8:compcontrol.c ****  *
   9:compcontrol.c ****  *                                     *****
  10:compcontrol.c ****  * Copyright (c) 2005 Limor Fried
  11:compcontrol.c ****  *
  12:compcontrol.c ****  * Permission is hereby granted, free of charge, to any person obtaining a 
  13:compcontrol.c ****  * copy of this software and associated documentation files (the "Software"), 
  14:compcontrol.c ****  * to deal in the Software without restriction, including without limitation 
  15:compcontrol.c ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  16:compcontrol.c ****  * and/or sell copies of the Software, and to permit persons to whom the 
  17:compcontrol.c ****  * Software is furnished to do so, subject to the following conditions:
  18:compcontrol.c ****  *
  19:compcontrol.c ****  * The above copyright notice and this permission notice shall be included in 
  20:compcontrol.c ****  * all copies or substantial portions of the Software.
  21:compcontrol.c ****  *
  22:compcontrol.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
  23:compcontrol.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  24:compcontrol.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
  25:compcontrol.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
  26:compcontrol.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  27:compcontrol.c ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
  28:compcontrol.c ****  * IN THE SOFTWARE.
  29:compcontrol.c ****  *                                     *****
  30:compcontrol.c ****  *
  31:compcontrol.c ****  */
  32:compcontrol.c **** 
  33:compcontrol.c **** #include <inttypes.h>
  34:compcontrol.c **** #include <stdio.h>
  35:compcontrol.c **** #include <avr/io.h>
  36:compcontrol.c **** #include <avr/signal.h>
  37:compcontrol.c **** #include "pattern.h"
  38:compcontrol.c **** #include "switch.h"
  39:compcontrol.c **** #include "led.h"
  40:compcontrol.c **** #include "main.h"
  41:compcontrol.c **** #include "compcontrol.h"
  42:compcontrol.c **** #include "eeprom.h"
  43:compcontrol.c **** 
  44:compcontrol.c **** extern volatile uint8_t pattern_buff[PATT_SIZE];
  45:compcontrol.c **** 
  46:compcontrol.c **** extern uint8_t function, bank, switches[3];
  47:compcontrol.c **** extern uint16_t tempo;
  48:compcontrol.c **** 
  49:compcontrol.c **** #define function_changed (function != COMPUTER_CONTROL_FUNC)
  50:compcontrol.c **** 
  51:compcontrol.c **** 
  52:compcontrol.c **** #define UART_BUFF_SIZE 64
  53:compcontrol.c **** uint8_t recv_msg_buff[UART_BUFF_SIZE];
  54:compcontrol.c **** uint8_t tx_msg_buff[UART_BUFF_SIZE];
  55:compcontrol.c **** uint8_t recv_msg_i=0;
  56:compcontrol.c **** uint8_t valid_msg_in_q = 0;
  57:compcontrol.c **** 
  58:compcontrol.c **** volatile uint8_t CTS = TRUE; // clear to send -- can receive data on uart
  59:compcontrol.c **** volatile uint16_t uart_timeout = 0; // timeout for messages
  60:compcontrol.c **** 
  61:compcontrol.c **** /* 
  62:compcontrol.c ****  * Taken from: 
  63:compcontrol.c ****  * http://cell-relay.indiana.edu/mhonarc/cell-relay/1999-Jan/msg00074.html
  64:compcontrol.c ****  * 8 bit CRC Generator, MSB shifted first
  65:compcontrol.c ****  * Polynom: x^8 + x^2 + x^1 + 1
  66:compcontrol.c ****  */
  67:compcontrol.c ****  /*
  68:compcontrol.c **** const unsigned char CRC8Table[256] = {
  69:compcontrol.c ****     0x00,0x07,0x0E,0x09,0x1C,0x1B,0x12,0x15,
  70:compcontrol.c ****     0x38,0x3F,0x36,0x31,0x24,0x23,0x2A,0x2D,
  71:compcontrol.c ****     0x70,0x77,0x7E,0x79,0x6C,0x6B,0x62,0x65,
  72:compcontrol.c ****     0x48,0x4F,0x46,0x41,0x54,0x53,0x5A,0x5D,
  73:compcontrol.c ****     0xE0,0xE7,0xEE,0xE9,0xFC,0xFB,0xF2,0xF5,
  74:compcontrol.c ****     0xD8,0xDF,0xD6,0xD1,0xC4,0xC3,0xCA,0xCD,
  75:compcontrol.c ****     0x90,0x97,0x9E,0x99,0x8C,0x8B,0x82,0x85,
  76:compcontrol.c ****     0xA8,0xAF,0xA6,0xA1,0xB4,0xB3,0xBA,0xBD,
  77:compcontrol.c ****     0xC7,0xC0,0xC9,0xCE,0xDB,0xDC,0xD5,0xD2,
  78:compcontrol.c ****     0xFF,0xF8,0xF1,0xF6,0xE3,0xE4,0xED,0xEA,
  79:compcontrol.c ****     0xB7,0xB0,0xB9,0xBE,0xAB,0xAC,0xA5,0xA2,
  80:compcontrol.c ****     0x8F,0x88,0x81,0x86,0x93,0x94,0x9D,0x9A,
  81:compcontrol.c ****     0x27,0x20,0x29,0x2E,0x3B,0x3C,0x35,0x32,
  82:compcontrol.c ****     0x1F,0x18,0x11,0x16,0x03,0x04,0x0D,0x0A,
  83:compcontrol.c ****     0x57,0x50,0x59,0x5E,0x4B,0x4C,0x45,0x42,
  84:compcontrol.c ****     0x6F,0x68,0x61,0x66,0x73,0x74,0x7D,0x7A,
  85:compcontrol.c ****     0x89,0x8E,0x87,0x80,0x95,0x92,0x9B,0x9C,
  86:compcontrol.c ****     0xB1,0xB6,0xBF,0xB8,0xAD,0xAA,0xA3,0xA4,
  87:compcontrol.c ****     0xF9,0xFE,0xF7,0xF0,0xE5,0xE2,0xEB,0xEC,
  88:compcontrol.c ****     0xC1,0xC6,0xCF,0xC8,0xDD,0xDA,0xD3,0xD4,
  89:compcontrol.c ****     0x69,0x6E,0x67,0x60,0x75,0x72,0x7B,0x7C,
  90:compcontrol.c ****     0x51,0x56,0x5F,0x58,0x4D,0x4A,0x43,0x44,
  91:compcontrol.c ****     0x19,0x1E,0x17,0x10,0x05,0x02,0x0B,0x0C,
  92:compcontrol.c ****     0x21,0x26,0x2F,0x28,0x3D,0x3A,0x33,0x34,
  93:compcontrol.c ****     0x4E,0x49,0x40,0x47,0x52,0x55,0x5C,0x5B,
  94:compcontrol.c ****     0x76,0x71,0x78,0x7F,0x6A,0x6D,0x64,0x63,
  95:compcontrol.c ****     0x3E,0x39,0x30,0x37,0x22,0x25,0x2C,0x2B,
  96:compcontrol.c ****     0x06,0x01,0x08,0x0F,0x1A,0x1D,0x14,0x13,
  97:compcontrol.c ****     0xAE,0xA9,0xA0,0xA7,0xB2,0xB5,0xBC,0xBB,
  98:compcontrol.c ****     0x96,0x91,0x98,0x9F,0x8A,0x8D,0x84,0x83,
  99:compcontrol.c ****     0xDE,0xD9,0xD0,0xD7,0xC2,0xC5,0xCC,0xCB,
 100:compcontrol.c ****     0xE6,0xE1,0xE8,0xEF,0xFA,0xFD,0xF4,0xF3
 101:compcontrol.c **** };
 102:compcontrol.c **** */
 103:compcontrol.c **** 
 104:compcontrol.c **** // interrupt on receive char
 105:compcontrol.c **** SIGNAL(SIG_USART1_RECV) {
 106:compcontrol.c ****   uint8_t cmd, crc;
 107:compcontrol.c ****   uint16_t size;
 108:compcontrol.c ****   char c = UDR1;
 109:compcontrol.c **** 
 110:compcontrol.c ****   if (CTS) {
 111:compcontrol.c ****     if (uart_timeout > 1000) {
 112:compcontrol.c ****       clear_bank_leds();
 113:compcontrol.c ****       clock_leds();
 114:compcontrol.c ****       recv_msg_i = 0;  // start over... but don't send status!
 115:compcontrol.c ****     }
 116:compcontrol.c **** 
 117:compcontrol.c ****     if (recv_msg_i < UART_BUFF_SIZE) {
 118:compcontrol.c ****       recv_msg_buff[recv_msg_i++] = c;    // place at end of q      
 119:compcontrol.c ****     } else {
 120:compcontrol.c ****       // Receive failure.  Start over.  
 121:compcontrol.c **** 
 122:compcontrol.c ****       // Meme:  Perhaps this should be a counter timeout rather than an
 123:compcontrol.c ****       // overflow timeout?   -mbroxton
 124:compcontrol.c **** 
 125:compcontrol.c ****       send_status(recv_msg_i);
 126:compcontrol.c ****       recv_msg_i = 0;
 127:compcontrol.c ****       //set_bank_led(14); clock_leds();
 128:compcontrol.c ****     }
 129:compcontrol.c **** 
 130:compcontrol.c ****     uart_timeout = 0;
 131:compcontrol.c ****     
 132:compcontrol.c ****     /* The header has been received.  Start grabbing the content
 133:compcontrol.c ****      * and the CRC. */
 134:compcontrol.c ****     if (recv_msg_i >= 3) {
 135:compcontrol.c ****       cmd = recv_msg_buff[0];
 136:compcontrol.c ****       size = recv_msg_buff[1];
 137:compcontrol.c ****       size <<= 8;               // size is just the body size
 138:compcontrol.c ****       size |= recv_msg_buff[2];
 139:compcontrol.c **** 
 140:compcontrol.c ****       if (recv_msg_i >= 4 + size) { // header+foot is 4 bytes long
 141:compcontrol.c **** 	crc = recv_msg_buff[3+size]; // CRC is the last byte of the packet
 142:compcontrol.c **** 
 143:compcontrol.c **** 	if (crc != calc_CRC8(recv_msg_buff, size+3)) {   
 144:compcontrol.c **** 	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
 145:compcontrol.c **** 
 146:compcontrol.c **** 	  recv_msg_i = 0;
 147:compcontrol.c **** 	  send_status(0);
 148:compcontrol.c **** 	  // set_bank_led(13); clock_leds();   // CRC Error
 149:compcontrol.c **** 	  return;
 150:compcontrol.c **** 	}
 151:compcontrol.c **** 
 152:compcontrol.c **** 	/* If we get to here, the message has passed the CRC and is
 153:compcontrol.c **** 	 * assumed to be valid.  Now we process the message.
 154:compcontrol.c **** 	 */
 155:compcontrol.c **** 
 156:compcontrol.c **** 	switch (cmd) {
 157:compcontrol.c **** 	case PING_MSG:
 158:compcontrol.c **** 	  send_status(0x1);
 159:compcontrol.c **** 	  break;
 160:compcontrol.c **** 	  
 161:compcontrol.c **** 	case GET_TEMPO_MSG:
 162:compcontrol.c **** 	  send_tempo(tempo);
 163:compcontrol.c **** 	  break;
 164:compcontrol.c **** 
 165:compcontrol.c **** 	case SET_TEMPO_MSG: {
 166:compcontrol.c **** 	  uint16_t t;
 167:compcontrol.c **** 
 168:compcontrol.c **** 	  if (recv_msg_buff[2] != TEMPO_MSG_LEN) {
 169:compcontrol.c **** 	    send_status(0);
 170:compcontrol.c **** 	    break;
 171:compcontrol.c **** 	  }
 172:compcontrol.c **** 	  t = recv_msg_buff[3];
 173:compcontrol.c **** 	  t <<= 8;
 174:compcontrol.c **** 	  t += recv_msg_buff[4];
 175:compcontrol.c **** 
 176:compcontrol.c **** 	  change_tempo(t);
 177:compcontrol.c **** 
 178:compcontrol.c **** 	  break;
 179:compcontrol.c **** 	}	  
 180:compcontrol.c **** 	case RD_PATT_MSG: {
 181:compcontrol.c **** 	  uint8_t bank, patt, i;
 182:compcontrol.c **** 	  uint16_t addr;
 183:compcontrol.c **** 	
 184:compcontrol.c **** 	  if (recv_msg_buff[2] != RD_PATT_MSG_LEN) {
 185:compcontrol.c **** 	    send_status(0);
 186:compcontrol.c **** 	    break;
 187:compcontrol.c **** 	  }
 188:compcontrol.c **** 
 189:compcontrol.c **** 	  bank = recv_msg_buff[3];
 190:compcontrol.c **** 	  patt = recv_msg_buff[4];
 191:compcontrol.c **** 	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
 192:compcontrol.c **** 	  /*
 193:compcontrol.c **** 	    putstring("reading patt ["); 
 194:compcontrol.c **** 	    putnum_ud(bank); putstring(", "); putnum_ud(patt_location);
 195:compcontrol.c **** 	    putstring(" @ 0x");
 196:compcontrol.c **** 	    putnum_uh(pattern_addr);
 197:compcontrol.c **** 	    putstring("\n\r");
 198:compcontrol.c **** 	  */
 199:compcontrol.c **** 	  tx_msg_buff[0] = PATT_MSG;
 200:compcontrol.c **** 	  tx_msg_buff[1] = 0;
 201:compcontrol.c **** 	  tx_msg_buff[2] = PATT_MSG_LEN;
 202:compcontrol.c **** 
 203:compcontrol.c **** 	  for(i=0; i<PATT_SIZE; i++) {
 204:compcontrol.c **** 	    tx_msg_buff[3+i] = spieeprom_read(addr + i);
 205:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 206:compcontrol.c **** 	  }
 207:compcontrol.c **** 	  //putstring("\n\r");
 208:compcontrol.c **** 	  
 209:compcontrol.c **** 	  tx_msg_buff[3+PATT_SIZE] = calc_CRC8(tx_msg_buff, 3+PATT_SIZE);
 210:compcontrol.c ****   
 211:compcontrol.c **** 	  send_msg(tx_msg_buff, 4+PATT_SIZE);
 212:compcontrol.c **** 	  break;
 213:compcontrol.c **** 	}
 214:compcontrol.c ****  
 215:compcontrol.c **** 	case WR_PATT_MSG: {
 216:compcontrol.c **** 	  uint8_t bank, patt, i;
 217:compcontrol.c **** 	  uint16_t addr;
 218:compcontrol.c **** 
 219:compcontrol.c **** 	  //set_bank_led(4); clock_leds();
 220:compcontrol.c **** 	  if (recv_msg_buff[2] != WR_PATT_MSG_LEN) {
 221:compcontrol.c **** 	    send_status(0);
 222:compcontrol.c **** 	    break;
 223:compcontrol.c **** 	  }
 224:compcontrol.c **** 
 225:compcontrol.c **** 	  bank = recv_msg_buff[3];
 226:compcontrol.c **** 	  patt = recv_msg_buff[4];
 227:compcontrol.c **** 	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
 228:compcontrol.c **** 	  /*
 229:compcontrol.c **** 	    putstring("writing patt ["); 
 230:compcontrol.c **** 	    putnum_ud(bank); putstring(", "); putnum_ud(patt_location);
 231:compcontrol.c **** 	    putstring(" @ 0x");
 232:compcontrol.c **** 	    putnum_uh(pattern_addr);
 233:compcontrol.c **** 	    putstring("\n\r");
 234:compcontrol.c **** 	  */
 235:compcontrol.c **** 	  for(i=0; i<PATT_SIZE; i++) {
 236:compcontrol.c **** 	    spieeprom_write(recv_msg_buff[5+i], addr + i);
 237:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 238:compcontrol.c **** 	  }
 239:compcontrol.c **** 	  //putstring("\n\r");
 240:compcontrol.c **** 	  
 241:compcontrol.c **** 	  send_status(1);
 242:compcontrol.c **** 	  break;
 243:compcontrol.c **** 	}
 244:compcontrol.c **** 
 245:compcontrol.c **** 	default:
 246:compcontrol.c **** 	  send_status(0);
 247:compcontrol.c **** 	  break;
 248:compcontrol.c **** 
 249:compcontrol.c **** 
 250:compcontrol.c **** 	}
 251:compcontrol.c **** 	recv_msg_i = 0; // start over!
 252:compcontrol.c ****       }
 253:compcontrol.c ****     }
 254:compcontrol.c ****     
 255:compcontrol.c ****   }
 256:compcontrol.c **** }
 257:compcontrol.c **** 
 258:compcontrol.c **** void send_msg(uint8_t *buff, uint16_t len) {
  16               		.loc 1 258 44 view -0
  17               		.cfi_startproc
  18               		.loc 1 258 44 is_stmt 0 view .LVU1
  19 0000 0F93      		push r16
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               		.cfi_def_cfa_offset 4
  24               		.cfi_offset 17, -3
  25 0004 CF93      		push r28
  26               		.cfi_def_cfa_offset 5
  27               		.cfi_offset 28, -4
  28 0006 DF93      		push r29
  29               		.cfi_def_cfa_offset 6
  30               		.cfi_offset 29, -5
  31               	/* prologue: function */
  32               	/* frame size = 0 */
  33               	/* stack size = 4 */
  34               	.L__stack_usage = 4
 259:compcontrol.c ****   uint16_t i;
  35               		.loc 1 259 3 is_stmt 1 view .LVU2
 260:compcontrol.c ****   for (i=0; i<len; i++) {
  36               		.loc 1 260 3 view .LVU3
  37               	.LVL1:
  38               		.loc 1 260 3 is_stmt 0 view .LVU4
  39 0008 EC01      		movw r28,r24
  40 000a 8C01      		movw r16,r24
  41 000c 060F      		add r16,r22
  42 000e 171F      		adc r17,r23
  43               	.LVL2:
  44               	.L2:
  45               		.loc 1 260 3 discriminator 1 view .LVU5
  46 0010 C017      		cp r28,r16
  47 0012 D107      		cpc r29,r17
  48 0014 01F4      		brne .L3
  49               	/* epilogue start */
 261:compcontrol.c ****     uart_putchar(buff[i]);
 262:compcontrol.c ****   }
 263:compcontrol.c **** }
  50               		.loc 1 263 1 view .LVU6
  51 0016 DF91      		pop r29
  52 0018 CF91      		pop r28
  53               	.LVL3:
  54               		.loc 1 263 1 view .LVU7
  55 001a 1F91      		pop r17
  56 001c 0F91      		pop r16
  57 001e 0895      		ret
  58               	.LVL4:
  59               	.L3:
 261:compcontrol.c ****     uart_putchar(buff[i]);
  60               		.loc 1 261 5 is_stmt 1 discriminator 3 view .LVU8
  61 0020 8991      		ld r24,Y+
  62               	.LVL5:
 261:compcontrol.c ****     uart_putchar(buff[i]);
  63               		.loc 1 261 5 is_stmt 0 discriminator 3 view .LVU9
  64 0022 0E94 0000 		call uart_putchar
  65               	.LVL6:
 261:compcontrol.c ****     uart_putchar(buff[i]);
  66               		.loc 1 261 5 discriminator 3 view .LVU10
  67 0026 00C0      		rjmp .L2
  68               		.cfi_endproc
  69               	.LFE2:
  71               	.global	do_computer_control
  73               	do_computer_control:
  74               	.LFB5:
 264:compcontrol.c **** 
 265:compcontrol.c **** void send_status(uint8_t stat) {
 266:compcontrol.c ****   tx_msg_buff[0] = STATUS_MSG;
 267:compcontrol.c ****   tx_msg_buff[1] = 0;
 268:compcontrol.c ****   tx_msg_buff[2] = 1;
 269:compcontrol.c ****   tx_msg_buff[3] = stat;
 270:compcontrol.c ****   tx_msg_buff[4] = calc_CRC8(tx_msg_buff, 4);
 271:compcontrol.c ****   
 272:compcontrol.c ****   send_msg(tx_msg_buff, 5);
 273:compcontrol.c **** }
 274:compcontrol.c **** 
 275:compcontrol.c **** void send_tempo(uint16_t t) {
 276:compcontrol.c **** 
 277:compcontrol.c ****   tx_msg_buff[0] = TEMPO_MSG;
 278:compcontrol.c ****   tx_msg_buff[1] = 0;
 279:compcontrol.c ****   tx_msg_buff[2] = TEMPO_MSG_LEN;
 280:compcontrol.c ****   tx_msg_buff[3] = t >> 8;
 281:compcontrol.c ****   tx_msg_buff[4] = t & 0xFF;
 282:compcontrol.c ****   tx_msg_buff[5] = calc_CRC8(tx_msg_buff, 5);
 283:compcontrol.c **** 
 284:compcontrol.c ****   send_msg(tx_msg_buff, TEMPO_MSG_LEN + 4);
 285:compcontrol.c **** }
 286:compcontrol.c **** 
 287:compcontrol.c **** 
 288:compcontrol.c **** void do_computer_control(void) {
  75               		.loc 1 288 32 is_stmt 1 view -0
  76               		.cfi_startproc
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  81               	.L5:
 289:compcontrol.c **** 
 290:compcontrol.c ****   while (1) {
  82               		.loc 1 290 3 view .LVU12
 291:compcontrol.c ****     read_switches();
  83               		.loc 1 291 5 view .LVU13
  84 0028 0E94 0000 		call read_switches
  85               	.LVL7:
 292:compcontrol.c ****     if (function_changed) {
  86               		.loc 1 292 5 view .LVU14
  87               		.loc 1 292 8 is_stmt 0 view .LVU15
  88 002c 8091 0000 		lds r24,function
  89 0030 8E30      		cpi r24,lo8(14)
  90 0032 01F0      		breq .L5
 293:compcontrol.c ****       // oops i guess they want something else, return!
 294:compcontrol.c ****       clear_all_leds();
  91               		.loc 1 294 7 is_stmt 1 view .LVU16
  92 0034 0E94 0000 		call clear_all_leds
  93               	.LVL8:
 295:compcontrol.c ****       clock_leds();
  94               		.loc 1 295 7 view .LVU17
  95 0038 0E94 0000 		call clock_leds
  96               	.LVL9:
 296:compcontrol.c ****       return;
  97               		.loc 1 296 7 view .LVU18
  98               	/* epilogue start */
 297:compcontrol.c ****     }
 298:compcontrol.c ****     
 299:compcontrol.c ****     //putstring("computer kontrol\n\r");
 300:compcontrol.c ****     
 301:compcontrol.c ****   }
 302:compcontrol.c **** }
  99               		.loc 1 302 1 is_stmt 0 view .LVU19
 100 003c 0895      		ret
 101               		.cfi_endproc
 102               	.LFE5:
 104               	.global	calc_CRC8
 106               	calc_CRC8:
 107               	.LVL10:
 108               	.LFB6:
 303:compcontrol.c **** 
 304:compcontrol.c ****      
 305:compcontrol.c **** /* 
 306:compcontrol.c ****  * Adapted from: http://cell-relay.indiana.edu/mhonarc/cell-relay/1999-Jan/msg00074.html
 307:compcontrol.c ****  * 8 bit CRC Generator, MSB shifted first
 308:compcontrol.c ****  * Polynom: x^8 + x^2 + x^1 + 1
 309:compcontrol.c ****  * 
 310:compcontrol.c ****  * Calculates an 8-bit cyclic redundancy check sum for a packet.
 311:compcontrol.c ****  * This function takes care not to include the packet's check sum in calculating 
 312:compcontrol.c ****  * the check sum.  Assumes the CRC is the last byte of the packet header.  Also
 313:compcontrol.c ****  * takes care to look in code space (instead of xdata space) when dealing with a 
 314:compcontrol.c ****  * PFrag.
 315:compcontrol.c ****  */
 316:compcontrol.c **** 
 317:compcontrol.c **** 
 318:compcontrol.c **** uint8_t calc_CRC8(uint8_t *buff, uint16_t size) {
 109               		.loc 1 318 49 is_stmt 1 view -0
 110               		.cfi_startproc
 111               		.loc 1 318 49 is_stmt 0 view .LVU21
 112 003e CF93      		push r28
 113               		.cfi_def_cfa_offset 3
 114               		.cfi_offset 28, -2
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 1 */
 118               	.L__stack_usage = 1
 319:compcontrol.c ****   uint8_t x;
 119               		.loc 1 319 3 is_stmt 1 view .LVU22
 320:compcontrol.c ****   uint8_t crc = 0;
 120               		.loc 1 320 3 view .LVU23
 121               	.LVL11:
 321:compcontrol.c **** 
 322:compcontrol.c **** /*
 323:compcontrol.c ****   uint8_t i;
 324:compcontrol.c ****   uint8_t crc = 0;
 325:compcontrol.c **** */
 326:compcontrol.c ****   /*
 327:compcontrol.c ****    * Add the message header to the CRC.  Don't include the CRC itself
 328:compcontrol.c ****    * when calculating the CRC.
 329:compcontrol.c ****    */
 330:compcontrol.c **** /*   
 331:compcontrol.c ****   for (i=0; i < size; i++) {	
 332:compcontrol.c ****     crc = CRC8Table[crc ^ *(buff + i)];
 333:compcontrol.c ****   }
 334:compcontrol.c **** */  
 335:compcontrol.c **** /*  
 336:compcontrol.c ****   for (i = 0; i < size; i++)
 337:compcontrol.c ****   {
 338:compcontrol.c ****     crc^=*(buff + i);
 339:compcontrol.c ****     n=8;while(n--) crc=(crc&0x80)?(crc<<1)^0x07:crc<<1; 
 340:compcontrol.c ****   }
 341:compcontrol.c **** */
 342:compcontrol.c **** 
 343:compcontrol.c ****   while(size) {
 122               		.loc 1 343 3 view .LVU24
 123 0040 FC01      		movw r30,r24
 124 0042 680F      		add r22,r24
 125 0044 791F      		adc r23,r25
 126               	.LVL12:
 320:compcontrol.c ****   uint8_t crc = 0;
 127               		.loc 1 320 11 is_stmt 0 view .LVU25
 128 0046 80E0      		ldi r24,0
 129               	.LVL13:
 344:compcontrol.c ****     --size;
 345:compcontrol.c **** 	x=crc^*buff++;
 346:compcontrol.c **** 	crc=0;
 347:compcontrol.c **** 	if(x&0x01) crc^=0x07;
 348:compcontrol.c **** 	if(x&0x02) crc^=0x0E;
 130               		.loc 1 348 16 view .LVU26
 131 0048 2EE0      		ldi r18,lo8(14)
 349:compcontrol.c **** 	if(x&0x04) crc^=0x1C;
 132               		.loc 1 349 16 view .LVU27
 133 004a 3CE1      		ldi r19,lo8(28)
 350:compcontrol.c **** 	if(x&0x08) crc^=0x38;
 134               		.loc 1 350 16 view .LVU28
 135 004c 48E3      		ldi r20,lo8(56)
 351:compcontrol.c **** 	if(x&0x10) crc^=0x70;
 136               		.loc 1 351 16 view .LVU29
 137 004e 50E7      		ldi r21,lo8(112)
 352:compcontrol.c **** 	if(x&0x20) crc^=0xE0;
 138               		.loc 1 352 16 view .LVU30
 139 0050 A0EE      		ldi r26,lo8(-32)
 353:compcontrol.c **** 	if(x&0x40) crc^=0xC7;
 140               		.loc 1 353 16 view .LVU31
 141 0052 B7EC      		ldi r27,lo8(-57)
 354:compcontrol.c **** 	if(x&0x80) crc^=0x89;
 142               		.loc 1 354 16 view .LVU32
 143 0054 C9E8      		ldi r28,lo8(-119)
 144               	.LVL14:
 145               	.L9:
 343:compcontrol.c ****     --size;
 146               		.loc 1 343 8 view .LVU33
 147 0056 E617      		cp r30,r22
 148 0058 F707      		cpc r31,r23
 149 005a 01F4      		brne .L18
 150               	/* epilogue start */
 355:compcontrol.c ****   }
 356:compcontrol.c ****   
 357:compcontrol.c ****   return crc;
 358:compcontrol.c **** }
 151               		.loc 1 358 1 view .LVU34
 152 005c CF91      		pop r28
 153 005e 0895      		ret
 154               	.L18:
 344:compcontrol.c **** 	x=crc^*buff++;
 155               		.loc 1 344 5 is_stmt 1 view .LVU35
 156               	.LVL15:
 345:compcontrol.c **** 	crc=0;
 157               		.loc 1 345 2 view .LVU36
 345:compcontrol.c **** 	crc=0;
 158               		.loc 1 345 8 is_stmt 0 view .LVU37
 159 0060 9191      		ld r25,Z+
 160               	.LVL16:
 345:compcontrol.c **** 	crc=0;
 161               		.loc 1 345 3 view .LVU38
 162 0062 9827      		eor r25,r24
 163               	.LVL17:
 346:compcontrol.c **** 	if(x&0x01) crc^=0x07;
 164               		.loc 1 346 2 is_stmt 1 view .LVU39
 347:compcontrol.c **** 	if(x&0x02) crc^=0x0E;
 165               		.loc 1 347 2 view .LVU40
 347:compcontrol.c **** 	if(x&0x02) crc^=0x0E;
 166               		.loc 1 347 4 is_stmt 0 view .LVU41
 167 0064 892F      		mov r24,r25
 168 0066 8170      		andi r24,lo8(1)
 169 0068 90FD      		sbrc r25,0
 347:compcontrol.c **** 	if(x&0x02) crc^=0x0E;
 170               		.loc 1 347 16 view .LVU42
 171 006a 87E0      		ldi r24,lo8(7)
 172               	.L10:
 173               	.LVL18:
 348:compcontrol.c **** 	if(x&0x04) crc^=0x1C;
 174               		.loc 1 348 2 is_stmt 1 view .LVU43
 348:compcontrol.c **** 	if(x&0x04) crc^=0x1C;
 175               		.loc 1 348 4 is_stmt 0 view .LVU44
 176 006c 91FD      		sbrc r25,1
 348:compcontrol.c **** 	if(x&0x04) crc^=0x1C;
 177               		.loc 1 348 13 is_stmt 1 discriminator 1 view .LVU45
 348:compcontrol.c **** 	if(x&0x04) crc^=0x1C;
 178               		.loc 1 348 16 is_stmt 0 discriminator 1 view .LVU46
 179 006e 8227      		eor r24,r18
 180               	.LVL19:
 181               	.L11:
 349:compcontrol.c **** 	if(x&0x08) crc^=0x38;
 182               		.loc 1 349 2 is_stmt 1 view .LVU47
 349:compcontrol.c **** 	if(x&0x08) crc^=0x38;
 183               		.loc 1 349 4 is_stmt 0 view .LVU48
 184 0070 92FD      		sbrc r25,2
 349:compcontrol.c **** 	if(x&0x08) crc^=0x38;
 185               		.loc 1 349 13 is_stmt 1 discriminator 1 view .LVU49
 349:compcontrol.c **** 	if(x&0x08) crc^=0x38;
 186               		.loc 1 349 16 is_stmt 0 discriminator 1 view .LVU50
 187 0072 8327      		eor r24,r19
 188               	.LVL20:
 189               	.L12:
 350:compcontrol.c **** 	if(x&0x10) crc^=0x70;
 190               		.loc 1 350 2 is_stmt 1 view .LVU51
 350:compcontrol.c **** 	if(x&0x10) crc^=0x70;
 191               		.loc 1 350 4 is_stmt 0 view .LVU52
 192 0074 93FD      		sbrc r25,3
 350:compcontrol.c **** 	if(x&0x10) crc^=0x70;
 193               		.loc 1 350 13 is_stmt 1 discriminator 1 view .LVU53
 350:compcontrol.c **** 	if(x&0x10) crc^=0x70;
 194               		.loc 1 350 16 is_stmt 0 discriminator 1 view .LVU54
 195 0076 8427      		eor r24,r20
 196               	.LVL21:
 197               	.L13:
 351:compcontrol.c **** 	if(x&0x20) crc^=0xE0;
 198               		.loc 1 351 2 is_stmt 1 view .LVU55
 351:compcontrol.c **** 	if(x&0x20) crc^=0xE0;
 199               		.loc 1 351 4 is_stmt 0 view .LVU56
 200 0078 94FD      		sbrc r25,4
 351:compcontrol.c **** 	if(x&0x20) crc^=0xE0;
 201               		.loc 1 351 13 is_stmt 1 discriminator 1 view .LVU57
 351:compcontrol.c **** 	if(x&0x20) crc^=0xE0;
 202               		.loc 1 351 16 is_stmt 0 discriminator 1 view .LVU58
 203 007a 8527      		eor r24,r21
 204               	.LVL22:
 205               	.L14:
 352:compcontrol.c **** 	if(x&0x40) crc^=0xC7;
 206               		.loc 1 352 2 is_stmt 1 view .LVU59
 352:compcontrol.c **** 	if(x&0x40) crc^=0xC7;
 207               		.loc 1 352 4 is_stmt 0 view .LVU60
 208 007c 95FD      		sbrc r25,5
 352:compcontrol.c **** 	if(x&0x40) crc^=0xC7;
 209               		.loc 1 352 13 is_stmt 1 discriminator 1 view .LVU61
 352:compcontrol.c **** 	if(x&0x40) crc^=0xC7;
 210               		.loc 1 352 16 is_stmt 0 discriminator 1 view .LVU62
 211 007e 8A27      		eor r24,r26
 212               	.LVL23:
 213               	.L15:
 353:compcontrol.c **** 	if(x&0x80) crc^=0x89;
 214               		.loc 1 353 2 is_stmt 1 view .LVU63
 353:compcontrol.c **** 	if(x&0x80) crc^=0x89;
 215               		.loc 1 353 4 is_stmt 0 view .LVU64
 216 0080 96FD      		sbrc r25,6
 353:compcontrol.c **** 	if(x&0x80) crc^=0x89;
 217               		.loc 1 353 13 is_stmt 1 discriminator 1 view .LVU65
 353:compcontrol.c **** 	if(x&0x80) crc^=0x89;
 218               		.loc 1 353 16 is_stmt 0 discriminator 1 view .LVU66
 219 0082 8B27      		eor r24,r27
 220               	.LVL24:
 221               	.L16:
 354:compcontrol.c ****   }
 222               		.loc 1 354 2 is_stmt 1 view .LVU67
 354:compcontrol.c ****   }
 223               		.loc 1 354 4 is_stmt 0 view .LVU68
 224 0084 97FF      		sbrs r25,7
 225 0086 00C0      		rjmp .L9
 354:compcontrol.c ****   }
 226               		.loc 1 354 13 is_stmt 1 discriminator 1 view .LVU69
 354:compcontrol.c ****   }
 227               		.loc 1 354 16 is_stmt 0 discriminator 1 view .LVU70
 228 0088 8C27      		eor r24,r28
 229               	.LVL25:
 354:compcontrol.c ****   }
 230               		.loc 1 354 16 discriminator 1 view .LVU71
 231 008a 00C0      		rjmp .L9
 232               		.cfi_endproc
 233               	.LFE6:
 235               	.global	send_status
 237               	send_status:
 238               	.LVL26:
 239               	.LFB3:
 265:compcontrol.c ****   tx_msg_buff[0] = STATUS_MSG;
 240               		.loc 1 265 32 is_stmt 1 view -0
 241               		.cfi_startproc
 265:compcontrol.c ****   tx_msg_buff[0] = STATUS_MSG;
 242               		.loc 1 265 32 is_stmt 0 view .LVU73
 243 008c CF93      		push r28
 244               		.cfi_def_cfa_offset 3
 245               		.cfi_offset 28, -2
 246 008e DF93      		push r29
 247               		.cfi_def_cfa_offset 4
 248               		.cfi_offset 29, -3
 249               	/* prologue: function */
 250               	/* frame size = 0 */
 251               	/* stack size = 2 */
 252               	.L__stack_usage = 2
 266:compcontrol.c ****   tx_msg_buff[1] = 0;
 253               		.loc 1 266 3 is_stmt 1 view .LVU74
 266:compcontrol.c ****   tx_msg_buff[1] = 0;
 254               		.loc 1 266 18 is_stmt 0 view .LVU75
 255 0090 C0E0      		ldi r28,lo8(tx_msg_buff)
 256 0092 D0E0      		ldi r29,hi8(tx_msg_buff)
 257 0094 90E8      		ldi r25,lo8(-128)
 258 0096 9883      		st Y,r25
 267:compcontrol.c ****   tx_msg_buff[2] = 1;
 259               		.loc 1 267 3 is_stmt 1 view .LVU76
 267:compcontrol.c ****   tx_msg_buff[2] = 1;
 260               		.loc 1 267 18 is_stmt 0 view .LVU77
 261 0098 1982      		std Y+1,__zero_reg__
 268:compcontrol.c ****   tx_msg_buff[3] = stat;
 262               		.loc 1 268 3 is_stmt 1 view .LVU78
 268:compcontrol.c ****   tx_msg_buff[3] = stat;
 263               		.loc 1 268 18 is_stmt 0 view .LVU79
 264 009a 91E0      		ldi r25,lo8(1)
 265 009c 9A83      		std Y+2,r25
 269:compcontrol.c ****   tx_msg_buff[4] = calc_CRC8(tx_msg_buff, 4);
 266               		.loc 1 269 3 is_stmt 1 view .LVU80
 269:compcontrol.c ****   tx_msg_buff[4] = calc_CRC8(tx_msg_buff, 4);
 267               		.loc 1 269 18 is_stmt 0 view .LVU81
 268 009e 8B83      		std Y+3,r24
 270:compcontrol.c ****   
 269               		.loc 1 270 3 is_stmt 1 view .LVU82
 270:compcontrol.c ****   
 270               		.loc 1 270 20 is_stmt 0 view .LVU83
 271 00a0 64E0      		ldi r22,lo8(4)
 272 00a2 70E0      		ldi r23,0
 273 00a4 CE01      		movw r24,r28
 274               	.LVL27:
 270:compcontrol.c ****   
 275               		.loc 1 270 20 view .LVU84
 276 00a6 0E94 0000 		call calc_CRC8
 277               	.LVL28:
 270:compcontrol.c ****   
 278               		.loc 1 270 18 view .LVU85
 279 00aa 8C83      		std Y+4,r24
 272:compcontrol.c **** }
 280               		.loc 1 272 3 is_stmt 1 view .LVU86
 281 00ac 65E0      		ldi r22,lo8(5)
 282 00ae 70E0      		ldi r23,0
 283 00b0 CE01      		movw r24,r28
 284 00b2 0E94 0000 		call send_msg
 285               	.LVL29:
 286               	/* epilogue start */
 273:compcontrol.c **** 
 287               		.loc 1 273 1 is_stmt 0 view .LVU87
 288 00b6 DF91      		pop r29
 289 00b8 CF91      		pop r28
 290 00ba 0895      		ret
 291               		.cfi_endproc
 292               	.LFE3:
 294               	.global	send_tempo
 296               	send_tempo:
 297               	.LVL30:
 298               	.LFB4:
 275:compcontrol.c **** 
 299               		.loc 1 275 29 is_stmt 1 view -0
 300               		.cfi_startproc
 275:compcontrol.c **** 
 301               		.loc 1 275 29 is_stmt 0 view .LVU89
 302 00bc CF93      		push r28
 303               		.cfi_def_cfa_offset 3
 304               		.cfi_offset 28, -2
 305 00be DF93      		push r29
 306               		.cfi_def_cfa_offset 4
 307               		.cfi_offset 29, -3
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 2 */
 311               	.L__stack_usage = 2
 277:compcontrol.c ****   tx_msg_buff[1] = 0;
 312               		.loc 1 277 3 is_stmt 1 view .LVU90
 277:compcontrol.c ****   tx_msg_buff[1] = 0;
 313               		.loc 1 277 18 is_stmt 0 view .LVU91
 314 00c0 C0E0      		ldi r28,lo8(tx_msg_buff)
 315 00c2 D0E0      		ldi r29,hi8(tx_msg_buff)
 316 00c4 22E4      		ldi r18,lo8(66)
 317 00c6 2883      		st Y,r18
 278:compcontrol.c ****   tx_msg_buff[2] = TEMPO_MSG_LEN;
 318               		.loc 1 278 3 is_stmt 1 view .LVU92
 278:compcontrol.c ****   tx_msg_buff[2] = TEMPO_MSG_LEN;
 319               		.loc 1 278 18 is_stmt 0 view .LVU93
 320 00c8 1982      		std Y+1,__zero_reg__
 279:compcontrol.c ****   tx_msg_buff[3] = t >> 8;
 321               		.loc 1 279 3 is_stmt 1 view .LVU94
 279:compcontrol.c ****   tx_msg_buff[3] = t >> 8;
 322               		.loc 1 279 18 is_stmt 0 view .LVU95
 323 00ca 22E0      		ldi r18,lo8(2)
 324 00cc 2A83      		std Y+2,r18
 280:compcontrol.c ****   tx_msg_buff[4] = t & 0xFF;
 325               		.loc 1 280 3 is_stmt 1 view .LVU96
 281:compcontrol.c ****   tx_msg_buff[5] = calc_CRC8(tx_msg_buff, 5);
 326               		.loc 1 281 3 view .LVU97
 280:compcontrol.c ****   tx_msg_buff[4] = t & 0xFF;
 327               		.loc 1 280 18 is_stmt 0 view .LVU98
 328 00ce 9827      		eor r25,r24
 329 00d0 8927      		eor r24,r25
 330               	.LVL31:
 280:compcontrol.c ****   tx_msg_buff[4] = t & 0xFF;
 331               		.loc 1 280 18 view .LVU99
 332 00d2 9827      		eor r25,r24
 333 00d4 9C83      		std Y+4,r25
 334 00d6 8B83      		std Y+3,r24
 282:compcontrol.c **** 
 335               		.loc 1 282 3 is_stmt 1 view .LVU100
 282:compcontrol.c **** 
 336               		.loc 1 282 20 is_stmt 0 view .LVU101
 337 00d8 65E0      		ldi r22,lo8(5)
 338 00da 70E0      		ldi r23,0
 339 00dc CE01      		movw r24,r28
 340 00de 0E94 0000 		call calc_CRC8
 341               	.LVL32:
 282:compcontrol.c **** 
 342               		.loc 1 282 18 view .LVU102
 343 00e2 8D83      		std Y+5,r24
 284:compcontrol.c **** }
 344               		.loc 1 284 3 is_stmt 1 view .LVU103
 345 00e4 66E0      		ldi r22,lo8(6)
 346 00e6 70E0      		ldi r23,0
 347 00e8 CE01      		movw r24,r28
 348 00ea 0E94 0000 		call send_msg
 349               	.LVL33:
 350               	/* epilogue start */
 285:compcontrol.c **** 
 351               		.loc 1 285 1 is_stmt 0 view .LVU104
 352 00ee DF91      		pop r29
 353 00f0 CF91      		pop r28
 354 00f2 0895      		ret
 355               		.cfi_endproc
 356               	.LFE4:
 358               	.global	__vector_20
 360               	__vector_20:
 361               	.LFB1:
 105:compcontrol.c ****   uint8_t cmd, crc;
 362               		.loc 1 105 25 is_stmt 1 view -0
 363               		.cfi_startproc
 364 00f4 1F92      		push r1
 365               		.cfi_def_cfa_offset 3
 366               		.cfi_offset 1, -2
 367 00f6 0F92      		push r0
 368               		.cfi_def_cfa_offset 4
 369               		.cfi_offset 0, -3
 370 00f8 0FB6      		in r0,__SREG__
 371 00fa 0F92      		push r0
 372 00fc 1124      		clr __zero_reg__
 373 00fe EF92      		push r14
 374               		.cfi_def_cfa_offset 5
 375               		.cfi_offset 14, -4
 376 0100 FF92      		push r15
 377               		.cfi_def_cfa_offset 6
 378               		.cfi_offset 15, -5
 379 0102 0F93      		push r16
 380               		.cfi_def_cfa_offset 7
 381               		.cfi_offset 16, -6
 382 0104 1F93      		push r17
 383               		.cfi_def_cfa_offset 8
 384               		.cfi_offset 17, -7
 385 0106 2F93      		push r18
 386               		.cfi_def_cfa_offset 9
 387               		.cfi_offset 18, -8
 388 0108 3F93      		push r19
 389               		.cfi_def_cfa_offset 10
 390               		.cfi_offset 19, -9
 391 010a 4F93      		push r20
 392               		.cfi_def_cfa_offset 11
 393               		.cfi_offset 20, -10
 394 010c 5F93      		push r21
 395               		.cfi_def_cfa_offset 12
 396               		.cfi_offset 21, -11
 397 010e 6F93      		push r22
 398               		.cfi_def_cfa_offset 13
 399               		.cfi_offset 22, -12
 400 0110 7F93      		push r23
 401               		.cfi_def_cfa_offset 14
 402               		.cfi_offset 23, -13
 403 0112 8F93      		push r24
 404               		.cfi_def_cfa_offset 15
 405               		.cfi_offset 24, -14
 406 0114 9F93      		push r25
 407               		.cfi_def_cfa_offset 16
 408               		.cfi_offset 25, -15
 409 0116 AF93      		push r26
 410               		.cfi_def_cfa_offset 17
 411               		.cfi_offset 26, -16
 412 0118 BF93      		push r27
 413               		.cfi_def_cfa_offset 18
 414               		.cfi_offset 27, -17
 415 011a CF93      		push r28
 416               		.cfi_def_cfa_offset 19
 417               		.cfi_offset 28, -18
 418 011c DF93      		push r29
 419               		.cfi_def_cfa_offset 20
 420               		.cfi_offset 29, -19
 421 011e EF93      		push r30
 422               		.cfi_def_cfa_offset 21
 423               		.cfi_offset 30, -20
 424 0120 FF93      		push r31
 425               		.cfi_def_cfa_offset 22
 426               		.cfi_offset 31, -21
 427               	/* prologue: Signal */
 428               	/* frame size = 0 */
 429               	/* stack size = 21 */
 430               	.L__stack_usage = 21
 106:compcontrol.c ****   uint16_t size;
 431               		.loc 1 106 3 view .LVU106
 107:compcontrol.c ****   char c = UDR1;
 432               		.loc 1 107 3 view .LVU107
 108:compcontrol.c **** 
 433               		.loc 1 108 3 view .LVU108
 108:compcontrol.c **** 
 434               		.loc 1 108 8 is_stmt 0 view .LVU109
 435 0122 C3B1      		in r28,0x3
 436               	.LVL34:
 110:compcontrol.c ****     if (uart_timeout > 1000) {
 437               		.loc 1 110 3 is_stmt 1 view .LVU110
 110:compcontrol.c ****     if (uart_timeout > 1000) {
 438               		.loc 1 110 7 is_stmt 0 view .LVU111
 439 0124 8091 0000 		lds r24,CTS
 110:compcontrol.c ****     if (uart_timeout > 1000) {
 440               		.loc 1 110 6 view .LVU112
 441 0128 8823      		tst r24
 442 012a 01F4      		brne .+2
 443 012c 00C0      		rjmp .L42
 111:compcontrol.c ****       clear_bank_leds();
 444               		.loc 1 111 5 is_stmt 1 view .LVU113
 111:compcontrol.c ****       clear_bank_leds();
 445               		.loc 1 111 22 is_stmt 0 view .LVU114
 446 012e 8091 0000 		lds r24,uart_timeout
 447 0132 9091 0000 		lds r25,uart_timeout+1
 111:compcontrol.c ****       clear_bank_leds();
 448               		.loc 1 111 8 view .LVU115
 449 0136 893E      		cpi r24,-23
 450 0138 9340      		sbci r25,3
 451 013a 00F0      		brlo .L45
 112:compcontrol.c ****       clock_leds();
 452               		.loc 1 112 7 is_stmt 1 view .LVU116
 453 013c 0E94 0000 		call clear_bank_leds
 454               	.LVL35:
 113:compcontrol.c ****       recv_msg_i = 0;  // start over... but don't send status!
 455               		.loc 1 113 7 view .LVU117
 456 0140 0E94 0000 		call clock_leds
 457               	.LVL36:
 114:compcontrol.c ****     }
 458               		.loc 1 114 7 view .LVU118
 114:compcontrol.c ****     }
 459               		.loc 1 114 18 is_stmt 0 view .LVU119
 460 0144 1092 0000 		sts recv_msg_i,__zero_reg__
 461               	.L45:
 117:compcontrol.c ****       recv_msg_buff[recv_msg_i++] = c;    // place at end of q      
 462               		.loc 1 117 5 is_stmt 1 view .LVU120
 117:compcontrol.c ****       recv_msg_buff[recv_msg_i++] = c;    // place at end of q      
 463               		.loc 1 117 20 is_stmt 0 view .LVU121
 464 0148 8091 0000 		lds r24,recv_msg_i
 117:compcontrol.c ****       recv_msg_buff[recv_msg_i++] = c;    // place at end of q      
 465               		.loc 1 117 8 view .LVU122
 466 014c 8034      		cpi r24,lo8(64)
 467 014e 00F0      		brlo .+2
 468 0150 00C0      		rjmp .L46
 118:compcontrol.c ****     } else {
 469               		.loc 1 118 7 is_stmt 1 view .LVU123
 118:compcontrol.c ****     } else {
 470               		.loc 1 118 31 is_stmt 0 view .LVU124
 471 0152 91E0      		ldi r25,lo8(1)
 472 0154 980F      		add r25,r24
 473 0156 9093 0000 		sts recv_msg_i,r25
 474 015a E82F      		mov r30,r24
 475 015c F0E0      		ldi r31,0
 118:compcontrol.c ****     } else {
 476               		.loc 1 118 35 view .LVU125
 477 015e E050      		subi r30,lo8(-(recv_msg_buff))
 478 0160 F040      		sbci r31,hi8(-(recv_msg_buff))
 479 0162 C083      		st Z,r28
 480               	.L47:
 130:compcontrol.c ****     
 481               		.loc 1 130 5 is_stmt 1 view .LVU126
 130:compcontrol.c ****     
 482               		.loc 1 130 18 is_stmt 0 view .LVU127
 483 0164 1092 0000 		sts uart_timeout+1,__zero_reg__
 484 0168 1092 0000 		sts uart_timeout,__zero_reg__
 134:compcontrol.c ****       cmd = recv_msg_buff[0];
 485               		.loc 1 134 5 is_stmt 1 view .LVU128
 134:compcontrol.c ****       cmd = recv_msg_buff[0];
 486               		.loc 1 134 20 is_stmt 0 view .LVU129
 487 016c 8091 0000 		lds r24,recv_msg_i
 134:compcontrol.c ****       cmd = recv_msg_buff[0];
 488               		.loc 1 134 8 view .LVU130
 489 0170 8330      		cpi r24,lo8(3)
 490 0172 00F0      		brlo .L42
 135:compcontrol.c ****       size = recv_msg_buff[1];
 491               		.loc 1 135 7 is_stmt 1 view .LVU131
 492               	.LVL37:
 136:compcontrol.c ****       size <<= 8;               // size is just the body size
 493               		.loc 1 136 7 view .LVU132
 137:compcontrol.c ****       size |= recv_msg_buff[2];
 494               		.loc 1 137 7 view .LVU133
 138:compcontrol.c **** 
 495               		.loc 1 138 7 view .LVU134
 496 0174 C091 0000 		lds r28,recv_msg_buff+1
 497 0178 D091 0000 		lds r29,recv_msg_buff+1+1
 498               	.LVL38:
 138:compcontrol.c **** 
 499               		.loc 1 138 7 is_stmt 0 view .LVU135
 500 017c DC27      		eor r29,r28
 501 017e CD27      		eor r28,r29
 502 0180 DC27      		eor r29,r28
 503               	.LVL39:
 140:compcontrol.c **** 	crc = recv_msg_buff[3+size]; // CRC is the last byte of the packet
 504               		.loc 1 140 7 is_stmt 1 view .LVU136
 140:compcontrol.c **** 	crc = recv_msg_buff[3+size]; // CRC is the last byte of the packet
 505               		.loc 1 140 27 is_stmt 0 view .LVU137
 506 0182 9E01      		movw r18,r28
 507 0184 2C5F      		subi r18,-4
 508 0186 3F4F      		sbci r19,-1
 140:compcontrol.c **** 	crc = recv_msg_buff[3+size]; // CRC is the last byte of the packet
 509               		.loc 1 140 10 view .LVU138
 510 0188 8217      		cp r24,r18
 511 018a 1306      		cpc __zero_reg__,r19
 512 018c 00F0      		brlo .L42
 141:compcontrol.c **** 
 513               		.loc 1 141 2 is_stmt 1 view .LVU139
 141:compcontrol.c **** 
 514               		.loc 1 141 23 is_stmt 0 view .LVU140
 515 018e 2396      		adiw r28,3
 516               	.LVL40:
 143:compcontrol.c **** 	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
 517               		.loc 1 143 2 is_stmt 1 view .LVU141
 143:compcontrol.c **** 	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
 518               		.loc 1 143 13 is_stmt 0 view .LVU142
 519 0190 BE01      		movw r22,r28
 520 0192 80E0      		ldi r24,lo8(recv_msg_buff)
 521 0194 90E0      		ldi r25,hi8(recv_msg_buff)
 143:compcontrol.c **** 	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
 522               		.loc 1 143 13 view .LVU143
 523 0196 0E94 0000 		call calc_CRC8
 524               	.LVL41:
 141:compcontrol.c **** 
 525               		.loc 1 141 6 view .LVU144
 526 019a C050      		subi r28,lo8(-(recv_msg_buff))
 527 019c D040      		sbci r29,hi8(-(recv_msg_buff))
 143:compcontrol.c **** 	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
 528               		.loc 1 143 5 view .LVU145
 529 019e 9881      		ld r25,Y
 530               	.LVL42:
 143:compcontrol.c **** 	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
 531               		.loc 1 143 5 view .LVU146
 532 01a0 8917      		cp r24,r25
 533 01a2 01F0      		breq .L49
 144:compcontrol.c **** 
 534               		.loc 1 144 4 is_stmt 1 view .LVU147
 535 01a4 90E0      		ldi r25,0
 536               	.LVL43:
 144:compcontrol.c **** 
 537               		.loc 1 144 4 is_stmt 0 view .LVU148
 538 01a6 0E94 0000 		call putnum_uh
 539               	.LVL44:
 146:compcontrol.c **** 	  send_status(0);
 540               		.loc 1 146 4 is_stmt 1 view .LVU149
 146:compcontrol.c **** 	  send_status(0);
 541               		.loc 1 146 15 is_stmt 0 view .LVU150
 542 01aa 1092 0000 		sts recv_msg_i,__zero_reg__
 147:compcontrol.c **** 	  // set_bank_led(13); clock_leds();   // CRC Error
 543               		.loc 1 147 4 is_stmt 1 view .LVU151
 544 01ae 80E0      		ldi r24,0
 545 01b0 0E94 0000 		call send_status
 546               	.LVL45:
 149:compcontrol.c **** 	}
 547               		.loc 1 149 4 view .LVU152
 548               	.L42:
 549               	/* epilogue start */
 256:compcontrol.c **** 
 550               		.loc 1 256 1 is_stmt 0 view .LVU153
 551 01b4 FF91      		pop r31
 552 01b6 EF91      		pop r30
 553 01b8 DF91      		pop r29
 554 01ba CF91      		pop r28
 555 01bc BF91      		pop r27
 556 01be AF91      		pop r26
 557 01c0 9F91      		pop r25
 558 01c2 8F91      		pop r24
 559 01c4 7F91      		pop r23
 560 01c6 6F91      		pop r22
 561 01c8 5F91      		pop r21
 562 01ca 4F91      		pop r20
 563 01cc 3F91      		pop r19
 564 01ce 2F91      		pop r18
 565 01d0 1F91      		pop r17
 566 01d2 0F91      		pop r16
 567 01d4 FF90      		pop r15
 568 01d6 EF90      		pop r14
 569 01d8 0F90      		pop r0
 570 01da 0FBE      		out __SREG__,r0
 571 01dc 0F90      		pop r0
 572 01de 1F90      		pop r1
 573 01e0 1895      		reti
 574               	.LVL46:
 575               	.L46:
 125:compcontrol.c ****       recv_msg_i = 0;
 576               		.loc 1 125 7 is_stmt 1 view .LVU154
 577 01e2 0E94 0000 		call send_status
 578               	.LVL47:
 126:compcontrol.c ****       //set_bank_led(14); clock_leds();
 579               		.loc 1 126 7 view .LVU155
 126:compcontrol.c ****       //set_bank_led(14); clock_leds();
 580               		.loc 1 126 18 is_stmt 0 view .LVU156
 581 01e6 1092 0000 		sts recv_msg_i,__zero_reg__
 582 01ea 00C0      		rjmp .L47
 583               	.LVL48:
 584               	.L49:
 135:compcontrol.c ****       size = recv_msg_buff[1];
 585               		.loc 1 135 11 view .LVU157
 586 01ec 8091 0000 		lds r24,recv_msg_buff
 138:compcontrol.c **** 
 587               		.loc 1 138 28 view .LVU158
 588 01f0 9091 0000 		lds r25,recv_msg_buff+2
 589               	.LVL49:
 156:compcontrol.c **** 	case PING_MSG:
 590               		.loc 1 156 2 is_stmt 1 view .LVU159
 591 01f4 8134      		cpi r24,lo8(65)
 592 01f6 01F0      		breq .L50
 593 01f8 00F4      		brsh .L51
 594 01fa 8034      		cpi r24,lo8(64)
 595 01fc 01F0      		breq .L52
 596 01fe 8131      		cpi r24,lo8(17)
 597 0200 01F0      		breq .L53
 598 0202 00F4      		brsh .L51
 599 0204 8130      		cpi r24,lo8(1)
 600 0206 01F4      		brne .+2
 601 0208 00C0      		rjmp .L64
 602 020a 8031      		cpi r24,lo8(16)
 603 020c 01F4      		brne .+2
 604 020e 00C0      		rjmp .L55
 605               	.L51:
 246:compcontrol.c **** 	  break;
 606               		.loc 1 246 4 view .LVU160
 607 0210 80E0      		ldi r24,0
 608 0212 00C0      		rjmp .L63
 609               	.L52:
 162:compcontrol.c **** 	  break;
 610               		.loc 1 162 4 view .LVU161
 611 0214 8091 0000 		lds r24,tempo
 612 0218 9091 0000 		lds r25,tempo+1
 613 021c 0E94 0000 		call send_tempo
 614               	.LVL50:
 163:compcontrol.c **** 
 615               		.loc 1 163 4 view .LVU162
 616               	.L56:
 251:compcontrol.c ****       }
 617               		.loc 1 251 2 view .LVU163
 251:compcontrol.c ****       }
 618               		.loc 1 251 13 is_stmt 0 view .LVU164
 619 0220 1092 0000 		sts recv_msg_i,__zero_reg__
 620 0224 00C0      		rjmp .L42
 621               	.L50:
 622               	.LBB2:
 166:compcontrol.c **** 
 623               		.loc 1 166 4 is_stmt 1 view .LVU165
 168:compcontrol.c **** 	    send_status(0);
 624               		.loc 1 168 4 view .LVU166
 168:compcontrol.c **** 	    send_status(0);
 625               		.loc 1 168 7 is_stmt 0 view .LVU167
 626 0226 9230      		cpi r25,lo8(2)
 627 0228 01F4      		brne .L51
 172:compcontrol.c **** 	  t <<= 8;
 628               		.loc 1 172 4 is_stmt 1 view .LVU168
 172:compcontrol.c **** 	  t <<= 8;
 629               		.loc 1 172 6 is_stmt 0 view .LVU169
 630 022a 8091 0000 		lds r24,recv_msg_buff+3
 631 022e 90E0      		ldi r25,0
 632               	.LVL51:
 173:compcontrol.c **** 	  t += recv_msg_buff[4];
 633               		.loc 1 173 4 is_stmt 1 view .LVU170
 173:compcontrol.c **** 	  t += recv_msg_buff[4];
 634               		.loc 1 173 6 is_stmt 0 view .LVU171
 635 0230 982F      		mov r25,r24
 636 0232 8827      		clr r24
 637               	.LVL52:
 174:compcontrol.c **** 
 638               		.loc 1 174 4 is_stmt 1 view .LVU172
 176:compcontrol.c **** 
 639               		.loc 1 176 4 view .LVU173
 174:compcontrol.c **** 
 640               		.loc 1 174 22 is_stmt 0 view .LVU174
 641 0234 2091 0000 		lds r18,recv_msg_buff+4
 176:compcontrol.c **** 
 642               		.loc 1 176 4 view .LVU175
 643 0238 820F      		add r24,r18
 644 023a 911D      		adc r25,__zero_reg__
 645               	.LVL53:
 176:compcontrol.c **** 
 646               		.loc 1 176 4 view .LVU176
 647 023c 0E94 0000 		call change_tempo
 648               	.LVL54:
 178:compcontrol.c **** 	}	  
 649               		.loc 1 178 4 is_stmt 1 view .LVU177
 650 0240 00C0      		rjmp .L56
 651               	.L53:
 178:compcontrol.c **** 	}	  
 652               		.loc 1 178 4 is_stmt 0 view .LVU178
 653               	.LBE2:
 654               	.LBB3:
 181:compcontrol.c **** 	  uint16_t addr;
 655               		.loc 1 181 4 is_stmt 1 view .LVU179
 182:compcontrol.c **** 	
 656               		.loc 1 182 4 view .LVU180
 184:compcontrol.c **** 	    send_status(0);
 657               		.loc 1 184 4 view .LVU181
 184:compcontrol.c **** 	    send_status(0);
 658               		.loc 1 184 7 is_stmt 0 view .LVU182
 659 0242 9230      		cpi r25,lo8(2)
 660 0244 01F4      		brne .L51
 189:compcontrol.c **** 	  patt = recv_msg_buff[4];
 661               		.loc 1 189 4 is_stmt 1 view .LVU183
 662               	.LVL55:
 190:compcontrol.c **** 	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
 663               		.loc 1 190 4 view .LVU184
 191:compcontrol.c **** 	  /*
 664               		.loc 1 191 4 view .LVU185
 191:compcontrol.c **** 	  /*
 665               		.loc 1 191 40 is_stmt 0 view .LVU186
 666 0246 C091 0000 		lds r28,recv_msg_buff+3
 667 024a E8E0      		ldi r30,lo8(8)
 668 024c CE9F      		mul r28,r30
 669 024e C001      		movw r24,r0
 670 0250 1124      		clr __zero_reg__
 671 0252 C091 0000 		lds r28,recv_msg_buff+4
 672 0256 C80F      		add r28,r24
 673 0258 D92F      		mov r29,r25
 674 025a D11D      		adc r29,__zero_reg__
 675 025c 24E0      		ldi r18,4
 676               		1:
 677 025e CC0F      		lsl r28
 678 0260 DD1F      		rol r29
 679 0262 2A95      		dec r18
 680 0264 01F4      		brne 1b
 681               	.LVL56:
 199:compcontrol.c **** 	  tx_msg_buff[1] = 0;
 682               		.loc 1 199 4 is_stmt 1 view .LVU187
 199:compcontrol.c **** 	  tx_msg_buff[1] = 0;
 683               		.loc 1 199 19 is_stmt 0 view .LVU188
 684 0266 89E1      		ldi r24,lo8(25)
 685 0268 8093 0000 		sts tx_msg_buff,r24
 200:compcontrol.c **** 	  tx_msg_buff[2] = PATT_MSG_LEN;
 686               		.loc 1 200 4 is_stmt 1 view .LVU189
 200:compcontrol.c **** 	  tx_msg_buff[2] = PATT_MSG_LEN;
 687               		.loc 1 200 19 is_stmt 0 view .LVU190
 688 026c 1092 0000 		sts tx_msg_buff+1,__zero_reg__
 201:compcontrol.c **** 
 689               		.loc 1 201 4 is_stmt 1 view .LVU191
 201:compcontrol.c **** 
 690               		.loc 1 201 19 is_stmt 0 view .LVU192
 691 0270 80E1      		ldi r24,lo8(16)
 692 0272 8093 0000 		sts tx_msg_buff+2,r24
 203:compcontrol.c **** 	    tx_msg_buff[3+i] = spieeprom_read(addr + i);
 693               		.loc 1 203 4 is_stmt 1 view .LVU193
 694               	.LVL57:
 203:compcontrol.c **** 	    tx_msg_buff[3+i] = spieeprom_read(addr + i);
 695               		.loc 1 203 4 is_stmt 0 view .LVU194
 696 0276 30E0      		ldi r19,lo8(tx_msg_buff+3)
 697 0278 E32E      		mov r14,r19
 698 027a 30E0      		ldi r19,hi8(tx_msg_buff+3)
 699 027c F32E      		mov r15,r19
 201:compcontrol.c **** 
 700               		.loc 1 201 19 view .LVU195
 701 027e 10E0      		ldi r17,0
 702 0280 00E0      		ldi r16,0
 703               	.LVL58:
 704               	.L59:
 204:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 705               		.loc 1 204 6 is_stmt 1 discriminator 3 view .LVU196
 204:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 706               		.loc 1 204 25 is_stmt 0 discriminator 3 view .LVU197
 707 0282 CE01      		movw r24,r28
 708 0284 800F      		add r24,r16
 709 0286 911F      		adc r25,r17
 710 0288 0E94 0000 		call spieeprom_read
 711               	.LVL59:
 204:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 712               		.loc 1 204 23 discriminator 3 view .LVU198
 713 028c F701      		movw r30,r14
 714 028e 8193      		st Z+,r24
 715 0290 7F01      		movw r14,r30
 716               	.LVL60:
 204:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 717               		.loc 1 204 23 discriminator 3 view .LVU199
 718 0292 0F5F      		subi r16,-1
 719 0294 1F4F      		sbci r17,-1
 720               	.LVL61:
 203:compcontrol.c **** 	    tx_msg_buff[3+i] = spieeprom_read(addr + i);
 721               		.loc 1 203 4 discriminator 3 view .LVU200
 722 0296 0031      		cpi r16,16
 723 0298 1105      		cpc r17,__zero_reg__
 724 029a 01F4      		brne .L59
 209:compcontrol.c ****   
 725               		.loc 1 209 4 is_stmt 1 view .LVU201
 209:compcontrol.c ****   
 726               		.loc 1 209 31 is_stmt 0 view .LVU202
 727 029c 63E1      		ldi r22,lo8(19)
 728 029e 70E0      		ldi r23,0
 729 02a0 80E0      		ldi r24,lo8(tx_msg_buff)
 730 02a2 90E0      		ldi r25,hi8(tx_msg_buff)
 731 02a4 0E94 0000 		call calc_CRC8
 732               	.LVL62:
 209:compcontrol.c ****   
 733               		.loc 1 209 29 view .LVU203
 734 02a8 8093 0000 		sts tx_msg_buff+19,r24
 211:compcontrol.c **** 	  break;
 735               		.loc 1 211 4 is_stmt 1 view .LVU204
 736 02ac 64E1      		ldi r22,lo8(20)
 737 02ae 70E0      		ldi r23,0
 738 02b0 80E0      		ldi r24,lo8(tx_msg_buff)
 739 02b2 90E0      		ldi r25,hi8(tx_msg_buff)
 740 02b4 0E94 0000 		call send_msg
 741               	.LVL63:
 212:compcontrol.c **** 	}
 742               		.loc 1 212 4 view .LVU205
 743 02b8 00C0      		rjmp .L56
 744               	.LVL64:
 745               	.L55:
 212:compcontrol.c **** 	}
 746               		.loc 1 212 4 is_stmt 0 view .LVU206
 747               	.LBE3:
 748               	.LBB4:
 216:compcontrol.c **** 	  uint16_t addr;
 749               		.loc 1 216 4 is_stmt 1 view .LVU207
 217:compcontrol.c **** 
 750               		.loc 1 217 4 view .LVU208
 220:compcontrol.c **** 	    send_status(0);
 751               		.loc 1 220 4 view .LVU209
 220:compcontrol.c **** 	    send_status(0);
 752               		.loc 1 220 7 is_stmt 0 view .LVU210
 753 02ba 9231      		cpi r25,lo8(18)
 754 02bc 01F0      		breq .+2
 755 02be 00C0      		rjmp .L51
 225:compcontrol.c **** 	  patt = recv_msg_buff[4];
 756               		.loc 1 225 4 is_stmt 1 view .LVU211
 757               	.LVL65:
 226:compcontrol.c **** 	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
 758               		.loc 1 226 4 view .LVU212
 227:compcontrol.c **** 	  /*
 759               		.loc 1 227 4 view .LVU213
 227:compcontrol.c **** 	  /*
 760               		.loc 1 227 40 is_stmt 0 view .LVU214
 761 02c0 C091 0000 		lds r28,recv_msg_buff+3
 762 02c4 F8E0      		ldi r31,lo8(8)
 763 02c6 CF9F      		mul r28,r31
 764 02c8 C001      		movw r24,r0
 765 02ca 1124      		clr __zero_reg__
 766 02cc C091 0000 		lds r28,recv_msg_buff+4
 767 02d0 C80F      		add r28,r24
 768 02d2 D92F      		mov r29,r25
 769 02d4 D11D      		adc r29,__zero_reg__
 770 02d6 84E0      		ldi r24,4
 771               		1:
 772 02d8 CC0F      		lsl r28
 773 02da DD1F      		rol r29
 774 02dc 8A95      		dec r24
 775 02de 01F4      		brne 1b
 776               	.LVL66:
 235:compcontrol.c **** 	    spieeprom_write(recv_msg_buff[5+i], addr + i);
 777               		.loc 1 235 4 is_stmt 1 view .LVU215
 235:compcontrol.c **** 	    spieeprom_write(recv_msg_buff[5+i], addr + i);
 778               		.loc 1 235 4 is_stmt 0 view .LVU216
 779 02e0 90E0      		ldi r25,lo8(recv_msg_buff+5)
 780 02e2 E92E      		mov r14,r25
 781 02e4 90E0      		ldi r25,hi8(recv_msg_buff+5)
 782 02e6 F92E      		mov r15,r25
 227:compcontrol.c **** 	  /*
 783               		.loc 1 227 9 view .LVU217
 784 02e8 10E0      		ldi r17,0
 785 02ea 00E0      		ldi r16,0
 786               	.LVL67:
 787               	.L60:
 236:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 788               		.loc 1 236 6 is_stmt 1 discriminator 3 view .LVU218
 789 02ec BE01      		movw r22,r28
 790 02ee 600F      		add r22,r16
 791 02f0 711F      		adc r23,r17
 792 02f2 F701      		movw r30,r14
 793 02f4 8191      		ld r24,Z+
 794 02f6 7F01      		movw r14,r30
 795 02f8 0E94 0000 		call spieeprom_write
 796               	.LVL68:
 236:compcontrol.c **** 	    //putstring(" 0x"); putnum_uh(tx_msg_buff[1+i]);
 797               		.loc 1 236 6 is_stmt 0 discriminator 3 view .LVU219
 798 02fc 0F5F      		subi r16,-1
 799 02fe 1F4F      		sbci r17,-1
 800               	.LVL69:
 235:compcontrol.c **** 	    spieeprom_write(recv_msg_buff[5+i], addr + i);
 801               		.loc 1 235 4 discriminator 3 view .LVU220
 802 0300 0031      		cpi r16,16
 803 0302 1105      		cpc r17,__zero_reg__
 804 0304 01F4      		brne .L60
 805               	.LVL70:
 806               	.L64:
 241:compcontrol.c **** 	  break;
 807               		.loc 1 241 4 is_stmt 1 view .LVU221
 808 0306 81E0      		ldi r24,lo8(1)
 809               	.L63:
 810               	.LBE4:
 246:compcontrol.c **** 	  break;
 811               		.loc 1 246 4 is_stmt 0 view .LVU222
 812 0308 0E94 0000 		call send_status
 813               	.LVL71:
 247:compcontrol.c **** 
 814               		.loc 1 247 4 is_stmt 1 view .LVU223
 815 030c 00C0      		rjmp .L56
 816               		.cfi_endproc
 817               	.LFE1:
 819               	.global	uart_timeout
 820               		.section .bss
 823               	uart_timeout:
 824 0000 0000      		.zero	2
 825               	.global	CTS
 826               		.data
 829               	CTS:
 830 0000 01        		.byte	1
 831               	.global	valid_msg_in_q
 832               		.section .bss
 835               	valid_msg_in_q:
 836 0002 00        		.zero	1
 837               	.global	recv_msg_i
 840               	recv_msg_i:
 841 0003 00        		.zero	1
 842               		.comm	tx_msg_buff,64,1
 843               		.comm	recv_msg_buff,64,1
 844               		.text
 845               	.Letext0:
 846               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 847               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 848               		.file 4 "switch.h"
 849               		.file 5 "led.h"
 850               		.file 6 "main.h"
 851               		.file 7 "eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 compcontrol.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:12     .text:0000000000000000 send_msg
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:73     .text:0000000000000028 do_computer_control
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:106    .text:000000000000003e calc_CRC8
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:237    .text:000000000000008c send_status
                            *COM*:0000000000000040 tx_msg_buff
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:296    .text:00000000000000bc send_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:360    .text:00000000000000f4 __vector_20
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:829    .data:0000000000000000 CTS
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:823    .bss:0000000000000000 uart_timeout
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:840    .bss:0000000000000003 recv_msg_i
                            *COM*:0000000000000040 recv_msg_buff
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc81I5mN.s:835    .bss:0000000000000002 valid_msg_in_q

UNDEFINED SYMBOLS
uart_putchar
read_switches
function
clear_all_leds
clock_leds
clear_bank_leds
putnum_uh
tempo
change_tempo
spieeprom_read
spieeprom_write
__do_copy_data
__do_clear_bss
