
x0xb0x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000038c8  0000395c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000196  0080015c  0080015c  000039b8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000039b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000039cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00003a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006bf5  00000000  00000000  00003cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001dca  00000000  00000000  0000a8bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009a36  00000000  00000000  0000c687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d84  00000000  00000000  000160c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000126a  00000000  00000000  00016e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000260d  00000000  00000000  000180ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0001a6bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
       2:	00 00       	nop
       4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
       6:	00 00       	nop
       8:	4f c0       	rjmp	.+158    	; 0xa8 <__bad_interrupt>
       a:	00 00       	nop
       c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4c c0       	rjmp	.+152    	; 0xaa <__vector_4>
      12:	00 00       	nop
      14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
      22:	00 00       	nop
      24:	75 c4       	rjmp	.+2282   	; 0x910 <__vector_9>
      26:	00 00       	nop
      28:	3f c0       	rjmp	.+126    	; 0xa8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3d c0       	rjmp	.+122    	; 0xa8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c0       	rjmp	.+118    	; 0xa8 <__bad_interrupt>
      32:	00 00       	nop
      34:	39 c0       	rjmp	.+114    	; 0xa8 <__bad_interrupt>
      36:	00 00       	nop
      38:	37 c0       	rjmp	.+110    	; 0xa8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	35 c0       	rjmp	.+106    	; 0xa8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9a c0       	rjmp	.+308    	; 0x176 <__vector_16>
      42:	00 00       	nop
      44:	31 c0       	rjmp	.+98     	; 0xa8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c0       	rjmp	.+94     	; 0xa8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c6 c5       	rjmp	.+2956   	; 0xbda <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__vector_20>
      54:	29 c0       	rjmp	.+82     	; 0xa8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c0       	rjmp	.+78     	; 0xa8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	25 c0       	rjmp	.+74     	; 0xa8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	23 c0       	rjmp	.+70     	; 0xa8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c0       	rjmp	.+66     	; 0xa8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c0       	rjmp	.+62     	; 0xa8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c0       	rjmp	.+58     	; 0xa8 <__bad_interrupt>
	...

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 ec       	ldi	r30, 0xC8	; 200
      84:	f8 e3       	ldi	r31, 0x38	; 56
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ac 35       	cpi	r26, 0x5C	; 92
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	ac e5       	ldi	r26, 0x5C	; 92
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a2 3f       	cpi	r26, 0xF2	; 242
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	50 d5       	rcall	.+2720   	; 0xb44 <main>
      a4:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <_exit>

000000a8 <__bad_interrupt>:
      a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <__vector_4>:
}


///////////////////////////////////// pin change interrupts
uint8_t last_tempo;
SIGNAL(SIG_PIN_CHANGE0) {
      aa:	1f 92       	push	r1
      ac:	1f b6       	in	r1, 0x3f	; 63
      ae:	1f 92       	push	r1
      b0:	11 24       	eor	r1, r1
      b2:	2f 93       	push	r18
      b4:	3f 93       	push	r19
      b6:	8f 93       	push	r24
      b8:	9f 93       	push	r25

  uint8_t curr_tempo;

  // tempo knob change!

  curr_tempo = TEMPO_PIN & 0x3; // pins A0 and A1
      ba:	89 b3       	in	r24, 0x19	; 25
      bc:	83 70       	andi	r24, 0x03	; 3

  if (curr_tempo != last_tempo) {
      be:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <last_tempo>
      c2:	98 17       	cp	r25, r24
      c4:	d1 f0       	breq	.+52     	; 0xfa <__vector_4+0x50>
    if ((last_tempo == 3) && (curr_tempo == 2)) {
      c6:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <newtempo>
      ca:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <newtempo+0x1>
      ce:	93 30       	cpi	r25, 0x03	; 3
      d0:	e1 f4       	brne	.+56     	; 0x10a <__vector_4+0x60>
      newtempo--;
      d2:	21 50       	subi	r18, 0x01	; 1
      d4:	31 09       	sbc	r19, r1
    if ((last_tempo == 3) && (curr_tempo == 2)) {
      d6:	82 30       	cpi	r24, 0x02	; 2
      d8:	f1 f0       	breq	.+60     	; 0x116 <__vector_4+0x6c>
    }
    if ((last_tempo == 2) && (curr_tempo == 3)) {
      newtempo++;
    }

    if (newtempo > MAX_TEMPO)
      da:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <newtempo>
      de:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <newtempo+0x1>
      e2:	2d 32       	cpi	r18, 0x2D	; 45
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	39 07       	cpc	r19, r25
      e8:	d8 f0       	brcs	.+54     	; 0x120 <__vector_4+0x76>
      newtempo = MAX_TEMPO;
      ea:	2c e2       	ldi	r18, 0x2C	; 44
      ec:	31 e0       	ldi	r19, 0x01	; 1
    if (newtempo < MIN_TEMPO)
      newtempo = MIN_TEMPO;
      ee:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <newtempo+0x1>
      f2:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <newtempo>
    last_tempo = curr_tempo;
      f6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <last_tempo>
  }
  
}
      fa:	9f 91       	pop	r25
      fc:	8f 91       	pop	r24
      fe:	3f 91       	pop	r19
     100:	2f 91       	pop	r18
     102:	1f 90       	pop	r1
     104:	1f be       	out	0x3f, r1	; 63
     106:	1f 90       	pop	r1
     108:	18 95       	reti
    if ((last_tempo == 2) && (curr_tempo == 3)) {
     10a:	92 30       	cpi	r25, 0x02	; 2
     10c:	31 f7       	brne	.-52     	; 0xda <__vector_4+0x30>
     10e:	83 30       	cpi	r24, 0x03	; 3
     110:	21 f7       	brne	.-56     	; 0xda <__vector_4+0x30>
      newtempo++;
     112:	2f 5f       	subi	r18, 0xFF	; 255
     114:	3f 4f       	sbci	r19, 0xFF	; 255
     116:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <newtempo+0x1>
     11a:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <newtempo>
     11e:	dd cf       	rjmp	.-70     	; 0xda <__vector_4+0x30>
    if (newtempo < MIN_TEMPO)
     120:	24 31       	cpi	r18, 0x14	; 20
     122:	31 05       	cpc	r19, r1
     124:	40 f7       	brcc	.-48     	; 0xf6 <__vector_4+0x4c>
      newtempo = MIN_TEMPO;
     126:	24 e1       	ldi	r18, 0x14	; 20
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	e1 cf       	rjmp	.-62     	; 0xee <__vector_4+0x44>

0000012c <init_timer0>:
  }
}

/********************* */
void init_timer0(void) {
  sbi(TIMSK, 0);          // timer0 overflow interrupt enable
     12c:	89 b7       	in	r24, 0x39	; 57
     12e:	81 60       	ori	r24, 0x01	; 1
     130:	89 bf       	out	0x39, r24	; 57
  TCCR0 = (1 << WGM01) | 0x3;            // compare mode, clk/64
     132:	8b e0       	ldi	r24, 0x0B	; 11
     134:	83 bf       	out	0x33, r24	; 51
  OCR0 = 250;             // 1KHz
     136:	8a ef       	ldi	r24, 0xFA	; 250
     138:	81 bf       	out	0x31, r24	; 49
}
     13a:	08 95       	ret

0000013c <init_timer2>:

void init_timer2(void) {
  sbi(TIMSK, 0);
     13c:	89 b7       	in	r24, 0x39	; 57
     13e:	81 60       	ori	r24, 0x01	; 1
     140:	89 bf       	out	0x39, r24	; 57
  TCCR2 = (1<<WGM21) | 0x3; // compare mode, clk/32
     142:	8b e0       	ldi	r24, 0x0B	; 11
     144:	87 bd       	out	0x27, r24	; 39
  OCR2 = 50;             // 10khz
     146:	82 e3       	ldi	r24, 0x32	; 50
     148:	82 bd       	out	0x22, r24	; 34

}
     14a:	08 95       	ret

0000014c <turn_on_tempo>:
  sbi(ETIMSK, TOIE3); // enable tempo interrupt
}

// reset the note counter. change the tempo back.
void turn_on_tempo() {
  sbi(ETIMSK, TOIE3);
     14c:	ed e7       	ldi	r30, 0x7D	; 125
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	84 60       	ori	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
}
     156:	08 95       	ret

00000158 <turn_off_tempo>:

void turn_off_tempo() {
  clear_led(LED_TEMPO);
     158:	85 e2       	ldi	r24, 0x25	; 37
     15a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
  cbi(ETIMSK, TOIE3);
     15e:	ed e7       	ldi	r30, 0x7D	; 125
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	8b 7f       	andi	r24, 0xFB	; 251
     166:	80 83       	st	Z, r24
}
     168:	08 95       	ret

0000016a <is_tempo_running>:

uint8_t is_tempo_running() {
  return (ETIMSK >> TOIE3) & 0x1;
     16a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
}
     16e:	82 fb       	bst	r24, 2
     170:	88 27       	eor	r24, r24
     172:	80 f9       	bld	r24, 0
     174:	08 95       	ret

00000176 <__vector_16>:
SIGNAL(SIG_OUTPUT_COMPARE0) {
     176:	1f 92       	push	r1
     178:	0f 92       	push	r0
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	0f 92       	push	r0
     17e:	11 24       	eor	r1, r1
     180:	2f 93       	push	r18
     182:	3f 93       	push	r19
     184:	4f 93       	push	r20
     186:	5f 93       	push	r21
     188:	6f 93       	push	r22
     18a:	7f 93       	push	r23
     18c:	8f 93       	push	r24
     18e:	9f 93       	push	r25
     190:	af 93       	push	r26
     192:	bf 93       	push	r27
     194:	ef 93       	push	r30
     196:	ff 93       	push	r31
  if (debounce_timer != 0xFF) 
     198:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <debounce_timer>
     19c:	8f 3f       	cpi	r24, 0xFF	; 255
     19e:	29 f0       	breq	.+10     	; 0x1aa <__vector_16+0x34>
    debounce_timer++;
     1a0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <debounce_timer>
     1a4:	8f 5f       	subi	r24, 0xFF	; 255
     1a6:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <debounce_timer>
  if (tap_tempo_timer != 0xFFFF)
     1aa:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tap_tempo_timer>
     1ae:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tap_tempo_timer+0x1>
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	49 f0       	breq	.+18     	; 0x1c8 <__vector_16+0x52>
    tap_tempo_timer++;
     1b6:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tap_tempo_timer>
     1ba:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tap_tempo_timer+0x1>
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <tap_tempo_timer+0x1>
     1c4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <tap_tempo_timer>
  if (uart_timeout != 0xFFFF)
     1c8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <uart_timeout>
     1cc:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <uart_timeout+0x1>
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	49 f0       	breq	.+18     	; 0x1e6 <__vector_16+0x70>
    uart_timeout++;
     1d4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <uart_timeout>
     1d8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <uart_timeout+0x1>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <uart_timeout+0x1>
     1e2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <uart_timeout>
  if ((sync!=DIN_SYNC) && (dinsync_clock_timeout != 0)) {
     1e6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     1ea:	81 30       	cpi	r24, 0x01	; 1
     1ec:	59 f4       	brne	.+22     	; 0x204 <__vector_16+0x8e>
    curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
     1ee:	80 b3       	in	r24, 0x10	; 16
     1f0:	82 95       	swap	r24
     1f2:	81 70       	andi	r24, 0x01	; 1
    if (!last_dinsync_c && curr_dinsync_c) {
     1f4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <last_dinsync_c>
     1f8:	99 23       	and	r25, r25
     1fa:	09 f4       	brne	.+2      	; 0x1fe <__vector_16+0x88>
     1fc:	3e c0       	rjmp	.+124    	; 0x27a <__vector_16+0x104>
      last_dinsync_c = curr_dinsync_c;      
     1fe:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <last_dinsync_c>
     202:	1a c0       	rjmp	.+52     	; 0x238 <__vector_16+0xc2>
  if ((sync!=DIN_SYNC) && (dinsync_clock_timeout != 0)) {
     204:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <dinsync_clock_timeout>
     208:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <dinsync_clock_timeout+0x1>
     20c:	89 2b       	or	r24, r25
     20e:	a1 f0       	breq	.+40     	; 0x238 <__vector_16+0xc2>
    dinsync_clock_timeout--;
     210:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <dinsync_clock_timeout>
     214:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <dinsync_clock_timeout+0x1>
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <dinsync_clock_timeout+0x1>
     21e:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <dinsync_clock_timeout>
    if (dinsync_clock_timeout == 0) {
     222:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <dinsync_clock_timeout>
     226:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <dinsync_clock_timeout+0x1>
     22a:	89 2b       	or	r24, r25
     22c:	29 f4       	brne	.+10     	; 0x238 <__vector_16+0xc2>
      cbi(DINSYNC_PORT, DINSYNC_CLK);    // lower the clock
     22e:	94 98       	cbi	0x12, 4	; 18
  if (sync == DIN_SYNC) {
     230:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     234:	81 30       	cpi	r24, 0x01	; 1
     236:	d9 f2       	breq	.-74     	; 0x1ee <__vector_16+0x78>
  if (! is_tempo_running()) {
     238:	98 df       	rcall	.-208    	; 0x16a <is_tempo_running>
     23a:	81 11       	cpse	r24, r1
     23c:	0d c0       	rjmp	.+26     	; 0x258 <__vector_16+0xe2>
    if (blinktimer == 200) {
     23e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     242:	88 3c       	cpi	r24, 0xC8	; 200
     244:	51 f5       	brne	.+84     	; 0x29a <__vector_16+0x124>
      blinktimer = 0;
     246:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
      blink_leds_off();
     24a:	0e 94 ae 0a 	call	0x155c	; 0x155c <blink_leds_off>
    blinktimer++;
     24e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
}
     258:	ff 91       	pop	r31
     25a:	ef 91       	pop	r30
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	0f 90       	pop	r0
     272:	0f be       	out	0x3f, r0	; 63
     274:	0f 90       	pop	r0
     276:	1f 90       	pop	r1
     278:	18 95       	reti
    if (!last_dinsync_c && curr_dinsync_c) {
     27a:	88 23       	and	r24, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <__vector_16+0x10a>
     27e:	bf cf       	rjmp	.-130    	; 0x1fe <__vector_16+0x88>
      dinsync_clocked++;   // notify a clock was recv'd
     280:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <dinsync_clocked>
     284:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <dinsync_clocked+0x1>
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <dinsync_clocked+0x1>
     28e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <dinsync_clocked>
      midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
     292:	88 ef       	ldi	r24, 0xF8	; 248
     294:	1f d5       	rcall	.+2622   	; 0xcd4 <midi_putchar>
      last_dinsync_c = curr_dinsync_c;
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	b2 cf       	rjmp	.-156    	; 0x1fe <__vector_16+0x88>
    } else if (blinktimer == 100) {
     29a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end>
     29e:	84 36       	cpi	r24, 0x64	; 100
     2a0:	b1 f6       	brne	.-84     	; 0x24e <__vector_16+0xd8>
      blink_leds_on();
     2a2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <blink_leds_on>
     2a6:	d3 cf       	rjmp	.-90     	; 0x24e <__vector_16+0xd8>

000002a8 <dispatch_note_off>:
  TCNT3 = timer3_init;
}


void dispatch_note_off(uint8_t pitch_shift)
{
     2a8:	cf 93       	push	r28
     2aa:	c8 2f       	mov	r28, r24
  if (curr_note != 0xFF) {
     2ac:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <curr_note>
     2b0:	9f 3f       	cpi	r25, 0xFF	; 255
     2b2:	51 f0       	breq	.+20     	; 0x2c8 <dispatch_note_off+0x20>
	if (((curr_note>>7) & 0x1) | all_slide) { 
     2b4:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <all_slide>
     2b8:	99 1f       	adc	r25, r25
     2ba:	99 27       	eor	r25, r25
     2bc:	99 1f       	adc	r25, r25
     2be:	98 2b       	or	r25, r24
     2c0:	b1 f0       	breq	.+44     	; 0x2ee <dispatch_note_off+0x46>
    // check if the note had slide on it 
	  note_off(1); // slide
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
	    midi_send_note_off(curr_note + pitch_shift);
	  else
	    midi_send_note_off(curr_note);
	}
  }
	if ( (prev_note != 0xFF) &&
     2c8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <prev_note>
     2cc:	8f 3f       	cpi	r24, 0xFF	; 255
     2ce:	69 f0       	breq	.+26     	; 0x2ea <dispatch_note_off+0x42>
	     (((prev_note>>7) & 0x1) | all_slide ) ) {
     2d0:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <all_slide>
     2d4:	98 2f       	mov	r25, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	99 27       	eor	r25, r25
     2da:	99 1f       	adc	r25, r25
	if ( (prev_note != 0xFF) &&
     2dc:	92 2b       	or	r25, r18
     2de:	29 f0       	breq	.+10     	; 0x2ea <dispatch_note_off+0x42>
	  if ((prev_note & 0x3F) != 0)  // not rest
     2e0:	98 2f       	mov	r25, r24
     2e2:	9f 73       	andi	r25, 0x3F	; 63
	    midi_send_note_off(prev_note + pitch_shift);
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <dispatch_note_off+0x40>
	  else
	    midi_send_note_off(prev_note);
     2e6:	8c 0f       	add	r24, r28
     2e8:	12 d5       	rcall	.+2596   	; 0xd0e <midi_send_note_off>
	}
  
}
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret
	  note_off(0); // no slide
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
	  if ((curr_note & 0x3F) != 0)  // not rest
     2f4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     2f8:	98 2f       	mov	r25, r24
     2fa:	9f 73       	andi	r25, 0x3F	; 63
	    midi_send_note_off(curr_note + pitch_shift);
     2fc:	09 f0       	breq	.+2      	; 0x300 <dispatch_note_off+0x58>
	    midi_send_note_off(curr_note);
     2fe:	8c 0f       	add	r24, r28
     300:	06 d5       	rcall	.+2572   	; 0xd0e <midi_send_note_off>
     302:	e2 cf       	rjmp	.-60     	; 0x2c8 <dispatch_note_off+0x20>

00000304 <dispatch_note_on>:

void dispatch_note_on(uint8_t pitch_shift)
{
     304:	cf 93       	push	r28
     306:	c8 2f       	mov	r28, r24
    uint8_t ps = pitch_shift;
	
	if (all_rest)
     308:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <all_rest>
     30c:	88 23       	and	r24, r24
     30e:	29 f0       	breq	.+10     	; 0x31a <dispatch_note_on+0x16>
	  curr_note &= 0xC0;
     310:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     314:	80 7c       	andi	r24, 0xC0	; 192
     316:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>


	if ((curr_note & 0x3F) == 0) ps = 0;
     31a:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <curr_note>
     31e:	84 2f       	mov	r24, r20
     320:	8f 73       	andi	r24, 0x3F	; 63
     322:	09 f4       	brne	.+2      	; 0x326 <dispatch_note_on+0x22>
     324:	c0 e0       	ldi	r28, 0x00	; 0

	  note_on((curr_note & 0x3F) + ps,
		      (prev_note >> 7) | all_slide,  // slide is from prev note!
		      ((curr_note>>6) & 0x1) | all_accent);       // accent
     326:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <all_accent>
	  note_on((curr_note & 0x3F) + ps,
     32a:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <all_slide>
		      ((curr_note>>6) & 0x1) | all_accent);       // accent
     32e:	46 fb       	bst	r20, 6
     330:	44 27       	eor	r20, r20
     332:	40 f9       	bld	r20, 0
     334:	43 2b       	or	r20, r19
	  note_on((curr_note & 0x3F) + ps,
     336:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <prev_note>
     33a:	66 1f       	adc	r22, r22
     33c:	66 27       	eor	r22, r22
     33e:	66 1f       	adc	r22, r22
     340:	62 2b       	or	r22, r18
     342:	8c 0f       	add	r24, r28
     344:	0e 94 b3 0c 	call	0x1966	; 0x1966 <note_on>
	  midi_send_note_on(curr_note + ps);
     348:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     34c:	8c 0f       	add	r24, r28
     34e:	c8 d4       	rcall	.+2448   	; 0xce0 <midi_send_note_on>
} 
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <load_next_chain>:

void load_next_chain(uint8_t reset) {
     354:	cf 93       	push	r28
     356:	c8 2f       	mov	r28, r24
  uint8_t i;
	  if (!chains_equiv(next_chain, curr_chain) ||
     358:	6f ea       	ldi	r22, 0xAF	; 175
     35a:	72 e0       	ldi	r23, 0x02	; 2
     35c:	8f e8       	ldi	r24, 0x8F	; 143
     35e:	92 e0       	ldi	r25, 0x02	; 2
     360:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <chains_equiv>
     364:	88 23       	and	r24, r24
     366:	31 f0       	breq	.+12     	; 0x374 <load_next_chain+0x20>
	      (curr_bank != next_bank)) {
     368:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <curr_bank>
     36c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <next_bank>
	  if (!chains_equiv(next_chain, curr_chain) ||
     370:	98 17       	cp	r25, r24
     372:	d1 f0       	breq	.+52     	; 0x3a8 <load_next_chain+0x54>
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	20 e0       	ldi	r18, 0x00	; 0

	    // copy next pattern chain into current pattern chain
	    for (i=0; i<MAX_CHAIN; i++) 
	      curr_chain[i] = next_chain[i];
     378:	f9 01       	movw	r30, r18
     37a:	e1 57       	subi	r30, 0x71	; 113
     37c:	fd 4f       	sbci	r31, 0xFD	; 253
     37e:	80 81       	ld	r24, Z
     380:	f9 01       	movw	r30, r18
     382:	e1 55       	subi	r30, 0x51	; 81
     384:	fd 4f       	sbci	r31, 0xFD	; 253
     386:	80 83       	st	Z, r24
     388:	2f 5f       	subi	r18, 0xFF	; 255
     38a:	3f 4f       	sbci	r19, 0xFF	; 255
	    for (i=0; i<MAX_CHAIN; i++) 
     38c:	20 32       	cpi	r18, 0x20	; 32
     38e:	31 05       	cpc	r19, r1
     390:	99 f7       	brne	.-26     	; 0x378 <load_next_chain+0x24>
	    
	    if (reset) curr_chain_index = 0;  // reset to beginning
     392:	c1 11       	cpse	r28, r1
     394:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <curr_chain_index>

	    // reset the pitch
	    next_pitch_shift = curr_pitch_shift = 0;
     398:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <curr_pitch_shift>
     39c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <next_pitch_shift>

	    clear_notekey_leds();
     3a0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <clear_notekey_leds>
	    clear_blinking_leds();
     3a4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
	  }
	  
	  curr_bank = next_bank;
     3a8:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <next_bank>
     3ac:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <curr_bank>
	  curr_pitch_shift = next_pitch_shift;
     3b0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
     3b4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
}
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <random>:
*/


uint8_t random(void) {
  rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2))
	       & 00000001)
     3bc:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <rand>
     3c0:	89 2f       	mov	r24, r25
     3c2:	88 1f       	adc	r24, r24
     3c4:	88 27       	eor	r24, r24
     3c6:	88 1f       	adc	r24, r24
     3c8:	29 2f       	mov	r18, r25
     3ca:	22 95       	swap	r18
     3cc:	26 95       	lsr	r18
     3ce:	26 95       	lsr	r18
     3d0:	23 70       	andi	r18, 0x03	; 3
     3d2:	82 27       	eor	r24, r18
     3d4:	29 2f       	mov	r18, r25
     3d6:	22 95       	swap	r18
     3d8:	2f 70       	andi	r18, 0x0F	; 15
     3da:	82 27       	eor	r24, r18
     3dc:	29 2f       	mov	r18, r25
     3de:	26 95       	lsr	r18
     3e0:	26 95       	lsr	r18
     3e2:	82 27       	eor	r24, r18
     3e4:	81 70       	andi	r24, 0x01	; 1
	      | (rand << 1)); /*Or with the register shifted right.*/
     3e6:	99 0f       	add	r25, r25
     3e8:	89 2b       	or	r24, r25
  rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2))
     3ea:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <rand>
  return rand; /*Return the first bit.*/
}
     3ee:	08 95       	ret

000003f0 <do_tempo>:
void do_tempo(void) {
     3f0:	cf 93       	push	r28
  uint8_t curr_function = function;
     3f2:	c0 91 c6 01 	lds	r28, 0x01C6	; 0x8001c6 <function>
  uint8_t division_factor = PATT_LENGTH/4;
     3f6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <PATT_LENGTH>
     3fa:	66 95       	lsr	r22
     3fc:	66 95       	lsr	r22
  cli();
     3fe:	f8 94       	cli
    if (dinsync_counter >= DINSYNC_PPQ/division_factor) {
     400:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <dinsync_counter>
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	88 e1       	ldi	r24, 0x18	; 24
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <__divmodhi4>
     40e:	26 17       	cp	r18, r22
     410:	17 06       	cpc	r1, r23
     412:	9c f0       	brlt	.+38     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
      dinsync_counter = 0;
     414:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <dinsync_counter>
	  if (swing_it) swing_time = new_swing_time;
     418:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <swing_it>
     41c:	99 23       	and	r25, r25
     41e:	21 f0       	breq	.+8      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     420:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <new_swing_time>
     424:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <swing_time>
	  if (!(note_counter & 0x1)) swing_it = !swing_it;
     428:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
     42c:	80 fd       	sbrc	r24, 0
     42e:	05 c0       	rjmp	.+10     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	91 11       	cpse	r25, r1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <swing_it>
	if ((sync != MIDI_SYNC) && (sync != DIN_SYNC)) {
     43a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     43e:	81 50       	subi	r24, 0x01	; 1
     440:	82 30       	cpi	r24, 0x02	; 2
     442:	28 f0       	brcs	.+10     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
    if (dinsync_counter & 0x1)
     444:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <dinsync_counter>
     448:	80 ff       	sbrs	r24, 0
     44a:	22 c0       	rjmp	.+68     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
      cbi(DINSYNC_PORT, DINSYNC_CLK);
     44c:	94 98       	cbi	0x12, 4	; 18
	if ((swing_it && dinsync_counter != swing_time) ||
     44e:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <swing_it>
     452:	88 23       	and	r24, r24
     454:	09 f1       	breq	.+66     	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     456:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <dinsync_counter>
     45a:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <swing_time>
     45e:	98 13       	cpse	r25, r24
     460:	1f c0       	rjmp	.+62     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
	dinsync_counter++;
     462:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <dinsync_counter>
     466:	8f 5f       	subi	r24, 0xFF	; 255
     468:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <dinsync_counter>
skipit = !skipit;
     46c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <skipit>
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	81 11       	cpse	r24, r1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <skipit>
if ((!runhalf && !onemore) || !skipit){
     47a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <runhalf>
     47e:	91 11       	cpse	r25, r1
     480:	17 c0       	rjmp	.+46     	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
     482:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <onemore>
     486:	99 23       	and	r25, r25
     488:	b1 f0       	breq	.+44     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     48a:	81 11       	cpse	r24, r1
     48c:	14 c0       	rjmp	.+40     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
      sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
     48e:	3d c2       	rjmp	.+1146   	; 0x90a <__stack+0x40b>
      midi_putchar(MIDI_CLOCK);
     490:	94 9a       	sbi	0x12, 4	; 18
     492:	88 ef       	ldi	r24, 0xF8	; 248
     494:	1f d4       	rcall	.+2110   	; 0xcd4 <midi_putchar>
     496:	db cf       	rjmp	.-74     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
		(!swing_it && dinsync_counter != 0)){
     498:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <dinsync_counter>
     49c:	88 23       	and	r24, r24
     49e:	09 f3       	breq	.-62     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
	    dinsync_counter++;
     4a0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <dinsync_counter>
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <dinsync_counter>
  sei();
     4aa:	78 94       	sei
}
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret
if ((!runhalf && !onemore) || !skipit){
     4b0:	88 23       	and	r24, r24
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     4b4:	25 c2       	rjmp	.+1098   	; 0x900 <__stack+0x401>
  if( note_counter >= 8 )
     4b6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
     4ba:	88 30       	cpi	r24, 0x08	; 8
     4bc:	10 f0       	brcs	.+4      	; 0x4c2 <__FUSE_REGION_LENGTH__+0xc2>
    note_counter = 0;
     4be:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <note_counter>
  if (note_counter & 0x1) {       // sixteenth notes
     4c2:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
     4c6:	c1 50       	subi	r28, 0x01	; 1
     4c8:	80 ff       	sbrs	r24, 0
     4ca:	74 c1       	rjmp	.+744    	; 0x7b4 <__stack+0x2b5>
    switch(curr_function) {
     4cc:	cf 30       	cpi	r28, 0x0F	; 15
     4ce:	60 f4       	brcc	.+24     	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     4d0:	ec 2f       	mov	r30, r28
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	ea 5c       	subi	r30, 0xCA	; 202
     4d6:	f3 4e       	sbci	r31, 0xE3	; 227
     4d8:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__tablejump2__>
      note_off(0);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
      midi_send_note_off(curr_note);
     4e2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
  if (note_counter < 4) {
     4e6:	13 d4       	rcall	.+2086   	; 0xd0e <midi_send_note_off>
     4e8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
     4ec:	84 30       	cpi	r24, 0x04	; 4
     4ee:	08 f0       	brcs	.+2      	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
    set_led(LED_TEMPO);
     4f0:	fe c1       	rjmp	.+1020   	; 0x8ee <__stack+0x3ef>
     4f2:	85 e2       	ldi	r24, 0x25	; 37
     4f4:	ad d6       	rcall	.+3418   	; 0x1250 <set_led>
    blink_leds_off();
     4f6:	0e 94 ae 0a 	call	0x155c	; 0x155c <blink_leds_off>
  clock_leds();
     4fa:	0e 94 8c 0a 	call	0x1518	; 0x1518 <clock_leds>
  note_counter++;
     4fe:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
     502:	8f 5f       	subi	r24, 0xFF	; 255
     504:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <note_counter>
     508:	d0 cf       	rjmp	.-96     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
      if (play_loaded_pattern || play_loaded_track) {
     50a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <play_loaded_pattern>
     50e:	81 11       	cpse	r24, r1
     510:	04 c0       	rjmp	.+8      	; 0x51a <__stack+0x1b>
     512:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <play_loaded_track>
     516:	88 23       	and	r24, r24
     518:	61 f0       	breq	.+24     	; 0x532 <__stack+0x33>
	if (curr_note != 0xFF) {
     51a:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <curr_note>
     51e:	9f 3f       	cpi	r25, 0xFF	; 255
     520:	41 f0       	breq	.+16     	; 0x532 <__stack+0x33>
	  note_off(((curr_note >> 7) & 0x1)  | all_slide);        // slide
     522:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <all_slide>
     526:	99 1f       	adc	r25, r25
     528:	99 27       	eor	r25, r25
     52a:	99 1f       	adc	r25, r25
     52c:	89 2b       	or	r24, r25
     52e:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
      if (play_loaded_track) {
     532:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <play_loaded_track>
     536:	88 23       	and	r24, r24
     538:	b9 f2       	breq	.-82     	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	if ((curr_pattern_index >= PATT_LENGTH) ||
     53a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <curr_pattern_index>
     53e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
     542:	98 17       	cp	r25, r24
     544:	40 f4       	brcc	.+16     	; 0x556 <__stack+0x57>
	    (pattern_buff[curr_pattern_index] == 0xFF)) {
     546:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	e1 58       	subi	r30, 0x81	; 129
     54e:	fd 4f       	sbci	r31, 0xFD	; 253
     550:	80 81       	ld	r24, Z
	if ((curr_pattern_index >= PATT_LENGTH) ||
     552:	8f 3f       	cpi	r24, 0xFF	; 255
     554:	49 f6       	brne	.-110    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	  curr_pattern_index = 0;          // start next pattern in chain
     556:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
	  curr_track_index++;      // go to next patt in chain
     55a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
     55e:	8f 5f       	subi	r24, 0xFF	; 255
     560:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <curr_track_index>
	  if ((curr_track_index >= TRACK_SIZE) ||
     564:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
     568:	80 31       	cpi	r24, 0x10	; 16
     56a:	58 f4       	brcc	.+22     	; 0x582 <__stack+0x83>
	      (track_buff[curr_track_index] == END_OF_TRACK)) {
     56c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	ef 5a       	subi	r30, 0xAF	; 175
     578:	fd 4f       	sbci	r31, 0xFD	; 253
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
	  if ((curr_track_index >= TRACK_SIZE) ||
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	11 f4       	brne	.+4      	; 0x586 <__stack+0x87>
	    curr_track_index = 0;
     582:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
	  curr_patt = track_buff[curr_track_index];
     586:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	ef 5a       	subi	r30, 0xAF	; 175
     592:	fd 4f       	sbci	r31, 0xFD	; 253
     594:	80 81       	ld	r24, Z
     596:	91 81       	ldd	r25, Z+1	; 0x01
     598:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
     59c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
	  if (curr_patt == END_OF_TRACK) {
     5a0:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
     5a4:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	21 f4       	brne	.+8      	; 0x5b4 <__stack+0xb5>
	    pattern_buff[0] = END_OF_PATTERN;
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <pattern_buff>
	    curr_pitch_shift = load_curr_patt();
     5b2:	9a cf       	rjmp	.-204    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     5b4:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <load_curr_patt>
     5b8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
	    clear_bank_leds();
     5bc:	b5 d6       	rcall	.+3434   	; 0x1328 <clear_bank_leds>
      if (play_loaded_pattern) {
     5be:	94 cf       	rjmp	.-216    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     5c0:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <play_loaded_pattern>
     5c4:	88 23       	and	r24, r24
     5c6:	09 f4       	brne	.+2      	; 0x5ca <__stack+0xcb>
		dispatch_note_off(curr_pitch_shift);
     5c8:	8f cf       	rjmp	.-226    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     5ca:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
     5ce:	6c de       	rcall	.-808    	; 0x2a8 <dispatch_note_off>
	if ((curr_pattern_index >= PATT_LENGTH) || 
     5d0:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <curr_pattern_index>
     5d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
     5d8:	98 17       	cp	r25, r24
     5da:	48 f4       	brcc	.+18     	; 0x5ee <__stack+0xef>
	    (pattern_buff[curr_pattern_index] == 0xFF)) {
     5dc:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	e1 58       	subi	r30, 0x81	; 129
     5e4:	fd 4f       	sbci	r31, 0xFD	; 253
     5e6:	80 81       	ld	r24, Z
	if ((curr_pattern_index >= PATT_LENGTH) || 
     5e8:	8f 3f       	cpi	r24, 0xFF	; 255
     5ea:	09 f0       	breq	.+2      	; 0x5ee <__stack+0xef>
     5ec:	7d cf       	rjmp	.-262    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	  curr_pattern_index = 0;
     5ee:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
      if (playing) {
     5f2:	7a cf       	rjmp	.-268    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     5f4:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
     5f8:	88 23       	and	r24, r24
     5fa:	09 f4       	brne	.+2      	; 0x5fe <__stack+0xff>
	    dispatch_note_off(curr_pitch_shift);
     5fc:	75 cf       	rjmp	.-278    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     5fe:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
     602:	52 de       	rcall	.-860    	; 0x2a8 <dispatch_note_off>
	  if (loop && curr_pattern_index == loop_start-1) {
     604:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <loop>
     608:	88 23       	and	r24, r24
     60a:	79 f1       	breq	.+94     	; 0x66a <__stack+0x16b>
     60c:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <curr_pattern_index>
     610:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <loop_start>
     614:	81 50       	subi	r24, 0x01	; 1
     616:	99 0b       	sbc	r25, r25
     618:	28 17       	cp	r18, r24
     61a:	19 06       	cpc	r1, r25
     61c:	31 f5       	brne	.+76     	; 0x66a <__stack+0x16b>
	    curr_pitch_shift = next_pitch_shift;
     61e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
     622:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
if (runhalf != eighths)
     626:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <eighths>
     62a:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <runhalf>
     62e:	98 17       	cp	r25, r24
     630:	49 f0       	breq	.+18     	; 0x644 <__stack+0x145>
runhalf = eighths;
     632:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <runhalf>
skipit = runhalf;
     636:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <skipit>
onemore = !skipit;
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	81 11       	cpse	r24, r1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <onemore>
		if (!chains_equiv(next_chain, curr_chain))	{
     644:	6f ea       	ldi	r22, 0xAF	; 175
     646:	72 e0       	ldi	r23, 0x02	; 2
     648:	8f e8       	ldi	r24, 0x8F	; 143
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <chains_equiv>
     650:	81 11       	cpse	r24, r1
     652:	0b c0       	rjmp	.+22     	; 0x66a <__stack+0x16b>
		  curr_pattern_index = PATT_LENGTH;
     654:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
     658:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
		  loop_start = 1;
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <loop_start>
		  loop_end = PATT_LENGTH;
     662:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <loop_end>
		  loop = FALSE;
     666:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <loop>
	if ((curr_pattern_index >= PATT_LENGTH) ||
     66a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <curr_pattern_index>
     66e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
     672:	98 17       	cp	r25, r24
     674:	48 f4       	brcc	.+18     	; 0x688 <__stack+0x189>
	    (pattern_buff[curr_pattern_index] == 0xFF)) {
     676:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	e1 58       	subi	r30, 0x81	; 129
     67e:	fd 4f       	sbci	r31, 0xFD	; 253
     680:	80 81       	ld	r24, Z
	if ((curr_pattern_index >= PATT_LENGTH) ||
     682:	8f 3f       	cpi	r24, 0xFF	; 255
     684:	09 f0       	breq	.+2      	; 0x688 <__stack+0x189>
     686:	30 cf       	rjmp	.-416    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
if (runhalf != eighths)
     688:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <eighths>
     68c:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <runhalf>
     690:	98 17       	cp	r25, r24
     692:	49 f0       	breq	.+18     	; 0x6a6 <__stack+0x1a7>
runhalf = eighths;
     694:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <runhalf>
skipit = runhalf;
     698:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <skipit>
onemore = !skipit;
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	81 11       	cpse	r24, r1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <onemore>
	  curr_pattern_index = 0;          // start next pattern in chain
     6a6:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
	  curr_chain_index++;      // go to next patt in chain
     6aa:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <curr_chain_index>
     6ae:	8f 5f       	subi	r24, 0xFF	; 255
     6b0:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <curr_chain_index>
	  if ((curr_chain_index >= MAX_CHAIN) ||
     6b4:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <curr_chain_index>
     6b8:	80 32       	cpi	r24, 0x20	; 32
     6ba:	40 f4       	brcc	.+16     	; 0x6cc <__stack+0x1cd>
	      (curr_chain[curr_chain_index] == 0xFF)) {
     6bc:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <curr_chain_index>
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	e1 55       	subi	r30, 0x51	; 81
     6c4:	fd 4f       	sbci	r31, 0xFD	; 253
	  if ((curr_chain_index >= MAX_CHAIN) ||
     6c6:	80 81       	ld	r24, Z
     6c8:	8f 3f       	cpi	r24, 0xFF	; 255
	    curr_chain_index = 0;
     6ca:	11 f4       	brne	.+4      	; 0x6d0 <__stack+0x1d1>
     6cc:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <curr_chain_index>
	  load_next_chain(TRUE);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	40 de       	rcall	.-896    	; 0x354 <load_next_chain>
	  load_pattern(curr_bank, curr_chain[curr_chain_index]);
     6d4:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <curr_chain_index>
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	e1 55       	subi	r30, 0x51	; 81
     6dc:	fd 4f       	sbci	r31, 0xFD	; 253
     6de:	60 81       	ld	r22, Z
     6e0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <curr_bank>
     6e4:	0e 94 b7 11 	call	0x236e	; 0x236e <load_pattern>
     6e8:	ff ce       	rjmp	.-514    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
      if (playing) {
     6ea:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
     6ee:	88 23       	and	r24, r24
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <__stack+0x1f5>
	    dispatch_note_off(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
     6f2:	fa ce       	rjmp	.-524    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     6f4:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
     6f8:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
     6fc:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <get_pitchshift_from_patt>
     700:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <curr_pitch_shift>
     704:	89 0f       	add	r24, r25
     706:	d0 dd       	rcall	.-1120   	; 0x2a8 <dispatch_note_off>
	if ((curr_pattern_index >= PATT_LENGTH) || 
     708:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <curr_pattern_index>
     70c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
     710:	98 17       	cp	r25, r24
     712:	48 f4       	brcc	.+18     	; 0x726 <__stack+0x227>
	    (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
     714:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	e1 58       	subi	r30, 0x81	; 129
     71c:	fd 4f       	sbci	r31, 0xFD	; 253
     71e:	80 81       	ld	r24, Z
	if ((curr_pattern_index >= PATT_LENGTH) || 
     720:	8f 3f       	cpi	r24, 0xFF	; 255
     722:	09 f0       	breq	.+2      	; 0x726 <__stack+0x227>
     724:	e1 ce       	rjmp	.-574    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	  curr_pattern_index = 0;          // start next pattern in track
     726:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
	  curr_track_index++;      // go to next patt in chain
     72a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <curr_track_index>
	  if ((curr_track_index >= TRACK_SIZE) ||
     734:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
     738:	80 31       	cpi	r24, 0x10	; 16
     73a:	58 f4       	brcc	.+22     	; 0x752 <__stack+0x253>
	      (track_buff[curr_track_index] == END_OF_TRACK)) {
     73c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ef 5a       	subi	r30, 0xAF	; 175
     748:	fd 4f       	sbci	r31, 0xFD	; 253
     74a:	80 81       	ld	r24, Z
     74c:	91 81       	ldd	r25, Z+1	; 0x01
	  if ((curr_track_index >= TRACK_SIZE) ||
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	09 f5       	brne	.+66     	; 0x794 <__stack+0x295>
	    curr_track_index = 0;
     752:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
	    curr_chain_index++;      // go to next track in chain
     756:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <curr_chain_index>
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <curr_chain_index>
	    if ((curr_chain_index >= MAX_CHAIN) ||
     760:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <curr_chain_index>
     764:	80 32       	cpi	r24, 0x20	; 32
		(curr_chain[curr_chain_index] == 0xFF)) {
     766:	40 f4       	brcc	.+16     	; 0x778 <__stack+0x279>
     768:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <curr_chain_index>
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	e1 55       	subi	r30, 0x51	; 81
     770:	fd 4f       	sbci	r31, 0xFD	; 253
	    if ((curr_chain_index >= MAX_CHAIN) ||
     772:	80 81       	ld	r24, Z
     774:	8f 3f       	cpi	r24, 0xFF	; 255
	      curr_chain_index = 0;
     776:	21 f4       	brne	.+8      	; 0x780 <__stack+0x281>
     778:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <curr_chain_index>
		  load_next_chain(FALSE);
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	ea dd       	rcall	.-1068   	; 0x354 <load_next_chain>
	    load_track(curr_bank, curr_chain[curr_chain_index]);
     780:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <curr_chain_index>
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	e1 55       	subi	r30, 0x51	; 81
     788:	fd 4f       	sbci	r31, 0xFD	; 253
     78a:	60 81       	ld	r22, Z
     78c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <curr_bank>
     790:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <load_track>
	  curr_patt = track_buff[curr_track_index];
     794:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	ef 5a       	subi	r30, 0xAF	; 175
     7a0:	fd 4f       	sbci	r31, 0xFD	; 253
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
     7aa:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
	  load_curr_patt();
     7ae:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <load_curr_patt>
     7b2:	9a ce       	rjmp	.-716    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
    prev_note = curr_note;
     7b4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     7b8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <prev_note>
    switch(curr_function) {
     7bc:	cf 30       	cpi	r28, 0x0F	; 15
     7be:	08 f0       	brcs	.+2      	; 0x7c2 <__stack+0x2c3>
     7c0:	93 ce       	rjmp	.-730    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     7c2:	ec 2f       	mov	r30, r28
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	eb 5b       	subi	r30, 0xBB	; 187
     7c8:	f3 4e       	sbci	r31, 0xE3	; 227
     7ca:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__tablejump2__>
      curr_note = next_random_note;
     7ce:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <next_random_note>
      next_random_note = random();
     7d2:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>
     7d6:	f2 dd       	rcall	.-1052   	; 0x3bc <random>
     7d8:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <next_random_note>
      note_on(curr_note & 0x3f, 
     7dc:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	8f 73       	andi	r24, 0x3F	; 63
     7e6:	0e 94 b3 0c 	call	0x1966	; 0x1966 <note_on>
      midi_send_note_on(curr_note);
     7ea:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     7ee:	78 d2       	rcall	.+1264   	; 0xce0 <midi_send_note_on>
      break;
     7f0:	7b ce       	rjmp	.-778    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
      if (play_loaded_pattern || play_loaded_track) {
     7f2:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <play_loaded_pattern>
     7f6:	81 11       	cpse	r24, r1
     7f8:	05 c0       	rjmp	.+10     	; 0x804 <__stack+0x305>
     7fa:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <play_loaded_track>
     7fe:	88 23       	and	r24, r24
     800:	09 f4       	brne	.+2      	; 0x804 <__stack+0x305>
     802:	72 ce       	rjmp	.-796    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	if (play_loaded_pattern) {
     804:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <play_loaded_pattern>
     808:	88 23       	and	r24, r24
     80a:	81 f0       	breq	.+32     	; 0x82c <__stack+0x32d>
	  if ((curr_pattern_index >= PATT_LENGTH) || 
     80c:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <curr_pattern_index>
     810:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
     814:	98 17       	cp	r25, r24
     816:	40 f4       	brcc	.+16     	; 0x828 <__stack+0x329>
	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
     818:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	e1 58       	subi	r30, 0x81	; 129
     820:	fd 4f       	sbci	r31, 0xFD	; 253
     822:	80 81       	ld	r24, Z
	  if ((curr_pattern_index >= PATT_LENGTH) || 
     824:	8f 3f       	cpi	r24, 0xFF	; 255
     826:	11 f4       	brne	.+4      	; 0x82c <__stack+0x32d>
	    curr_pattern_index = 0;
     828:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
	curr_note = pattern_buff[curr_pattern_index];
     82c:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	e1 58       	subi	r30, 0x81	; 129
     834:	fd 4f       	sbci	r31, 0xFD	; 253
     836:	80 81       	ld	r24, Z
     838:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>
	curr_pattern_index = get_next_patt_idx();
     83c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <get_next_patt_idx>
	if (curr_note != 0xFF) {
     840:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
     844:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
	  dispatch_note_on(curr_pitch_shift);
     848:	8f 3f       	cpi	r24, 0xFF	; 255
     84a:	09 f4       	brne	.+2      	; 0x84e <__stack+0x34f>
	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
     84c:	4d ce       	rjmp	.-870    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     84e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
      if (play_loaded_pattern) {
     852:	58 dd       	rcall	.-1360   	; 0x304 <dispatch_note_on>
     854:	49 ce       	rjmp	.-878    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     856:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <play_loaded_pattern>
     85a:	88 23       	and	r24, r24
	clear_bank_leds();
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x361>
     85e:	44 ce       	rjmp	.-888    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	set_bank_led(curr_pattern_index);
     860:	63 d5       	rcall	.+2758   	; 0x1328 <clear_bank_leds>
     862:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
     866:	6d d5       	rcall	.+2778   	; 0x1342 <set_bank_led>
	curr_note = pattern_buff[curr_pattern_index];
     868:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	e1 58       	subi	r30, 0x81	; 129
     870:	fd 4f       	sbci	r31, 0xFD	; 253
     872:	80 81       	ld	r24, Z
     874:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>
	curr_pattern_index = get_next_patt_idx();
     878:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <get_next_patt_idx>
     87c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
	if (curr_note != 0xFF) {
     880:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     884:	8f 3f       	cpi	r24, 0xFF	; 255
	  if (!running_stepwrite) set_note_led(curr_note);
     886:	09 f4       	brne	.+2      	; 0x88a <__stack+0x38b>
     888:	2f ce       	rjmp	.-930    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     88a:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <running_stepwrite>
     88e:	91 11       	cpse	r25, r1
	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x3a9>
     892:	a7 d6       	rcall	.+3406   	; 0x15e2 <set_note_led>
     894:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
     898:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
     89c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <get_pitchshift_from_patt>
     8a0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <curr_pitch_shift>
	  else set_bank_led(runstepwrite_pattidx);
     8a4:	89 0f       	add	r24, r25
     8a6:	d5 cf       	rjmp	.-86     	; 0x852 <__stack+0x353>
     8a8:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <runstepwrite_pattidx>
      if (playing) {
     8ac:	4a d5       	rcall	.+2708   	; 0x1342 <set_bank_led>
     8ae:	f2 cf       	rjmp	.-28     	; 0x894 <__stack+0x395>
     8b0:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
	  clear_bank_leds();
     8b4:	88 23       	and	r24, r24
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <__stack+0x3c1>
	  set_bank_led(curr_pattern_index);
     8b8:	37 d5       	rcall	.+2670   	; 0x1328 <clear_bank_leds>
     8ba:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
     8be:	41 d5       	rcall	.+2690   	; 0x1342 <set_bank_led>
      if (playing) {
     8c0:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
     8c4:	88 23       	and	r24, r24
     8c6:	09 f4       	brne	.+2      	; 0x8ca <__stack+0x3cb>
     8c8:	0f ce       	rjmp	.-994    	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
	curr_note = pattern_buff[curr_pattern_index];
     8ca:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	e1 58       	subi	r30, 0x81	; 129
     8d2:	fd 4f       	sbci	r31, 0xFD	; 253
     8d4:	80 81       	ld	r24, Z
	curr_pattern_index = get_next_patt_idx();
     8d6:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>
     8da:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <get_next_patt_idx>
	if (curr_note != 0xFF) {
     8de:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
     8e2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
     8e6:	8f 3f       	cpi	r24, 0xFF	; 255
     8e8:	09 f4       	brne	.+2      	; 0x8ec <__stack+0x3ed>
  else if (note_counter < 8) {
     8ea:	fe cd       	rjmp	.-1028   	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     8ec:	d3 cf       	rjmp	.-90     	; 0x894 <__stack+0x395>
     8ee:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
     8f2:	88 30       	cpi	r24, 0x08	; 8
    clear_led(LED_TEMPO);
     8f4:	08 f0       	brcs	.+2      	; 0x8f8 <__stack+0x3f9>
     8f6:	01 ce       	rjmp	.-1022   	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
     8f8:	85 e2       	ldi	r24, 0x25	; 37
    blink_leds_on();
     8fa:	dd d4       	rcall	.+2490   	; 0x12b6 <clear_led>
     8fc:	1c d6       	rcall	.+3128   	; 0x1536 <blink_leds_on>
     8fe:	fd cd       	rjmp	.-1030   	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
} else if (onemore) onemore = FALSE;
     900:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <onemore>
     904:	88 23       	and	r24, r24
     906:	09 f4       	brne	.+2      	; 0x90a <__stack+0x40b>
     908:	d0 cd       	rjmp	.-1120   	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     90a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <onemore>
     90e:	cd cd       	rjmp	.-1126   	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>

00000910 <__vector_9>:
SIGNAL(SIG_OVERFLOW3) {
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
  TCNT3 = timer3_init;  // FIXME, use CTC mode
     930:	ff 93       	push	r31
     932:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <timer3_init>
     936:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <timer3_init+0x1>
     93a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     93e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  do_tempo();
     942:	56 dd       	rcall	.-1364   	; 0x3f0 <do_tempo>
}
     944:	ff 91       	pop	r31
     946:	ef 91       	pop	r30
     948:	bf 91       	pop	r27
     94a:	af 91       	pop	r26
     94c:	9f 91       	pop	r25
     94e:	8f 91       	pop	r24
     950:	7f 91       	pop	r23
     952:	6f 91       	pop	r22
     954:	5f 91       	pop	r21
     956:	4f 91       	pop	r20
     958:	3f 91       	pop	r19
     95a:	2f 91       	pop	r18
     95c:	0f 90       	pop	r0
     95e:	0f be       	out	0x3f, r0	; 63
     960:	0f 90       	pop	r0
     962:	1f 90       	pop	r1
     964:	18 95       	reti

00000966 <uart_putchar>:
  return;
}
 
int uart_putchar(char c)
{
   loop_until_bit_is_set(UCSR1A, UDRE1);
     966:	15 9b       	sbis	0x02, 5	; 2
     968:	fe cf       	rjmp	.-4      	; 0x966 <uart_putchar>
   UDR1 = c;
   return 0;
}
     96a:	83 b9       	out	0x03, r24	; 3
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	08 95       	ret

00000972 <printhex>:
  hex &= 0xF;
     972:	8f 70       	andi	r24, 0x0F	; 15
  if (hex < 10)
     974:	8a 30       	cpi	r24, 0x0A	; 10
     976:	18 f4       	brcc	.+6      	; 0x97e <printhex+0xc>
    uart_putchar(hex + '0');
     978:	80 5d       	subi	r24, 0xD0	; 208
    uart_putchar(hex + 'A' - 10);
     97a:	f5 cf       	rjmp	.-22     	; 0x966 <uart_putchar>
}
     97c:	08 95       	ret
    uart_putchar(hex + 'A' - 10);
     97e:	89 5c       	subi	r24, 0xC9	; 201
     980:	fc cf       	rjmp	.-8      	; 0x97a <printhex+0x8>

00000982 <putnum_uh>:
void putnum_uh(uint16_t n) {
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	ec 01       	movw	r28, r24
  if (n >> 12)
     988:	89 2f       	mov	r24, r25
     98a:	99 27       	eor	r25, r25
     98c:	82 95       	swap	r24
     98e:	8f 70       	andi	r24, 0x0F	; 15
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	09 f0       	breq	.+2      	; 0x996 <putnum_uh+0x14>
    printhex(n>>12);
     994:	ee df       	rcall	.-36     	; 0x972 <printhex>
     996:	8d 2f       	mov	r24, r29
  if (n >> 8)
     998:	99 27       	eor	r25, r25
     99a:	00 97       	sbiw	r24, 0x00	; 0
     99c:	09 f0       	breq	.+2      	; 0x9a0 <putnum_uh+0x1e>
     99e:	e9 df       	rcall	.-46     	; 0x972 <printhex>
    printhex(n >> 8);
     9a0:	ce 01       	movw	r24, r28
     9a2:	24 e0       	ldi	r18, 0x04	; 4
  if (n >> 4)
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	2a 95       	dec	r18
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <putnum_uh+0x22>
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <putnum_uh+0x30>
     9b0:	e0 df       	rcall	.-64     	; 0x972 <printhex>
     9b2:	8c 2f       	mov	r24, r28
    printhex(n >> 4);
     9b4:	de df       	rcall	.-68     	; 0x972 <printhex>
     9b6:	df 91       	pop	r29
  printhex(n);
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <uart_getch>:

int uart_getch() {     // checks if there is a character waiting!
     9bc:	82 b1       	in	r24, 0x02	; 2
}
     9be:	08 2e       	mov	r0, r24
     9c0:	00 0c       	add	r0, r0
     9c2:	99 0b       	sbc	r25, r25
  if (bit_is_set(UCSR1A, RXC1))
    return 1;
  return 0;
}
     9c4:	89 2f       	mov	r24, r25
     9c6:	88 1f       	adc	r24, r24
     9c8:	88 27       	eor	r24, r24
     9ca:	88 1f       	adc	r24, r24
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	08 95       	ret

000009d0 <uart_getchar>:


int uart_getchar(void) {
  char c;
  loop_until_bit_is_set(UCSR1A, RXC1);
     9d0:	17 9b       	sbis	0x02, 7	; 2
     9d2:	fe cf       	rjmp	.-4      	; 0x9d0 <uart_getchar>
  c = UDR1;
     9d4:	83 b1       	in	r24, 0x03	; 3
  return (int)c;
}
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	08 95       	ret

000009da <internal_eeprom_read8>:

//**************************************************
//         Internal EEPROM
//**************************************************

uint8_t internal_eeprom_read8(uint16_t addr) {
     9da:	9c 01       	movw	r18, r24
  loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
     9dc:	e1 99       	sbic	0x1c, 1	; 28
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <internal_eeprom_read8+0x2>
  EEAR = addr;
     9e0:	3f bb       	out	0x1f, r19	; 31
     9e2:	2e bb       	out	0x1e, r18	; 30
  sbi(EECR, EERE);        // start EEPROM read
     9e4:	e0 9a       	sbi	0x1c, 0	; 28
  return EEDR;            // takes only 1 cycle
     9e6:	8d b3       	in	r24, 0x1d	; 29
}
     9e8:	08 95       	ret

000009ea <internal_eeprom_write8>:

void internal_eeprom_write8(uint16_t addr, uint8_t data) {
     9ea:	9c 01       	movw	r18, r24
  //printf("writing %d to addr 0x%x...", data, addr);
  loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
     9ec:	e1 99       	sbic	0x1c, 1	; 28
     9ee:	fe cf       	rjmp	.-4      	; 0x9ec <internal_eeprom_write8+0x2>
  EEAR = addr;
     9f0:	3f bb       	out	0x1f, r19	; 31
  EEDR = data;
     9f2:	2e bb       	out	0x1e, r18	; 30
  cli();                // turn off interrupts 
     9f4:	6d bb       	out	0x1d, r22	; 29
  sbi(EECR, EEMWE);     // these instructions must happen within 4 cycles
     9f6:	f8 94       	cli
  sbi(EECR, EEWE);
     9f8:	e2 9a       	sbi	0x1c, 2	; 28
  sei();                // turn on interrupts again
  //putstring("done\n\r");
}
     9fa:	e1 9a       	sbi	0x1c, 1	; 28
     9fc:	78 94       	sei
     9fe:	08 95       	ret

00000a00 <change_tempo>:
void change_tempo(uint16_t set_tempo) {
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
  if (set_tempo > MAX_TEMPO) {
     a06:	44 97       	sbiw	r24, 0x14	; 20
     a08:	10 f4       	brcc	.+4      	; 0xa0e <change_tempo+0xe>
     a0a:	c4 e1       	ldi	r28, 0x14	; 20
     a0c:	d0 e0       	ldi	r29, 0x00	; 0
     a0e:	cd 32       	cpi	r28, 0x2D	; 45
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	d8 07       	cpc	r29, r24
     a14:	10 f0       	brcs	.+4      	; 0xa1a <change_tempo+0x1a>
     a16:	cc e2       	ldi	r28, 0x2C	; 44
  newtempo = tempo = set_tempo;
     a18:	d1 e0       	ldi	r29, 0x01	; 1
     a1a:	d0 93 98 01 	sts	0x0198, r29	; 0x800198 <tempo+0x1>
     a1e:	c0 93 97 01 	sts	0x0197, r28	; 0x800197 <tempo>
     a22:	d0 93 9a 01 	sts	0x019A, r29	; 0x80019a <newtempo+0x1>
     a26:	c0 93 99 01 	sts	0x0199, r28	; 0x800199 <newtempo>
  internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
     a2a:	6d 2f       	mov	r22, r29
     a2c:	85 e0       	ldi	r24, 0x05	; 5
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	dc df       	rcall	.-72     	; 0x9ea <internal_eeprom_write8>
  internal_eeprom_write8(TEMPO_EEADDR+1, tempo & 0xFF);
     a32:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <tempo>
     a36:	86 e0       	ldi	r24, 0x06	; 6
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	d7 df       	rcall	.-82     	; 0x9ea <internal_eeprom_write8>
     a3c:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <tempo>
  send_tempo(tempo);
     a40:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <tempo+0x1>
     a44:	76 d6       	rcall	.+3308   	; 0x1732 <send_tempo>
     a46:	80 e3       	ldi	r24, 0x30	; 48
     a48:	8c 9f       	mul	r24, r28
  num_instr /= set_tempo*2*DINSYNC_PPQ;  
     a4a:	90 01       	movw	r18, r0
     a4c:	8d 9f       	mul	r24, r29
     a4e:	30 0d       	add	r19, r0
     a50:	11 24       	eor	r1, r1
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e7       	ldi	r23, 0x70	; 112
     a5a:	88 e3       	ldi	r24, 0x38	; 56
     a5c:	99 e3       	ldi	r25, 0x39	; 57
     a5e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__udivmodsi4>
     a62:	ca 01       	movw	r24, r20
     a64:	88 7f       	andi	r24, 0xF8	; 248
  } else if ((top_num_instr & ~0x7) == 0) {
     a66:	89 2b       	or	r24, r25
     a68:	01 f5       	brne	.+64     	; 0xaaa <change_tempo+0xaa>
     a6a:	93 e0       	ldi	r25, 0x03	; 3
     a6c:	56 95       	lsr	r21
    timer3_init = num_instr >> 3;
     a6e:	47 95       	ror	r20
     a70:	37 95       	ror	r19
     a72:	27 95       	ror	r18
     a74:	9a 95       	dec	r25
     a76:	d1 f7       	brne	.-12     	; 0xa6c <change_tempo+0x6c>
     a78:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <timer3_init+0x1>
     a7c:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <timer3_init>
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    TCCR3B = 6;
     a86:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <timer3_init>
  timer3_init *= -1;
     a8a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <timer3_init+0x1>
     a8e:	91 95       	neg	r25
     a90:	81 95       	neg	r24
     a92:	91 09       	sbc	r25, r1
     a94:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <timer3_init+0x1>
     a98:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <timer3_init>
     a9c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  TCNT3 = timer3_init;
     aa0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     aa4:	df 91       	pop	r29
}
     aa6:	cf 91       	pop	r28
    timer3_init = num_instr >> 4;
     aa8:	08 95       	ret
     aaa:	84 e0       	ldi	r24, 0x04	; 4
     aac:	56 95       	lsr	r21
     aae:	47 95       	ror	r20
     ab0:	37 95       	ror	r19
     ab2:	27 95       	ror	r18
     ab4:	8a 95       	dec	r24
     ab6:	d1 f7       	brne	.-12     	; 0xaac <change_tempo+0xac>
     ab8:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <timer3_init+0x1>
     abc:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <timer3_init>
    TCCR3B = 6;
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	df cf       	rjmp	.-66     	; 0xa82 <change_tempo+0x82>

00000ac4 <init_tempo>:
void init_tempo(void) {
     ac4:	cf 93       	push	r28
  sbi(PCMSK0, PCINT0); // detect change on pin A0
     ac6:	eb e6       	ldi	r30, 0x6B	; 107
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	81 60       	ori	r24, 0x01	; 1
  sbi(PCMSK0, PCINT1); // detect change on pin A1
     ace:	80 83       	st	Z, r24
     ad0:	80 81       	ld	r24, Z
     ad2:	82 60       	ori	r24, 0x02	; 2
  sbi(GICR, PCIE0);    // enable pin change interrupt for tempo knob detect
     ad4:	80 83       	st	Z, r24
     ad6:	8b b7       	in	r24, 0x3b	; 59
     ad8:	88 60       	ori	r24, 0x08	; 8
  change_tempo((internal_eeprom_read8(TEMPO_EEADDR)<< 8) |
     ada:	8b bf       	out	0x3b, r24	; 59
     adc:	85 e0       	ldi	r24, 0x05	; 5
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	7c df       	rcall	.-264    	; 0x9da <internal_eeprom_read8>
     ae2:	c8 2f       	mov	r28, r24
	       internal_eeprom_read8(TEMPO_EEADDR+1) );
     ae4:	86 e0       	ldi	r24, 0x06	; 6
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	78 df       	rcall	.-272    	; 0x9da <internal_eeprom_read8>
     aea:	9c 2f       	mov	r25, r28
  change_tempo((internal_eeprom_read8(TEMPO_EEADDR)<< 8) |
     aec:	89 df       	rcall	.-238    	; 0xa00 <change_tempo>
     aee:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <note_counter>
  note_counter = 0;
     af2:	ed e7       	ldi	r30, 0x7D	; 125
     af4:	f0 e0       	ldi	r31, 0x00	; 0
  sbi(ETIMSK, TOIE3); // enable tempo interrupt
     af6:	80 81       	ld	r24, Z
     af8:	84 60       	ori	r24, 0x04	; 4
     afa:	80 83       	st	Z, r24
}
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <ioinit>:

void ioinit() {
  uint16_t baud = (F_CPU / (16 * UART_BAUDRATE)) - 1;
  
  /* setup the main UART */
  UCSR1B |= (1<<RXEN1) | (1<<TXEN1);    // read and write & intr
     b00:	81 b1       	in	r24, 0x01	; 1
     b02:	88 61       	ori	r24, 0x18	; 24
     b04:	81 b9       	out	0x01, r24	; 1
  UBRR1L = (uint8_t)baud;               // set baudrate
     b06:	83 e3       	ldi	r24, 0x33	; 51
  UBRR1H = (uint8_t)(baud>>8);
  // first flush the input
  while (uart_getch()) {
     b08:	80 b9       	out	0x00, r24	; 0
     b0a:	1c be       	out	0x3c, r1	; 60
     b0c:	57 df       	rcall	.-338    	; 0x9bc <uart_getch>
    uart_getchar();
    delay_ms(10);
  }
  UCSR1B |= (1<<RXCIE1); // now turn on interrupts
     b0e:	89 2b       	or	r24, r25

  /* setup the MIDI UART */
  baud = (F_CPU / (16 * MIDI_BAUDRATE)) - 1;
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0)| (1<<RXCIE0);    // read and write, interrupt on recv.
     b10:	a9 f4       	brne	.+42     	; 0xb3c <ioinit+0x3c>
     b12:	0f 9a       	sbi	0x01, 7	; 1
     b14:	8a b1       	in	r24, 0x0a	; 10
  UBRR0L = (uint8_t)baud;               // set baudrate
     b16:	88 69       	ori	r24, 0x98	; 152
     b18:	8a b9       	out	0x0a, r24	; 10
  UBRR0H = (uint8_t)(baud>>8);
     b1a:	8f e1       	ldi	r24, 0x1F	; 31

  DDRA = 0xC0;              // led latch (o), rotary com (o), rot1, rot2, rot4, ro8, tempoa, tempob 
     b1c:	89 b9       	out	0x09, r24	; 9
     b1e:	10 bc       	out	0x20, r1	; 32
  PORTA = 0x3C;              // pullups on rotary1,2,4,8
     b20:	80 ec       	ldi	r24, 0xC0	; 192
     b22:	8a bb       	out	0x1a, r24	; 26
  
  DDRB = 0xBB;              // spi_clk, spi_in, spi_out, NC, TX, RX, NC, switch latch (o)
     b24:	8c e3       	ldi	r24, 0x3C	; 60
  PORTB = 0x0;
     b26:	8b bb       	out	0x1b, r24	; 27

  DDRC = 0xFF;              // accent, slide, note[0-5]
     b28:	8b eb       	ldi	r24, 0xBB	; 187
     b2a:	87 bb       	out	0x17, r24	; 23

  DDRD = 0xFF;              // dinsync1, 2, 3, 4 (outputs), NC, NC, MIDI TX & RX
     b2c:	18 ba       	out	0x18, r1	; 24
  DDRE = 0xFF;               // note latch, gate, NC
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
  

  SPCR = (1<<SPE)|(1<<MSTR) | 0x1 ; // master spi, clk=fosc/8 = 2mhz
     b30:	84 bb       	out	0x14, r24	; 20
     b32:	81 bb       	out	0x11, r24	; 17
}
     b34:	86 b9       	out	0x06, r24	; 6
    uart_getchar();
     b36:	81 e5       	ldi	r24, 0x51	; 81
     b38:	8d b9       	out	0x0d, r24	; 13
    delay_ms(10);
     b3a:	08 95       	ret
     b3c:	49 df       	rcall	.-366    	; 0x9d0 <uart_getchar>
     b3e:	8a e0       	ldi	r24, 0x0A	; 10
     b40:	43 d0       	rcall	.+134    	; 0xbc8 <delay_ms>
     b42:	e4 cf       	rjmp	.-56     	; 0xb0c <ioinit+0xc>

00000b44 <main>:
  ioinit();        // set up IO ports and the UART
     b44:	dd df       	rcall	.-70     	; 0xb00 <ioinit>
     b46:	be df       	rcall	.-132    	; 0xac4 <init_tempo>
  init_tempo();
     b48:	f1 da       	rcall	.-2590   	; 0x12c <init_timer0>
     b4a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <tempo>
  init_timer0();
     b4e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <rand>
  rand = tempo;            // stupid initialization, do better?
     b52:	df d1       	rcall	.+958    	; 0xf12 <dinsync_set_out>
     b54:	92 d0       	rcall	.+292    	; 0xc7a <init_midi>
  dinsync_set_out(); // output DINSYNC
     b56:	78 94       	sei
     b58:	c2 e0       	ldi	r28, 0x02	; 2
  init_midi();
     b5a:	d1 e0       	ldi	r29, 0x01	; 1
  sei();  // enable interrupts
     b5c:	20 d2       	rcall	.+1088   	; 0xf9e <read_switches>
      sync = MIDI_SYNC;
     b5e:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <function>
    read_switches();
     b62:	e0 31       	cpi	r30, 0x10	; 16
    switch (function) {
     b64:	d8 f7       	brcc	.-10     	; 0xb5c <main+0x18>
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	ec 5a       	subi	r30, 0xAC	; 172
     b6a:	f3 4e       	sbci	r31, 0xE3	; 227
     b6c:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__tablejump2__>
     b70:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      sync = INTERNAL_SYNC;
     b74:	99 d5       	rcall	.+2866   	; 0x16a8 <do_computer_control>
      do_computer_control();
     b76:	f2 cf       	rjmp	.-28     	; 0xb5c <main+0x18>
     b78:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      sync = INTERNAL_SYNC;
     b7c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <do_pattern_edit>
      do_pattern_edit();
     b80:	ed cf       	rjmp	.-38     	; 0xb5c <main+0x18>
     b82:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      sync = INTERNAL_SYNC;
     b86:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <do_patterntrack_play>
      do_patterntrack_play();
     b8a:	e8 cf       	rjmp	.-48     	; 0xb5c <main+0x18>
     b8c:	d0 93 64 01 	sts	0x0164, r29	; 0x800164 <sync>
      sync = DIN_SYNC;
     b90:	fa cf       	rjmp	.-12     	; 0xb86 <main+0x42>
     b92:	c0 93 64 01 	sts	0x0164, r28	; 0x800164 <sync>
      sync = MIDI_SYNC;
     b96:	f7 cf       	rjmp	.-18     	; 0xb86 <main+0x42>
     b98:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      sync = INTERNAL_SYNC;
     b9c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <do_track_edit>
      do_track_edit();
     ba0:	dd cf       	rjmp	.-70     	; 0xb5c <main+0x18>
     ba2:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      sync = INTERNAL_SYNC;
     ba6:	09 d1       	rcall	.+530    	; 0xdba <do_midi_mode>
     ba8:	d9 cf       	rjmp	.-78     	; 0xb5c <main+0x18>
      do_midi_mode();
     baa:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      break;
     bae:	f8 d6       	rcall	.+3568   	; 0x19a0 <do_keyboard_mode>
      sync = INTERNAL_SYNC;
     bb0:	d5 cf       	rjmp	.-86     	; 0xb5c <main+0x18>
     bb2:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
      do_keyboard_mode();
     bb6:	ca da       	rcall	.-2668   	; 0x14c <turn_on_tempo>
      break;
     bb8:	a8 d3       	rcall	.+1872   	; 0x130a <clear_all_leds>
      sync = INTERNAL_SYNC;
     bba:	f1 d1       	rcall	.+994    	; 0xf9e <read_switches>
     bbc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
      turn_on_tempo();
     bc0:	88 30       	cpi	r24, 0x08	; 8
      clear_all_leds();
     bc2:	d9 f3       	breq	.-10     	; 0xbba <main+0x76>
     bc4:	c9 da       	rcall	.-2670   	; 0x158 <turn_off_tempo>
	read_switches();
     bc6:	ca cf       	rjmp	.-108    	; 0xb5c <main+0x18>

00000bc8 <delay_ms>:
void delay_ms(unsigned char ms)
{
  unsigned short delay_count = F_CPU / 4000;
  
  unsigned short cnt;
  asm volatile ("\n"
     bc8:	20 ea       	ldi	r18, 0xA0	; 160
     bca:	3f e0       	ldi	r19, 0x0F	; 15

00000bcc <L_dl112>:
     bcc:	e2 2f       	mov	r30, r18
     bce:	f3 2f       	mov	r31, r19

00000bd0 <L_dl212>:
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <L_dl212>
     bd4:	8a 95       	dec	r24
     bd6:	d1 f7       	brne	.-12     	; 0xbcc <L_dl112>
		"sbiw %A0, 1\n\t"
		"brne L_dl2%=\n\t"
		"dec %1\n\t" "brne L_dl1%=\n\t":"=&w" (cnt)
		:"r"(ms), "r"((unsigned short) (delay_count))
		);
}
     bd8:	08 95       	ret

00000bda <__vector_19>:
volatile uint8_t midi_q[MIDI_Q_SIZE];      // cyclic queue for midi msgs
volatile static uint8_t head_idx = 0;
volatile static uint8_t tail_idx = 0;

// interrupt on receive char
SIGNAL(SIG_USART0_RECV) {
     bda:	1f 92       	push	r1
     bdc:	1f b6       	in	r1, 0x3f	; 63
     bde:	1f 92       	push	r1
     be0:	11 24       	eor	r1, r1
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
  char c = UDR0;
     bea:	8c b1       	in	r24, 0x0c	; 12
  
  if (c == MIDI_START) {
     bec:	8a 3f       	cpi	r24, 0xFA	; 250
     bee:	21 f5       	brne	.+72     	; 0xc38 <__vector_19+0x5e>
    // we handle the clock counter here so that it is processed in order, otherwise
    // we potentially skip a clock

    midisync_clocked = 0;
     bf0:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <midisync_clocked+0x1>
     bf4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <midisync_clocked>
    midisync_clocked++;
    return;
  }

  //putstring("0x"); putnum_uh(c); putstring("   ");
  midi_q[tail_idx++] = c;    // place at end of q
     bf8:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <tail_idx>
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	9e 0f       	add	r25, r30
     c00:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <tail_idx>
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	e0 56       	subi	r30, 0x60	; 96
     c08:	fe 4f       	sbci	r31, 0xFE	; 254
     c0a:	80 83       	st	Z, r24
  tail_idx %= MIDI_Q_SIZE;
     c0c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tail_idx>
     c10:	8f 71       	andi	r24, 0x1F	; 31
     c12:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <tail_idx>

  if (tail_idx == head_idx) {
     c16:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <tail_idx>
     c1a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <head_idx>
     c1e:	98 13       	cpse	r25, r24
     c20:	1e c0       	rjmp	.+60     	; 0xc5e <__vector_19+0x84>
    // i.e. there are too many msgs in the q
    // drop the oldest msg?
    head_idx++;
     c22:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <head_idx>
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <head_idx>
    head_idx %= MIDI_Q_SIZE;
     c2c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <head_idx>
     c30:	8f 71       	andi	r24, 0x1F	; 31
     c32:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <head_idx>
     c36:	13 c0       	rjmp	.+38     	; 0xc5e <__vector_19+0x84>
  } else if (c == MIDI_CLOCK) {
     c38:	88 3f       	cpi	r24, 0xF8	; 248
     c3a:	f1 f6       	brne	.-68     	; 0xbf8 <__vector_19+0x1e>
    if (sync == MIDI_SYNC ) {
     c3c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	21 f4       	brne	.+8      	; 0xc4c <__vector_19+0x72>
      sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
     c44:	94 9a       	sbi	0x12, 4	; 18
      dinsync_clock_timeout = 5;      // in 5ms drop the edge, is this enough?
     c46:	85 e0       	ldi	r24, 0x05	; 5
     c48:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <dinsync_clock_timeout>
    midisync_clocked++;
     c4c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <midisync_clocked>
     c50:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <midisync_clocked+0x1>
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <midisync_clocked+0x1>
     c5a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <midisync_clocked>
  }
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	9f 91       	pop	r25
     c64:	8f 91       	pop	r24
     c66:	1f 90       	pop	r1
     c68:	1f be       	out	0x3f, r1	; 63
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <get_midi_addr>:


uint8_t get_midi_addr(uint8_t eeaddr) {
  uint8_t midi_addr;
  
  midi_addr = internal_eeprom_read8(eeaddr);
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	b4 de       	rcall	.-664    	; 0x9da <internal_eeprom_read8>
  if (midi_addr > 15)
    midi_addr = 15;
  return midi_addr;
     c72:	80 31       	cpi	r24, 0x10	; 16
     c74:	08 f0       	brcs	.+2      	; 0xc78 <get_midi_addr+0xa>
     c76:	8f e0       	ldi	r24, 0x0F	; 15
}
     c78:	08 95       	ret

00000c7a <init_midi>:


void init_midi(void) {
  midi_in_addr = get_midi_addr(MIDIIN_ADDR_EEADDR);
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	f8 df       	rcall	.-16     	; 0xc6e <get_midi_addr>
     c7e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <midi_in_addr>
  midi_out_addr = get_midi_addr(MIDIOUT_ADDR_EEADDR);
     c82:	84 e0       	ldi	r24, 0x04	; 4
     c84:	f4 df       	rcall	.-24     	; 0xc6e <get_midi_addr>
     c86:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <midi_out_addr>
}
     c8a:	08 95       	ret

00000c8c <midi_note_off>:
  }
  return 0;
}

void midi_note_off(uint8_t note, uint8_t velocity) {
  if (note == prev_note) {
     c8c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <prev_note>
     c90:	98 13       	cpse	r25, r24
    note_off(0);
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <midi_note_off+0x12>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	7d d6       	rcall	.+3322   	; 0x1992 <note_off>
    prev_note = 255;
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <prev_note>
  }
}
     c9e:	08 95       	ret

00000ca0 <midi_note_on>:

void midi_note_on(uint8_t note, uint8_t velocity) {
     ca0:	96 2f       	mov	r25, r22
  uint8_t slide = 0;

  if (velocity == 0 && note != 0) {
     ca2:	61 11       	cpse	r22, r1
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <midi_note_on+0x10>
     ca6:	88 23       	and	r24, r24
    // strange midi thing: velocity 0 -> note off!
    midi_note_off(note, velocity);
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <midi_note_on+0x10>
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	ef cf       	rjmp	.-34     	; 0xc8c <midi_note_off>
     cae:	08 95       	ret
  } else {
    if (prev_note != 255)
     cb0:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <prev_note>
      slide = 1;
	  prev_note = note;	  
     cb4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <prev_note>
	  if (note == 0) note = 0x19;
     cb8:	81 11       	cpse	r24, r1
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <midi_note_on+0x1e>
     cbc:	89 e1       	ldi	r24, 0x19	; 25
    if (prev_note != 255)
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	2f 3f       	cpi	r18, 0xFF	; 255
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <midi_note_on+0x26>
     cc4:	60 e0       	ldi	r22, 0x00	; 0
    if (velocity > ACCENT_THRESH) {
      note_on(note - 0x19, slide, 1); // with accent
     cc6:	89 51       	subi	r24, 0x19	; 25
    if (velocity > ACCENT_THRESH) {
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	95 36       	cpi	r25, 0x65	; 101
    } else {
      note_on(note - 0x19, slide, 0); // no accent
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <midi_note_on+0x30>
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	4a c6       	rjmp	.+3220   	; 0x1966 <note_on>
    }

//    prev_note = note;
  }
}
     cd2:	08 95       	ret

00000cd4 <midi_putchar>:
}


int midi_putchar(char c)
{
   loop_until_bit_is_set(UCSR0A, UDRE0);
     cd4:	5d 9b       	sbis	0x0b, 5	; 11
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <midi_putchar>
   UDR0 = c;
     cd8:	8c b9       	out	0x0c, r24	; 12
   return 0;
}
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	08 95       	ret

00000ce0 <midi_send_note_on>:
void midi_send_note_on(uint8_t note) {
     ce0:	cf 93       	push	r28
     ce2:	c8 2f       	mov	r28, r24
  midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
     ce4:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <midi_out_addr>
     ce8:	80 69       	ori	r24, 0x90	; 144
  if ( (note & 0x3F) == 0) {
     cea:	f4 df       	rcall	.-24     	; 0xcd4 <midi_putchar>
     cec:	8c 2f       	mov	r24, r28
    midi_putchar(0);                                 // rest
     cee:	8f 73       	andi	r24, 0x3F	; 63
     cf0:	29 f4       	brne	.+10     	; 0xcfc <midi_send_note_on+0x1c>
    midi_putchar(0);                                 // velocity 0(= note off)
     cf2:	f0 df       	rcall	.-32     	; 0xcd4 <midi_putchar>
    midi_putchar(midion_noaccent_velocity);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	ee df       	rcall	.-36     	; 0xcd4 <midi_putchar>
}
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret
    midi_putchar((note & 0x3F) + 0x19);              // note
     cfc:	87 5e       	subi	r24, 0xE7	; 231
     cfe:	ea df       	rcall	.-44     	; 0xcd4 <midi_putchar>
     d00:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <midion_accent_velocity>
    midi_putchar(midion_accent_velocity);
     d04:	c6 fd       	sbrc	r28, 6
  if ((note >> 6) & 0x1)              // if theres an accent, give high velocity 
     d06:	f7 cf       	rjmp	.-18     	; 0xcf6 <midi_send_note_on+0x16>
    midi_putchar(midion_noaccent_velocity);
     d08:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <midion_noaccent_velocity>
     d0c:	f4 cf       	rjmp	.-24     	; 0xcf6 <midi_send_note_on+0x16>

00000d0e <midi_send_note_off>:
void midi_send_note_off(uint8_t note) {
     d0e:	cf 93       	push	r28
     d10:	c8 2f       	mov	r28, r24
  midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr);  // command
     d12:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <midi_out_addr>
     d16:	80 68       	ori	r24, 0x80	; 128
     d18:	dd df       	rcall	.-70     	; 0xcd4 <midi_putchar>
  if ((note & 0x3F) == 0)
     d1a:	8c 2f       	mov	r24, r28
     d1c:	8f 73       	andi	r24, 0x3F	; 63
     d1e:	31 f4       	brne	.+12     	; 0xd2c <midi_send_note_off+0x1e>
    midi_putchar((note & 0x3F) + 0x19);              // note
     d20:	d9 df       	rcall	.-78     	; 0xcd4 <midi_putchar>
     d22:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <midioff_velocity>
  midi_putchar(midioff_velocity);                   // velocity
     d26:	d6 df       	rcall	.-84     	; 0xcd4 <midi_putchar>
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret
}
     d2c:	87 5e       	subi	r24, 0xE7	; 231
     d2e:	f8 cf       	rjmp	.-16     	; 0xd20 <midi_send_note_off+0x12>

00000d30 <midi_getch>:

int midi_getch(void) {     // checks if there is a character waiting!
  if (head_idx != tail_idx)
     d30:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <head_idx>
     d34:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <tail_idx>
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	32 13       	cpse	r19, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <midi_getch+0x14>
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
  return 0;
}
     d44:	08 95       	ret

00000d46 <midi_getchar>:

int midi_getchar(void) {
  char c;

  while (head_idx == tail_idx);
     d46:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <head_idx>
     d4a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <tail_idx>
     d4e:	98 17       	cp	r25, r24
     d50:	d1 f3       	breq	.-12     	; 0xd46 <midi_getchar>

  cli();
     d52:	f8 94       	cli
  c = midi_q[head_idx++];
     d54:	e0 91 69 01 	lds	r30, 0x0169	; 0x800169 <head_idx>
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	8e 0f       	add	r24, r30
     d5c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <head_idx>
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	e0 56       	subi	r30, 0x60	; 96
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
  head_idx %= MIDI_Q_SIZE;
     d66:	80 81       	ld	r24, Z
     d68:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <head_idx>
     d6c:	9f 71       	andi	r25, 0x1F	; 31
  sei();
     d6e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <head_idx>

  return c;
}
     d72:	78 94       	sei
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	08 95       	ret

00000d78 <midi_recv_cmd>:
  if (midi_getch()) {
     d78:	db df       	rcall	.-74     	; 0xd30 <midi_getch>
     d7a:	89 2b       	or	r24, r25
     d7c:	11 f4       	brne	.+4      	; 0xd82 <midi_recv_cmd+0xa>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
     d80:	08 95       	ret
     d82:	e1 df       	rcall	.-62     	; 0xd46 <midi_getchar>
    c = midi_getchar();
     d84:	9c 01       	movw	r18, r24
     d86:	87 ff       	sbrs	r24, 7
     d88:	fa cf       	rjmp	.-12     	; 0xd7e <midi_recv_cmd+0x6>
    if (c >> 7) {       // if the top bit is high, this is a command
     d8a:	98 2f       	mov	r25, r24
     d8c:	92 95       	swap	r25
      if (c >> 4 == 0xF)     // universal cmd, no addressing
     d8e:	9f 70       	andi	r25, 0x0F	; 15
     d90:	9f 30       	cpi	r25, 0x0F	; 15
     d92:	49 f0       	breq	.+18     	; 0xda6 <midi_recv_cmd+0x2e>
     d94:	2f 70       	andi	r18, 0x0F	; 15
      if ((c & 0xF) == midi_in_addr) {
     d96:	33 27       	eor	r19, r19
     d98:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <midi_in_addr>
     d9c:	42 17       	cp	r20, r18
	midi_running_status = c >> 4;
     d9e:	13 06       	cpc	r1, r19
}
     da0:	71 f7       	brne	.-36     	; 0xd7e <midi_recv_cmd+0x6>
     da2:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <midi_running_status>
     da6:	08 95       	ret

00000da8 <midi_notesoff>:
    midi_notesoff();
  }
}

void midi_notesoff(void) {
  midi_putchar((MIDI_CONTROLLER<<4) | midi_out_addr);
     da8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <midi_out_addr>
     dac:	80 6b       	ori	r24, 0xB0	; 176
  midi_putchar(MIDI_ALL_NOTES_OFF);
     dae:	92 df       	rcall	.-220    	; 0xcd4 <midi_putchar>
     db0:	8b e7       	ldi	r24, 0x7B	; 123
  midi_putchar(0);
     db2:	90 df       	rcall	.-224    	; 0xcd4 <midi_putchar>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	8e cf       	rjmp	.-228    	; 0xcd4 <midi_putchar>
}
     db8:	08 95       	ret

00000dba <do_midi_mode>:
void do_midi_mode(void) {
     dba:	cf 93       	push	r28
  turn_off_tempo();
     dbc:	df 93       	push	r29
     dbe:	cc d9       	rcall	.-3176   	; 0x158 <turn_off_tempo>
  clear_bank_leds();
     dc0:	b3 d2       	rcall	.+1382   	; 0x1328 <clear_bank_leds>
     dc2:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <midi_in_addr>
  set_bank_led(midi_in_addr);
     dc6:	bd d2       	rcall	.+1402   	; 0x1342 <set_bank_led>
     dc8:	ea d0       	rcall	.+468    	; 0xf9e <read_switches>
  read_switches();
     dca:	84 e6       	ldi	r24, 0x64	; 100
     dcc:	fd de       	rcall	.-518    	; 0xbc8 <delay_ms>
  delay_ms(100);
     dce:	e7 d0       	rcall	.+462    	; 0xf9e <read_switches>
     dd0:	84 e6       	ldi	r24, 0x64	; 100
     dd2:	fa de       	rcall	.-524    	; 0xbc8 <delay_ms>
  read_switches();
     dd4:	e4 d0       	rcall	.+456    	; 0xf9e <read_switches>
     dd6:	d0 91 cd 01 	lds	r29, 0x01CD	; 0x8001cd <bank>
  delay_ms(100);
     dda:	8f ef       	ldi	r24, 0xFF	; 255
  read_switches();
     ddc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <prev_note>
  last_bank = bank;
     de0:	de d0       	rcall	.+444    	; 0xf9e <read_switches>
  prev_note = 255;        // no notes played yet
     de2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    read_switches();
     de6:	88 23       	and	r24, r24
    if (function_changed) {
     de8:	21 f0       	breq	.+8      	; 0xdf2 <do_midi_mode+0x38>
     dea:	de df       	rcall	.-68     	; 0xda8 <midi_notesoff>
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
      midi_notesoff(); // clear any stuck notes
     df0:	08 95       	ret
     df2:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <bank>
}
     df6:	6d 17       	cp	r22, r29
     df8:	59 f0       	breq	.+22     	; 0xe10 <do_midi_mode+0x56>
    if (last_bank != bank) {
     dfa:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <midi_in_addr>
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	90 e0       	ldi	r25, 0x00	; 0
      midi_in_addr = bank;
     e02:	f3 dd       	rcall	.-1050   	; 0x9ea <internal_eeprom_write8>
     e04:	91 d2       	rcall	.+1314   	; 0x1328 <clear_bank_leds>
      internal_eeprom_write8(MIDIIN_ADDR_EEADDR, midi_in_addr);
     e06:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <midi_in_addr>
     e0a:	9b d2       	rcall	.+1334   	; 0x1342 <set_bank_led>
     e0c:	d0 91 cd 01 	lds	r29, 0x01CD	; 0x8001cd <bank>
      clear_bank_leds();
     e10:	8f df       	rcall	.-226    	; 0xd30 <midi_getch>
      set_bank_led(midi_in_addr);
     e12:	89 2b       	or	r24, r25
     e14:	29 f3       	breq	.-54     	; 0xde0 <do_midi_mode+0x26>
     e16:	97 df       	rcall	.-210    	; 0xd46 <midi_getchar>
     e18:	9c 01       	movw	r18, r24
      last_bank = bank;
     e1a:	c8 2f       	mov	r28, r24
    if (midi_getch()) {
     e1c:	87 ff       	sbrs	r24, 7
     e1e:	0e c0       	rjmp	.+28     	; 0xe3c <do_midi_mode+0x82>
     e20:	98 2f       	mov	r25, r24
      c = midi_getchar();
     e22:	92 95       	swap	r25
     e24:	9f 70       	andi	r25, 0x0F	; 15
     e26:	9f 30       	cpi	r25, 0x0F	; 15
      if (c >> 7) {       // if the top bit is high, this is a command
     e28:	39 f0       	breq	.+14     	; 0xe38 <do_midi_mode+0x7e>
     e2a:	2f 70       	andi	r18, 0x0F	; 15
	if ((c >> 4 == 0xF) ||    // universal cmd, no addressing
     e2c:	33 27       	eor	r19, r19
     e2e:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <midi_in_addr>
	    ((c & 0xF) == midi_in_addr)) {  // matches our addr
     e32:	42 17       	cp	r20, r18
     e34:	13 06       	cpc	r1, r19
     e36:	89 f4       	brne	.+34     	; 0xe5a <do_midi_mode+0xa0>
	if ((c >> 4 == 0xF) ||    // universal cmd, no addressing
     e38:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <midi_running_status>
     e3c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <midi_running_status>
      switch (midi_running_status) {
     e40:	98 30       	cpi	r25, 0x08	; 8
     e42:	71 f0       	breq	.+28     	; 0xe60 <do_midi_mode+0xa6>
     e44:	99 30       	cpi	r25, 0x09	; 9
     e46:	61 f6       	brne	.-104    	; 0xde0 <do_midi_mode+0x26>
     e48:	87 ff       	sbrs	r24, 7
	  if (c >> 7)  // if the last byte was a command then we have to get the note
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <do_midi_mode+0x96>
     e4c:	7c df       	rcall	.-264    	; 0xd46 <midi_getchar>
	    note = midi_getchar();
     e4e:	c8 2f       	mov	r28, r24
     e50:	7a df       	rcall	.-268    	; 0xd46 <midi_getchar>
     e52:	68 2f       	mov	r22, r24
	  velocity = midi_getchar();
     e54:	8c 2f       	mov	r24, r28
     e56:	24 df       	rcall	.-440    	; 0xca0 <midi_note_on>
     e58:	c3 cf       	rjmp	.-122    	; 0xde0 <do_midi_mode+0x26>
	  midi_note_on(note, velocity);
     e5a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <midi_running_status>
     e5e:	c0 cf       	rjmp	.-128    	; 0xde0 <do_midi_mode+0x26>
	  break;
     e60:	87 ff       	sbrs	r24, 7
	  midi_running_status = MIDI_IGNORE; 
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <do_midi_mode+0xae>
     e64:	70 df       	rcall	.-288    	; 0xd46 <midi_getchar>
	  continue;
     e66:	c8 2f       	mov	r28, r24
	  if (c >> 7) 
     e68:	6e df       	rcall	.-292    	; 0xd46 <midi_getchar>
     e6a:	68 2f       	mov	r22, r24
	    note = midi_getchar();
     e6c:	8c 2f       	mov	r24, r28
     e6e:	0e df       	rcall	.-484    	; 0xc8c <midi_note_off>
     e70:	b7 cf       	rjmp	.-146    	; 0xde0 <do_midi_mode+0x26>

00000e72 <midi_stop>:
	  velocity = midi_getchar();
     e72:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     e76:	82 30       	cpi	r24, 0x02	; 2
	  midi_note_off(note, velocity);
     e78:	19 f0       	breq	.+6      	; 0xe80 <midi_stop+0xe>
    midi_putchar(MIDI_STOP);
     e7a:	8c ef       	ldi	r24, 0xFC	; 252
     e7c:	2b df       	rcall	.-426    	; 0xcd4 <midi_putchar>
	  break;
     e7e:	94 cf       	rjmp	.-216    	; 0xda8 <midi_notesoff>
    midi_notesoff();
     e80:	08 95       	ret

00000e82 <dinsync_start>:
extern volatile uint8_t note_counter;
extern uint16_t timer3_init;

/* output functions (dinsync_start/stop) start and stop dinsync
   that is clocked from the internal tempo function */
void dinsync_start(void) {
     e82:	cf 93       	push	r28
  uint8_t flag = is_tempo_running();
     e84:	72 d9       	rcall	.-3356   	; 0x16a <is_tempo_running>
     e86:	c8 2f       	mov	r28, r24
  
  // make sure we're not in a "dinsync in" mode
  if (sync != DIN_SYNC) {
     e88:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	a9 f0       	breq	.+42     	; 0xeba <dinsync_start+0x38>
    //putstring("Starting DIN Sync\n\r");
    if (flag) 
      turn_off_tempo(); // if tempo was on, turn if off
     e90:	c1 11       	cpse	r28, r1
     e92:	62 d9       	rcall	.-3388   	; 0x158 <turn_off_tempo>

    // set the clock low (rising edge is a clock)
    cbi(DINSYNC_PORT, DINSYNC_CLK);
     e94:	94 98       	cbi	0x12, 4	; 18
    // send start signal
    DINSYNC_PORT |= _BV(DINSYNC_START);

    // wait for start signal to be noticed, then start the tempo up again.
    delay_ms(5);
     e96:	97 9a       	sbi	0x12, 7	; 18
     e98:	85 e0       	ldi	r24, 0x05	; 5
     e9a:	96 de       	rcall	.-724    	; 0xbc8 <delay_ms>
    TCNT3 = timer3_init - 10;       // make it start soon
     e9c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <timer3_init>
     ea0:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <timer3_init+0x1>
     ea4:	0a 97       	sbiw	r24, 0x0a	; 10
     ea6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     eaa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    dinsync_counter = 0;
     eae:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <dinsync_counter>
    note_counter = 0;
     eb2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <note_counter>
    if (flag)
      turn_on_tempo();
     eb6:	c1 11       	cpse	r28, r1
     eb8:	49 d9       	rcall	.-3438   	; 0x14c <turn_on_tempo>
  }
}
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <dinsync_stop>:

void dinsync_stop(void) {
  if (sync != DIN_SYNC) {  // make sure we're not input mode
     ebe:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	09 f0       	breq	.+2      	; 0xec8 <dinsync_stop+0xa>
    //putstring("Stopping DinSync\n\r");
    cbi(DINSYNC_PORT, DINSYNC_START);   // easy, just set Start low.
     ec6:	97 98       	cbi	0x12, 7	; 18
  }
}
     ec8:	08 95       	ret

00000eca <dinsync_started>:
/* dinsync_started returns TRUE if the start pin is high and the previous
   call to this function was FALSE (ie. since the last function call, dinsync
   has started */
uint8_t dinsync_started(void) {
  uint8_t curr_dinsync_s;
  curr_dinsync_s = (DINSYNC_PIN >> DINSYNC_START) & 0x1;
     eca:	80 b3       	in	r24, 0x10	; 16
     ecc:	88 1f       	adc	r24, r24
     ece:	88 27       	eor	r24, r24
     ed0:	88 1f       	adc	r24, r24

  if (!last_dinsync_start && curr_dinsync_s) {
     ed2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <last_dinsync_start>
     ed6:	91 11       	cpse	r25, r1
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <dinsync_started+0x1c>
     eda:	88 23       	and	r24, r24
     edc:	21 f0       	breq	.+8      	; 0xee6 <dinsync_started+0x1c>
    last_dinsync_start = curr_dinsync_s;
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <last_dinsync_start>
    return TRUE;
     ee4:	08 95       	ret
  }

  last_dinsync_start = curr_dinsync_s;
     ee6:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <last_dinsync_start>
  return FALSE;
     eea:	80 e0       	ldi	r24, 0x00	; 0
}
     eec:	08 95       	ret

00000eee <dinsync_stopped>:
/* dinsync_stopped returns TRUE if the start pin is low and the previous
   call to this function was FALSE (ie. since the last function call, dinsync
   has stopped */
uint8_t dinsync_stopped(void) {
  uint8_t curr_dinsync_s;
  curr_dinsync_s = (DINSYNC_PIN >> DINSYNC_START) & 0x1;
     eee:	80 b3       	in	r24, 0x10	; 16
     ef0:	88 1f       	adc	r24, r24
     ef2:	88 27       	eor	r24, r24
     ef4:	88 1f       	adc	r24, r24

  if (last_dinsync_stop && !curr_dinsync_s) {
     ef6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <last_dinsync_stop>
     efa:	99 23       	and	r25, r25
     efc:	31 f0       	breq	.+12     	; 0xf0a <dinsync_stopped+0x1c>
     efe:	81 11       	cpse	r24, r1
     f00:	04 c0       	rjmp	.+8      	; 0xf0a <dinsync_stopped+0x1c>
    last_dinsync_stop = curr_dinsync_s;
     f02:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <last_dinsync_stop>
    return TRUE;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	08 95       	ret
  }

  last_dinsync_stop = curr_dinsync_s;
     f0a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <last_dinsync_stop>
  return FALSE;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
}
     f10:	08 95       	ret

00000f12 <dinsync_set_out>:


/* these functions set the input/output descriptors */
void dinsync_set_out() {

  DINSYNC_DDR |= _BV(DINSYNC_START) | _BV(DINSYNC_CLK) |
     f12:	81 b3       	in	r24, 0x11	; 17
     f14:	80 6f       	ori	r24, 0xF0	; 240
     f16:	81 bb       	out	0x11, r24	; 17
    _BV(DINSYNC_4) | _BV(DINSYNC_5);

  DINSYNC_PORT &= ~( _BV(DINSYNC_START) | _BV(DINSYNC_CLK) |
     f18:	82 b3       	in	r24, 0x12	; 18
     f1a:	8f 70       	andi	r24, 0x0F	; 15
     f1c:	82 bb       	out	0x12, r24	; 18
		    _BV(DINSYNC_4) | _BV(DINSYNC_5) );

}
     f1e:	08 95       	ret

00000f20 <dinsync_set_in>:

void dinsync_set_in() {

  DINSYNC_DDR &= ~( _BV(DINSYNC_START) | _BV(DINSYNC_CLK) |
     f20:	81 b3       	in	r24, 0x11	; 17
     f22:	8f 70       	andi	r24, 0x0F	; 15
     f24:	81 bb       	out	0x11, r24	; 17
		    _BV(DINSYNC_4) | _BV(DINSYNC_5) );

  DINSYNC_PORT &= ~( _BV(DINSYNC_START) | _BV(DINSYNC_CLK) |
     f26:	82 b3       	in	r24, 0x12	; 18
     f28:	8f 70       	andi	r24, 0x0F	; 15
     f2a:	82 bb       	out	0x12, r24	; 18
		    _BV(DINSYNC_4) | _BV(DINSYNC_5) );

}
     f2c:	08 95       	ret

00000f2e <read_keypad>:
}

void read_keypad(uint8_t *switchinput) {
  uint8_t i;

  cli();
     f2e:	f8 94       	cli

  cbi(SWITCH_LATCH_PORT, SWITCH_LATCH_PIN);
     f30:	c0 98       	cbi	0x18, 0	; 24
	...
  NOP; NOP; NOP; NOP;
  sbi(SWITCH_LATCH_PORT, SWITCH_LATCH_PIN);
     f3a:	c0 9a       	sbi	0x18, 0	; 24
  for (i=0; i<3; i++) {
     f3c:	fc 01       	movw	r30, r24
     f3e:	03 96       	adiw	r24, 0x03	; 3
    SPDR = 0;
     f40:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & (1<<SPIF)));
     f42:	77 9b       	sbis	0x0e, 7	; 14
     f44:	fe cf       	rjmp	.-4      	; 0xf42 <read_keypad+0x14>
    switchinput[i] = SPDR;
     f46:	2f b1       	in	r18, 0x0f	; 15
     f48:	21 93       	st	Z+, r18
  for (i=0; i<3; i++) {
     f4a:	e8 17       	cp	r30, r24
     f4c:	f9 07       	cpc	r31, r25
     f4e:	c1 f7       	brne	.-16     	; 0xf40 <read_keypad+0x12>
  }
  //printf("got %2x %2x %2x\n\r", switches[2], switches[1], switches[0]);

  sei();
     f50:	78 94       	sei
}
     f52:	08 95       	ret

00000f54 <select_bank_read>:

// we need to call this, then wait a bit, then read the value off the pins
void select_bank_read(void) {
  BANK_COMMON_PORT &= ~_BV(BANK_COMMON_PIN);
     f54:	de 98       	cbi	0x1b, 6	; 27
}
     f56:	08 95       	ret

00000f58 <select_func_read>:

// we need to call this, then wait a bit, then read the value off the pins
void select_func_read(void) {
  FUNC_COMMON_PORT |= _BV(FUNC_COMMON_PIN);
     f58:	de 9a       	sbi	0x1b, 6	; 27
}
     f5a:	08 95       	ret

00000f5c <read_bank>:

uint8_t read_bank() {
  uint8_t val;

  val = BANK_PIN;
     f5c:	89 b3       	in	r24, 0x19	; 25
  val = (val >> 2) & 0xF;
     f5e:	86 95       	lsr	r24
     f60:	86 95       	lsr	r24
     f62:	8f 70       	andi	r24, 0x0F	; 15
  val = (val >> 3) | ((val >> 1)&0x2) | ((val << 1)&0x4) | ((val << 3)&0x8);
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	98 2f       	mov	r25, r24
     f6a:	96 95       	lsr	r25
     f6c:	92 70       	andi	r25, 0x02	; 2
     f6e:	86 95       	lsr	r24
     f70:	86 95       	lsr	r24
     f72:	86 95       	lsr	r24
     f74:	98 2b       	or	r25, r24
     f76:	a9 01       	movw	r20, r18
     f78:	44 0f       	add	r20, r20
     f7a:	55 1f       	adc	r21, r21
     f7c:	44 70       	andi	r20, 0x04	; 4
     f7e:	94 2b       	or	r25, r20
     f80:	43 e0       	ldi	r20, 0x03	; 3
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	4a 95       	dec	r20
     f88:	e1 f7       	brne	.-8      	; 0xf82 <read_bank+0x26>
     f8a:	28 70       	andi	r18, 0x08	; 8
     f8c:	92 2b       	or	r25, r18
  return 15-val;
}
     f8e:	8f e0       	ldi	r24, 0x0F	; 15
     f90:	89 1b       	sub	r24, r25
     f92:	08 95       	ret

00000f94 <read_function>:

uint8_t read_function() {
  uint8_t val;

  val = FUNC_PIN;
     f94:	89 b3       	in	r24, 0x19	; 25
  val = (val >> 2) & 0xF;
     f96:	86 95       	lsr	r24
     f98:	86 95       	lsr	r24

  return val;
}
     f9a:	8f 70       	andi	r24, 0x0F	; 15
     f9c:	08 95       	ret

00000f9e <read_switches>:
void read_switches(void) {
     f9e:	af 92       	push	r10
     fa0:	bf 92       	push	r11
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <read_switches+0x14>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <read_switches+0x16>
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <read_switches+0x18>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
  if (newtempo != tempo)
     fba:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <newtempo>
     fbe:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <newtempo+0x1>
     fc2:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <tempo>
     fc6:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <tempo+0x1>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	29 f0       	breq	.+10     	; 0xfda <read_switches+0x3c>
    change_tempo(newtempo);
     fd0:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <newtempo>
     fd4:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <newtempo+0x1>
     fd8:	13 dd       	rcall	.-1498   	; 0xa00 <change_tempo>
      pressed_switches[i] = 0;
     fda:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <pressed_switches>
      released_switches[i] = 0;
     fde:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <released_switches>
      pressed_switches[i] = 0;
     fe2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <pressed_switches+0x1>
      released_switches[i] = 0;
     fe6:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <released_switches+0x1>
      pressed_switches[i] = 0;
     fea:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <pressed_switches+0x2>
      released_switches[i] = 0;
     fee:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <released_switches+0x2>
  if (debounce_timer < 20)  // timer is in 1ms incr
     ff2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <debounce_timer>
     ff6:	84 31       	cpi	r24, 0x14	; 20
     ff8:	08 f4       	brcc	.+2      	; 0xffc <read_switches+0x5e>
     ffa:	87 c0       	rjmp	.+270    	; 0x110a <read_switches+0x16c>
  debounce_timer = 0;        // reset the timer
     ffc:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <debounce_timer>
  select_bank_read(); // wait a bit then call read_bank
    1000:	a9 df       	rcall	.-174    	; 0xf54 <select_bank_read>
  read_keypad(temp_switches);
    1002:	ce 01       	movw	r24, r28
    1004:	04 96       	adiw	r24, 0x04	; 4
    1006:	93 df       	rcall	.-218    	; 0xf2e <read_keypad>
  keypress_switches[0] = switches[0];
    1008:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <switches>
    100c:	89 83       	std	Y+1, r24	; 0x01
  keypress_switches[1] = switches[1];
    100e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <switches+0x1>
    1012:	8a 83       	std	Y+2, r24	; 0x02
  keypress_switches[2] = switches[2];
    1014:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <switches+0x2>
    1018:	8b 83       	std	Y+3, r24	; 0x03
  for (i=0; i<24; i++) {
    101a:	90 e0       	ldi	r25, 0x00	; 0
    s = (switches[i/8] & (1 <<(i % 8)));
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	29 2f       	mov	r18, r25
    1022:	26 95       	lsr	r18
    1024:	26 95       	lsr	r18
    1026:	26 95       	lsr	r18
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	e9 53       	subi	r30, 0x39	; 57
    102e:	fe 4f       	sbci	r31, 0xFE	; 254
    1030:	f0 80       	ld	r15, Z
    1032:	89 2f       	mov	r24, r25
    1034:	87 70       	andi	r24, 0x07	; 7
    1036:	ba 01       	movw	r22, r20
    1038:	01 c0       	rjmp	.+2      	; 0x103c <read_switches+0x9e>
    103a:	66 0f       	add	r22, r22
    103c:	8a 95       	dec	r24
    103e:	ea f7       	brpl	.-6      	; 0x103a <read_switches+0x9c>
    l = (last_switches[i/8] & (1 <<(i % 8)));
    1040:	89 01       	movw	r16, r18
    1042:	02 53       	subi	r16, 0x32	; 50
    1044:	1e 4f       	sbci	r17, 0xFE	; 254
    1046:	d8 01       	movw	r26, r16
    1048:	8c 91       	ld	r24, X
    t = (temp_switches[i/8] & (1 <<(i % 8)));
    104a:	a4 e0       	ldi	r26, 0x04	; 4
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ac 0f       	add	r26, r28
    1050:	bd 1f       	adc	r27, r29
    1052:	2a 0f       	add	r18, r26
    1054:	3b 1f       	adc	r19, r27
    1056:	d9 01       	movw	r26, r18
    1058:	3c 91       	ld	r19, X
    if (s != 0) {
    105a:	26 2f       	mov	r18, r22
    105c:	20 95       	com	r18
    105e:	2f 21       	and	r18, r15
    s = (switches[i/8] & (1 <<(i % 8)));
    1060:	af 2d       	mov	r26, r15
    1062:	a6 23       	and	r26, r22
    if (s != 0) {
    1064:	09 f4       	brne	.+2      	; 0x1068 <read_switches+0xca>
    1066:	61 c0       	rjmp	.+194    	; 0x112a <read_switches+0x18c>
      switches[i/8] = (switches[i/8] & ~(1 << (i % 8))) | (l | t);
    1068:	83 2b       	or	r24, r19
    106a:	86 23       	and	r24, r22
      switches[i/8] = (switches[i/8] & ~(1 << (i % 8))) | (l & t);
    106c:	82 2b       	or	r24, r18
    106e:	80 83       	st	Z, r24
  for (i=0; i<24; i++) {
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	98 31       	cpi	r25, 0x18	; 24
  i = read_bank();
    1074:	a9 f6       	brne	.-86     	; 0x1020 <read_switches+0x82>
    1076:	72 df       	rcall	.-284    	; 0xf5c <read_bank>
  if ((i != bank) && (i == last_bank)) {
    1078:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <bank>
    107c:	98 17       	cp	r25, r24
    107e:	49 f0       	breq	.+18     	; 0x1092 <read_switches+0xf4>
    1080:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <last_bank>
    1084:	98 13       	cpse	r25, r24
    1086:	05 c0       	rjmp	.+10     	; 0x1092 <read_switches+0xf4>
    bank = i;
    1088:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <bank>
    bank_switched = 1;
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <bank_switched>
  last_bank = i;
    1092:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <last_bank>
  select_func_read();
    1096:	60 df       	rcall	.-320    	; 0xf58 <select_func_read>
  for (i=0; i<3; i++) {
    1098:	fe 01       	movw	r30, r28
    109a:	34 96       	adiw	r30, 0x04	; 4
    109c:	0e ec       	ldi	r16, 0xCE	; 206
    109e:	11 e0       	ldi	r17, 0x01	; 1
    10a0:	be 01       	movw	r22, r28
    10a2:	6f 5f       	subi	r22, 0xFF	; 255
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	47 ec       	ldi	r20, 0xC7	; 199
    10a8:	51 e0       	ldi	r21, 0x01	; 1
    10aa:	23 ec       	ldi	r18, 0xC3	; 195
    10ac:	31 e0       	ldi	r19, 0x01	; 1
    10ae:	8a ec       	ldi	r24, 0xCA	; 202
    10b0:	a8 2e       	mov	r10, r24
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	b8 2e       	mov	r11, r24
    10b6:	7e 01       	movw	r14, r28
    10b8:	b7 e0       	ldi	r27, 0x07	; 7
    10ba:	eb 0e       	add	r14, r27
    10bc:	f1 1c       	adc	r15, r1
    last_switches[i] = temp_switches[i];
    10be:	81 91       	ld	r24, Z+
    10c0:	d8 01       	movw	r26, r16
    10c2:	8d 93       	st	X+, r24
    10c4:	8d 01       	movw	r16, r26
    pressed_switches[i] = (keypress_switches[i] ^ switches[i]) & switches[i];
    10c6:	db 01       	movw	r26, r22
    10c8:	dd 90       	ld	r13, X+
    10ca:	bd 01       	movw	r22, r26
    10cc:	da 01       	movw	r26, r20
    10ce:	8d 91       	ld	r24, X+
    10d0:	ad 01       	movw	r20, r26
    10d2:	9d 2d       	mov	r25, r13
    10d4:	90 95       	com	r25
    10d6:	98 23       	and	r25, r24
    10d8:	d9 01       	movw	r26, r18
    10da:	9d 93       	st	X+, r25
    10dc:	9d 01       	movw	r18, r26
    released_switches[i] = (keypress_switches[i] ^ switches[i]) & keypress_switches[i];
    10de:	80 95       	com	r24
    10e0:	8d 21       	and	r24, r13
    10e2:	d5 01       	movw	r26, r10
    10e4:	8d 93       	st	X+, r24
  for (i=0; i<3; i++) {
    10e6:	5d 01       	movw	r10, r26
    10e8:	ee 16       	cp	r14, r30
    10ea:	ff 06       	cpc	r15, r31
  i = read_function();
    10ec:	41 f7       	brne	.-48     	; 0x10be <read_switches+0x120>
    10ee:	52 df       	rcall	.-348    	; 0xf94 <read_function>
  if ((i != function) && (i == last_func)) {
    10f0:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <function>
    10f4:	98 17       	cp	r25, r24
    10f6:	31 f0       	breq	.+12     	; 0x1104 <read_switches+0x166>
    10f8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <last_func>
    10fc:	98 13       	cpse	r25, r24
    function = i;
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <read_switches+0x166>
    1100:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <function>
  last_func = i;
    1104:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <last_func>
  clock_leds();
    1108:	07 d2       	rcall	.+1038   	; 0x1518 <clock_leds>
}
    110a:	26 96       	adiw	r28, 0x06	; 6
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	df 91       	pop	r29
    1118:	cf 91       	pop	r28
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	ff 90       	pop	r15
    1120:	ef 90       	pop	r14
    1122:	df 90       	pop	r13
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	08 95       	ret
    l = (last_switches[i/8] & (1 <<(i % 8)));
    112a:	86 23       	and	r24, r22
      switches[i/8] = (switches[i/8] & ~(1 << (i % 8))) | (l & t);
    112c:	83 23       	and	r24, r19
    112e:	9e cf       	rjmp	.-196    	; 0x106c <read_switches+0xce>

00001130 <key_action>:

// prototype for key pressing/releasing detection
uint8_t key_action(uint8_t key, uint8_t* keyvec) { 
    1130:	28 2f       	mov	r18, r24
  if (key >= 24)
    1132:	28 31       	cpi	r18, 0x18	; 24
    1134:	90 f4       	brcc	.+36     	; 0x115a <key_action+0x2a>
    return 0;

  if ((keyvec[key/8] & (1 << key%8)) != 0)
    1136:	e2 2f       	mov	r30, r18
    1138:	e6 95       	lsr	r30
    113a:	e6 95       	lsr	r30
    113c:	e6 95       	lsr	r30
    113e:	e6 0f       	add	r30, r22
    1140:	f7 2f       	mov	r31, r23
    1142:	f1 1d       	adc	r31, r1
    1144:	90 81       	ld	r25, Z
    1146:	89 2f       	mov	r24, r25
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	27 70       	andi	r18, 0x07	; 7
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <key_action+0x22>
    114e:	95 95       	asr	r25
    1150:	87 95       	ror	r24
    1152:	2a 95       	dec	r18
    1154:	e2 f7       	brpl	.-8      	; 0x114e <key_action+0x1e>
    1156:	81 70       	andi	r24, 0x01	; 1
    return 0;
    1158:	08 95       	ret
    return 1;
  else
    return 0;
}
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	08 95       	ret

0000115e <is_pressed>:

// returns 1 if that key is pressed
uint8_t is_pressed(uint8_t key) { 
  return key_action(key, switches);
    115e:	67 ec       	ldi	r22, 0xC7	; 199
    1160:	71 e0       	ldi	r23, 0x01	; 1
    1162:	e6 cf       	rjmp	.-52     	; 0x1130 <key_action>
    1164:	08 95       	ret

00001166 <get_lowest_key_pressed>:
  if ((switches[0] == 0) && (switches[1] == 0) && (switches[2] == 0))
    return 1;
  return 0;
}

static uint8_t get_lowest_key_pressed(const uint8_t* key_tab, uint8_t size) {
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < size; i++) {
    116e:	d6 2f       	mov	r29, r22
    1170:	8c 01       	movw	r16, r24
    if (is_pressed(key_tab[i]))
    1172:	c0 e0       	ldi	r28, 0x00	; 0
    1174:	f8 01       	movw	r30, r16
    1176:	81 91       	ld	r24, Z+
    1178:	8f 01       	movw	r16, r30
    117a:	f1 df       	rcall	.-30     	; 0x115e <is_pressed>
    117c:	cf 5f       	subi	r28, 0xFF	; 255
    117e:	81 11       	cpse	r24, r1
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <get_lowest_key_pressed+0x22>
  for (i = 0; i < size; i++) {
    1182:	cd 13       	cpse	r28, r29
    1184:	f7 cf       	rjmp	.-18     	; 0x1174 <get_lowest_key_pressed+0xe>
      return i+1;
  }
  return 0;
}
    1186:	c0 e0       	ldi	r28, 0x00	; 0
    1188:	8c 2f       	mov	r24, r28
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	08 95       	ret

00001194 <just_pressed>:
  return key_action(key, pressed_switches);
    1194:	63 ec       	ldi	r22, 0xC3	; 195
    1196:	71 e0       	ldi	r23, 0x01	; 1
    1198:	cb cf       	rjmp	.-106    	; 0x1130 <key_action>
    119a:	08 95       	ret

0000119c <get_lowest_key_just_pressed>:
uint8_t get_lowest_numkey_pressed(void) {
  return get_lowest_key_pressed(numkey_tab, 8);
}


static uint8_t get_lowest_key_just_pressed(const uint8_t* key_tab, uint8_t size) {
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < size; i++) {
    11a4:	d6 2f       	mov	r29, r22
    11a6:	8c 01       	movw	r16, r24
    if (just_pressed(key_tab[i]))
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	f8 01       	movw	r30, r16
    11ac:	81 91       	ld	r24, Z+
    11ae:	8f 01       	movw	r16, r30
    11b0:	f1 df       	rcall	.-30     	; 0x1194 <just_pressed>
    11b2:	cf 5f       	subi	r28, 0xFF	; 255
    11b4:	81 11       	cpse	r24, r1
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <get_lowest_key_just_pressed+0x22>
  for (i = 0; i < size; i++) {
    11b8:	cd 13       	cpse	r28, r29
      return i+1;
  }
  return 0;
    11ba:	f7 cf       	rjmp	.-18     	; 0x11aa <get_lowest_key_just_pressed+0xe>
}
    11bc:	c0 e0       	ldi	r28, 0x00	; 0
    11be:	8c 2f       	mov	r24, r28
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <just_released>:
  return key_action(key, released_switches);
    11ca:	6a ec       	ldi	r22, 0xCA	; 202
    11cc:	71 e0       	ldi	r23, 0x01	; 1
    11ce:	b0 cf       	rjmp	.-160    	; 0x1130 <key_action>
    11d0:	08 95       	ret

000011d2 <no_keys_pressed>:
  if ((switches[0] == 0) && (switches[1] == 0) && (switches[2] == 0))
    11d2:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <switches>
    11d6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <switches+0x1>
    11da:	98 2b       	or	r25, r24
    11dc:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <switches+0x2>
    11e0:	98 2b       	or	r25, r24
    11e2:	81 e0       	ldi	r24, 0x01	; 1
}
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <no_keys_pressed+0x16>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret

000011ea <get_lowest_notekey_pressed>:
  return get_lowest_key_pressed(loopkey_tab, 13)-1;
    11ea:	6d e0       	ldi	r22, 0x0D	; 13
    11ec:	87 e0       	ldi	r24, 0x07	; 7
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	ba df       	rcall	.-140    	; 0x1166 <get_lowest_key_pressed>
}
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	08 95       	ret

000011f6 <get_lowest_numkey_pressed>:
  return get_lowest_key_pressed(numkey_tab, 8);
    11f6:	68 e0       	ldi	r22, 0x08	; 8
    11f8:	87 e1       	ldi	r24, 0x17	; 23
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	b4 cf       	rjmp	.-152    	; 0x1166 <get_lowest_key_pressed>
}
    11fe:	08 95       	ret

00001200 <get_lowest_numkey_just_pressed>:

uint8_t get_lowest_numkey_just_pressed(void) {
  return get_lowest_key_just_pressed(numkey_tab, 8);
    1200:	68 e0       	ldi	r22, 0x08	; 8
    1202:	87 e1       	ldi	r24, 0x17	; 23
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	ca cf       	rjmp	.-108    	; 0x119c <get_lowest_key_just_pressed>
    1208:	08 95       	ret

0000120a <get_lowest_loopkey_just_pressed>:
}

uint8_t get_lowest_loopkey_just_pressed(void) {
  return get_lowest_key_just_pressed(loopkey_tab, 16);
    120a:	60 e1       	ldi	r22, 0x10	; 16
    120c:	87 e0       	ldi	r24, 0x07	; 7
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	c5 cf       	rjmp	.-118    	; 0x119c <get_lowest_key_just_pressed>
    1212:	08 95       	ret

00001214 <get_lowest_notekey_just_pressed>:
}

uint8_t get_lowest_notekey_just_pressed(void) {
  return get_lowest_key_just_pressed(loopkey_tab, 13);
    1214:	6d e0       	ldi	r22, 0x0D	; 13
    1216:	87 e0       	ldi	r24, 0x07	; 7
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	c0 cf       	rjmp	.-128    	; 0x119c <get_lowest_key_just_pressed>
    121c:	08 95       	ret

0000121e <has_bank_knob_changed>:
}

uint8_t has_bank_knob_changed(void) {
  uint8_t temp = bank_switched;
    121e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bank_switched>
  bank_switched = 0;
    1222:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <bank_switched>
  return temp;
}
    1226:	08 95       	ret

00001228 <set_led_proto>:
  LED_B,
  LED_C2
};

static void set_led_proto(uint8_t ledno, uint8_t* led_array) {
  if (ledno >= MAX_LED)
    1228:	88 32       	cpi	r24, 0x28	; 40
    122a:	88 f4       	brcc	.+34     	; 0x124e <set_led_proto+0x26>
    return;
  led_array[ledno / 8] |= 1 << (ledno % 8);
    122c:	e8 2f       	mov	r30, r24
    122e:	e6 95       	lsr	r30
    1230:	e6 95       	lsr	r30
    1232:	e6 95       	lsr	r30
    1234:	e6 0f       	add	r30, r22
    1236:	f7 2f       	mov	r31, r23
    1238:	f1 1d       	adc	r31, r1
    123a:	87 70       	andi	r24, 0x07	; 7
    123c:	21 e0       	ldi	r18, 0x01	; 1
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <set_led_proto+0x1c>
    1242:	22 0f       	add	r18, r18
    1244:	8a 95       	dec	r24
    1246:	ea f7       	brpl	.-6      	; 0x1242 <set_led_proto+0x1a>
    1248:	80 81       	ld	r24, Z
    124a:	82 2b       	or	r24, r18
    124c:	80 83       	st	Z, r24
}
    124e:	08 95       	ret

00001250 <set_led>:

void set_led(uint8_t ledno) {
  set_led_proto(ledno, leds);
    1250:	69 e7       	ldi	r22, 0x79	; 121
    1252:	71 e0       	ldi	r23, 0x01	; 1
    1254:	e9 cf       	rjmp	.-46     	; 0x1228 <set_led_proto>
}
    1256:	08 95       	ret

00001258 <set_led_blink>:

void set_led_blink(uint8_t ledno) {
  set_led_proto(ledno, blinkleds);
    1258:	64 e7       	ldi	r22, 0x74	; 116
    125a:	71 e0       	ldi	r23, 0x01	; 1
    125c:	e5 cf       	rjmp	.-54     	; 0x1228 <set_led_proto>
}
    125e:	08 95       	ret

00001260 <clear_led_blink>:


void clear_led_blink(uint8_t ledno) {
  if (ledno >= MAX_LED)
    1260:	88 32       	cpi	r24, 0x28	; 40
    1262:	98 f4       	brcc	.+38     	; 0x128a <clear_led_blink+0x2a>
    return;
  blinkleds[ledno / 8] &= ~_BV(ledno % 8);
    1264:	e8 2f       	mov	r30, r24
    1266:	e6 95       	lsr	r30
    1268:	e6 95       	lsr	r30
    126a:	e6 95       	lsr	r30
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	ec 58       	subi	r30, 0x8C	; 140
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	28 2f       	mov	r18, r24
    1274:	27 70       	andi	r18, 0x07	; 7
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	01 c0       	rjmp	.+2      	; 0x127e <clear_led_blink+0x1e>
    127c:	88 0f       	add	r24, r24
    127e:	2a 95       	dec	r18
    1280:	ea f7       	brpl	.-6      	; 0x127c <clear_led_blink+0x1c>
    1282:	80 95       	com	r24
    1284:	90 81       	ld	r25, Z
    1286:	89 23       	and	r24, r25
    1288:	80 83       	st	Z, r24
}
    128a:	08 95       	ret

0000128c <is_led_blink>:

uint8_t is_led_blink(uint8_t ledno) {
  if (ledno >= MAX_LED)
    128c:	88 32       	cpi	r24, 0x28	; 40
    128e:	88 f4       	brcc	.+34     	; 0x12b2 <is_led_blink+0x26>
    return 0;
  return blinkleds[ledno / 8] & _BV(ledno % 8);
    1290:	e8 2f       	mov	r30, r24
    1292:	e6 95       	lsr	r30
    1294:	e6 95       	lsr	r30
    1296:	e6 95       	lsr	r30
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	ec 58       	subi	r30, 0x8C	; 140
    129c:	fe 4f       	sbci	r31, 0xFE	; 254
    129e:	87 70       	andi	r24, 0x07	; 7
    12a0:	21 e0       	ldi	r18, 0x01	; 1
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <is_led_blink+0x1c>
    12a6:	22 0f       	add	r18, r18
    12a8:	8a 95       	dec	r24
    12aa:	ea f7       	brpl	.-6      	; 0x12a6 <is_led_blink+0x1a>
    12ac:	80 81       	ld	r24, Z
    12ae:	82 23       	and	r24, r18
    12b0:	08 95       	ret
    return 0;
    12b2:	80 e0       	ldi	r24, 0x00	; 0
}
    12b4:	08 95       	ret

000012b6 <clear_led>:

void clear_led(uint8_t ledno) {
  if (ledno >= MAX_LED)
    12b6:	88 32       	cpi	r24, 0x28	; 40
    12b8:	98 f4       	brcc	.+38     	; 0x12e0 <clear_led+0x2a>
    return;
  leds[ledno / 8] &= ~(1 << (ledno % 8));
    12ba:	e8 2f       	mov	r30, r24
    12bc:	e6 95       	lsr	r30
    12be:	e6 95       	lsr	r30
    12c0:	e6 95       	lsr	r30
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	e7 58       	subi	r30, 0x87	; 135
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	28 2f       	mov	r18, r24
    12ca:	27 70       	andi	r18, 0x07	; 7
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <clear_led+0x1e>
    12d2:	88 0f       	add	r24, r24
    12d4:	2a 95       	dec	r18
    12d6:	ea f7       	brpl	.-6      	; 0x12d2 <clear_led+0x1c>
    12d8:	80 95       	com	r24
    12da:	90 81       	ld	r25, Z
    12dc:	89 23       	and	r24, r25
    12de:	80 83       	st	Z, r24
}
    12e0:	08 95       	ret

000012e2 <is_led_set>:

int is_led_set(uint8_t ledno) {
  return (leds[ledno/8] >> (ledno % 8)) & 0x1;
    12e2:	e8 2f       	mov	r30, r24
    12e4:	e6 95       	lsr	r30
    12e6:	e6 95       	lsr	r30
    12e8:	e6 95       	lsr	r30
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	e7 58       	subi	r30, 0x87	; 135
    12ee:	fe 4f       	sbci	r31, 0xFE	; 254
    12f0:	20 81       	ld	r18, Z
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	87 70       	andi	r24, 0x07	; 7
    12f6:	a9 01       	movw	r20, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <is_led_set+0x1c>
    12fa:	55 95       	asr	r21
    12fc:	47 95       	ror	r20
    12fe:	8a 95       	dec	r24
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <is_led_set+0x18>
    1302:	ca 01       	movw	r24, r20
}
    1304:	81 70       	andi	r24, 0x01	; 1
    1306:	99 27       	eor	r25, r25
    1308:	08 95       	ret

0000130a <clear_all_leds>:

void clear_all_leds(void) {
  leds[0] = leds[1] = leds[2] = leds[3] = leds[4] = 0;
    130a:	e9 e7       	ldi	r30, 0x79	; 121
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	14 82       	std	Z+4, r1	; 0x04
    1310:	13 82       	std	Z+3, r1	; 0x03
    1312:	12 82       	std	Z+2, r1	; 0x02
    1314:	11 82       	std	Z+1, r1	; 0x01
    1316:	10 82       	st	Z, r1
  blinkleds[0] = blinkleds[1] = blinkleds[2] = blinkleds[3] = blinkleds[4] = 0;
    1318:	e4 e7       	ldi	r30, 0x74	; 116
    131a:	f1 e0       	ldi	r31, 0x01	; 1
    131c:	14 82       	std	Z+4, r1	; 0x04
    131e:	13 82       	std	Z+3, r1	; 0x03
    1320:	12 82       	std	Z+2, r1	; 0x02
    1322:	11 82       	std	Z+1, r1	; 0x01
    1324:	10 82       	st	Z, r1
}
    1326:	08 95       	ret

00001328 <clear_bank_leds>:

// bank leds (strip of 16 above keys)

void clear_bank_leds(void) {
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
  uint8_t  i;
  for (i=0; i<16; i++) {
    132c:	cc e4       	ldi	r28, 0x4C	; 76
    clear_led(bank_led_tab[i]);
    132e:	d1 e0       	ldi	r29, 0x01	; 1
    1330:	89 91       	ld	r24, Y+
    1332:	c1 df       	rcall	.-126    	; 0x12b6 <clear_led>
  for (i=0; i<16; i++) {
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	cc 35       	cpi	r28, 0x5C	; 92
    1338:	d8 07       	cpc	r29, r24
    133a:	d1 f7       	brne	.-12     	; 0x1330 <clear_bank_leds+0x8>
  }
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <set_bank_led>:

void set_bank_led(uint8_t num) {
  if (num >= 16)
    1342:	80 31       	cpi	r24, 0x10	; 16
    1344:	30 f4       	brcc	.+12     	; 0x1352 <set_bank_led+0x10>
    return;
  set_led(bank_led_tab[num]);
    1346:	e8 2f       	mov	r30, r24
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	e4 5b       	subi	r30, 0xB4	; 180
    134c:	fe 4f       	sbci	r31, 0xFE	; 254
    134e:	80 81       	ld	r24, Z
    1350:	7f cf       	rjmp	.-258    	; 0x1250 <set_led>
}
    1352:	08 95       	ret

00001354 <set_bank_led_blink>:

void set_bank_led_blink(uint8_t num) {
  if (num >= 16)
    1354:	80 31       	cpi	r24, 0x10	; 16
    1356:	30 f4       	brcc	.+12     	; 0x1364 <set_bank_led_blink+0x10>
    return;
  set_led_blink(bank_led_tab[num]);
    1358:	e8 2f       	mov	r30, r24
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	e4 5b       	subi	r30, 0xB4	; 180
    135e:	fe 4f       	sbci	r31, 0xFE	; 254
    1360:	80 81       	ld	r24, Z
    1362:	7a cf       	rjmp	.-268    	; 0x1258 <set_led_blink>
}
    1364:	08 95       	ret

00001366 <is_bank_led_set>:


uint8_t is_bank_led_set(uint8_t num) {
 if (num >= 16)
    1366:	80 31       	cpi	r24, 0x10	; 16
    1368:	38 f4       	brcc	.+14     	; 0x1378 <is_bank_led_set+0x12>
    return 0;
  return is_led_set(bank_led_tab[num]);
    136a:	e8 2f       	mov	r30, r24
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	e4 5b       	subi	r30, 0xB4	; 180
    1370:	fe 4f       	sbci	r31, 0xFE	; 254
    1372:	80 81       	ld	r24, Z
    1374:	b6 cf       	rjmp	.-148    	; 0x12e2 <is_led_set>
    1376:	08 95       	ret
    return 0;
    1378:	80 e0       	ldi	r24, 0x00	; 0
}
    137a:	08 95       	ret

0000137c <is_bank_led_blink>:

uint8_t is_bank_led_blink(uint8_t num) { 
  if (num >= 16)
    137c:	80 31       	cpi	r24, 0x10	; 16
    return 0;
  return is_led_blink(bank_led_tab[num]);
    137e:	38 f4       	brcc	.+14     	; 0x138e <is_bank_led_blink+0x12>
    1380:	e8 2f       	mov	r30, r24
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	e4 5b       	subi	r30, 0xB4	; 180
    1386:	fe 4f       	sbci	r31, 0xFE	; 254
    1388:	80 81       	ld	r24, Z
    138a:	80 cf       	rjmp	.-256    	; 0x128c <is_led_blink>
    138c:	08 95       	ret
    return 0;
    138e:	80 e0       	ldi	r24, 0x00	; 0
}
    1390:	08 95       	ret

00001392 <set_key_led>:

// key leds (all but tempo/bank)
void set_key_led(uint8_t num) {
  if (num >= 24)
    1392:	88 31       	cpi	r24, 0x18	; 24
    return;
  set_led(key_led_tab[num]);
    1394:	30 f4       	brcc	.+12     	; 0x13a2 <set_key_led+0x10>
    1396:	e8 2f       	mov	r30, r24
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ec 5c       	subi	r30, 0xCC	; 204
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
    139e:	80 81       	ld	r24, Z
    13a0:	57 cf       	rjmp	.-338    	; 0x1250 <set_led>
}
    13a2:	08 95       	ret

000013a4 <set_key_led_blink>:

void set_key_led_blink(uint8_t num) {
  if (num >= 24)
    13a4:	88 31       	cpi	r24, 0x18	; 24
    13a6:	30 f4       	brcc	.+12     	; 0x13b4 <set_key_led_blink+0x10>
    return;
  set_led_blink(key_led_tab[num]);
    13a8:	e8 2f       	mov	r30, r24
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	ec 5c       	subi	r30, 0xCC	; 204
    13ae:	fe 4f       	sbci	r31, 0xFE	; 254
    13b0:	80 81       	ld	r24, Z
    13b2:	52 cf       	rjmp	.-348    	; 0x1258 <set_led_blink>
}
    13b4:	08 95       	ret

000013b6 <clear_key_led>:

void clear_key_led(uint8_t num) {
  if (num >= 24)
    13b6:	88 31       	cpi	r24, 0x18	; 24
    13b8:	30 f4       	brcc	.+12     	; 0x13c6 <clear_key_led+0x10>
    return;
  clear_led(key_led_tab[num]);
    13ba:	e8 2f       	mov	r30, r24
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	ec 5c       	subi	r30, 0xCC	; 204
    13c0:	fe 4f       	sbci	r31, 0xFE	; 254
    13c2:	80 81       	ld	r24, Z
    13c4:	78 cf       	rjmp	.-272    	; 0x12b6 <clear_led>
}
    13c6:	08 95       	ret

000013c8 <clear_key_leds>:

void clear_key_leds(void) {
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
  uint8_t i;
  for (i=0; i<24; i++) {
    13cc:	c4 e3       	ldi	r28, 0x34	; 52
    13ce:	d1 e0       	ldi	r29, 0x01	; 1
    clear_led(key_led_tab[i]);
    13d0:	89 91       	ld	r24, Y+
    13d2:	71 df       	rcall	.-286    	; 0x12b6 <clear_led>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
  for (i=0; i<24; i++) {
    13d6:	cc 34       	cpi	r28, 0x4C	; 76
    13d8:	d8 07       	cpc	r29, r24
    13da:	d1 f7       	brne	.-12     	; 0x13d0 <clear_key_leds+0x8>
    13dc:	df 91       	pop	r29
  }
}
    13de:	cf 91       	pop	r28
    13e0:	08 95       	ret

000013e2 <set_numkey_led>:

// numbered keys (bottom row 1 thru 8)

void set_numkey_led(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	98 0f       	add	r25, r24
    13e6:	98 30       	cpi	r25, 0x08	; 8
    13e8:	30 f4       	brcc	.+12     	; 0x13f6 <set_numkey_led+0x14>
    set_led(numkey_led_tab[num-1]);   // num is 1 thru 8
    13ea:	e8 2f       	mov	r30, r24
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	e2 5e       	subi	r30, 0xE2	; 226
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	80 81       	ld	r24, Z
    13f4:	2d cf       	rjmp	.-422    	; 0x1250 <set_led>
    13f6:	08 95       	ret

000013f8 <set_single_numkey_led>:
}

void set_single_numkey_led(uint8_t num) {
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
  uint8_t i;
  for (i=1; i <= 8; i++)
    1400:	d8 2f       	mov	r29, r24
    1402:	0f e1       	ldi	r16, 0x1F	; 31
    1404:	11 e0       	ldi	r17, 0x01	; 1
    if (i == num) 
    1406:	c1 e0       	ldi	r28, 0x01	; 1
    1408:	f8 01       	movw	r30, r16
    140a:	81 91       	ld	r24, Z+
    140c:	8f 01       	movw	r16, r30
      set_led(numkey_led_tab[i-1]);
    140e:	dc 13       	cpse	r29, r28
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <set_single_numkey_led+0x2c>
  for (i=1; i <= 8; i++)
    1412:	1e df       	rcall	.-452    	; 0x1250 <set_led>
    1414:	cf 5f       	subi	r28, 0xFF	; 255
    1416:	c9 30       	cpi	r28, 0x09	; 9
    else
      clear_led(numkey_led_tab[i-1]);
}
    1418:	b9 f7       	brne	.-18     	; 0x1408 <set_single_numkey_led+0x10>
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
      clear_led(numkey_led_tab[i-1]);
    1420:	0f 91       	pop	r16
    1422:	08 95       	ret
    1424:	48 df       	rcall	.-368    	; 0x12b6 <clear_led>
    1426:	f6 cf       	rjmp	.-20     	; 0x1414 <set_single_numkey_led+0x1c>

00001428 <clear_numkey_led>:

void clear_numkey_led(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    1428:	9f ef       	ldi	r25, 0xFF	; 255
    142a:	98 0f       	add	r25, r24
    142c:	98 30       	cpi	r25, 0x08	; 8
    142e:	30 f4       	brcc	.+12     	; 0x143c <clear_numkey_led+0x14>
    clear_led(numkey_led_tab[num-1]);   // num is 1 thru 8
    1430:	e8 2f       	mov	r30, r24
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	e2 5e       	subi	r30, 0xE2	; 226
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	80 81       	ld	r24, Z
    143a:	3d cf       	rjmp	.-390    	; 0x12b6 <clear_led>
}
    143c:	08 95       	ret

0000143e <set_numkey_led_blink>:

void set_numkey_led_blink(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	98 0f       	add	r25, r24
    1442:	98 30       	cpi	r25, 0x08	; 8
    1444:	30 f4       	brcc	.+12     	; 0x1452 <set_numkey_led_blink+0x14>
    set_led_blink(numkey_led_tab[num-1]);
    1446:	e8 2f       	mov	r30, r24
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	e2 5e       	subi	r30, 0xE2	; 226
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	80 81       	ld	r24, Z
    1450:	03 cf       	rjmp	.-506    	; 0x1258 <set_led_blink>
}
    1452:	08 95       	ret

00001454 <is_numkey_led_blink>:

uint8_t is_numkey_led_blink(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	98 0f       	add	r25, r24
    1458:	98 30       	cpi	r25, 0x08	; 8
    145a:	38 f4       	brcc	.+14     	; 0x146a <is_numkey_led_blink+0x16>
    return is_led_blink(numkey_led_tab[num-1]);
    145c:	e8 2f       	mov	r30, r24
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	e2 5e       	subi	r30, 0xE2	; 226
    1462:	fe 4f       	sbci	r31, 0xFE	; 254
    1464:	80 81       	ld	r24, Z
    1466:	12 cf       	rjmp	.-476    	; 0x128c <is_led_blink>
    1468:	08 95       	ret
  return 0;
    146a:	80 e0       	ldi	r24, 0x00	; 0
}
    146c:	08 95       	ret

0000146e <is_numkey_led_set>:


uint8_t is_numkey_led_set(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	98 0f       	add	r25, r24
    1472:	98 30       	cpi	r25, 0x08	; 8
    return is_led_set(numkey_led_tab[num-1]);
    1474:	38 f4       	brcc	.+14     	; 0x1484 <is_numkey_led_set+0x16>
    1476:	e8 2f       	mov	r30, r24
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	e2 5e       	subi	r30, 0xE2	; 226
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	80 81       	ld	r24, Z
    1480:	30 cf       	rjmp	.-416    	; 0x12e2 <is_led_set>
    1482:	08 95       	ret
  return 0;
    1484:	80 e0       	ldi	r24, 0x00	; 0
}
    1486:	08 95       	ret

00001488 <clear_numkey_leds>:

void clear_numkey_leds(void) {
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < 8; i++) {
    148c:	cf e1       	ldi	r28, 0x1F	; 31
    clear_led(numkey_led_tab[i]);
    148e:	d1 e0       	ldi	r29, 0x01	; 1
    1490:	89 91       	ld	r24, Y+
    1492:	11 df       	rcall	.-478    	; 0x12b6 <clear_led>
  for (i = 0; i < 8; i++) {
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	c7 32       	cpi	r28, 0x27	; 39
    1498:	d8 07       	cpc	r29, r24
    149a:	d1 f7       	brne	.-12     	; 0x1490 <clear_numkey_leds+0x8>
  }
}
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <set_notekey_led>:

// note keys (C thru C')

void set_notekey_led(uint8_t num) {
  if (num <= 12)
    14a2:	8d 30       	cpi	r24, 0x0D	; 13
    14a4:	30 f4       	brcc	.+12     	; 0x14b2 <set_notekey_led+0x10>
    set_led(notekey_led_tab[num]);
    14a6:	e8 2f       	mov	r30, r24
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	e9 5d       	subi	r30, 0xD9	; 217
    14ac:	fe 4f       	sbci	r31, 0xFE	; 254
    14ae:	80 81       	ld	r24, Z
    14b0:	cf ce       	rjmp	.-610    	; 0x1250 <set_led>
}
    14b2:	08 95       	ret

000014b4 <clear_notekey_led>:

void clear_notekey_led(uint8_t num) {
  if (num <= 12)
    14b4:	8d 30       	cpi	r24, 0x0D	; 13
    14b6:	30 f4       	brcc	.+12     	; 0x14c4 <clear_notekey_led+0x10>
    clear_led(notekey_led_tab[num]);
    14b8:	e8 2f       	mov	r30, r24
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	e9 5d       	subi	r30, 0xD9	; 217
    14be:	fe 4f       	sbci	r31, 0xFE	; 254
    14c0:	80 81       	ld	r24, Z
    14c2:	f9 ce       	rjmp	.-526    	; 0x12b6 <clear_led>
}
    14c4:	08 95       	ret

000014c6 <set_notekey_led_blink>:

void set_notekey_led_blink(uint8_t num) {
  if (num <= 12)
    14c6:	8d 30       	cpi	r24, 0x0D	; 13
    set_led_blink(notekey_led_tab[num]);
    14c8:	30 f4       	brcc	.+12     	; 0x14d6 <set_notekey_led_blink+0x10>
    14ca:	e8 2f       	mov	r30, r24
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	e9 5d       	subi	r30, 0xD9	; 217
    14d0:	fe 4f       	sbci	r31, 0xFE	; 254
    14d2:	80 81       	ld	r24, Z
}
    14d4:	c1 ce       	rjmp	.-638    	; 0x1258 <set_led_blink>
    14d6:	08 95       	ret

000014d8 <is_notekey_led_blink>:

uint8_t is_notekey_led_blink(uint8_t num) {
  return is_led_blink(notekey_led_tab[num]);
    14d8:	e8 2f       	mov	r30, r24
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	e9 5d       	subi	r30, 0xD9	; 217
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
}
    14e0:	80 81       	ld	r24, Z
    14e2:	d4 ce       	rjmp	.-600    	; 0x128c <is_led_blink>
    14e4:	08 95       	ret

000014e6 <clear_notekey_leds>:

void clear_notekey_leds(void) {
    14e6:	cf 93       	push	r28
  uint8_t i;
  for (i = 0; i < 13; i++) {
    14e8:	df 93       	push	r29
    14ea:	c7 e2       	ldi	r28, 0x27	; 39
    clear_led(notekey_led_tab[i]);
    14ec:	d1 e0       	ldi	r29, 0x01	; 1
    14ee:	89 91       	ld	r24, Y+
    14f0:	e2 de       	rcall	.-572    	; 0x12b6 <clear_led>
  for (i = 0; i < 13; i++) {
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	c4 33       	cpi	r28, 0x34	; 52
    14f6:	d8 07       	cpc	r29, r24
    14f8:	d1 f7       	brne	.-12     	; 0x14ee <clear_notekey_leds+0x8>
  }
}
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <clear_note_leds>:

// note leds (notes, U, D, RAS)
void clear_note_leds(void) {
  clear_notekey_leds();
    1500:	f2 df       	rcall	.-28     	; 0x14e6 <clear_notekey_leds>
    1502:	84 e0       	ldi	r24, 0x04	; 4
  clear_led(LED_DOWN);
    1504:	d8 de       	rcall	.-592    	; 0x12b6 <clear_led>
    1506:	83 e0       	ldi	r24, 0x03	; 3
    1508:	d6 de       	rcall	.-596    	; 0x12b6 <clear_led>
  clear_led(LED_UP);
    150a:	88 e0       	ldi	r24, 0x08	; 8
    150c:	d4 de       	rcall	.-600    	; 0x12b6 <clear_led>
    150e:	81 e0       	ldi	r24, 0x01	; 1
  clear_led(LED_REST);
    1510:	d2 de       	rcall	.-604    	; 0x12b6 <clear_led>
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	d0 ce       	rjmp	.-608    	; 0x12b6 <clear_led>
  clear_led(LED_ACCENT);
    1516:	08 95       	ret

00001518 <clock_leds>:
    set_led(notekey_led_tab[note - C1]);
  }
}


void clock_leds(void) {
    1518:	f8 94       	cli
  int i;

  cli();
  cbi(LED_LATCH_PORT, LED_LATCH_PIN);
    151a:	df 98       	cbi	0x1b, 7	; 27
  clear_led(LED_SLIDE);
    151c:	e9 e7       	ldi	r30, 0x79	; 121
    151e:	f1 e0       	ldi	r31, 0x01	; 1
  for (i=0; i<5; i++) {
    SPDR = leds[i];
    1520:	81 91       	ld	r24, Z+
    1522:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & (1<<SPIF)));
    1524:	77 9b       	sbis	0x0e, 7	; 14
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <clock_leds+0xc>
  for (i=0; i<5; i++) {
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	ee 37       	cpi	r30, 0x7E	; 126
    152c:	f8 07       	cpc	r31, r24
    152e:	c1 f7       	brne	.-16     	; 0x1520 <clock_leds+0x8>
  }
  sbi(LED_LATCH_PORT, LED_LATCH_PIN);
    1530:	df 9a       	sbi	0x1b, 7	; 27
  sei();
    1532:	78 94       	sei
}
    1534:	08 95       	ret

00001536 <blink_leds_on>:

void blink_leds_on(void) {
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
  uint8_t i;

  for (i=0; i<5; i++)
    153a:	e9 e7       	ldi	r30, 0x79	; 121
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	a4 e7       	ldi	r26, 0x74	; 116
    1540:	b1 e0       	ldi	r27, 0x01	; 1
    leds[i] |= blinkleds[i];
    1542:	81 91       	ld	r24, Z+
    1544:	9d 91       	ld	r25, X+
    1546:	ef 01       	movw	r28, r30
    1548:	21 97       	sbiw	r28, 0x01	; 1
    154a:	89 2b       	or	r24, r25
    154c:	88 83       	st	Y, r24
  for (i=0; i<5; i++)
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	ee 37       	cpi	r30, 0x7E	; 126
    1552:	f8 07       	cpc	r31, r24
    1554:	b1 f7       	brne	.-20     	; 0x1542 <blink_leds_on+0xc>
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <blink_leds_off>:

void blink_leds_off(void) {
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
  uint8_t i;

  for (i=0; i<5; i++)
    1560:	e9 e7       	ldi	r30, 0x79	; 121
    1562:	f1 e0       	ldi	r31, 0x01	; 1
    1564:	a4 e7       	ldi	r26, 0x74	; 116
    1566:	b1 e0       	ldi	r27, 0x01	; 1
    leds[i] &= ~blinkleds[i];
    1568:	91 91       	ld	r25, Z+
    156a:	8d 91       	ld	r24, X+
    156c:	ef 01       	movw	r28, r30
    156e:	21 97       	sbiw	r28, 0x01	; 1
    1570:	80 95       	com	r24
    1572:	89 23       	and	r24, r25
    1574:	88 83       	st	Y, r24
  for (i=0; i<5; i++)
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	ee 37       	cpi	r30, 0x7E	; 126
    157a:	f8 07       	cpc	r31, r24
    157c:	a9 f7       	brne	.-22     	; 0x1568 <blink_leds_off+0xc>
}
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <clear_blinking_leds>:

void clear_blinking_leds(void) {
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
  uint8_t i;

  for (i=0; i<5; i++) {
    1588:	e9 e7       	ldi	r30, 0x79	; 121
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	a4 e7       	ldi	r26, 0x74	; 116
    if (leds[i] & blinkleds[i])
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	91 91       	ld	r25, Z+
    1592:	8d 91       	ld	r24, X+
      leds[i] &= ~blinkleds[i];
    1594:	29 2f       	mov	r18, r25
    1596:	28 23       	and	r18, r24
    1598:	29 f0       	breq	.+10     	; 0x15a4 <clear_blinking_leds+0x20>
    159a:	ef 01       	movw	r28, r30
    blinkleds[i] = 0;
    159c:	21 97       	sbiw	r28, 0x01	; 1
    159e:	80 95       	com	r24
    15a0:	89 23       	and	r24, r25
  for (i=0; i<5; i++) {
    15a2:	88 83       	st	Y, r24
    15a4:	ed 01       	movw	r28, r26
    15a6:	21 97       	sbiw	r28, 0x01	; 1
    15a8:	18 82       	st	Y, r1
  }
}
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	ee 37       	cpi	r30, 0x7E	; 126
    15ae:	f8 07       	cpc	r31, r24
    15b0:	79 f7       	brne	.-34     	; 0x1590 <clear_blinking_leds+0xc>
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <display_octave_shift>:

void display_octave_shift(int8_t shift) {
    15b8:	cf 93       	push	r28
  clear_led(LED_DOWN);
    15ba:	c8 2f       	mov	r28, r24
    15bc:	84 e0       	ldi	r24, 0x04	; 4
    15be:	7b de       	rcall	.-778    	; 0x12b6 <clear_led>
  if (shift == 2) {
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	c2 30       	cpi	r28, 0x02	; 2
    set_led_blink(LED_UP);
    15c4:	19 f4       	brne	.+6      	; 0x15cc <display_octave_shift+0x14>
    15c6:	48 de       	rcall	.-880    	; 0x1258 <set_led_blink>
    if (shift == 1) 
      set_led(LED_UP);
    else if (shift == -1)
      set_led(LED_DOWN);
  }
}
    15c8:	cf 91       	pop	r28
    15ca:	08 95       	ret
    clear_led(LED_UP);
    15cc:	74 de       	rcall	.-792    	; 0x12b6 <clear_led>
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    clear_led_blink(LED_UP);
    15d0:	47 de       	rcall	.-882    	; 0x1260 <clear_led_blink>
    15d2:	83 e0       	ldi	r24, 0x03	; 3
      set_led(LED_UP);
    15d4:	c1 30       	cpi	r28, 0x01	; 1
    if (shift == 1) 
    15d6:	19 f0       	breq	.+6      	; 0x15de <display_octave_shift+0x26>
    else if (shift == -1)
    15d8:	cf 3f       	cpi	r28, 0xFF	; 255
    15da:	b1 f7       	brne	.-20     	; 0x15c8 <display_octave_shift+0x10>
      set_led(LED_DOWN);
    15dc:	84 e0       	ldi	r24, 0x04	; 4
    15de:	38 de       	rcall	.-912    	; 0x1250 <set_led>
}
    15e0:	f3 cf       	rjmp	.-26     	; 0x15c8 <display_octave_shift+0x10>

000015e2 <set_note_led>:
void set_note_led(uint8_t note) {
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    set_key_led(KEY_SLIDE);
    15ec:	df 93       	push	r29
  if (note>>7)
    15ee:	c8 2f       	mov	r28, r24
    15f0:	86 e1       	ldi	r24, 0x16	; 22
    set_key_led(KEY_SLIDE);
    15f2:	c7 ff       	sbrs	r28, 7
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <set_note_led+0x32>
    set_key_led(KEY_ACCENT);
    15f6:	cd de       	rcall	.-614    	; 0x1392 <set_key_led>
  if ((note>>6) & 0x1) 
    15f8:	85 e1       	ldi	r24, 0x15	; 21
    15fa:	c6 ff       	sbrs	r28, 6
    set_key_led(KEY_ACCENT);
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <set_note_led+0x36>
    15fe:	c9 de       	rcall	.-622    	; 0x1392 <set_key_led>
  note &= 0x3F;
    1600:	cf 73       	andi	r28, 0x3F	; 63
    shift = -1;
    1602:	31 f0       	breq	.+12     	; 0x1610 <set_note_led+0x2e>
  } else if (note < C2) {
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	c7 31       	cpi	r28, 0x17	; 23
  } else if (note <= C3) {
    1608:	68 f0       	brcs	.+26     	; 0x1624 <set_note_led+0x42>
    160a:	c4 32       	cpi	r28, 0x24	; 36
    note -= OCTAVE;
    160c:	38 f4       	brcc	.+14     	; 0x161c <set_note_led+0x3a>
    shift = 0;
    160e:	cc 50       	subi	r28, 0x0C	; 12
    1610:	80 e0       	ldi	r24, 0x00	; 0
    clear_key_led(KEY_SLIDE);
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <set_note_led+0x42>
    1614:	d0 de       	rcall	.-608    	; 0x13b6 <clear_key_led>
    1616:	f0 cf       	rjmp	.-32     	; 0x15f8 <set_note_led+0x16>
    clear_key_led(KEY_ACCENT);
    1618:	ce de       	rcall	.-612    	; 0x13b6 <clear_key_led>
    161a:	f2 cf       	rjmp	.-28     	; 0x1600 <set_note_led+0x1e>
  } else if (note <= C4) {
    161c:	c0 33       	cpi	r28, 0x30	; 48
    161e:	68 f4       	brcc	.+26     	; 0x163a <set_note_led+0x58>
    note -= 2*OCTAVE;
    1620:	c8 51       	subi	r28, 0x18	; 24
    shift = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
  display_octave_shift(shift);
    1624:	c9 df       	rcall	.-110    	; 0x15b8 <display_octave_shift>
    1626:	c1 11       	cpse	r28, r1
  if (note == REST) {
    1628:	10 c0       	rjmp	.+32     	; 0x164a <set_note_led+0x68>
    162a:	5d df       	rcall	.-326    	; 0x14e6 <clear_notekey_leds>
    clear_notekey_leds();
    162c:	84 e1       	ldi	r24, 0x14	; 20
    162e:	b1 de       	rcall	.-670    	; 0x1392 <set_key_led>
    set_key_led(KEY_REST);
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
}
    1634:	e6 e0       	ldi	r30, 0x06	; 6
    1636:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>
    163a:	cc 33       	cpi	r28, 0x3C	; 60
    163c:	18 f4       	brcc	.+6      	; 0x1644 <set_note_led+0x62>
  } else if (note <= C5) {
    163e:	c4 52       	subi	r28, 0x24	; 36
    1640:	82 e0       	ldi	r24, 0x02	; 2
    note -= 3*OCTAVE;
    1642:	f0 cf       	rjmp	.-32     	; 0x1624 <set_note_led+0x42>
    shift = 2;
    1644:	c0 53       	subi	r28, 0x30	; 48
    1646:	83 e0       	ldi	r24, 0x03	; 3
    note -= 4*OCTAVE;
    1648:	ed cf       	rjmp	.-38     	; 0x1624 <set_note_led+0x42>
    shift = 3;
    164a:	84 e1       	ldi	r24, 0x14	; 20
    164c:	b4 de       	rcall	.-664    	; 0x13b6 <clear_key_led>
    clear_key_led(KEY_REST);
    164e:	87 e2       	ldi	r24, 0x27	; 39
    1650:	e8 2e       	mov	r14, r24
    1652:	81 e0       	ldi	r24, 0x01	; 1
    for (shift = C1; shift <= C2; shift++) {
    1654:	f8 2e       	mov	r15, r24
    1656:	0b e0       	ldi	r16, 0x0B	; 11
    1658:	10 e0       	ldi	r17, 0x00	; 0
    165a:	d0 e0       	ldi	r29, 0x00	; 0
    clear_key_led(KEY_REST);
    165c:	c0 17       	cp	r28, r16
    165e:	d1 07       	cpc	r29, r17
      if (shift != note)
    1660:	19 f0       	breq	.+6      	; 0x1668 <set_note_led+0x86>
    1662:	f7 01       	movw	r30, r14
    1664:	80 81       	ld	r24, Z
    1666:	27 de       	rcall	.-946    	; 0x12b6 <clear_led>
	clear_led(notekey_led_tab[shift - C1]);
    1668:	0f 5f       	subi	r16, 0xFF	; 255
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	ff ef       	ldi	r31, 0xFF	; 255
    166e:	ef 1a       	sub	r14, r31
    1670:	ff 0a       	sbc	r15, r31
    1672:	08 31       	cpi	r16, 0x18	; 24
    1674:	11 05       	cpc	r17, r1
    1676:	91 f7       	brne	.-28     	; 0x165c <set_note_led+0x7a>
    1678:	c4 5e       	subi	r28, 0xE4	; 228
    for (shift = C1; shift <= C2; shift++) {
    167a:	de 4f       	sbci	r29, 0xFE	; 254
    167c:	88 81       	ld	r24, Y
    167e:	e8 dd       	rcall	.-1072   	; 0x1250 <set_led>
    set_led(notekey_led_tab[note - C1]);
    1680:	d7 cf       	rjmp	.-82     	; 0x1630 <set_note_led+0x4e>

00001682 <send_msg>:
    }
    
  }
}

void send_msg(uint8_t *buff, uint16_t len) {
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
  uint16_t i;
  for (i=0; i<len; i++) {
    168a:	ec 01       	movw	r28, r24
    168c:	8c 01       	movw	r16, r24
    168e:	06 0f       	add	r16, r22
    1690:	17 1f       	adc	r17, r23
    1692:	c0 17       	cp	r28, r16
    1694:	d1 07       	cpc	r29, r17
    1696:	29 f4       	brne	.+10     	; 0x16a2 <send_msg+0x20>
    uart_putchar(buff[i]);
  }
}
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret
    uart_putchar(buff[i]);
    16a2:	89 91       	ld	r24, Y+
    16a4:	60 d9       	rcall	.-3392   	; 0x966 <uart_putchar>
    16a6:	f5 cf       	rjmp	.-22     	; 0x1692 <send_msg+0x10>

000016a8 <do_computer_control>:


void do_computer_control(void) {

  while (1) {
    read_switches();
    16a8:	7a dc       	rcall	.-1804   	; 0xf9e <read_switches>
    16aa:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    if (function_changed) {
    16ae:	8e 30       	cpi	r24, 0x0E	; 14
    16b0:	d9 f3       	breq	.-10     	; 0x16a8 <do_computer_control>
      // oops i guess they want something else, return!
      clear_all_leds();
    16b2:	2b de       	rcall	.-938    	; 0x130a <clear_all_leds>
    16b4:	31 cf       	rjmp	.-414    	; 0x1518 <clock_leds>
      clock_leds();
    16b6:	08 95       	ret

000016b8 <calc_CRC8>:
 * takes care to look in code space (instead of xdata space) when dealing with a 
 * PFrag.
 */


uint8_t calc_CRC8(uint8_t *buff, uint16_t size) {
    16b8:	cf 93       	push	r28
    crc^=*(buff + i);
    n=8;while(n--) crc=(crc&0x80)?(crc<<1)^0x07:crc<<1; 
  }
*/

  while(size) {
    16ba:	fc 01       	movw	r30, r24
    16bc:	68 0f       	add	r22, r24
    16be:	79 1f       	adc	r23, r25
  uint8_t crc = 0;
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    --size;
	x=crc^*buff++;
	crc=0;
	if(x&0x01) crc^=0x07;
	if(x&0x02) crc^=0x0E;
    16c2:	2e e0       	ldi	r18, 0x0E	; 14
	if(x&0x04) crc^=0x1C;
    16c4:	3c e1       	ldi	r19, 0x1C	; 28
	if(x&0x08) crc^=0x38;
    16c6:	48 e3       	ldi	r20, 0x38	; 56
	if(x&0x10) crc^=0x70;
    16c8:	50 e7       	ldi	r21, 0x70	; 112
	if(x&0x20) crc^=0xE0;
    16ca:	a0 ee       	ldi	r26, 0xE0	; 224
	if(x&0x40) crc^=0xC7;
    16cc:	b7 ec       	ldi	r27, 0xC7	; 199
	if(x&0x80) crc^=0x89;
    16ce:	c9 e8       	ldi	r28, 0x89	; 137
  while(size) {
    16d0:	e6 17       	cp	r30, r22
    16d2:	f7 07       	cpc	r31, r23
    16d4:	11 f4       	brne	.+4      	; 0x16da <calc_CRC8+0x22>
  }
  
  return crc;
}
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret
	x=crc^*buff++;
    16da:	91 91       	ld	r25, Z+
    16dc:	98 27       	eor	r25, r24
	if(x&0x01) crc^=0x07;
    16de:	89 2f       	mov	r24, r25
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	90 fd       	sbrc	r25, 0
    16e4:	87 e0       	ldi	r24, 0x07	; 7
	if(x&0x02) crc^=0x0E;
    16e6:	91 fd       	sbrc	r25, 1
    16e8:	82 27       	eor	r24, r18
	if(x&0x04) crc^=0x1C;
    16ea:	92 fd       	sbrc	r25, 2
    16ec:	83 27       	eor	r24, r19
	if(x&0x08) crc^=0x38;
    16ee:	93 fd       	sbrc	r25, 3
    16f0:	84 27       	eor	r24, r20
	if(x&0x10) crc^=0x70;
    16f2:	94 fd       	sbrc	r25, 4
    16f4:	85 27       	eor	r24, r21
	if(x&0x20) crc^=0xE0;
    16f6:	95 fd       	sbrc	r25, 5
    16f8:	8a 27       	eor	r24, r26
	if(x&0x40) crc^=0xC7;
    16fa:	96 fd       	sbrc	r25, 6
    16fc:	8b 27       	eor	r24, r27
	if(x&0x80) crc^=0x89;
    16fe:	97 ff       	sbrs	r25, 7
    1700:	e7 cf       	rjmp	.-50     	; 0x16d0 <calc_CRC8+0x18>
    1702:	8c 27       	eor	r24, r28
    1704:	e5 cf       	rjmp	.-54     	; 0x16d0 <calc_CRC8+0x18>

00001706 <send_status>:
void send_status(uint8_t stat) {
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
  tx_msg_buff[0] = STATUS_MSG;
    170a:	c1 ed       	ldi	r28, 0xD1	; 209
    170c:	d1 e0       	ldi	r29, 0x01	; 1
    170e:	90 e8       	ldi	r25, 0x80	; 128
    1710:	98 83       	st	Y, r25
  tx_msg_buff[1] = 0;
    1712:	19 82       	std	Y+1, r1	; 0x01
  tx_msg_buff[2] = 1;
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	9a 83       	std	Y+2, r25	; 0x02
  tx_msg_buff[4] = calc_CRC8(tx_msg_buff, 4);
    1718:	8b 83       	std	Y+3, r24	; 0x03
    171a:	64 e0       	ldi	r22, 0x04	; 4
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	ce 01       	movw	r24, r28
    1720:	cb df       	rcall	.-106    	; 0x16b8 <calc_CRC8>
  send_msg(tx_msg_buff, 5);
    1722:	8c 83       	std	Y+4, r24	; 0x04
    1724:	65 e0       	ldi	r22, 0x05	; 5
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	ce 01       	movw	r24, r28
    172a:	ab df       	rcall	.-170    	; 0x1682 <send_msg>
}
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	08 95       	ret

00001732 <send_tempo>:
void send_tempo(uint16_t t) {
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
  tx_msg_buff[0] = TEMPO_MSG;
    1736:	c1 ed       	ldi	r28, 0xD1	; 209
    1738:	d1 e0       	ldi	r29, 0x01	; 1
    173a:	22 e4       	ldi	r18, 0x42	; 66
    173c:	28 83       	st	Y, r18
  tx_msg_buff[1] = 0;
    173e:	19 82       	std	Y+1, r1	; 0x01
  tx_msg_buff[2] = TEMPO_MSG_LEN;
    1740:	22 e0       	ldi	r18, 0x02	; 2
    1742:	2a 83       	std	Y+2, r18	; 0x02
  tx_msg_buff[3] = t >> 8;
    1744:	98 27       	eor	r25, r24
    1746:	89 27       	eor	r24, r25
    1748:	98 27       	eor	r25, r24
    174a:	9c 83       	std	Y+4, r25	; 0x04
  tx_msg_buff[5] = calc_CRC8(tx_msg_buff, 5);
    174c:	8b 83       	std	Y+3, r24	; 0x03
    174e:	65 e0       	ldi	r22, 0x05	; 5
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	ce 01       	movw	r24, r28
    1754:	b1 df       	rcall	.-158    	; 0x16b8 <calc_CRC8>
  send_msg(tx_msg_buff, TEMPO_MSG_LEN + 4);
    1756:	8d 83       	std	Y+5, r24	; 0x05
    1758:	66 e0       	ldi	r22, 0x06	; 6
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	ce 01       	movw	r24, r28
    175e:	91 df       	rcall	.-222    	; 0x1682 <send_msg>
}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	08 95       	ret

00001766 <__vector_20>:
SIGNAL(SIG_USART1_RECV) {
    1766:	1f 92       	push	r1
    1768:	0f 92       	push	r0
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	0f 92       	push	r0
    176e:	11 24       	eor	r1, r1
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	ef 93       	push	r30
    1792:	ff 93       	push	r31
  char c = UDR1;
    1794:	c3 b1       	in	r28, 0x03	; 3
  if (CTS) {
    1796:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <CTS>
    179a:	88 23       	and	r24, r24
    179c:	09 f4       	brne	.+2      	; 0x17a0 <__vector_20+0x3a>
    if (uart_timeout > 1000) {
    179e:	3e c0       	rjmp	.+124    	; 0x181c <__vector_20+0xb6>
    17a0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <uart_timeout>
    17a4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <uart_timeout+0x1>
    17a8:	89 3e       	cpi	r24, 0xE9	; 233
      clear_bank_leds();
    17aa:	93 40       	sbci	r25, 0x03	; 3
    17ac:	20 f0       	brcs	.+8      	; 0x17b6 <__vector_20+0x50>
      clock_leds();
    17ae:	bc dd       	rcall	.-1160   	; 0x1328 <clear_bank_leds>
    17b0:	b3 de       	rcall	.-666    	; 0x1518 <clock_leds>
      recv_msg_i = 0;  // start over... but don't send status!
    17b2:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <recv_msg_i>
    if (recv_msg_i < UART_BUFF_SIZE) {
    17b6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <recv_msg_i>
    17ba:	80 34       	cpi	r24, 0x40	; 64
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <__vector_20+0x5a>
    17be:	45 c0       	rjmp	.+138    	; 0x184a <__vector_20+0xe4>
      recv_msg_buff[recv_msg_i++] = c;    // place at end of q      
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	98 0f       	add	r25, r24
    17c4:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <recv_msg_i>
    17c8:	e8 2f       	mov	r30, r24
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	ef 5e       	subi	r30, 0xEF	; 239
    17ce:	fd 4f       	sbci	r31, 0xFD	; 253
    17d0:	c0 83       	st	Z, r28
    uart_timeout = 0;
    17d2:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <uart_timeout+0x1>
    17d6:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <uart_timeout>
    if (recv_msg_i >= 3) {
    17da:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <recv_msg_i>
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	e8 f0       	brcs	.+58     	; 0x181c <__vector_20+0xb6>
      size |= recv_msg_buff[2];
    17e2:	c0 91 12 02 	lds	r28, 0x0212	; 0x800212 <recv_msg_buff+0x1>
    17e6:	d0 91 13 02 	lds	r29, 0x0213	; 0x800213 <recv_msg_buff+0x2>
    17ea:	dc 27       	eor	r29, r28
    17ec:	cd 27       	eor	r28, r29
    17ee:	dc 27       	eor	r29, r28
      if (recv_msg_i >= 4 + size) { // header+foot is 4 bytes long
    17f0:	9e 01       	movw	r18, r28
    17f2:	2c 5f       	subi	r18, 0xFC	; 252
    17f4:	3f 4f       	sbci	r19, 0xFF	; 255
    17f6:	82 17       	cp	r24, r18
    17f8:	13 06       	cpc	r1, r19
	crc = recv_msg_buff[3+size]; // CRC is the last byte of the packet
    17fa:	80 f0       	brcs	.+32     	; 0x181c <__vector_20+0xb6>
	if (crc != calc_CRC8(recv_msg_buff, size+3)) {   
    17fc:	23 96       	adiw	r28, 0x03	; 3
    17fe:	be 01       	movw	r22, r28
    1800:	81 e1       	ldi	r24, 0x11	; 17
	crc = recv_msg_buff[3+size]; // CRC is the last byte of the packet
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	59 df       	rcall	.-334    	; 0x16b8 <calc_CRC8>
	if (crc != calc_CRC8(recv_msg_buff, size+3)) {   
    1806:	cf 5e       	subi	r28, 0xEF	; 239
    1808:	dd 4f       	sbci	r29, 0xFD	; 253
    180a:	98 81       	ld	r25, Y
	  putnum_uh(calc_CRC8(recv_msg_buff, size+3));
    180c:	89 17       	cp	r24, r25
    180e:	09 f1       	breq	.+66     	; 0x1852 <__vector_20+0xec>
    1810:	90 e0       	ldi	r25, 0x00	; 0
	  recv_msg_i = 0;
    1812:	b7 d8       	rcall	.-3730   	; 0x982 <putnum_uh>
    1814:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <recv_msg_i>
	  send_status(0);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	75 df       	rcall	.-278    	; 0x1706 <send_status>
}
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	0f 90       	pop	r0
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	0f 90       	pop	r0
    1846:	1f 90       	pop	r1
      send_status(recv_msg_i);
    1848:	18 95       	reti
    184a:	5d df       	rcall	.-326    	; 0x1706 <send_status>
      recv_msg_i = 0;
    184c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <recv_msg_i>
    1850:	c0 cf       	rjmp	.-128    	; 0x17d2 <__vector_20+0x6c>
      cmd = recv_msg_buff[0];
    1852:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <recv_msg_buff>
      size |= recv_msg_buff[2];
    1856:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <recv_msg_buff+0x2>
	switch (cmd) {
    185a:	81 34       	cpi	r24, 0x41	; 65
    185c:	b1 f0       	breq	.+44     	; 0x188a <__vector_20+0x124>
    185e:	58 f4       	brcc	.+22     	; 0x1876 <__vector_20+0x110>
    1860:	80 34       	cpi	r24, 0x40	; 64
    1862:	59 f0       	breq	.+22     	; 0x187a <__vector_20+0x114>
    1864:	81 31       	cpi	r24, 0x11	; 17
    1866:	f1 f0       	breq	.+60     	; 0x18a4 <__vector_20+0x13e>
    1868:	30 f4       	brcc	.+12     	; 0x1876 <__vector_20+0x110>
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	09 f4       	brne	.+2      	; 0x1870 <__vector_20+0x10a>
    186e:	78 c0       	rjmp	.+240    	; 0x1960 <__vector_20+0x1fa>
    1870:	80 31       	cpi	r24, 0x10	; 16
    1872:	09 f4       	brne	.+2      	; 0x1876 <__vector_20+0x110>
	  send_status(0);
    1874:	50 c0       	rjmp	.+160    	; 0x1916 <__vector_20+0x1b0>
    1876:	80 e0       	ldi	r24, 0x00	; 0
	  send_tempo(tempo);
    1878:	74 c0       	rjmp	.+232    	; 0x1962 <__vector_20+0x1fc>
    187a:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <tempo>
    187e:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <tempo+0x1>
	recv_msg_i = 0; // start over!
    1882:	57 df       	rcall	.-338    	; 0x1732 <send_tempo>
    1884:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <recv_msg_i>
	  if (recv_msg_buff[2] != TEMPO_MSG_LEN) {
    1888:	c9 cf       	rjmp	.-110    	; 0x181c <__vector_20+0xb6>
    188a:	92 30       	cpi	r25, 0x02	; 2
	  t = recv_msg_buff[3];
    188c:	a1 f7       	brne	.-24     	; 0x1876 <__vector_20+0x110>
    188e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <recv_msg_buff+0x3>
	  t <<= 8;
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	98 2f       	mov	r25, r24
	  t += recv_msg_buff[4];
    1896:	88 27       	eor	r24, r24
    1898:	20 91 15 02 	lds	r18, 0x0215	; 0x800215 <recv_msg_buff+0x4>
	  change_tempo(t);
    189c:	82 0f       	add	r24, r18
    189e:	91 1d       	adc	r25, r1
    18a0:	af d8       	rcall	.-3746   	; 0xa00 <change_tempo>
	  break;
    18a2:	f0 cf       	rjmp	.-32     	; 0x1884 <__vector_20+0x11e>
	  if (recv_msg_buff[2] != RD_PATT_MSG_LEN) {
    18a4:	92 30       	cpi	r25, 0x02	; 2
    18a6:	39 f7       	brne	.-50     	; 0x1876 <__vector_20+0x110>
	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
    18a8:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <recv_msg_buff+0x3>
    18ac:	e8 e0       	ldi	r30, 0x08	; 8
    18ae:	ce 9f       	mul	r28, r30
    18b0:	c0 01       	movw	r24, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	c0 91 15 02 	lds	r28, 0x0215	; 0x800215 <recv_msg_buff+0x4>
    18b8:	c8 0f       	add	r28, r24
    18ba:	d9 2f       	mov	r29, r25
    18bc:	d1 1d       	adc	r29, r1
    18be:	24 e0       	ldi	r18, 0x04	; 4
    18c0:	cc 0f       	add	r28, r28
    18c2:	dd 1f       	adc	r29, r29
    18c4:	2a 95       	dec	r18
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <__vector_20+0x15a>
	  tx_msg_buff[0] = PATT_MSG;
    18c8:	89 e1       	ldi	r24, 0x19	; 25
    18ca:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <tx_msg_buff>
	  tx_msg_buff[1] = 0;
    18ce:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <tx_msg_buff+0x1>
	  tx_msg_buff[2] = PATT_MSG_LEN;
    18d2:	80 e1       	ldi	r24, 0x10	; 16
    18d4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <tx_msg_buff+0x2>
	  for(i=0; i<PATT_SIZE; i++) {
    18d8:	34 ed       	ldi	r19, 0xD4	; 212
    18da:	e3 2e       	mov	r14, r19
    18dc:	31 e0       	ldi	r19, 0x01	; 1
	  tx_msg_buff[2] = PATT_MSG_LEN;
    18de:	f3 2e       	mov	r15, r19
    18e0:	10 e0       	ldi	r17, 0x00	; 0
	    tx_msg_buff[3+i] = spieeprom_read(addr + i);
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	ce 01       	movw	r24, r28
    18e6:	80 0f       	add	r24, r16
    18e8:	91 1f       	adc	r25, r17
    18ea:	b2 d1       	rcall	.+868    	; 0x1c50 <spieeprom_read>
    18ec:	f7 01       	movw	r30, r14
    18ee:	81 93       	st	Z+, r24
    18f0:	7f 01       	movw	r14, r30
	  for(i=0; i<PATT_SIZE; i++) {
    18f2:	0f 5f       	subi	r16, 0xFF	; 255
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	00 31       	cpi	r16, 0x10	; 16
	  tx_msg_buff[3+PATT_SIZE] = calc_CRC8(tx_msg_buff, 3+PATT_SIZE);
    18f8:	11 05       	cpc	r17, r1
    18fa:	a1 f7       	brne	.-24     	; 0x18e4 <__vector_20+0x17e>
    18fc:	63 e1       	ldi	r22, 0x13	; 19
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	81 ed       	ldi	r24, 0xD1	; 209
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	d9 de       	rcall	.-590    	; 0x16b8 <calc_CRC8>
    1906:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <tx_msg_buff+0x13>
	  send_msg(tx_msg_buff, 4+PATT_SIZE);
    190a:	64 e1       	ldi	r22, 0x14	; 20
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	81 ed       	ldi	r24, 0xD1	; 209
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	b7 de       	rcall	.-658    	; 0x1682 <send_msg>
	  break;
    1914:	b7 cf       	rjmp	.-146    	; 0x1884 <__vector_20+0x11e>
	  if (recv_msg_buff[2] != WR_PATT_MSG_LEN) {
    1916:	92 31       	cpi	r25, 0x12	; 18
    1918:	09 f0       	breq	.+2      	; 0x191c <__vector_20+0x1b6>
    191a:	ad cf       	rjmp	.-166    	; 0x1876 <__vector_20+0x110>
	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
    191c:	c0 91 14 02 	lds	r28, 0x0214	; 0x800214 <recv_msg_buff+0x3>
    1920:	f8 e0       	ldi	r31, 0x08	; 8
    1922:	cf 9f       	mul	r28, r31
    1924:	c0 01       	movw	r24, r0
    1926:	11 24       	eor	r1, r1
    1928:	c0 91 15 02 	lds	r28, 0x0215	; 0x800215 <recv_msg_buff+0x4>
    192c:	c8 0f       	add	r28, r24
    192e:	d9 2f       	mov	r29, r25
    1930:	d1 1d       	adc	r29, r1
    1932:	84 e0       	ldi	r24, 0x04	; 4
    1934:	cc 0f       	add	r28, r28
    1936:	dd 1f       	adc	r29, r29
    1938:	8a 95       	dec	r24
	  for(i=0; i<PATT_SIZE; i++) {
    193a:	e1 f7       	brne	.-8      	; 0x1934 <__vector_20+0x1ce>
    193c:	96 e1       	ldi	r25, 0x16	; 22
    193e:	e9 2e       	mov	r14, r25
	  addr = PATTERN_MEM + bank*BANK_SIZE + patt*PATT_SIZE;
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	f9 2e       	mov	r15, r25
	    spieeprom_write(recv_msg_buff[5+i], addr + i);
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	00 e0       	ldi	r16, 0x00	; 0
    1948:	be 01       	movw	r22, r28
    194a:	60 0f       	add	r22, r16
    194c:	71 1f       	adc	r23, r17
    194e:	f7 01       	movw	r30, r14
    1950:	81 91       	ld	r24, Z+
    1952:	7f 01       	movw	r14, r30
    1954:	41 d1       	rcall	.+642    	; 0x1bd8 <spieeprom_write>
    1956:	0f 5f       	subi	r16, 0xFF	; 255
	  for(i=0; i<PATT_SIZE; i++) {
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	00 31       	cpi	r16, 0x10	; 16
    195c:	11 05       	cpc	r17, r1
	  send_status(1);
    195e:	a1 f7       	brne	.-24     	; 0x1948 <__vector_20+0x1e2>
	  send_status(0);
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	d1 de       	rcall	.-606    	; 0x1706 <send_status>
	  break;
    1964:	8f cf       	rjmp	.-226    	; 0x1884 <__vector_20+0x11e>

00001966 <note_on>:
 * this function can affect how the synth sounds.
 * Note that accent is active low.
 */
void note_on(uint8_t note, uint8_t slide, uint8_t accent) {
  uint8_t i = 0;
  cbi(NOTELATCH_PORT, NOTELATCH_PIN);
    1966:	3a 98       	cbi	0x07, 2	; 7
  // Do not allow the note to go higher than the highest note (0x3F)
  if (note > 0x3F)
    note = 0x3F;

  // Basically turn slide and accent flags into bit flags for the note port
  if (slide != 0) 
    1968:	61 11       	cpse	r22, r1
    slide = 0x40;
    196a:	60 e4       	ldi	r22, 0x40	; 64

  if (accent == 0)
    accent = 0x80;
  else
    accent = 0;
    196c:	90 e0       	ldi	r25, 0x00	; 0
  if (accent == 0)
    196e:	41 11       	cpse	r20, r1
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <note_on+0xe>
    accent = 0x80;
    1972:	90 e8       	ldi	r25, 0x80	; 128

  // output the note, set the latch, and strike the gate
  if (note != REST) {
    1974:	88 23       	and	r24, r24
    1976:	49 f0       	breq	.+18     	; 0x198a <note_on+0x24>
    NOTE_PORT = note | slide | accent;
    1978:	80 34       	cpi	r24, 0x40	; 64
    197a:	08 f0       	brcs	.+2      	; 0x197e <note_on+0x18>
    197c:	8f e3       	ldi	r24, 0x3F	; 63
    197e:	86 2b       	or	r24, r22
    1980:	89 2b       	or	r24, r25
    1982:	85 bb       	out	0x15, r24	; 21
    // 30ns setup time?
    sbi(NOTELATCH_PORT, NOTELATCH_PIN);
    1984:	3a 9a       	sbi	0x07, 2	; 7
    // 10 uS
    while (i<40) {
      i++;
    }
    sbi(GATE_PORT, GATE_PIN);
    1986:	39 9a       	sbi	0x07, 1	; 7
    1988:	08 95       	ret
  }
  else {
    // gate is not restruck during rest, and note is not latched, but one can
    // slide to/from a rest and rests can have accent (tip to memology)
    NOTE_PORT = slide | accent;
    198a:	86 2f       	mov	r24, r22
    198c:	89 2b       	or	r24, r25
    198e:	85 bb       	out	0x15, r24	; 21
     putstring(" w/slide ");
     }
     putstring("\n\r");
  */

}
    1990:	08 95       	ret

00001992 <note_off>:
void note_off(uint8_t slide) {
  /*
  putstring("Note off\n\r");  
  */

  if (slide) {
    1992:	88 23       	and	r24, r24
    1994:	19 f0       	breq	.+6      	; 0x199c <note_off+0xa>
    sbi(NOTE_PORT, 6);
    1996:	ae 9a       	sbi	0x15, 6	; 21
  } else {
    cbi(GATE_PORT, GATE_PIN);
  }

  cbi(NOTELATCH_PORT, NOTELATCH_PIN);
    1998:	3a 98       	cbi	0x07, 2	; 7
}
    199a:	08 95       	ret
    cbi(GATE_PORT, GATE_PIN);
    199c:	39 98       	cbi	0x07, 1	; 7
    199e:	fc cf       	rjmp	.-8      	; 0x1998 <note_off+0x6>

000019a0 <do_keyboard_mode>:

extern const uint8_t loopkey_tab[16];

extern uint8_t midi_out_addr;  // the midi address for outgoing stuff

void do_keyboard_mode(void) {
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e6 ed       	ldi	r30, 0xD6	; 214
    19a6:	fc e0       	ldi	r31, 0x0C	; 12
    19a8:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__prologue_saves__+0x6>
  signed int shift = 0;
  uint8_t accent=0, slide=0;
  uint8_t i, last_bank;
  
  // turn tempo off!
  turn_off_tempo();
    19ac:	0e 94 ac 00 	call	0x158	; 0x158 <turn_off_tempo>
  
  clear_bank_leds();
    19b0:	bb dc       	rcall	.-1674   	; 0x1328 <clear_bank_leds>

  read_switches();
    19b2:	f5 da       	rcall	.-2582   	; 0xf9e <read_switches>
  last_bank = bank;
  has_bank_knob_changed(); // ignore startup change
    19b4:	34 dc       	rcall	.-1944   	; 0x121e <has_bank_knob_changed>
    19b6:	e1 2c       	mov	r14, r1
  uint8_t accent=0, slide=0;
    19b8:	f1 2c       	mov	r15, r1
    19ba:	10 e0       	ldi	r17, 0x00	; 0
  signed int shift = 0;
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	5c e0       	ldi	r21, 0x0C	; 12
    display_octave_shift(shift);

    for (i=0; i<13; i++) {
      // check if any notes were just pressed
      if (just_pressed(loopkey_tab[i])) {
	note_on((C2+i) + shift*OCTAVE, slide, accent);
    19c0:	55 2e       	mov	r5, r21
    19c2:	4e 01       	movw	r8, r28
    19c4:	81 e8       	ldi	r24, 0x81	; 129
    19c6:	88 0e       	add	r8, r24
    19c8:	91 1c       	adc	r9, r1
    read_switches();
    19ca:	e9 da       	rcall	.-2606   	; 0xf9e <read_switches>
    19cc:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    if (function_changed) {
    19d0:	84 30       	cpi	r24, 0x04	; 4
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <do_keyboard_mode+0x36>
    19d4:	fb c0       	rjmp	.+502    	; 0x1bcc <do_keyboard_mode+0x22c>
    if (!is_bank_led_set(midi_out_addr)) {
    19d6:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <midi_out_addr>
    19da:	c5 dc       	rcall	.-1654   	; 0x1366 <is_bank_led_set>
    19dc:	81 11       	cpse	r24, r1
      clear_bank_leds();
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <do_keyboard_mode+0x48>
    19e0:	a3 dc       	rcall	.-1722   	; 0x1328 <clear_bank_leds>
      set_bank_led(midi_out_addr);
    19e2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <midi_out_addr>
    19e6:	ad dc       	rcall	.-1702   	; 0x1342 <set_bank_led>
    19e8:	1a dc       	rcall	.-1996   	; 0x121e <has_bank_knob_changed>
    if (has_bank_knob_changed()) {
    19ea:	88 23       	and	r24, r24
    19ec:	41 f0       	breq	.+16     	; 0x19fe <do_keyboard_mode+0x5e>
    19ee:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <bank>
      midi_out_addr = bank;
    19f2:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <midi_out_addr>
    19f6:	84 e0       	ldi	r24, 0x04	; 4
      internal_eeprom_write8(MIDIOUT_ADDR_EEADDR, midi_out_addr);
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 f5 04 	call	0x9ea	; 0x9ea <internal_eeprom_write8>
    19fe:	80 2f       	mov	r24, r16
    display_octave_shift(shift);
    1a00:	db dd       	rcall	.-1098   	; 0x15b8 <display_octave_shift>
    1a02:	05 9d       	mul	r16, r5
    1a04:	80 2d       	mov	r24, r0
	note_on((C2+i) + shift*OCTAVE, slide, accent);
    1a06:	11 24       	eor	r1, r1
    1a08:	27 e1       	ldi	r18, 0x17	; 23
    1a0a:	b2 2e       	mov	r11, r18
    1a0c:	b8 0e       	add	r11, r24
    1a0e:	7f 2c       	mov	r7, r15
    1a10:	72 94       	swap	r7
	midi_send_note_on( ((C2+i) + shift*OCTAVE) | (accent << 6));
    1a12:	77 0c       	add	r7, r7
    1a14:	77 0c       	add	r7, r7
    1a16:	30 ec       	ldi	r19, 0xC0	; 192
    1a18:	73 22       	and	r7, r19
    1a1a:	47 e0       	ldi	r20, 0x07	; 7
    1a1c:	c4 2e       	mov	r12, r20
    1a1e:	41 e0       	ldi	r20, 0x01	; 1
    1a20:	d4 2e       	mov	r13, r20
    1a22:	a1 2c       	mov	r10, r1
    for (i=0; i<13; i++) {
    1a24:	f6 01       	movw	r30, r12
      if (just_pressed(loopkey_tab[i])) {
    1a26:	61 90       	ld	r6, Z+
    1a28:	6f 01       	movw	r12, r30
    1a2a:	86 2d       	mov	r24, r6
    1a2c:	b3 db       	rcall	.-2202   	; 0x1194 <just_pressed>
    1a2e:	88 23       	and	r24, r24
	note_on((C2+i) + shift*OCTAVE, slide, accent);
    1a30:	59 f0       	breq	.+22     	; 0x1a48 <do_keyboard_mode+0xa8>
    1a32:	4f 2d       	mov	r20, r15
    1a34:	6e 2d       	mov	r22, r14
    1a36:	8b 2d       	mov	r24, r11
	midi_send_note_on( ((C2+i) + shift*OCTAVE) | (accent << 6));
    1a38:	96 df       	rcall	.-212    	; 0x1966 <note_on>
    1a3a:	8b 2d       	mov	r24, r11
    1a3c:	87 29       	or	r24, r7
	slide = TRUE;

	// turn on that LED
	set_notekey_led(i);	
    1a3e:	50 d9       	rcall	.-3424   	; 0xce0 <midi_send_note_on>
    1a40:	8a 2d       	mov	r24, r10
	slide = TRUE;
    1a42:	2f dd       	rcall	.-1442   	; 0x14a2 <set_notekey_led>
    1a44:	ee 24       	eor	r14, r14
      }
      
      // check if any notes were released
      if (just_released(loopkey_tab[i])) {
    1a46:	e3 94       	inc	r14
    1a48:	86 2d       	mov	r24, r6
    1a4a:	bf db       	rcall	.-2178   	; 0x11ca <just_released>
    1a4c:	88 23       	and	r24, r24
	midi_send_note_off( ((C2+i) + shift*OCTAVE) | (accent << 6));
    1a4e:	29 f0       	breq	.+10     	; 0x1a5a <do_keyboard_mode+0xba>
    1a50:	8b 2d       	mov	r24, r11
    1a52:	87 29       	or	r24, r7
    1a54:	5c d9       	rcall	.-3400   	; 0xd0e <midi_send_note_off>

	// turn off that LED
	clear_notekey_led(i);
    1a56:	8a 2d       	mov	r24, r10
    1a58:	2d dd       	rcall	.-1446   	; 0x14b4 <clear_notekey_led>
    1a5a:	a3 94       	inc	r10
    for (i=0; i<13; i++) {
    1a5c:	b3 94       	inc	r11
    1a5e:	fd e0       	ldi	r31, 0x0D	; 13
    1a60:	af 12       	cpse	r10, r31
    1a62:	e0 cf       	rjmp	.-64     	; 0x1a24 <do_keyboard_mode+0x84>
      }
    }

    if (just_pressed(KEY_UP)) {
    1a64:	8f e0       	ldi	r24, 0x0F	; 15
    1a66:	96 db       	rcall	.-2260   	; 0x1194 <just_pressed>
    1a68:	88 23       	and	r24, r24
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <do_keyboard_mode+0xce>
      if (shift < 2)
    1a6c:	5e c0       	rjmp	.+188    	; 0x1b2a <do_keyboard_mode+0x18a>
    1a6e:	02 30       	cpi	r16, 0x02	; 2
    1a70:	11 05       	cpc	r17, r1
	shift++;
    1a72:	14 f4       	brge	.+4      	; 0x1a78 <do_keyboard_mode+0xd8>
      if (shift > -1)
	shift--;
    } 

    // check if they turned accent on
    if (just_pressed(KEY_ACCENT)) {
    1a74:	0f 5f       	subi	r16, 0xFF	; 255
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	85 e1       	ldi	r24, 0x15	; 21
    1a7a:	8c db       	rcall	.-2280   	; 0x1194 <just_pressed>
    1a7c:	88 23       	and	r24, r24
      accent = !accent;
      if (accent)
	set_led(LED_ACCENT);
    1a7e:	31 f0       	breq	.+12     	; 0x1a8c <do_keyboard_mode+0xec>
      if (accent)
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	f1 10       	cpse	r15, r1
	set_led(LED_ACCENT);
    1a84:	5e c0       	rjmp	.+188    	; 0x1b42 <do_keyboard_mode+0x1a2>
      accent = !accent;
    1a86:	e4 db       	rcall	.-2104   	; 0x1250 <set_led>
	clear_led(LED_ACCENT);
    }
      
      // 110109 MIDI sysex send

      if (just_pressed(KEY_NEXT) && is_pressed(KEY_RS)) {
    1a88:	ff 24       	eor	r15, r15
    1a8a:	f3 94       	inc	r15
    1a8c:	88 e0       	ldi	r24, 0x08	; 8
    1a8e:	82 db       	rcall	.-2300   	; 0x1194 <just_pressed>
    1a90:	88 23       	and	r24, r24
    1a92:	81 f1       	breq	.+96     	; 0x1af4 <do_keyboard_mode+0x154>
          uint16_t addr = PATTERN_MEM+bank*BANK_SIZE;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	63 db       	rcall	.-2362   	; 0x115e <is_pressed>
    1a98:	88 23       	and	r24, r24
    1a9a:	61 f1       	breq	.+88     	; 0x1af4 <do_keyboard_mode+0x154>
    1a9c:	a0 90 cd 01 	lds	r10, 0x01CD	; 0x8001cd <bank>
          uint8_t msg;

          midi_putchar(0xF0);
    1aa0:	90 e8       	ldi	r25, 0x80	; 128
          midi_putchar(0x7D);
    1aa2:	a9 9e       	mul	r10, r25
    1aa4:	50 01       	movw	r10, r0
          midi_putchar(0x03);
    1aa6:	11 24       	eor	r1, r1
    1aa8:	80 ef       	ldi	r24, 0xF0	; 240
          midi_putchar(0x03);
    1aaa:	14 d9       	rcall	.-3544   	; 0xcd4 <midi_putchar>
    1aac:	8d e7       	ldi	r24, 0x7D	; 125
    1aae:	12 d9       	rcall	.-3548   	; 0xcd4 <midi_putchar>
          midi_putchar(0x12);
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	10 d9       	rcall	.-3552   	; 0xcd4 <midi_putchar>
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
          // Save the real memory address of the bank (should be safe to send 0xF7 here?)
//          midi_putchar(addr>>8); //high byte
//          midi_putchar(addr&0xFF); // low byte
          // Nah, skip sending the address, let the user save to the current pattern bank instead
          midi_putchar(0x00); 
    1ab6:	0e d9       	rcall	.-3556   	; 0xcd4 <midi_putchar>
    1ab8:	82 e1       	ldi	r24, 0x12	; 18
          midi_putchar(0x00); 
    1aba:	0c d9       	rcall	.-3560   	; 0xcd4 <midi_putchar>
    1abc:	80 e0       	ldi	r24, 0x00	; 0
          midi_putchar(0x00); 
    1abe:	0a d9       	rcall	.-3564   	; 0xcd4 <midi_putchar>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	08 d9       	rcall	.-3568   	; 0xcd4 <midi_putchar>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0

          // Need to split every byte in two, MIDI sysex can only be 7-bit, will end on first occurence of F7 otherwise
          for (i=0;i<NUM_LOCS*PATT_SIZE;i++) {
//              set_notekey_led(i>>4 + 1);
              msg=spieeprom_read(addr+i);
    1ac6:	06 d9       	rcall	.-3572   	; 0xcd4 <midi_putchar>
    1ac8:	d1 2c       	mov	r13, r1
    1aca:	c1 2c       	mov	r12, r1
    1acc:	c5 01       	movw	r24, r10
    1ace:	8c 0d       	add	r24, r12
              midi_putchar(msg>>4); // high nibble
    1ad0:	9d 1d       	adc	r25, r13
    1ad2:	be d0       	rcall	.+380    	; 0x1c50 <spieeprom_read>
    1ad4:	78 2e       	mov	r7, r24
              midi_putchar(msg&0xF); // low...
    1ad6:	82 95       	swap	r24
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	fc d8       	rcall	.-3592   	; 0xcd4 <midi_putchar>
    1adc:	87 2d       	mov	r24, r7
    1ade:	8f 70       	andi	r24, 0x0F	; 15
          for (i=0;i<NUM_LOCS*PATT_SIZE;i++) {
    1ae0:	f9 d8       	rcall	.-3598   	; 0xcd4 <midi_putchar>
    1ae2:	ef ef       	ldi	r30, 0xFF	; 255
    1ae4:	ce 1a       	sub	r12, r30
//              clear_notekey_led(i>>4 + 1);
          }
          
          midi_putchar(0xF7);
    1ae6:	de 0a       	sbc	r13, r30
    1ae8:	f0 e8       	ldi	r31, 0x80	; 128
    1aea:	cf 16       	cp	r12, r31
      }

      // 110109 MIDI sysex receive
      
      if (just_pressed(KEY_PREV) && is_pressed(KEY_RS)) {
    1aec:	d1 04       	cpc	r13, r1
    1aee:	71 f7       	brne	.-36     	; 0x1acc <do_keyboard_mode+0x12c>
    1af0:	87 ef       	ldi	r24, 0xF7	; 247
    1af2:	f0 d8       	rcall	.-3616   	; 0xcd4 <midi_putchar>
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	4e db       	rcall	.-2404   	; 0x1194 <just_pressed>
    1af8:	88 23       	and	r24, r24
    1afa:	51 f0       	breq	.+20     	; 0x1b10 <do_keyboard_mode+0x170>
//          uint8_t msg_buff[8]={0xF0, 0x7D, 0x03, 0x03, 0x12, 0x00, 0x00, 0x00};
          uint16_t addr = PATTERN_MEM+bank*BANK_SIZE;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	2f db       	rcall	.-2466   	; 0x115e <is_pressed>
          uint8_t msg = 0;
          uint8_t msg2 = 0;
          uint8_t patt_buff[128];
//          set_led(LED_DONE);
          while (msg == 0 && !is_pressed(KEY_DONE)) msg=midi_recv_cmd();
    1b00:	88 23       	and	r24, r24
    1b02:	31 f0       	breq	.+12     	; 0x1b10 <do_keyboard_mode+0x170>
    1b04:	c0 90 cd 01 	lds	r12, 0x01CD	; 0x8001cd <bank>
      }

 
    // if no keys are held down and there was a note just playing
    // turn off the note.
    if ((NOTE_PIN & 0x3F) && no_keys_pressed()) {
    1b08:	87 e1       	ldi	r24, 0x17	; 23
    1b0a:	29 db       	rcall	.-2478   	; 0x115e <is_pressed>
    1b0c:	88 23       	and	r24, r24
    1b0e:	e1 f0       	breq	.+56     	; 0x1b48 <do_keyboard_mode+0x1a8>
    1b10:	83 b3       	in	r24, 0x13	; 19
    1b12:	8f 73       	andi	r24, 0x3F	; 63
      note_off(0);
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <do_keyboard_mode+0x178>
    1b16:	59 cf       	rjmp	.-334    	; 0x19ca <do_keyboard_mode+0x2a>
      slide = FALSE;
      clear_notekey_leds();
    1b18:	5c db       	rcall	.-2376   	; 0x11d2 <no_keys_pressed>
      slide = FALSE;
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <do_keyboard_mode+0x180>
    } else if (just_pressed(KEY_DOWN)) {
    1b1e:	55 cf       	rjmp	.-342    	; 0x19ca <do_keyboard_mode+0x2a>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	37 df       	rcall	.-402    	; 0x1992 <note_off>
    1b24:	e0 dc       	rcall	.-1600   	; 0x14e6 <clear_notekey_leds>
    1b26:	e1 2c       	mov	r14, r1
      if (shift > -1)
    1b28:	50 cf       	rjmp	.-352    	; 0x19ca <do_keyboard_mode+0x2a>
    1b2a:	8e e0       	ldi	r24, 0x0E	; 14
    1b2c:	33 db       	rcall	.-2458   	; 0x1194 <just_pressed>
    1b2e:	88 23       	and	r24, r24
	shift--;
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <do_keyboard_mode+0x194>
    1b32:	a2 cf       	rjmp	.-188    	; 0x1a78 <do_keyboard_mode+0xd8>
	clear_led(LED_ACCENT);
    1b34:	0f 3f       	cpi	r16, 0xFF	; 255
      accent = !accent;
    1b36:	10 07       	cpc	r17, r16
          while (msg == 0 && !is_pressed(KEY_DONE)) msg=midi_recv_cmd();
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <do_keyboard_mode+0x19c>
    1b3a:	9e cf       	rjmp	.-196    	; 0x1a78 <do_keyboard_mode+0xd8>
    1b3c:	01 50       	subi	r16, 0x01	; 1
    1b3e:	11 09       	sbc	r17, r1
          if (msg==0xF0 && 0x7D==midi_getchar() && 0x03==midi_getchar() && 0x03==midi_getchar() && 0x12==midi_getchar() 
    1b40:	9b cf       	rjmp	.-202    	; 0x1a78 <do_keyboard_mode+0xd8>
    1b42:	b9 db       	rcall	.-2190   	; 0x12b6 <clear_led>
    1b44:	f1 2c       	mov	r15, r1
    1b46:	a2 cf       	rjmp	.-188    	; 0x1a8c <do_keyboard_mode+0xec>
    1b48:	17 d9       	rcall	.-3538   	; 0xd78 <midi_recv_cmd>
    1b4a:	88 23       	and	r24, r24
    1b4c:	e9 f2       	breq	.-70     	; 0x1b08 <do_keyboard_mode+0x168>
    1b4e:	80 3f       	cpi	r24, 0xF0	; 240
    1b50:	f9 f6       	brne	.-66     	; 0x1b10 <do_keyboard_mode+0x170>
    1b52:	f9 d8       	rcall	.-3598   	; 0xd46 <midi_getchar>
    1b54:	8d 37       	cpi	r24, 0x7D	; 125
    1b56:	91 05       	cpc	r25, r1
    1b58:	d9 f6       	brne	.-74     	; 0x1b10 <do_keyboard_mode+0x170>
    1b5a:	f5 d8       	rcall	.-3606   	; 0xd46 <midi_getchar>
    1b5c:	03 97       	sbiw	r24, 0x03	; 3
    1b5e:	c1 f6       	brne	.-80     	; 0x1b10 <do_keyboard_mode+0x170>
    1b60:	f2 d8       	rcall	.-3612   	; 0xd46 <midi_getchar>
    1b62:	03 97       	sbiw	r24, 0x03	; 3
              && 0x00==midi_getchar() && 0x00==midi_getchar() && 0x00==midi_getchar())
    1b64:	a9 f6       	brne	.-86     	; 0x1b10 <do_keyboard_mode+0x170>
    1b66:	ef d8       	rcall	.-3618   	; 0xd46 <midi_getchar>
    1b68:	42 97       	sbiw	r24, 0x12	; 18
    1b6a:	91 f6       	brne	.-92     	; 0x1b10 <do_keyboard_mode+0x170>
    1b6c:	ec d8       	rcall	.-3624   	; 0xd46 <midi_getchar>
    1b6e:	89 2b       	or	r24, r25
    1b70:	79 f6       	brne	.-98     	; 0x1b10 <do_keyboard_mode+0x170>
    1b72:	e9 d8       	rcall	.-3630   	; 0xd46 <midi_getchar>
    1b74:	89 2b       	or	r24, r25
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <do_keyboard_mode+0x1da>
    1b78:	cb cf       	rjmp	.-106    	; 0x1b10 <do_keyboard_mode+0x170>
    1b7a:	e5 d8       	rcall	.-3638   	; 0xd46 <midi_getchar>
    1b7c:	89 2b       	or	r24, r25
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <do_keyboard_mode+0x1e2>
    1b80:	c7 cf       	rjmp	.-114    	; 0x1b10 <do_keyboard_mode+0x170>
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
              while (i<NUM_LOCS*PATT_SIZE && !is_pressed(KEY_DONE)) {
    1b86:	5c 01       	movw	r10, r24
    1b88:	3c 01       	movw	r6, r24
    1b8a:	87 e1       	ldi	r24, 0x17	; 23
    1b8c:	e8 da       	rcall	.-2608   	; 0x115e <is_pressed>
    1b8e:	81 11       	cpse	r24, r1
                  msg=midi_getchar();
    1b90:	0d c0       	rjmp	.+26     	; 0x1bac <do_keyboard_mode+0x20c>
    1b92:	d9 d8       	rcall	.-3662   	; 0xd46 <midi_getchar>
    1b94:	d8 2e       	mov	r13, r24
                  msg2=midi_getchar();
    1b96:	d7 d8       	rcall	.-3666   	; 0xd46 <midi_getchar>
    1b98:	d2 94       	swap	r13
                  patt_buff[i]=(msg<<4)+msg2;
    1b9a:	90 ef       	ldi	r25, 0xF0	; 240
    1b9c:	d9 22       	and	r13, r25
    1b9e:	d8 0e       	add	r13, r24
    1ba0:	f3 01       	movw	r30, r6
    1ba2:	d1 92       	st	Z+, r13
    1ba4:	3f 01       	movw	r6, r30
    1ba6:	e8 15       	cp	r30, r8
              while (i<NUM_LOCS*PATT_SIZE && !is_pressed(KEY_DONE)) {
    1ba8:	f9 05       	cpc	r31, r9
    1baa:	79 f7       	brne	.-34     	; 0x1b8a <do_keyboard_mode+0x1ea>
    1bac:	f0 e8       	ldi	r31, 0x80	; 128
    1bae:	cf 9e       	mul	r12, r31
    1bb0:	60 01       	movw	r12, r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	b6 01       	movw	r22, r12
              for (i=0;i<NUM_LOCS*PATT_SIZE;i++) spieeprom_write(patt_buff[i],addr+i);
    1bb6:	f5 01       	movw	r30, r10
    1bb8:	81 91       	ld	r24, Z+
    1bba:	5f 01       	movw	r10, r30
    1bbc:	0d d0       	rcall	.+26     	; 0x1bd8 <spieeprom_write>
    1bbe:	ff ef       	ldi	r31, 0xFF	; 255
    1bc0:	cf 1a       	sub	r12, r31
    1bc2:	df 0a       	sbc	r13, r31
    1bc4:	a8 14       	cp	r10, r8
    1bc6:	b9 04       	cpc	r11, r9
    1bc8:	a9 f7       	brne	.-22     	; 0x1bb4 <do_keyboard_mode+0x214>
    1bca:	a2 cf       	rjmp	.-188    	; 0x1b10 <do_keyboard_mode+0x170>
    1bcc:	ed d8       	rcall	.-3622   	; 0xda8 <midi_notesoff>
    1bce:	c0 58       	subi	r28, 0x80	; 128
      midi_notesoff();           // turn all notes off
    1bd0:	df 4f       	sbci	r29, 0xFF	; 255
    1bd2:	ef e0       	ldi	r30, 0x0F	; 15
    }
  }
}
    1bd4:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__epilogue_restores__+0x6>

00001bd8 <spieeprom_write>:
void spieeprom_write(uint8_t data, uint16_t addr) {
  uint8_t status;

  //printf("writing %x to 0x%x\n\r", data, addr);
  /* check if there is a write in progress, wait */
  cli();
    1bd8:	f8 94       	cli

  do {
    cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    NOP; NOP; NOP; NOP;

    SPDR = SPI_EEPROM_RDSR;
    1bda:	25 e0       	ldi	r18, 0x05	; 5
    cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1bdc:	c0 98       	cbi	0x18, 0	; 24
	...
    SPDR = SPI_EEPROM_RDSR;
    1be6:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & (1<<SPIF)));
    1be8:	77 9b       	sbis	0x0e, 7	; 14
    1bea:	fe cf       	rjmp	.-4      	; 0x1be8 <spieeprom_write+0x10>
	...
    NOP; NOP; NOP; NOP;
    SPDR = 0;
    1bf4:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & (1<<SPIF)));
    1bf6:	77 9b       	sbis	0x0e, 7	; 14
    1bf8:	fe cf       	rjmp	.-4      	; 0x1bf6 <spieeprom_write+0x1e>
    status = SPDR;
    1bfa:	9f b1       	in	r25, 0x0f	; 15
    sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS high
    1bfc:	c0 9a       	sbi	0x18, 0	; 24
	...
    //printf("status =  0x%x\n\r", status);
    NOP; NOP;NOP; NOP;
    
  } while ((status & 0x1) != 0);
    1c06:	90 fd       	sbrc	r25, 0
    1c08:	e9 cf       	rjmp	.-46     	; 0x1bdc <spieeprom_write+0x4>
  /* set the spi write enable latch */

  cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1c0a:	c0 98       	cbi	0x18, 0	; 24
  NOP; NOP;
    1c0c:	00 00       	nop
    1c0e:	00 00       	nop


  SPDR = SPI_EEPROM_WREN;           // send command
    1c10:	96 e0       	ldi	r25, 0x06	; 6
    1c12:	9f b9       	out	0x0f, r25	; 15
  while (!(SPSR & (1<<SPIF)));
    1c14:	77 9b       	sbis	0x0e, 7	; 14
    1c16:	fe cf       	rjmp	.-4      	; 0x1c14 <spieeprom_write+0x3c>
  NOP; NOP;
    1c18:	00 00       	nop
    1c1a:	00 00       	nop
  sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1c1c:	c0 9a       	sbi	0x18, 0	; 24
	...

  NOP; NOP; NOP; NOP;  // wait for write enable latch

  cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1c26:	c0 98       	cbi	0x18, 0	; 24
  NOP; NOP;
    1c28:	00 00       	nop
    1c2a:	00 00       	nop

  SPDR = SPI_EEPROM_WRITE;           // send command
    1c2c:	92 e0       	ldi	r25, 0x02	; 2
    1c2e:	9f b9       	out	0x0f, r25	; 15
  while (!(SPSR & (1<<SPIF)));
    1c30:	77 9b       	sbis	0x0e, 7	; 14
    1c32:	fe cf       	rjmp	.-4      	; 0x1c30 <spieeprom_write+0x58>

  SPDR = addr >> 8;                 // send high addr 
    1c34:	7f b9       	out	0x0f, r23	; 15
  while (!(SPSR & (1<<SPIF)));
    1c36:	77 9b       	sbis	0x0e, 7	; 14
    1c38:	fe cf       	rjmp	.-4      	; 0x1c36 <spieeprom_write+0x5e>

  SPDR = addr & 0xFF;               // send low addr
    1c3a:	6f b9       	out	0x0f, r22	; 15
  while (!(SPSR & (1<<SPIF)));
    1c3c:	77 9b       	sbis	0x0e, 7	; 14
    1c3e:	fe cf       	rjmp	.-4      	; 0x1c3c <spieeprom_write+0x64>

  SPDR = data;               // send data
    1c40:	8f b9       	out	0x0f, r24	; 15
  while (!(SPSR & (1<<SPIF)));
    1c42:	77 9b       	sbis	0x0e, 7	; 14
    1c44:	fe cf       	rjmp	.-4      	; 0x1c42 <spieeprom_write+0x6a>

  NOP;
    1c46:	00 00       	nop
  NOP;
    1c48:	00 00       	nop

  sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low  
    1c4a:	c0 9a       	sbi	0x18, 0	; 24
  sei();
    1c4c:	78 94       	sei
}
    1c4e:	08 95       	ret

00001c50 <spieeprom_read>:

uint8_t spieeprom_read(uint16_t addr) {
  uint8_t data;

  cli();
    1c50:	f8 94       	cli

  cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1c52:	c0 98       	cbi	0x18, 0	; 24
  NOP; NOP;
    1c54:	00 00       	nop
    1c56:	00 00       	nop

  SPDR = SPI_EEPROM_READ;           // send command
    1c58:	23 e0       	ldi	r18, 0x03	; 3
    1c5a:	2f b9       	out	0x0f, r18	; 15
  while (!(SPSR & (1<<SPIF)));
    1c5c:	77 9b       	sbis	0x0e, 7	; 14
    1c5e:	fe cf       	rjmp	.-4      	; 0x1c5c <spieeprom_read+0xc>

  SPDR = addr >> 8;                 // send high addr 
    1c60:	9f b9       	out	0x0f, r25	; 15
  while (!(SPSR & (1<<SPIF)));
    1c62:	77 9b       	sbis	0x0e, 7	; 14
    1c64:	fe cf       	rjmp	.-4      	; 0x1c62 <spieeprom_read+0x12>

  SPDR = addr & 0xFF;               // send low addr
    1c66:	8f b9       	out	0x0f, r24	; 15
  while (!(SPSR & (1<<SPIF)));
    1c68:	77 9b       	sbis	0x0e, 7	; 14
    1c6a:	fe cf       	rjmp	.-4      	; 0x1c68 <spieeprom_read+0x18>
  NOP;
    1c6c:	00 00       	nop
  NOP;
    1c6e:	00 00       	nop

  SPDR = 0;
    1c70:	1f b8       	out	0x0f, r1	; 15
  while (!(SPSR & (1<<SPIF)));
    1c72:	77 9b       	sbis	0x0e, 7	; 14
    1c74:	fe cf       	rjmp	.-4      	; 0x1c72 <spieeprom_read+0x22>
  data = SPDR;
    1c76:	8f b1       	in	r24, 0x0f	; 15
  //printf("got %x\n\r", data);

  sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS high
    1c78:	c0 9a       	sbi	0x18, 0	; 24
  sei();
    1c7a:	78 94       	sei
  return data;
}
    1c7c:	08 95       	ret

00001c7e <get_pitchshift_from_patt>:


int8_t get_pitchshift_from_patt(uint16_t patt) { 
 int8_t shift;

  shift = (patt >> 8) & 0x1F;
    1c7e:	89 2f       	mov	r24, r25
    1c80:	8f 71       	andi	r24, 0x1F	; 31
  if (shift & 0x10)
    1c82:	94 fd       	sbrc	r25, 4
    shift |= 0xE0;      // extend signed 5-bit int
    1c84:	80 6e       	ori	r24, 0xE0	; 224

  return shift;

}
    1c86:	08 95       	ret

00001c88 <display_curr_pitch_shift_ud>:
void display_curr_pitch_shift_ud(void) {
  if (curr_pitch_shift == 0) {
    1c88:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
    1c8c:	81 11       	cpse	r24, r1
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <display_curr_pitch_shift_ud+0x12>
    clear_led(LED_UP);
    1c90:	83 e0       	ldi	r24, 0x03	; 3
    1c92:	11 db       	rcall	.-2526   	; 0x12b6 <clear_led>
  } else if (curr_pitch_shift < 0) {
    clear_led(LED_UP);
    set_led(LED_DOWN);
  } else {
    set_led(LED_UP);
    clear_led(LED_DOWN);
    1c94:	84 e0       	ldi	r24, 0x04	; 4
    1c96:	0f cb       	rjmp	.-2530   	; 0x12b6 <clear_led>
  }
}
    1c98:	08 95       	ret
  } else if (curr_pitch_shift < 0) {
    1c9a:	87 ff       	sbrs	r24, 7
    clear_led(LED_UP);
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <display_curr_pitch_shift_ud+0x20>
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    set_led(LED_DOWN);
    1ca0:	0a db       	rcall	.-2540   	; 0x12b6 <clear_led>
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	d5 ca       	rjmp	.-2646   	; 0x1250 <set_led>
    set_led(LED_UP);
    1ca6:	08 95       	ret
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	d2 da       	rcall	.-2652   	; 0x1250 <set_led>
    1cac:	f3 cf       	rjmp	.-26     	; 0x1c94 <display_curr_pitch_shift_ud+0xc>

00001cae <start_track_stepwrite_mode>:

void start_track_stepwrite_mode(void) {
  in_stepwrite_mode = TRUE;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <in_stepwrite_mode>
  set_led(LED_NEXT);
    1cb4:	84 e2       	ldi	r24, 0x24	; 36
  clear_bank_leds();
    1cb6:	cc da       	rcall	.-2664   	; 0x1250 <set_led>
}
    1cb8:	37 cb       	rjmp	.-2450   	; 0x1328 <clear_bank_leds>
    1cba:	08 95       	ret

00001cbc <stop_track_stepwrite_mode>:


void stop_track_stepwrite_mode(void) {
  in_stepwrite_mode = FALSE;
    1cbc:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <in_stepwrite_mode>
  clear_led(LED_NEXT);
    1cc0:	84 e2       	ldi	r24, 0x24	; 36
    1cc2:	f9 da       	rcall	.-2574   	; 0x12b6 <clear_led>
  clear_all_leds();
    1cc4:	22 db       	rcall	.-2492   	; 0x130a <clear_all_leds>
    1cc6:	5e dc       	rcall	.-1860   	; 0x1584 <clear_blinking_leds>
  clear_blinking_leds();
    1cc8:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
  play_loaded_pattern = FALSE; 
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	61 ce       	rjmp	.-830    	; 0x1992 <note_off>
  note_off(0);
    1cd0:	08 95       	ret

00001cd2 <load_curr_patt>:
  clear_bank_leds();
}

// a shortcut function...this code is duplicated a bunch of places.
// this just saves codespace
uint8_t load_curr_patt(void) {
    1cd2:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
}
    1cd6:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    1cda:	68 2f       	mov	r22, r24
  // load the pattern from EEPROM
  load_pattern((curr_patt >> 3) & 0xF, curr_patt & 0x7);
    1cdc:	67 70       	andi	r22, 0x07	; 7
    1cde:	23 e0       	ldi	r18, 0x03	; 3
    1ce0:	96 95       	lsr	r25
    1ce2:	87 95       	ror	r24
    1ce4:	2a 95       	dec	r18
    1ce6:	e1 f7       	brne	.-8      	; 0x1ce0 <load_curr_patt+0xe>
    1ce8:	8f 70       	andi	r24, 0x0F	; 15
    1cea:	41 d3       	rcall	.+1666   	; 0x236e <load_pattern>
  
  // get the pattern's RAS & pitch shift
  all_rest = (curr_patt & TRACK_REST_FLAG) >> 8;
    1cec:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    1cf0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	25 2f       	mov	r18, r21
    1cf8:	20 78       	andi	r18, 0x80	; 128
    1cfa:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <all_rest>
  all_accent = (curr_patt & TRACK_ACCENT_FLAG) >> 8;
    1cfe:	25 2f       	mov	r18, r21
    1d00:	20 74       	andi	r18, 0x40	; 64
    1d02:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <all_accent>
  all_slide = (curr_patt & TRACK_SLIDE_FLAG) >> 8;
    1d06:	25 2f       	mov	r18, r21
    1d08:	20 72       	andi	r18, 0x20	; 32
  curr_pattern_index = 0;
    1d0a:	20 93 92 01 	sts	0x0192, r18	; 0x800192 <all_slide>

  return get_pitchshift_from_patt(curr_patt);
    1d0e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
}
    1d12:	b5 cf       	rjmp	.-150    	; 0x1c7e <get_pitchshift_from_patt>
    1d14:	08 95       	ret

00001d16 <start_track_run_mode>:
  in_run_mode = TRUE;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <in_run_mode>
  set_led(LED_RS);
    1d1c:	81 e2       	ldi	r24, 0x21	; 33
    1d1e:	98 da       	rcall	.-2768   	; 0x1250 <set_led>
    1d20:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <all_accent>
  all_rest = all_slide = all_accent = FALSE;
    1d24:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <all_slide>
    1d28:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <all_rest>
    1d2c:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <play_loaded_track>
  play_loaded_pattern = play_loaded_track = FALSE; 
    1d30:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
    1d34:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <track_buff>
  curr_patt = track_buff[0];
    1d38:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <track_buff+0x1>
    1d3c:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
    1d40:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
  if (curr_patt != END_OF_TRACK) {     // clearly, dont play the track if there aint no data in it
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	81 f0       	breq	.+32     	; 0x1d68 <start_track_run_mode+0x52>
    curr_track_index = 0;
    1d48:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
    curr_pattern_index = 0;
    1d4c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
    curr_note = REST; // make it a rest just to avoid sliding
    1d50:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <curr_note>
    curr_pitch_shift = load_curr_patt();
    1d54:	be df       	rcall	.-132    	; 0x1cd2 <load_curr_patt>
    1d56:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
    while (note_counter & 0x1);
    1d5a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
    play_loaded_track = TRUE;
    1d5e:	80 fd       	sbrc	r24, 0
    1d60:	fc cf       	rjmp	.-8      	; 0x1d5a <start_track_run_mode+0x44>
  clear_bank_leds();
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <play_loaded_track>
}
    1d68:	df ca       	rjmp	.-2626   	; 0x1328 <clear_bank_leds>
    1d6a:	08 95       	ret

00001d6c <stop_track_run_mode>:

void stop_track_run_mode(void) {
  in_run_mode = FALSE;   
    1d6c:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <in_run_mode>
  play_loaded_pattern = FALSE;
    1d70:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
  play_loaded_track = FALSE;
    1d74:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <play_loaded_track>
  note_off(0);
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	0b de       	rcall	.-1002   	; 0x1992 <note_off>
    1d7c:	c6 da       	rcall	.-2676   	; 0x130a <clear_all_leds>
  clear_all_leds();
    1d7e:	02 dc       	rcall	.-2044   	; 0x1584 <clear_blinking_leds>
    1d80:	4e ca       	rjmp	.-2916   	; 0x121e <has_bank_knob_changed>
  clear_blinking_leds();
    1d82:	08 95       	ret

00001d84 <load_track>:
  has_bank_knob_changed();
}

void load_track(uint8_t bank, uint8_t track_loc) {
    1d84:	ef 92       	push	r14
  has_bank_knob_changed();
    1d86:	ff 92       	push	r15
    1d88:	0f 93       	push	r16
}
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
  uint8_t i;
  uint16_t track_addr;

  track_addr = TRACK_MEM + (bank*BANK_SIZE + track_loc*TRACK_SIZE)*2;
    1d8e:	df 93       	push	r29
    1d90:	98 e0       	ldi	r25, 0x08	; 8
    1d92:	89 9f       	mul	r24, r25
    1d94:	e0 01       	movw	r28, r0
    1d96:	11 24       	eor	r1, r1
    1d98:	c6 0f       	add	r28, r22
    1d9a:	d1 1d       	adc	r29, r1
    1d9c:	45 e0       	ldi	r20, 0x05	; 5
    1d9e:	cc 0f       	add	r28, r28
    1da0:	dd 1f       	adc	r29, r29
    1da2:	4a 95       	dec	r20
    1da4:	e1 f7       	brne	.-8      	; 0x1d9e <load_track+0x1a>
    1da6:	d8 5f       	subi	r29, 0xF8	; 248
  putnum_uh(track_addr);
  putstring("\n\r");
  */

  for (i=0; i < TRACK_SIZE; i++) {
    track_buff[i] = spieeprom_read(track_addr + 2*i) << 8;
    1da8:	f1 2c       	mov	r15, r1
    1daa:	e1 2c       	mov	r14, r1
    1dac:	ce 01       	movw	r24, r28
    1dae:	50 df       	rcall	.-352    	; 0x1c50 <spieeprom_read>
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	98 2f       	mov	r25, r24
    1db4:	88 27       	eor	r24, r24
    1db6:	87 01       	movw	r16, r14
    1db8:	00 0f       	add	r16, r16
    1dba:	11 1f       	adc	r17, r17
    1dbc:	0f 5a       	subi	r16, 0xAF	; 175
    1dbe:	1d 4f       	sbci	r17, 0xFD	; 253
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    track_buff[i] |= spieeprom_read(track_addr + 2*i + 1);
    1dc4:	80 83       	st	Z, r24
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	01 96       	adiw	r24, 0x01	; 1
    1dca:	42 df       	rcall	.-380    	; 0x1c50 <spieeprom_read>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	20 81       	ld	r18, Z
    1dd0:	31 81       	ldd	r19, Z+1	; 0x01
    1dd2:	28 2b       	or	r18, r24
    1dd4:	31 83       	std	Z+1, r19	; 0x01
    1dd6:	20 83       	st	Z, r18
    1dd8:	ff ef       	ldi	r31, 0xFF	; 255
    1dda:	ef 1a       	sub	r14, r31
    1ddc:	ff 0a       	sbc	r15, r31
    1dde:	22 96       	adiw	r28, 0x02	; 2
  for (i=0; i < TRACK_SIZE; i++) {
    1de0:	80 e1       	ldi	r24, 0x10	; 16
    1de2:	e8 16       	cp	r14, r24
    1de4:	f1 04       	cpc	r15, r1
    1de6:	11 f7       	brne	.-60     	; 0x1dac <load_track+0x28>
  }
}
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	e6 e0       	ldi	r30, 0x06	; 6
    1dee:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

00001df2 <write_track>:

void write_track(uint8_t bank, uint8_t track_loc) {
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
  uint8_t i;
  uint16_t track_addr;

  track_addr = TRACK_MEM + (bank*BANK_SIZE + track_loc*TRACK_SIZE)*2;  
    1dfe:	28 e0       	ldi	r18, 0x08	; 8
    1e00:	82 9f       	mul	r24, r18
    1e02:	e0 01       	movw	r28, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	c6 0f       	add	r28, r22
    1e08:	d1 1d       	adc	r29, r1
    1e0a:	35 e0       	ldi	r19, 0x05	; 5
    1e0c:	cc 0f       	add	r28, r28
    1e0e:	dd 1f       	adc	r29, r29
    1e10:	3a 95       	dec	r19
    1e12:	e1 f7       	brne	.-8      	; 0x1e0c <write_track+0x1a>
    1e14:	d8 5f       	subi	r29, 0xF8	; 248
  putnum_uh(track_addr);
  putstring("\n\r");
  */

  for (i=0; i < TRACK_SIZE; i++) {
    spieeprom_write(track_buff[i]>>8, track_addr + 2*i);
    1e16:	10 e0       	ldi	r17, 0x00	; 0
    1e18:	00 e0       	ldi	r16, 0x00	; 0
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	fc 01       	movw	r30, r24
    1e22:	ef 5a       	subi	r30, 0xAF	; 175
    1e24:	fd 4f       	sbci	r31, 0xFD	; 253
    1e26:	7f 01       	movw	r14, r30
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	be 01       	movw	r22, r28
    1e2e:	89 2f       	mov	r24, r25
    spieeprom_write(track_buff[i] & 0xFF, track_addr + 2*i + 1);
    1e30:	d3 de       	rcall	.-602    	; 0x1bd8 <spieeprom_write>
    1e32:	f7 01       	movw	r30, r14
    1e34:	80 81       	ld	r24, Z
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
    1e38:	be 01       	movw	r22, r28
    1e3a:	6f 5f       	subi	r22, 0xFF	; 255
    1e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3e:	cc de       	rcall	.-616    	; 0x1bd8 <spieeprom_write>
    1e40:	0f 5f       	subi	r16, 0xFF	; 255
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	22 96       	adiw	r28, 0x02	; 2
  for (i=0; i < TRACK_SIZE; i++) {
    1e46:	00 31       	cpi	r16, 0x10	; 16
    1e48:	11 05       	cpc	r17, r1
    1e4a:	39 f7       	brne	.-50     	; 0x1e1a <write_track+0x28>
  }
}
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	e6 e0       	ldi	r30, 0x06	; 6
    1e52:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

00001e56 <do_track_edit>:
void do_track_edit(void) {
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
  turn_on_tempo();
    1e62:	0e 94 a6 00 	call	0x14c	; 0x14c <turn_on_tempo>
  track_bank = bank % 8;
    1e66:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    1e6a:	87 70       	andi	r24, 0x07	; 7
    1e6c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <track_bank>
  track_location = 0;
    1e70:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <track_location>
  in_run_mode = FALSE;
    1e74:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <in_stepwrite_mode>
  play_loaded_track = FALSE;
    1e78:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <in_run_mode>
  play_loaded_pattern = FALSE;
    1e7c:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <play_loaded_track>
  curr_track_index = 0;
    1e80:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
  curr_patt = END_OF_TRACK;
    1e84:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	9f ef       	ldi	r25, 0xFF	; 255
    1e8c:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
  sync = INTERNAL_SYNC;
    1e90:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
  clear_bank_leds();
    1e94:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sync>
  clear_blinking_leds();
    1e98:	47 da       	rcall	.-2930   	; 0x1328 <clear_bank_leds>
	curr_patt = END_OF_TRACK;              // cleans up LEDs
    1e9a:	74 db       	rcall	.-2328   	; 0x1584 <clear_blinking_leds>
    1e9c:	0f ef       	ldi	r16, 0xFF	; 255
    1e9e:	1f ef       	ldi	r17, 0xFF	; 255
    read_switches();
    1ea0:	ee 24       	eor	r14, r14
    if (function != EDIT_TRACK_FUNC) {
    1ea2:	ea 94       	dec	r14
    1ea4:	fe 2c       	mov	r15, r14
    1ea6:	7b d8       	rcall	.-3850   	; 0xf9e <read_switches>
    1ea8:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    if (!in_stepwrite_mode && !in_run_mode) {
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <do_track_edit+0x5c>
    1eb0:	4e c2       	rjmp	.+1180   	; 0x234e <do_track_edit+0x4f8>
    1eb2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
      if (has_bank_knob_changed()) {
    1eb6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <in_run_mode>
    1eba:	89 2b       	or	r24, r25
	track_bank = bank % 8;
    1ebc:	f9 f4       	brne	.+62     	; 0x1efc <do_track_edit+0xa6>
    1ebe:	af d9       	rcall	.-3234   	; 0x121e <has_bank_knob_changed>
    1ec0:	88 23       	and	r24, r24
    1ec2:	49 f0       	breq	.+18     	; 0x1ed6 <do_track_edit+0x80>
	load_track(track_bank, track_location);
    1ec4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    1ec8:	87 70       	andi	r24, 0x07	; 7
    1eca:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <track_bank>
      set_bank_led(track_bank);  // show the track being edited
    1ece:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <track_location>
    1ed2:	58 df       	rcall	.-336    	; 0x1d84 <load_track>
    1ed4:	29 da       	rcall	.-2990   	; 0x1328 <clear_bank_leds>
      i = get_lowest_numkey_pressed(); 
    1ed6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <track_bank>
    1eda:	33 da       	rcall	.-2970   	; 0x1342 <set_bank_led>
      if (i != 0) {
    1edc:	8c d9       	rcall	.-3304   	; 0x11f6 <get_lowest_numkey_pressed>
	clear_notekey_leds();
    1ede:	c8 2f       	mov	r28, r24
    1ee0:	88 23       	and	r24, r24
	track_location = i-1;
    1ee2:	41 f0       	breq	.+16     	; 0x1ef4 <do_track_edit+0x9e>
    1ee4:	00 db       	rcall	.-2560   	; 0x14e6 <clear_notekey_leds>
	load_track(track_bank, track_location);
    1ee6:	6f ef       	ldi	r22, 0xFF	; 255
    1ee8:	6c 0f       	add	r22, r28
    1eea:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <track_location>
      set_numkey_led(track_location+1);
    1eee:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <track_bank>
    1ef2:	48 df       	rcall	.-368    	; 0x1d84 <load_track>
    1ef4:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <track_location>
    if (just_pressed(KEY_RS)) {
    1ef8:	8f 5f       	subi	r24, 0xFF	; 255
    1efa:	73 da       	rcall	.-2842   	; 0x13e2 <set_numkey_led>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
      if (in_run_mode) {
    1efe:	4a d9       	rcall	.-3436   	; 0x1194 <just_pressed>
    1f00:	88 23       	and	r24, r24
    1f02:	31 f0       	breq	.+12     	; 0x1f10 <do_track_edit+0xba>
    1f04:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <in_run_mode>
	stop_track_run_mode(); 	// stop run mode
    1f08:	88 23       	and	r24, r24
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <do_track_edit+0xb8>
    if (in_run_mode || in_stepwrite_mode) {
    1f0c:	f0 c0       	rjmp	.+480    	; 0x20ee <do_track_edit+0x298>
    1f0e:	2e df       	rcall	.-420    	; 0x1d6c <stop_track_run_mode>
    1f10:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <in_run_mode>
    1f14:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <in_stepwrite_mode>
      if (!is_bank_led_blink(curr_track_index))
    1f18:	89 2b       	or	r24, r25
    1f1a:	99 f0       	breq	.+38     	; 0x1f42 <do_track_edit+0xec>
    1f1c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
    1f20:	2d da       	rcall	.-2982   	; 0x137c <is_bank_led_blink>
	clear_blinking_leds();
    1f22:	81 11       	cpse	r24, r1
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <do_track_edit+0xd2>
      set_bank_led_blink(curr_track_index); 
    1f26:	2e db       	rcall	.-2468   	; 0x1584 <clear_blinking_leds>
    1f28:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
    1f2c:	13 da       	rcall	.-3034   	; 0x1354 <set_bank_led_blink>
      if (curr_patt == END_OF_TRACK) {
    1f2e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    1f32:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <do_track_edit+0xe6>
	clear_note_leds();
    1f3a:	df c0       	rjmp	.+446    	; 0x20fa <do_track_edit+0x2a4>
	set_led(LED_DONE);
    1f3c:	e1 da       	rcall	.-2622   	; 0x1500 <clear_note_leds>
	  set_led(LED_SLIDE);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	87 d9       	rcall	.-3314   	; 0x1250 <set_led>
    if ((just_pressed(KEY_NEXT) || just_pressed(KEY_PREV)) && !in_run_mode) {
    1f42:	88 e0       	ldi	r24, 0x08	; 8
    1f44:	27 d9       	rcall	.-3506   	; 0x1194 <just_pressed>
    1f46:	88 23       	and	r24, r24
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <do_track_edit+0xf6>
    1f4a:	05 c1       	rjmp	.+522    	; 0x2156 <do_track_edit+0x300>
    1f4c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <in_run_mode>
    1f50:	88 23       	and	r24, r24
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <do_track_edit+0x100>
    1f54:	05 c1       	rjmp	.+522    	; 0x2160 <do_track_edit+0x30a>
    if (just_pressed(KEY_DONE)) {
    1f56:	87 e1       	ldi	r24, 0x17	; 23
    1f58:	1d d9       	rcall	.-3526   	; 0x1194 <just_pressed>
    1f5a:	88 23       	and	r24, r24
    1f5c:	e9 f0       	breq	.+58     	; 0x1f98 <do_track_edit+0x142>
      if (in_stepwrite_mode) {
    1f5e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    1f62:	88 23       	and	r24, r24
    1f64:	a1 f0       	breq	.+40     	; 0x1f8e <do_track_edit+0x138>
	if (curr_track_index+1 < TRACK_SIZE) {
    1f66:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
    1f6a:	8f 30       	cpi	r24, 0x0F	; 15
    1f6c:	48 f4       	brcc	.+18     	; 0x1f80 <do_track_edit+0x12a>
	  track_buff[curr_track_index+1] = END_OF_TRACK;
    1f6e:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	ed 5a       	subi	r30, 0xAD	; 173
    1f7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f7c:	11 83       	std	Z+1, r17	; 0x01
    1f7e:	00 83       	st	Z, r16
	curr_patt = END_OF_TRACK;              // cleans up LEDs
    1f80:	f0 92 74 02 	sts	0x0274, r15	; 0x800274 <curr_patt+0x1>
    1f84:	e0 92 73 02 	sts	0x0273, r14	; 0x800273 <curr_patt>
	stop_track_stepwrite_mode();           
    1f88:	99 de       	rcall	.-718    	; 0x1cbc <stop_track_stepwrite_mode>
	clear_led(LED_DONE);
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	94 d9       	rcall	.-3288   	; 0x12b6 <clear_led>
    1f8e:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <track_location>
      write_track(track_bank, track_location); 
    1f92:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <track_bank>
    1f96:	2d df       	rcall	.-422    	; 0x1df2 <write_track>
    1f98:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    if (in_stepwrite_mode) {
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f4       	brne	.+2      	; 0x1fa2 <do_track_edit+0x14c>
    1fa0:	96 c1       	rjmp	.+812    	; 0x22ce <do_track_edit+0x478>
    1fa2:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
      if (curr_patt != END_OF_TRACK) {
    1fa6:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	09 f4       	brne	.+2      	; 0x1fb0 <do_track_edit+0x15a>
    1fae:	8b c0       	rjmp	.+278    	; 0x20c6 <do_track_edit+0x270>
    1fb0:	84 e1       	ldi	r24, 0x14	; 20
    1fb2:	f0 d8       	rcall	.-3616   	; 0x1194 <just_pressed>
	if (just_pressed(KEY_REST)) {
    1fb4:	88 23       	and	r24, r24
    1fb6:	a1 f0       	breq	.+40     	; 0x1fe0 <do_track_edit+0x18a>
    1fb8:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
	  curr_patt = (track_buff[curr_track_index] ^= TRACK_REST_FLAG);
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	ef 5a       	subi	r30, 0xAF	; 175
    1fc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fc6:	80 81       	ld	r24, Z
    1fc8:	91 81       	ldd	r25, Z+1	; 0x01
    1fca:	90 58       	subi	r25, 0x80	; 128
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	80 83       	st	Z, r24
    1fd0:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
    1fd4:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
    1fd8:	89 2f       	mov	r24, r25
    1fda:	80 78       	andi	r24, 0x80	; 128
	  all_rest = (curr_patt & TRACK_REST_FLAG) >> 8;
    1fdc:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <all_rest>
    1fe0:	85 e1       	ldi	r24, 0x15	; 21
    1fe2:	d8 d8       	rcall	.-3664   	; 0x1194 <just_pressed>
	if (just_pressed(KEY_ACCENT)) {
    1fe4:	88 23       	and	r24, r24
    1fe6:	a9 f0       	breq	.+42     	; 0x2012 <do_track_edit+0x1bc>
    1fe8:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
	  curr_patt = (track_buff[curr_track_index] ^= TRACK_ACCENT_FLAG);
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	ef 5a       	subi	r30, 0xAF	; 175
    1ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	20 e4       	ldi	r18, 0x40	; 64
    1ffc:	92 27       	eor	r25, r18
    1ffe:	91 83       	std	Z+1, r25	; 0x01
    2000:	80 83       	st	Z, r24
    2002:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
    2006:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
	  all_accent = (curr_patt & TRACK_ACCENT_FLAG) >> 8;
    200a:	89 2f       	mov	r24, r25
    200c:	80 74       	andi	r24, 0x40	; 64
	if (just_pressed(KEY_SLIDE)) {
    200e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <all_accent>
	  curr_patt = (track_buff[curr_track_index] ^= TRACK_SLIDE_FLAG);
    2012:	86 e1       	ldi	r24, 0x16	; 22
    2014:	bf d8       	rcall	.-3714   	; 0x1194 <just_pressed>
    2016:	88 23       	and	r24, r24
    2018:	a9 f0       	breq	.+42     	; 0x2044 <do_track_edit+0x1ee>
    201a:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	ee 0f       	add	r30, r30
    2022:	ff 1f       	adc	r31, r31
    2024:	ef 5a       	subi	r30, 0xAF	; 175
    2026:	fd 4f       	sbci	r31, 0xFD	; 253
    2028:	80 81       	ld	r24, Z
    202a:	91 81       	ldd	r25, Z+1	; 0x01
    202c:	20 e2       	ldi	r18, 0x20	; 32
    202e:	92 27       	eor	r25, r18
	  all_slide = (curr_patt & TRACK_SLIDE_FLAG) >> 8;
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
	if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    2038:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
    203c:	89 2f       	mov	r24, r25
    203e:	80 72       	andi	r24, 0x20	; 32
    2040:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <all_slide>
	  uint16_t notekey = get_lowest_notekey_pressed();
    2044:	8f e0       	ldi	r24, 0x0F	; 15
    2046:	8b d8       	rcall	.-3818   	; 0x115e <is_pressed>
    2048:	88 23       	and	r24, r24
	  if (just_pressed(KEY_UP) || just_pressed(KEY_DOWN)) {
    204a:	09 f4       	brne	.+2      	; 0x204e <do_track_edit+0x1f8>
    204c:	ee c0       	rjmp	.+476    	; 0x222a <do_track_edit+0x3d4>
    204e:	cd d8       	rcall	.-3686   	; 0x11ea <get_lowest_notekey_pressed>
    2050:	c8 2f       	mov	r28, r24
    2052:	8f e0       	ldi	r24, 0x0F	; 15
    2054:	9f d8       	rcall	.-3778   	; 0x1194 <just_pressed>
    2056:	81 11       	cpse	r24, r1
    2058:	04 c0       	rjmp	.+8      	; 0x2062 <do_track_edit+0x20c>
    205a:	8e e0       	ldi	r24, 0x0E	; 14
	    clear_blinking_leds();
    205c:	9b d8       	rcall	.-3786   	; 0x1194 <just_pressed>
	    clear_notekey_leds();
    205e:	88 23       	and	r24, r24
    2060:	31 f0       	breq	.+12     	; 0x206e <do_track_edit+0x218>
	    clear_led(LED_UP);
    2062:	90 da       	rcall	.-2784   	; 0x1584 <clear_blinking_leds>
	    clear_led(LED_DOWN);
    2064:	40 da       	rcall	.-2944   	; 0x14e6 <clear_notekey_leds>
    2066:	83 e0       	ldi	r24, 0x03	; 3
    2068:	26 d9       	rcall	.-3508   	; 0x12b6 <clear_led>
	  uint16_t notekey = get_lowest_notekey_pressed();
    206a:	84 e0       	ldi	r24, 0x04	; 4
    206c:	24 d9       	rcall	.-3512   	; 0x12b6 <clear_led>
    206e:	0c 2e       	mov	r0, r28
	  if (is_pressed(KEY_UP)) {
    2070:	00 0c       	add	r0, r0
    2072:	dd 0b       	sbc	r29, r29
    2074:	8f e0       	ldi	r24, 0x0F	; 15
    2076:	73 d8       	rcall	.-3866   	; 0x115e <is_pressed>
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <do_track_edit+0x228>
	    set_led(LED_UP);
    207c:	e6 c0       	rjmp	.+460    	; 0x224a <do_track_edit+0x3f4>
    207e:	83 e0       	ldi	r24, 0x03	; 3
	    if (notekey != -1) {
    2080:	e7 d8       	rcall	.-3634   	; 0x1250 <set_led>
	      clear_blinking_leds();
    2082:	cf 3f       	cpi	r28, 0xFF	; 255
    2084:	dc 07       	cpc	r29, r28
	      curr_patt = (curr_patt & 0xE0FF) | (notekey << 8);
    2086:	b9 f0       	breq	.+46     	; 0x20b6 <do_track_edit+0x260>
    2088:	7d da       	rcall	.-2822   	; 0x1584 <clear_blinking_leds>
    208a:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <curr_patt>
    208e:	30 91 74 02 	lds	r19, 0x0274	; 0x800274 <curr_patt+0x1>
    2092:	30 7e       	andi	r19, 0xE0	; 224
    2094:	dc 2f       	mov	r29, r28
    2096:	cc 27       	eor	r28, r28
    2098:	c2 2b       	or	r28, r18
    209a:	d3 2b       	or	r29, r19
	      track_buff[curr_track_index] = curr_patt; 
    209c:	d0 93 74 02 	sts	0x0274, r29	; 0x800274 <curr_patt+0x1>
    20a0:	c0 93 73 02 	sts	0x0273, r28	; 0x800273 <curr_patt>
    20a4:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
	    curr_pitch_shift = get_pitchshift_from_patt(curr_patt);
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	ef 5a       	subi	r30, 0xAF	; 175
    20b0:	fd 4f       	sbci	r31, 0xFD	; 253
    20b2:	d1 83       	std	Z+1, r29	; 0x01
    20b4:	c0 83       	st	Z, r28
    20b6:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
	    set_notekey_led_blink(OCTAVE + curr_pitch_shift);
    20ba:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
      if (! (is_pressed(KEY_UP) || is_pressed(KEY_DOWN))) {
    20be:	df dd       	rcall	.-1090   	; 0x1c7e <get_pitchshift_from_patt>
    20c0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
    20c4:	00 da       	rcall	.-3072   	; 0x14c6 <set_notekey_led_blink>
    20c6:	8f e0       	ldi	r24, 0x0F	; 15
    20c8:	4a d8       	rcall	.-3948   	; 0x115e <is_pressed>
	i = get_lowest_numkey_just_pressed();
    20ca:	81 11       	cpse	r24, r1
    20cc:	00 c1       	rjmp	.+512    	; 0x22ce <do_track_edit+0x478>
	if ((i != 0) || has_bank_knob_changed()) {
    20ce:	8e e0       	ldi	r24, 0x0E	; 14
    20d0:	46 d8       	rcall	.-3956   	; 0x115e <is_pressed>
    20d2:	81 11       	cpse	r24, r1
	  clear_numkey_leds();
    20d4:	fc c0       	rjmp	.+504    	; 0x22ce <do_track_edit+0x478>
    20d6:	94 d8       	rcall	.-3800   	; 0x1200 <get_lowest_numkey_just_pressed>
	  clear_bank_leds();
    20d8:	c8 2f       	mov	r28, r24
    20da:	88 23       	and	r24, r24
	  if (i == 0) {
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <do_track_edit+0x28a>
    20de:	ea c0       	rjmp	.+468    	; 0x22b4 <do_track_edit+0x45e>
	    i--;
    20e0:	d3 d9       	rcall	.-3162   	; 0x1488 <clear_numkey_leds>
    20e2:	22 d9       	rcall	.-3516   	; 0x1328 <clear_bank_leds>
	if (in_stepwrite_mode) {
    20e4:	cc 23       	and	r28, r28
    20e6:	09 f4       	brne	.+2      	; 0x20ea <do_track_edit+0x294>
    20e8:	01 c1       	rjmp	.+514    	; 0x22ec <do_track_edit+0x496>
	  stop_track_stepwrite_mode();
    20ea:	c1 50       	subi	r28, 0x01	; 1
    20ec:	08 c1       	rjmp	.+528    	; 0x22fe <do_track_edit+0x4a8>
	start_track_run_mode();
    20ee:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    20f2:	81 11       	cpse	r24, r1
	clear_led(LED_DONE);                 // make sure DONE isn't on anymore
    20f4:	e3 dd       	rcall	.-1082   	; 0x1cbc <stop_track_stepwrite_mode>
    20f6:	0f de       	rcall	.-994    	; 0x1d16 <start_track_run_mode>
	set_bank_led((curr_patt >> 3) & 0xF);    // show the bank of the current pattern
    20f8:	0b cf       	rjmp	.-490    	; 0x1f10 <do_track_edit+0xba>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	dc d8       	rcall	.-3656   	; 0x12b6 <clear_led>
    20fe:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    2102:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    2106:	23 e0       	ldi	r18, 0x03	; 3
    2108:	96 95       	lsr	r25
    210a:	87 95       	ror	r24
    210c:	2a 95       	dec	r18
    210e:	e1 f7       	brne	.-8      	; 0x2108 <do_track_edit+0x2b2>
	if (curr_patt & TRACK_REST_FLAG)
    2110:	8f 70       	andi	r24, 0x0F	; 15
    2112:	17 d9       	rcall	.-3538   	; 0x1342 <set_bank_led>
    2114:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    2118:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
	  set_led(LED_REST);
    211c:	97 ff       	sbrs	r25, 7
    211e:	12 c0       	rjmp	.+36     	; 0x2144 <do_track_edit+0x2ee>
    2120:	88 e0       	ldi	r24, 0x08	; 8
	if (curr_patt & TRACK_ACCENT_FLAG)
    2122:	96 d8       	rcall	.-3796   	; 0x1250 <set_led>
    2124:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    2128:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    212c:	96 ff       	sbrs	r25, 6
	  set_led(LED_ACCENT);
    212e:	0d c0       	rjmp	.+26     	; 0x214a <do_track_edit+0x2f4>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8e d8       	rcall	.-3812   	; 0x1250 <set_led>
	if (curr_patt & TRACK_SLIDE_FLAG)
    2134:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    2138:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    213c:	95 ff       	sbrs	r25, 5
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <do_track_edit+0x2fa>
	  set_led(LED_SLIDE);
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	fe ce       	rjmp	.-516    	; 0x1f40 <do_track_edit+0xea>
	  clear_led(LED_REST);
    2144:	88 e0       	ldi	r24, 0x08	; 8
    2146:	b7 d8       	rcall	.-3730   	; 0x12b6 <clear_led>
    2148:	ed cf       	rjmp	.-38     	; 0x2124 <do_track_edit+0x2ce>
    214a:	81 e0       	ldi	r24, 0x01	; 1
	  clear_led(LED_ACCENT);
    214c:	b4 d8       	rcall	.-3736   	; 0x12b6 <clear_led>
    214e:	f2 cf       	rjmp	.-28     	; 0x2134 <do_track_edit+0x2de>
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	b1 d8       	rcall	.-3742   	; 0x12b6 <clear_led>
	  clear_led(LED_SLIDE);
    2154:	f6 ce       	rjmp	.-532    	; 0x1f42 <do_track_edit+0xec>
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	1d d8       	rcall	.-4038   	; 0x1194 <just_pressed>
    215a:	81 11       	cpse	r24, r1
    if ((just_pressed(KEY_NEXT) || just_pressed(KEY_PREV)) && !in_run_mode) {
    215c:	f7 ce       	rjmp	.-530    	; 0x1f4c <do_track_edit+0xf6>
    215e:	fb ce       	rjmp	.-522    	; 0x1f56 <do_track_edit+0x100>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	17 dc       	rcall	.-2002   	; 0x1992 <note_off>
    2164:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
      note_off(0);  // if something -was- playing, kill it
    2168:	88 23       	and	r24, r24
    216a:	09 f4       	brne	.+2      	; 0x216e <do_track_edit+0x318>
    216c:	57 c0       	rjmp	.+174    	; 0x221c <do_track_edit+0x3c6>
      if (in_stepwrite_mode) {
    216e:	88 e0       	ldi	r24, 0x08	; 8
    2170:	11 d8       	rcall	.-4062   	; 0x1194 <just_pressed>
    2172:	88 23       	and	r24, r24
    2174:	c1 f0       	breq	.+48     	; 0x21a6 <do_track_edit+0x350>
    2176:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
	if (just_pressed(KEY_NEXT)) {
    217a:	8f 30       	cpi	r24, 0x0F	; 15
    217c:	58 f4       	brcc	.+22     	; 0x2194 <do_track_edit+0x33e>
    217e:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
	  if (((curr_track_index+1) >= TRACK_SIZE) ||
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	ee 0f       	add	r30, r30
    2186:	ff 1f       	adc	r31, r31
    2188:	ef 5a       	subi	r30, 0xAF	; 175
	      (track_buff[curr_track_index] == END_OF_TRACK))
    218a:	fd 4f       	sbci	r31, 0xFD	; 253
    218c:	80 81       	ld	r24, Z
    218e:	91 81       	ldd	r25, Z+1	; 0x01
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	19 f4       	brne	.+6      	; 0x219a <do_track_edit+0x344>
    2194:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
    2198:	22 c0       	rjmp	.+68     	; 0x21de <do_track_edit+0x388>
	  if (((curr_track_index+1) >= TRACK_SIZE) ||
    219a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
	curr_track_index = 0;
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <curr_track_index>
	    curr_track_index++;
    21a4:	1c c0       	rjmp	.+56     	; 0x21de <do_track_edit+0x388>
    21a6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
	    curr_track_index--;
    21aa:	88 23       	and	r24, r24
    21ac:	49 f0       	breq	.+18     	; 0x21c0 <do_track_edit+0x36a>
	  if (curr_track_index == 0) {
    21ae:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
    21b2:	81 50       	subi	r24, 0x01	; 1
    21b4:	f5 cf       	rjmp	.-22     	; 0x21a0 <do_track_edit+0x34a>
	    curr_track_index--;
    21b6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
    21ba:	8f 5f       	subi	r24, 0xFF	; 255
	      curr_track_index++;
    21bc:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <curr_track_index>
    21c0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <curr_track_index>
    21c4:	8f 30       	cpi	r24, 0x0F	; 15
	    while ((curr_track_index+1 < TRACK_SIZE) && 
    21c6:	58 f4       	brcc	.+22     	; 0x21de <do_track_edit+0x388>
    21c8:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
		   (track_buff[curr_track_index] != END_OF_TRACK))
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	ef 5a       	subi	r30, 0xAF	; 175
    21d4:	fd 4f       	sbci	r31, 0xFD	; 253
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	61 f7       	brne	.-40     	; 0x21b6 <do_track_edit+0x360>
	    while ((curr_track_index+1 < TRACK_SIZE) && 
    21de:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
      curr_patt = track_buff[curr_track_index];
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	ef 5a       	subi	r30, 0xAF	; 175
    21ea:	fd 4f       	sbci	r31, 0xFD	; 253
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
    21f4:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
    21f8:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
      play_loaded_pattern = FALSE; 
    21fc:	01 96       	adiw	r24, 0x01	; 1
      if (curr_patt != END_OF_TRACK) {
    21fe:	09 f4       	brne	.+2      	; 0x2202 <do_track_edit+0x3ac>
    2200:	aa ce       	rjmp	.-684    	; 0x1f56 <do_track_edit+0x100>
    2202:	67 dd       	rcall	.-1330   	; 0x1cd2 <load_curr_patt>
	curr_pitch_shift = load_curr_patt();
    2204:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
    2208:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
	curr_pattern_index = 0;
    220c:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
	while (note_counter & 0x1);
    2210:	80 fd       	sbrc	r24, 0
    2212:	fc cf       	rjmp	.-8      	; 0x220c <do_track_edit+0x3b6>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <play_loaded_pattern>
	play_loaded_pattern = TRUE;
    221a:	9d ce       	rjmp	.-710    	; 0x1f56 <do_track_edit+0x100>
    221c:	88 e0       	ldi	r24, 0x08	; 8
    221e:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
      } else if (just_pressed(KEY_NEXT)) {
    2222:	88 23       	and	r24, r24
    2224:	e1 f2       	breq	.-72     	; 0x21de <do_track_edit+0x388>
    2226:	43 dd       	rcall	.-1402   	; 0x1cae <start_track_stepwrite_mode>
    2228:	b5 cf       	rjmp	.-150    	; 0x2194 <do_track_edit+0x33e>
	start_track_stepwrite_mode();
    222a:	8e e0       	ldi	r24, 0x0E	; 14
    222c:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
	if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    2230:	81 11       	cpse	r24, r1
    2232:	0d cf       	rjmp	.-486    	; 0x204e <do_track_edit+0x1f8>
    2234:	8f e0       	ldi	r24, 0x0F	; 15
    2236:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
	  if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    223a:	88 23       	and	r24, r24
    223c:	a9 f1       	breq	.+106    	; 0x22a8 <do_track_edit+0x452>
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	3a d8       	rcall	.-3980   	; 0x12b6 <clear_led>
	    clear_led(LED_UP);
    2242:	84 e0       	ldi	r24, 0x04	; 4
    2244:	38 d8       	rcall	.-3984   	; 0x12b6 <clear_led>
    2246:	9e d9       	rcall	.-3268   	; 0x1584 <clear_blinking_leds>
	    clear_led(LED_DOWN);
    2248:	3e cf       	rjmp	.-388    	; 0x20c6 <do_track_edit+0x270>
	    clear_blinking_leds();
    224a:	8e e0       	ldi	r24, 0x0E	; 14
    224c:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
	  } else if (is_pressed(KEY_DOWN)) {
    2250:	88 23       	and	r24, r24
    2252:	09 f4       	brne	.+2      	; 0x2256 <do_track_edit+0x400>
    2254:	38 cf       	rjmp	.-400    	; 0x20c6 <do_track_edit+0x270>
    2256:	84 e0       	ldi	r24, 0x04	; 4
    2258:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	    set_led(LED_DOWN);
    225c:	cf 3f       	cpi	r28, 0xFF	; 255
    225e:	dc 07       	cpc	r29, r28
    2260:	d1 f0       	breq	.+52     	; 0x2296 <do_track_edit+0x440>
	    if (notekey != -1) {
    2262:	90 d9       	rcall	.-3296   	; 0x1584 <clear_blinking_leds>
    2264:	2c 97       	sbiw	r28, 0x0c	; 12
	      clear_blinking_leds();
    2266:	dc 2f       	mov	r29, r28
    2268:	cc 27       	eor	r28, r28
	      curr_patt = (curr_patt & 0xE0FF) | (((notekey - OCTAVE) & 0x1F) << 8);
    226a:	cc 27       	eor	r28, r28
    226c:	df 71       	andi	r29, 0x1F	; 31
    226e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    2272:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    2276:	90 7e       	andi	r25, 0xE0	; 224
    2278:	c8 2b       	or	r28, r24
    227a:	d9 2b       	or	r29, r25
    227c:	d0 93 74 02 	sts	0x0274, r29	; 0x800274 <curr_patt+0x1>
    2280:	c0 93 73 02 	sts	0x0273, r28	; 0x800273 <curr_patt>
    2284:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
    2288:	f0 e0       	ldi	r31, 0x00	; 0
	      track_buff[curr_track_index] = curr_patt; 
    228a:	ee 0f       	add	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	ef 5a       	subi	r30, 0xAF	; 175
    2290:	fd 4f       	sbci	r31, 0xFD	; 253
    2292:	d1 83       	std	Z+1, r29	; 0x01
    2294:	c0 83       	st	Z, r28
    2296:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
	    curr_pitch_shift = get_pitchshift_from_patt(curr_patt);
    229a:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    229e:	ef dc       	rcall	.-1570   	; 0x1c7e <get_pitchshift_from_patt>
    22a0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
    22a4:	84 5f       	subi	r24, 0xF4	; 244
    22a6:	0e cf       	rjmp	.-484    	; 0x20c4 <do_track_edit+0x26e>
    22a8:	8e e0       	ldi	r24, 0x0E	; 14
	    set_notekey_led_blink(OCTAVE + curr_pitch_shift);
    22aa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
	  if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    22ae:	81 11       	cpse	r24, r1
    22b0:	c6 cf       	rjmp	.-116    	; 0x223e <do_track_edit+0x3e8>
    22b2:	09 cf       	rjmp	.-494    	; 0x20c6 <do_track_edit+0x270>
    22b4:	0e 94 0f 09 	call	0x121e	; 0x121e <has_bank_knob_changed>
	if ((i != 0) || has_bank_knob_changed()) {
    22b8:	81 11       	cpse	r24, r1
    22ba:	12 cf       	rjmp	.-476    	; 0x20e0 <do_track_edit+0x28a>
    22bc:	e5 dc       	rcall	.-1590   	; 0x1c88 <display_curr_pitch_shift_ud>
	display_curr_pitch_shift_ud();
    22be:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
	set_single_numkey_led((curr_patt & 0x7) + 1);
    22c2:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
    22c6:	87 70       	andi	r24, 0x07	; 7
    22c8:	99 27       	eor	r25, r25
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	95 d8       	rcall	.-3798   	; 0x13f8 <set_single_numkey_led>
    22ce:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <in_run_mode>
    22d2:	88 23       	and	r24, r24
    if (in_run_mode) {
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <do_track_edit+0x482>
    22d6:	e7 cd       	rjmp	.-1074   	; 0x1ea6 <do_track_edit+0x50>
    22d8:	d7 dc       	rcall	.-1618   	; 0x1c88 <display_curr_pitch_shift_ud>
    22da:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
	display_curr_pitch_shift_ud();
    22de:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
	set_single_numkey_led((curr_patt & 0x7) + 1);
    22e2:	87 70       	andi	r24, 0x07	; 7
    22e4:	99 27       	eor	r25, r25
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	87 d8       	rcall	.-3826   	; 0x13f8 <set_single_numkey_led>
    22ea:	dd cd       	rjmp	.-1094   	; 0x1ea6 <do_track_edit+0x50>
    22ec:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <curr_patt>
    22f0:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <curr_patt+0x1>
	    if (curr_patt == END_OF_TRACK)
    22f4:	8f 3f       	cpi	r24, 0xFF	; 255
    22f6:	98 07       	cpc	r25, r24
    22f8:	11 f0       	breq	.+4      	; 0x22fe <do_track_edit+0x4a8>
    22fa:	c8 2f       	mov	r28, r24
    22fc:	c7 70       	andi	r28, 0x07	; 7
    22fe:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
	      i = curr_patt & 0x7;
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	46 db       	rcall	.-2420   	; 0x1992 <note_off>
	  play_loaded_pattern = FALSE;
    2306:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
	  note_off(0);
    230a:	98 e0       	ldi	r25, 0x08	; 8
    230c:	89 9f       	mul	r24, r25
    230e:	90 01       	movw	r18, r0
	  curr_patt = (bank << 3) | i;
    2310:	11 24       	eor	r1, r1
    2312:	2c 2b       	or	r18, r28
    2314:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <curr_patt+0x1>
    2318:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <curr_patt>
    231c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <curr_track_index>
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
	  track_buff[curr_track_index] = curr_patt;
    2326:	ef 5a       	subi	r30, 0xAF	; 175
    2328:	fd 4f       	sbci	r31, 0xFD	; 253
    232a:	31 83       	std	Z+1, r19	; 0x01
    232c:	20 83       	st	Z, r18
    232e:	6c 2f       	mov	r22, r28
    2330:	1e d0       	rcall	.+60     	; 0x236e <load_pattern>
    2332:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
    2336:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <all_slide>
	  load_pattern(bank, i);
    233a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <all_accent>
	  curr_pattern_index = 0;
    233e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <all_rest>
	  all_rest = all_accent = all_slide = FALSE;
    2342:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <curr_pitch_shift>
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <play_loaded_pattern>
    234c:	b7 cf       	rjmp	.-146    	; 0x22bc <do_track_edit+0x466>
	  curr_pitch_shift = 0;
    234e:	0e 94 ac 00 	call	0x158	; 0x158 <turn_off_tempo>
	  play_loaded_pattern = TRUE;
    2352:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
    2356:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <play_loaded_track>
      turn_off_tempo();
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	1a db       	rcall	.-2508   	; 0x1992 <note_off>
      play_loaded_track = play_loaded_pattern = 0;
    235e:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
    2362:	da d8       	rcall	.-3660   	; 0x1518 <clock_leds>
    2364:	cd b7       	in	r28, 0x3d	; 61
      note_off(0);
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	e6 e0       	ldi	r30, 0x06	; 6
    236a:	0c 94 25 1c 	jmp	0x384a	; 0x384a <__epilogue_restores__+0x18>

0000236e <load_pattern>:
      clear_all_leds();
    236e:	0f 93       	push	r16
      clock_leds();
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
}
    2374:	df 93       	push	r29
    2376:	d8 2f       	mov	r29, r24
    2378:	c6 2f       	mov	r28, r22
    237a:	ce d8       	rcall	.-3684   	; 0x1518 <clock_leds>
    237c:	28 e0       	ldi	r18, 0x08	; 8
  uint16_t pattern_addr;
  uint8_t i;

  clock_leds();

  pattern_addr = PATTERN_MEM + bank*BANK_SIZE + patt_location*PATT_SIZE;
    237e:	d2 9f       	mul	r29, r18
    2380:	c0 01       	movw	r24, r0
    2382:	11 24       	eor	r1, r1
    2384:	c8 0f       	add	r28, r24
    2386:	d9 2f       	mov	r29, r25
    2388:	d1 1d       	adc	r29, r1
    238a:	84 e0       	ldi	r24, 0x04	; 4
    238c:	cc 0f       	add	r28, r28
    238e:	dd 1f       	adc	r29, r29
    2390:	8a 95       	dec	r24
    2392:	e1 f7       	brne	.-8      	; 0x238c <load_pattern+0x1e>
    2394:	10 e0       	ldi	r17, 0x00	; 0
    2396:	00 e0       	ldi	r16, 0x00	; 0
  putnum_uh(pattern_addr);
  putstring("\n\r");
  */

  for(i=0; i<PATT_SIZE; i++) {
    pattern_buff[i] = spieeprom_read(pattern_addr + i);
    2398:	ce 01       	movw	r24, r28
    239a:	80 0f       	add	r24, r16
    239c:	91 1f       	adc	r25, r17
    239e:	58 dc       	rcall	.-1872   	; 0x1c50 <spieeprom_read>
    23a0:	f8 01       	movw	r30, r16
    23a2:	e1 58       	subi	r30, 0x81	; 129
    23a4:	fd 4f       	sbci	r31, 0xFD	; 253
    23a6:	80 83       	st	Z, r24
    23a8:	0f 5f       	subi	r16, 0xFF	; 255
    23aa:	1f 4f       	sbci	r17, 0xFF	; 255
  for(i=0; i<PATT_SIZE; i++) {
    23ac:	00 31       	cpi	r16, 0x10	; 16
    23ae:	11 05       	cpc	r17, r1
    23b0:	99 f7       	brne	.-26     	; 0x2398 <load_pattern+0x2a>
    //putstring(" 0x"); putnum_uh(pattern_buff[i]);
  }
  //putstring("\n\r");

    if (pattern_buff[PATT_SIZE-1] == 0x01) {
    23b2:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <pattern_buff+0xf>
    23b6:	81 30       	cpi	r24, 0x01	; 1
    23b8:	71 f4       	brne	.+28     	; 0x23d6 <load_pattern+0x68>
        PATT_LENGTH = 15;
    23ba:	8f e0       	ldi	r24, 0x0F	; 15
    } else {
        PATT_LENGTH = 16;
    23bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PATT_LENGTH>
    }

    
  dirtyflag = 0;
    23c0:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <dirtyflag>
  clear_led_blink(LED_DONE);
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	0e 94 30 09 	call	0x1260	; 0x1260 <clear_led_blink>
  clock_leds();
    23ca:	a6 d8       	rcall	.-3764   	; 0x1518 <clock_leds>

}
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0f 91       	pop	r16
    23d4:	08 95       	ret
        PATT_LENGTH = 16;
    23d6:	80 e1       	ldi	r24, 0x10	; 16
    23d8:	f1 cf       	rjmp	.-30     	; 0x23bc <load_pattern+0x4e>

000023da <clock_ticks>:

}

void clock_ticks()
{
	if (playing) {
    23da:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    23de:	88 23       	and	r24, r24
    23e0:	d1 f0       	breq	.+52     	; 0x2416 <clock_ticks+0x3c>
    23e2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
		if ((sync == MIDI_SYNC) && (midisync_clocked > 0)) {
    23e6:	82 30       	cpi	r24, 0x02	; 2
    23e8:	d9 f4       	brne	.+54     	; 0x2420 <clock_ticks+0x46>
    23ea:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <midisync_clocked>
    23ee:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <midisync_clocked+0x1>
    23f2:	18 16       	cp	r1, r24
    23f4:	19 06       	cpc	r1, r25
    23f6:	3c f0       	brlt	.+14     	; 0x2406 <clock_ticks+0x2c>
			do_tempo();
		}
	}
	//080602
	if (sync == MIDI_SYNC) {
      midi_cmd = midi_recv_cmd(); // returns 0 if no midi commands waiting
    23f8:	0e 94 bc 06 	call	0xd78	; 0xd78 <midi_recv_cmd>
    23fc:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <midi_cmd>
      if (midi_cmd != 0 && function == EDIT_PATTERN_FUNC)
    2400:	81 11       	cpse	r24, r1
    2402:	1c c0       	rjmp	.+56     	; 0x243c <clock_ticks+0x62>
    2404:	08 95       	ret
		    midisync_clocked = 0;
    2406:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <midisync_clocked+0x1>
    240a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <midisync_clocked>
		    do_tempo();
    240e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <do_tempo>
			do_tempo();
    2412:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <do_tempo>
	if (sync == MIDI_SYNC) {
    2416:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    241a:	82 30       	cpi	r24, 0x02	; 2
    241c:	69 f3       	breq	.-38     	; 0x23f8 <clock_ticks+0x1e>
    241e:	08 95       	ret
		else if ((sync == DIN_SYNC) && (dinsync_clocked > 0)) {
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	99 f4       	brne	.+38     	; 0x244a <clock_ticks+0x70>
    2424:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <dinsync_clocked>
    2428:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <dinsync_clocked+0x1>
    242c:	18 16       	cp	r1, r24
    242e:	19 06       	cpc	r1, r25
    2430:	64 f4       	brge	.+24     	; 0x244a <clock_ticks+0x70>
		    dinsync_clocked = 0;
    2432:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <dinsync_clocked+0x1>
    2436:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <dinsync_clocked>
    243a:	e9 cf       	rjmp	.-46     	; 0x240e <clock_ticks+0x34>
      if (midi_cmd != 0 && function == EDIT_PATTERN_FUNC)
    243c:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <function>
    2440:	93 30       	cpi	r25, 0x03	; 3
    2442:	19 f4       	brne	.+6      	; 0x244a <clock_ticks+0x70>
	    putnum_uh(midi_cmd);
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0c 94 c1 04 	jmp	0x982	; 0x982 <putnum_uh>
    }
}
    244a:	08 95       	ret

0000244c <write_pattern>:
void write_pattern(uint8_t bank, uint8_t patt_location) {
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	d8 2f       	mov	r29, r24
  clock_leds();
    2456:	c6 2f       	mov	r28, r22
    2458:	5f d8       	rcall	.-3906   	; 0x1518 <clock_leds>
  pattern_addr = PATTERN_MEM + bank*BANK_SIZE + patt_location*PATT_SIZE;
    245a:	28 e0       	ldi	r18, 0x08	; 8
    245c:	d2 9f       	mul	r29, r18
    245e:	c0 01       	movw	r24, r0
    2460:	11 24       	eor	r1, r1
    2462:	c8 0f       	add	r28, r24
    2464:	d9 2f       	mov	r29, r25
    2466:	d1 1d       	adc	r29, r1
    2468:	84 e0       	ldi	r24, 0x04	; 4
    246a:	cc 0f       	add	r28, r28
    246c:	dd 1f       	adc	r29, r29
    246e:	8a 95       	dec	r24
    2470:	e1 f7       	brne	.-8      	; 0x246a <write_pattern+0x1e>
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	00 e0       	ldi	r16, 0x00	; 0
   spieeprom_write(pattern_buff[i], pattern_addr+i);
    2476:	f8 01       	movw	r30, r16
    2478:	e1 58       	subi	r30, 0x81	; 129
    247a:	fd 4f       	sbci	r31, 0xFD	; 253
    247c:	80 81       	ld	r24, Z
    247e:	be 01       	movw	r22, r28
    2480:	60 0f       	add	r22, r16
    2482:	71 1f       	adc	r23, r17
   clock_ticks();
    2484:	a9 db       	rcall	.-2222   	; 0x1bd8 <spieeprom_write>
    2486:	a9 df       	rcall	.-174    	; 0x23da <clock_ticks>
    2488:	0f 5f       	subi	r16, 0xFF	; 255
  for (i = 0; i<PATT_SIZE; i++) {
    248a:	1f 4f       	sbci	r17, 0xFF	; 255
    248c:	00 31       	cpi	r16, 0x10	; 16
    248e:	11 05       	cpc	r17, r1
  clock_leds();
    2490:	91 f7       	brne	.-28     	; 0x2476 <write_pattern+0x2a>
    2492:	42 d8       	rcall	.-3964   	; 0x1518 <clock_leds>
}
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <start_runwrite_mode>:
  edit_pattern();
}

void start_runwrite_mode() {
  //putstring("start runwrite\n\r");
  curr_pattern_index = 0;
    249e:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
  in_runwrite_mode = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <in_runwrite_mode>
  set_led(LED_RS); 
    24a8:	81 e2       	ldi	r24, 0x21	; 33
    24aa:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
  note_off(0);
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	70 da       	rcall	.-2848   	; 0x1992 <note_off>
  if (sync == INTERNAL_SYNC)
    24b2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    24b6:	81 11       	cpse	r24, r1
    24b8:	04 c0       	rjmp	.+8      	; 0x24c2 <start_runwrite_mode+0x24>
    while (note_counter & 0x1);  // wait for the tempo interrupt to be ready for a note-on
    24ba:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <note_counter>
    24be:	80 fd       	sbrc	r24, 0
    24c0:	fc cf       	rjmp	.-8      	; 0x24ba <start_runwrite_mode+0x1c>
  play_loaded_pattern = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <play_loaded_pattern>
  playing = TRUE;
    24c8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <playing>
  midi_putchar(MIDI_START);
    24cc:	8a ef       	ldi	r24, 0xFA	; 250
    24ce:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <midi_putchar>
}
    24d2:	08 95       	ret

000024d4 <clear_leds_and_note_off>:

void clear_leds_and_note_off()
{
  clear_blinking_leds();
    24d4:	57 d8       	rcall	.-3922   	; 0x1584 <clear_blinking_leds>
    24d6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <clear_key_leds>
  clear_key_leds();
    24da:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
  clear_bank_leds();
    24de:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
  set_bank_led(bank);
    24e2:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
  note_off(0);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	54 ca       	rjmp	.-2904   	; 0x1992 <note_off>
}
    24ea:	08 95       	ret

000024ec <stop_runwrite_mode>:

void stop_runwrite_mode() {
  //putstring("stop runwrite\n\r");
  play_loaded_pattern = 0;
    24ec:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
  clear_leds_and_note_off();
    24f0:	f1 df       	rcall	.-30     	; 0x24d4 <clear_leds_and_note_off>
    24f2:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <in_runwrite_mode>
  in_runwrite_mode = 0;
    24f6:	81 e2       	ldi	r24, 0x21	; 33
  clear_led(LED_RS);
    24f8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
    24fc:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <playing>
  playing = FALSE;
    2500:	8c ef       	ldi	r24, 0xFC	; 252
  midi_putchar(MIDI_STOP);
    2502:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <midi_putchar>
    2506:	08 95       	ret

00002508 <start_stepwrite_mode>:
}

void start_stepwrite_mode() {
  //putstring("start stepwrite\n\r");
  in_stepwrite_mode = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <in_stepwrite_mode>
  set_led(LED_NEXT); 
    250e:	84 e2       	ldi	r24, 0x24	; 36
    2510:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
  clear_bank_leds();
    2514:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
  set_bank_led(0);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
  note_off(0);
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	38 ca       	rjmp	.-2960   	; 0x1992 <note_off>
}
    2522:	08 95       	ret

00002524 <stop_stepwrite_mode>:

void stop_stepwrite_mode() {
  //putstring("stop stepwrite\n\r");
  in_stepwrite_mode = 0;
    2524:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <in_stepwrite_mode>
  clear_led(LED_NEXT); 
    2528:	84 e2       	ldi	r24, 0x24	; 36
    252a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
  dirtyflag = 0;
    252e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <dirtyflag>
  clear_led(LED_DONE);
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
  clear_leds_and_note_off();
    2538:	cd cf       	rjmp	.-102    	; 0x24d4 <clear_leds_and_note_off>
}
    253a:	08 95       	ret

0000253c <edit_pattern>:
void edit_pattern() {
    253c:	a5 e0       	ldi	r26, 0x05	; 5
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e4 ea       	ldi	r30, 0xA4	; 164
    2542:	f2 e1       	ldi	r31, 0x12	; 18
    2544:	0c 94 08 1c 	jmp	0x3810	; 0x3810 <__prologue_saves__+0x16>
	if (just_pressed(KEY_TEMPO) && !is_pressed(KEY_CHAIN)) {
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    254e:	88 23       	and	r24, r24
    2550:	99 f0       	breq	.+38     	; 0x2578 <edit_pattern+0x3c>
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    2558:	81 11       	cpse	r24, r1
    255a:	0e c0       	rjmp	.+28     	; 0x2578 <edit_pattern+0x3c>
        if (PATT_LENGTH == 15) {
    255c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    2560:	8f 30       	cpi	r24, 0x0F	; 15
    2562:	09 f0       	breq	.+2      	; 0x2566 <edit_pattern+0x2a>
    2564:	4f c0       	rjmp	.+158    	; 0x2604 <edit_pattern+0xc8>
            PATT_LENGTH = 16;
    2566:	80 e1       	ldi	r24, 0x10	; 16
    2568:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PATT_LENGTH>
            pattern_buff[PATT_LENGTH-1] = 0xFF;
    256c:	8f ef       	ldi	r24, 0xFF	; 255
            pattern_buff[PATT_LENGTH] = 0x01;            
    256e:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <pattern_buff+0xf>
        dirtyflag = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
    if (is_pressed(KEY_CHAIN) && in_runwrite_mode) {
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    257e:	88 23       	and	r24, r24
    2580:	09 f4       	brne	.+2      	; 0x2584 <edit_pattern+0x48>
    2582:	45 c0       	rjmp	.+138    	; 0x260e <edit_pattern+0xd2>
    2584:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <in_runwrite_mode>
    2588:	88 23       	and	r24, r24
    258a:	09 f4       	brne	.+2      	; 0x258e <edit_pattern+0x52>
    258c:	40 c0       	rjmp	.+128    	; 0x260e <edit_pattern+0xd2>
      set_led(LED_CHAIN);
    258e:	82 e2       	ldi	r24, 0x22	; 34
    2590:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	  if (just_pressed(KEY_TEMPO)) {
    2594:	82 e0       	ldi	r24, 0x02	; 2
    2596:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    259a:	88 23       	and	r24, r24
    259c:	71 f0       	breq	.+28     	; 0x25ba <edit_pattern+0x7e>
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	80 e0       	ldi	r24, 0x00	; 0
	    pattern_buff[i] = 0xFF;
    25a2:	2f ef       	ldi	r18, 0xFF	; 255
    25a4:	fc 01       	movw	r30, r24
    25a6:	e1 58       	subi	r30, 0x81	; 129
    25a8:	fd 4f       	sbci	r31, 0xFD	; 253
    25aa:	20 83       	st	Z, r18
      for (i=0; i< PATT_SIZE; i++) {
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	80 31       	cpi	r24, 0x10	; 16
    25b0:	91 05       	cpc	r25, r1
	    dirtyflag = 1; // clearly, changed	  
    25b2:	c1 f7       	brne	.-16     	; 0x25a4 <edit_pattern+0x68>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
    clock_ticks();
    25ba:	0f df       	rcall	.-482    	; 0x23da <clock_ticks>
    if (in_runwrite_mode && 
    25bc:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <in_runwrite_mode>
    25c0:	88 23       	and	r24, r24
    25c2:	81 f0       	breq	.+32     	; 0x25e4 <edit_pattern+0xa8>
    25c4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    25c8:	88 23       	and	r24, r24
    25ca:	09 f4       	brne	.+2      	; 0x25ce <edit_pattern+0x92>
    25cc:	72 c0       	rjmp	.+228    	; 0x26b2 <edit_pattern+0x176>
	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    25ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
	(((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <edit_pattern+0x9c>
    25d6:	99 c1       	rjmp	.+818    	; 0x290a <edit_pattern+0x3ce>
	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	21 f4       	brne	.+8      	; 0x25e4 <edit_pattern+0xa8>
	 ((sync == DIN_SYNC) && dinsync_stopped()))) {
    25dc:	0e 94 77 07 	call	0xeee	; 0xeee <dinsync_stopped>
    25e0:	81 11       	cpse	r24, r1
    25e2:	6d c0       	rjmp	.+218    	; 0x26be <edit_pattern+0x182>
    } else if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    25e4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    25e8:	81 11       	cpse	r24, r1
    25ea:	9b c1       	rjmp	.+822    	; 0x2922 <edit_pattern+0x3e6>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    25f2:	88 23       	and	r24, r24
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <edit_pattern+0xbc>
      if (in_stepwrite_mode)
    25f6:	95 c1       	rjmp	.+810    	; 0x2922 <edit_pattern+0x3e6>
    25f8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    25fc:	81 11       	cpse	r24, r1
      start_runwrite_mode();
    25fe:	96 c1       	rjmp	.+812    	; 0x292c <edit_pattern+0x3f0>
    2600:	4e df       	rcall	.-356    	; 0x249e <start_runwrite_mode>
    2602:	60 c0       	rjmp	.+192    	; 0x26c4 <edit_pattern+0x188>
            PATT_LENGTH = 15;
    2604:	8f e0       	ldi	r24, 0x0F	; 15
    2606:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <PATT_LENGTH>
            pattern_buff[PATT_LENGTH] = 0x01;            
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	b0 cf       	rjmp	.-160    	; 0x256e <edit_pattern+0x32>
    } else if (just_released(KEY_CHAIN) && in_runwrite_mode && PATT_LENGTH==16) {
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    2614:	88 23       	and	r24, r24
    2616:	89 f2       	breq	.-94     	; 0x25ba <edit_pattern+0x7e>
    2618:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <in_runwrite_mode>
    261c:	88 23       	and	r24, r24
    261e:	69 f2       	breq	.-102    	; 0x25ba <edit_pattern+0x7e>
    2620:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    2624:	80 31       	cpi	r24, 0x10	; 16
    2626:	49 f6       	brne	.-110    	; 0x25ba <edit_pattern+0x7e>
	  memcpy(pattern_copy, pattern_buff+11, 5);
    2628:	85 e0       	ldi	r24, 0x05	; 5
    262a:	ea e8       	ldi	r30, 0x8A	; 138
    262c:	f2 e0       	ldi	r31, 0x02	; 2
    262e:	de 01       	movw	r26, r28
    2630:	11 96       	adiw	r26, 0x01	; 1
    2632:	01 90       	ld	r0, Z+
    2634:	0d 92       	st	X+, r0
    2636:	8a 95       	dec	r24
    2638:	e1 f7       	brne	.-8      	; 0x2632 <edit_pattern+0xf6>
	  memcpy(pattern_buff+11, pattern_buff+4, 2);
    263a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <pattern_buff+0x4>
    263e:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <pattern_buff+0x5>
    2642:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <pattern_buff+0xc>
    2646:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <pattern_buff+0xb>
	  pattern_buff[13] = pattern_buff[0];
    264a:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <pattern_buff>
    264e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <pattern_buff+0xd>
	  memcpy(pattern_buff+14, pattern_buff+9, 2);
    2652:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <pattern_buff+0x9>
    2656:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <pattern_buff+0xa>
    265a:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <pattern_buff+0xf>
    265e:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <pattern_buff+0xe>
	  pattern_buff[0] = pattern_buff[6];
    2662:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <pattern_buff+0x6>
    2666:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <pattern_buff>
	  memcpy(pattern_buff+9, pattern_buff+2, 2);
    266a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <pattern_buff+0x2>
    266e:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <pattern_buff+0x3>
    2672:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <pattern_buff+0xa>
    2676:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <pattern_buff+0x9>
	  pattern_buff[2] = pattern_buff[8];
    267a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <pattern_buff+0x8>
    267e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <pattern_buff+0x2>
	  pattern_buff[8] = pattern_buff[1];
    2682:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <pattern_buff+0x1>
    2686:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <pattern_buff+0x8>
	  pattern_buff[1] = pattern_buff[7];
    268a:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <pattern_buff+0x7>
    268e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <pattern_buff+0x1>
	  memcpy(pattern_buff+3, pattern_copy, 5);
    2692:	85 e0       	ldi	r24, 0x05	; 5
    2694:	fe 01       	movw	r30, r28
    2696:	31 96       	adiw	r30, 0x01	; 1
    2698:	a2 e8       	ldi	r26, 0x82	; 130
    269a:	b2 e0       	ldi	r27, 0x02	; 2
    269c:	01 90       	ld	r0, Z+
    269e:	0d 92       	st	X+, r0
    26a0:	8a 95       	dec	r24
    26a2:	e1 f7       	brne	.-8      	; 0x269c <edit_pattern+0x160>
      dirtyflag = 1; // clearly, changed
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
      clear_led(LED_CHAIN);
    26aa:	82 e2       	ldi	r24, 0x22	; 34
    26ac:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	(((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    26b0:	84 cf       	rjmp	.-248    	; 0x25ba <edit_pattern+0x7e>
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    26b8:	88 23       	and	r24, r24
    26ba:	09 f4       	brne	.+2      	; 0x26be <edit_pattern+0x182>
      stop_runwrite_mode();
    26bc:	88 cf       	rjmp	.-240    	; 0x25ce <edit_pattern+0x92>
    26be:	16 df       	rcall	.-468    	; 0x24ec <stop_runwrite_mode>
	  running_stepwrite = FALSE;
    26c0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <running_stepwrite>
    if (in_runwrite_mode || in_stepwrite_mode) {
    26c4:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <in_runwrite_mode>
    26c8:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <in_stepwrite_mode>
    26cc:	89 2b       	or	r24, r25
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <edit_pattern+0x196>
    26d0:	b7 c0       	rjmp	.+366    	; 0x2840 <edit_pattern+0x304>
	  if (running_stepwrite) index = runstepwrite_pattidx;
    26d2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <running_stepwrite>
    26d6:	e0 90 79 02 	lds	r14, 0x0279	; 0x800279 <runstepwrite_pattidx>
    26da:	81 11       	cpse	r24, r1
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <edit_pattern+0x1a6>
      else index = curr_pattern_index;
    26de:	e0 90 7a 02 	lds	r14, 0x027A	; 0x80027a <curr_pattern_index>
      curr_note = pattern_buff[index] & 0x3F;
    26e2:	f1 2c       	mov	r15, r1
    26e4:	c7 01       	movw	r24, r14
    26e6:	81 58       	subi	r24, 0x81	; 129
    26e8:	9d 4f       	sbci	r25, 0xFD	; 253
    26ea:	7c 01       	movw	r14, r24
    26ec:	fc 01       	movw	r30, r24
    26ee:	10 81       	ld	r17, Z
    26f0:	1f 73       	andi	r17, 0x3F	; 63
	  if ((curr_note != 0x3F)) {
    26f2:	1f 33       	cpi	r17, 0x3F	; 63
    26f4:	09 f0       	breq	.+2      	; 0x26f8 <edit_pattern+0x1bc>
    26f6:	1c c1       	rjmp	.+568    	; 0x2930 <edit_pattern+0x3f4>
	shift = 0;
    26f8:	00 e0       	ldi	r16, 0x00	; 0
      if (just_pressed(KEY_REST)) {
    26fa:	84 e1       	ldi	r24, 0x14	; 20
    26fc:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2700:	81 11       	cpse	r24, r1
    2702:	43 c1       	rjmp	.+646    	; 0x298a <edit_pattern+0x44e>
	  if ((curr_note != 0x3F) && (curr_note != 0)) {
    2704:	1f 33       	cpi	r17, 0x3F	; 63
    2706:	e1 f0       	breq	.+56     	; 0x2740 <edit_pattern+0x204>
    2708:	11 23       	and	r17, r17
    270a:	d1 f0       	breq	.+52     	; 0x2740 <edit_pattern+0x204>
	    if (!is_pressed(KEY_PREV) && just_pressed(KEY_UP) && shift < 2) curr_note += OCTAVE;
    270c:	83 e0       	ldi	r24, 0x03	; 3
    270e:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    2712:	81 11       	cpse	r24, r1
    2714:	08 c0       	rjmp	.+16     	; 0x2726 <edit_pattern+0x1ea>
    2716:	8f e0       	ldi	r24, 0x0F	; 15
    2718:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    271c:	88 23       	and	r24, r24
    271e:	19 f0       	breq	.+6      	; 0x2726 <edit_pattern+0x1ea>
    2720:	02 30       	cpi	r16, 0x02	; 2
    2722:	0c f4       	brge	.+2      	; 0x2726 <edit_pattern+0x1ea>
    2724:	14 5f       	subi	r17, 0xF4	; 244
		if (!is_pressed(KEY_PREV) && just_pressed(KEY_DOWN) && shift > -1) curr_note -= OCTAVE;
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    272c:	81 11       	cpse	r24, r1
    272e:	08 c0       	rjmp	.+16     	; 0x2740 <edit_pattern+0x204>
    2730:	8e e0       	ldi	r24, 0x0E	; 14
    2732:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2736:	88 23       	and	r24, r24
    2738:	19 f0       	breq	.+6      	; 0x2740 <edit_pattern+0x204>
    273a:	0f 3f       	cpi	r16, 0xFF	; 255
    273c:	09 f0       	breq	.+2      	; 0x2740 <edit_pattern+0x204>
    273e:	1c 50       	subi	r17, 0x0C	; 12
    if (get_lowest_notekey_just_pressed() != 0) curr_note = shift*OCTAVE;
    2740:	0e 94 0a 09 	call	0x1214	; 0x1214 <get_lowest_notekey_just_pressed>
    2744:	88 23       	and	r24, r24
    2746:	21 f0       	breq	.+8      	; 0x2750 <edit_pattern+0x214>
    2748:	1c e0       	ldi	r17, 0x0C	; 12
    274a:	01 9f       	mul	r16, r17
    274c:	10 2d       	mov	r17, r0
    274e:	11 24       	eor	r1, r1
      if (just_pressed(KEY_C))
    2750:	84 e0       	ldi	r24, 0x04	; 4
    2752:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2756:	81 11       	cpse	r24, r1
	curr_note += C2;
    2758:	19 5e       	subi	r17, 0xE9	; 233
      if (just_pressed(KEY_CS))
    275a:	89 e0       	ldi	r24, 0x09	; 9
    275c:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2760:	81 11       	cpse	r24, r1
	curr_note += C2_SHARP; 
    2762:	18 5e       	subi	r17, 0xE8	; 232
      if (just_pressed(KEY_D))
    2764:	85 e0       	ldi	r24, 0x05	; 5
    2766:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    276a:	81 11       	cpse	r24, r1
	curr_note += D2;
    276c:	17 5e       	subi	r17, 0xE7	; 231
      if (just_pressed(KEY_DS))
    276e:	8a e0       	ldi	r24, 0x0A	; 10
    2770:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2774:	81 11       	cpse	r24, r1
	curr_note += D2_SHARP;
    2776:	16 5e       	subi	r17, 0xE6	; 230
      if (shift < 3) {
    2778:	03 30       	cpi	r16, 0x03	; 3
    277a:	69 f1       	breq	.+90     	; 0x27d6 <edit_pattern+0x29a>
	if (just_pressed(KEY_E))
    277c:	86 e0       	ldi	r24, 0x06	; 6
    277e:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2782:	81 11       	cpse	r24, r1
	  curr_note += E2;
    2784:	15 5e       	subi	r17, 0xE5	; 229
	if (just_pressed(KEY_F))
    2786:	87 e0       	ldi	r24, 0x07	; 7
    2788:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    278c:	81 11       	cpse	r24, r1
	  curr_note += F2;
    278e:	14 5e       	subi	r17, 0xE4	; 228
	if (just_pressed(KEY_FS))
    2790:	8b e0       	ldi	r24, 0x0B	; 11
    2792:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2796:	81 11       	cpse	r24, r1
	  curr_note += F2_SHARP;
    2798:	13 5e       	subi	r17, 0xE3	; 227
	if (just_pressed(KEY_G))
    279a:	81 e1       	ldi	r24, 0x11	; 17
    279c:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    27a0:	81 11       	cpse	r24, r1
	  curr_note += G2;
    27a2:	12 5e       	subi	r17, 0xE2	; 226
	if (just_pressed(KEY_GS))
    27a4:	8c e0       	ldi	r24, 0x0C	; 12
    27a6:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    27aa:	81 11       	cpse	r24, r1
	  curr_note += G2_SHARP;
    27ac:	11 5e       	subi	r17, 0xE1	; 225
	if (just_pressed(KEY_A))
    27ae:	82 e1       	ldi	r24, 0x12	; 18
    27b0:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    27b4:	81 11       	cpse	r24, r1
	  curr_note += A3;
    27b6:	10 5e       	subi	r17, 0xE0	; 224
	if (just_pressed(KEY_AS))
    27b8:	8d e0       	ldi	r24, 0x0D	; 13
    27ba:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    27be:	81 11       	cpse	r24, r1
	  curr_note += A3_SHARP;
    27c0:	1f 5d       	subi	r17, 0xDF	; 223
	if (just_pressed(KEY_B))
    27c2:	80 e1       	ldi	r24, 0x10	; 16
    27c4:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    27c8:	81 11       	cpse	r24, r1
	  curr_note += B3;
    27ca:	1e 5d       	subi	r17, 0xDE	; 222
	if (just_pressed(KEY_C2)) {
    27cc:	83 e1       	ldi	r24, 0x13	; 19
    27ce:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    27d2:	81 11       	cpse	r24, r1
	  curr_note += C3;
    27d4:	1d 5d       	subi	r17, 0xDD	; 221
      if ((pattern_buff[index] != 0xFF) || (curr_note == 0x3F))
    27d6:	f7 01       	movw	r30, r14
    27d8:	80 81       	ld	r24, Z
    27da:	8f 3f       	cpi	r24, 0xFF	; 255
    27dc:	11 f4       	brne	.+4      	; 0x27e2 <edit_pattern+0x2a6>
    27de:	1f 33       	cpi	r17, 0x3F	; 63
	curr_note |= (pattern_buff[index] & 0xC0);   
    27e0:	21 f4       	brne	.+8      	; 0x27ea <edit_pattern+0x2ae>
    27e2:	f7 01       	movw	r30, r14
    27e4:	80 81       	ld	r24, Z
    27e6:	80 7c       	andi	r24, 0xC0	; 192
      if (curr_note != pattern_buff[index]) {
    27e8:	18 2b       	or	r17, r24
    27ea:	f7 01       	movw	r30, r14
    27ec:	80 81       	ld	r24, Z
    27ee:	81 17       	cp	r24, r17
	if (in_stepwrite_mode) {
    27f0:	c9 f0       	breq	.+50     	; 0x2824 <edit_pattern+0x2e8>
    27f2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    27f6:	88 23       	and	r24, r24
	  note_off(0);
    27f8:	29 f0       	breq	.+10     	; 0x2804 <edit_pattern+0x2c8>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	ca d8       	rcall	.-3692   	; 0x1992 <note_off>
	  delay_ms(1);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <delay_ms>
	pattern_buff[index] = curr_note;
    2804:	f7 01       	movw	r30, r14
	dirtyflag = 1; // clearly, changed
    2806:	10 83       	st	Z, r17
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
	if (in_stepwrite_mode) 	 // restrike note
    280e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    2812:	88 23       	and	r24, r24
	  note_on(curr_note & 0x3F,
    2814:	39 f0       	breq	.+14     	; 0x2824 <edit_pattern+0x2e8>
    2816:	16 fb       	bst	r17, 6
    2818:	44 27       	eor	r20, r20
    281a:	40 f9       	bld	r20, 0
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	81 2f       	mov	r24, r17
    2820:	8f 73       	andi	r24, 0x3F	; 63
    2822:	a1 d8       	rcall	.-3774   	; 0x1966 <note_on>
      if (curr_note != 0xFF) {
    2824:	1f 3f       	cpi	r17, 0xFF	; 255
    2826:	09 f4       	brne	.+2      	; 0x282a <edit_pattern+0x2ee>
    2828:	b6 c0       	rjmp	.+364    	; 0x2996 <edit_pattern+0x45a>
	set_note_led(curr_note);
    282a:	81 2f       	mov	r24, r17
    282c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <set_note_led>
	if (dirtyflag)
    2830:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <dirtyflag>
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <edit_pattern+0x2fe>
    2838:	aa c0       	rjmp	.+340    	; 0x298e <edit_pattern+0x452>
	  set_led_blink(LED_DONE);
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	0e 94 2c 09 	call	0x1258	; 0x1258 <set_led_blink>
	if (just_pressed(KEY_PREV) && is_pressed(KEY_NEXT)) {
    2840:	83 e0       	ldi	r24, 0x03	; 3
    2842:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2846:	88 23       	and	r24, r24
    2848:	09 f4       	brne	.+2      	; 0x284c <edit_pattern+0x310>
    284a:	b5 c0       	rjmp	.+362    	; 0x29b6 <edit_pattern+0x47a>
    284c:	88 e0       	ldi	r24, 0x08	; 8
    284e:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    2852:	88 23       	and	r24, r24
    2854:	09 f4       	brne	.+2      	; 0x2858 <edit_pattern+0x31c>
    2856:	af c0       	rjmp	.+350    	; 0x29b6 <edit_pattern+0x47a>
	  uint8_t first = pattern_buff[0];
    2858:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <pattern_buff>
	  while (i < PATT_LENGTH-1 && pattern_buff[i+1] != 0xFF) {
    285c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PATT_LENGTH>
    2860:	21 50       	subi	r18, 0x01	; 1
    2862:	33 0b       	sbc	r19, r19
	  uint8_t i = 0;
    2864:	40 e0       	ldi	r20, 0x00	; 0
	  while (i < PATT_LENGTH-1 && pattern_buff[i+1] != 0xFF) {
    2866:	e4 2f       	mov	r30, r20
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	df 01       	movw	r26, r30
    286c:	a1 58       	subi	r26, 0x81	; 129
    286e:	bd 4f       	sbci	r27, 0xFD	; 253
    2870:	e2 17       	cp	r30, r18
    2872:	f3 07       	cpc	r31, r19
    2874:	34 f4       	brge	.+12     	; 0x2882 <edit_pattern+0x346>
    2876:	e0 58       	subi	r30, 0x80	; 128
    2878:	fd 4f       	sbci	r31, 0xFD	; 253
    287a:	80 81       	ld	r24, Z
    287c:	8f 3f       	cpi	r24, 0xFF	; 255
    287e:	09 f0       	breq	.+2      	; 0x2882 <edit_pattern+0x346>
    2880:	96 c0       	rjmp	.+300    	; 0x29ae <edit_pattern+0x472>
	  pattern_buff[i] = first;
    2882:	5c 93       	st	X, r21
	  dirtyflag = 1;
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
    if (just_pressed(KEY_DONE)) {
    288a:	87 e1       	ldi	r24, 0x17	; 23
    288c:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2890:	88 23       	and	r24, r24
    2892:	c1 f1       	breq	.+112    	; 0x2904 <edit_pattern+0x3c8>
      if (in_stepwrite_mode) {
    2894:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    2898:	88 23       	and	r24, r24
    289a:	91 f0       	breq	.+36     	; 0x28c0 <edit_pattern+0x384>
	if (curr_pattern_index+1 < PATT_LENGTH)
    289c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PATT_LENGTH>
    28a8:	28 17       	cp	r18, r24
    28aa:	19 06       	cpc	r1, r25
    28ac:	41 f0       	breq	.+16     	; 0x28be <edit_pattern+0x382>
	  pattern_buff[curr_pattern_index+1] = 0xff;
    28ae:	3c f0       	brlt	.+14     	; 0x28be <edit_pattern+0x382>
    28b0:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	e0 58       	subi	r30, 0x80	; 128
    28b8:	fd 4f       	sbci	r31, 0xFD	; 253
	stop_stepwrite_mode();
    28ba:	8f ef       	ldi	r24, 0xFF	; 255
    28bc:	80 83       	st	Z, r24
	  running_stepwrite = FALSE;
    28be:	32 de       	rcall	.-924    	; 0x2524 <stop_stepwrite_mode>
    28c0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <running_stepwrite>
	  set_led_blink(LED_DONE);
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	0e 94 2c 09 	call	0x1258	; 0x1258 <set_led_blink>
	    clock_ticks();
    28ca:	87 dd       	rcall	.-1266   	; 0x23da <clock_ticks>
	    read_switches();
    28cc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <read_switches>
		patt_bank = bank;
    28d0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    28d4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <patt_bank>
		i = get_lowest_numkey_pressed();
    28d8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <get_lowest_numkey_pressed>
		if (i != 0) patt_location = i - 1;
    28dc:	88 23       	and	r24, r24
    28de:	19 f0       	breq	.+6      	; 0x28e6 <edit_pattern+0x3aa>
    28e0:	81 50       	subi	r24, 0x01	; 1
    28e2:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <patt_location>
		if (just_pressed(KEY_DONE)) break;
    28e6:	87 e1       	ldi	r24, 0x17	; 23
    28e8:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
      write_pattern(patt_bank, patt_location);
    28ec:	88 23       	and	r24, r24
    28ee:	69 f3       	breq	.-38     	; 0x28ca <edit_pattern+0x38e>
    28f0:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <patt_location>
    28f4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <patt_bank>
      dirtyflag = 0; // not dirty anymore, saved!
    28f8:	a9 dd       	rcall	.-1198   	; 0x244c <write_pattern>
    28fa:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <dirtyflag>
      clear_led_blink(LED_DONE);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	0e 94 30 09 	call	0x1260	; 0x1260 <clear_led_blink>
}
    2904:	25 96       	adiw	r28, 0x05	; 5
    2906:	e7 e0       	ldi	r30, 0x07	; 7
    2908:	9f c7       	rjmp	.+3902   	; 0x3848 <__epilogue_restores__+0x16>
	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    290a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    290e:	8c 3f       	cpi	r24, 0xFC	; 252
    2910:	09 f4       	brne	.+2      	; 0x2914 <edit_pattern+0x3d8>
		((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE)) ) ) {
    2912:	d5 ce       	rjmp	.-598    	; 0x26be <edit_pattern+0x182>
    2914:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
	       ((sync == MIDI_SYNC) && 
    2918:	8a 5f       	subi	r24, 0xFA	; 250
    291a:	82 30       	cpi	r24, 0x02	; 2
    291c:	08 f4       	brcc	.+2      	; 0x2920 <edit_pattern+0x3e4>
    291e:	6c ce       	rjmp	.-808    	; 0x25f8 <edit_pattern+0xbc>
    } else if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    2920:	d1 ce       	rjmp	.-606    	; 0x26c4 <edit_pattern+0x188>
    2922:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    2926:	82 30       	cpi	r24, 0x02	; 2
    2928:	a9 f3       	breq	.-22     	; 0x2914 <edit_pattern+0x3d8>
	stop_stepwrite_mode();
    292a:	cc ce       	rjmp	.-616    	; 0x26c4 <edit_pattern+0x188>
    292c:	fb dd       	rcall	.-1034   	; 0x2524 <stop_stepwrite_mode>
    292e:	68 ce       	rjmp	.-816    	; 0x2600 <edit_pattern+0xc4>
      if (just_pressed(KEY_ACCENT)) {
    2930:	85 e1       	ldi	r24, 0x15	; 21
    2932:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2936:	88 23       	and	r24, r24
    2938:	41 f0       	breq	.+16     	; 0x294a <edit_pattern+0x40e>
	pattern_buff[index] ^= 1 << 6;
    293a:	f7 01       	movw	r30, r14
    293c:	80 81       	ld	r24, Z
    293e:	90 e4       	ldi	r25, 0x40	; 64
    2940:	89 27       	eor	r24, r25
    2942:	80 83       	st	Z, r24
	dirtyflag = 1; // clearly, changed
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
      if (just_pressed(KEY_SLIDE)) {
    294a:	86 e1       	ldi	r24, 0x16	; 22
    294c:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2950:	88 23       	and	r24, r24
    2952:	39 f0       	breq	.+14     	; 0x2962 <edit_pattern+0x426>
      	pattern_buff[index] ^= 1 << 7;
    2954:	f7 01       	movw	r30, r14
    2956:	80 81       	ld	r24, Z
    2958:	80 58       	subi	r24, 0x80	; 128
    295a:	80 83       	st	Z, r24
	dirtyflag = 1; // clearly, changed
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <dirtyflag>
      if ((curr_note == 0x3F) || (curr_note == 0)) 
    2962:	11 23       	and	r17, r17
    2964:	09 f4       	brne	.+2      	; 0x2968 <edit_pattern+0x42c>
    2966:	c8 ce       	rjmp	.-624    	; 0x26f8 <edit_pattern+0x1bc>
	shift = -1;
    2968:	0f ef       	ldi	r16, 0xFF	; 255
      else if (curr_note < C2)
    296a:	17 31       	cpi	r17, 0x17	; 23
    296c:	08 f4       	brcc	.+2      	; 0x2970 <edit_pattern+0x434>
    296e:	c5 ce       	rjmp	.-630    	; 0x26fa <edit_pattern+0x1be>
      else if (curr_note <= C3)
    2970:	14 32       	cpi	r17, 0x24	; 36
    2972:	08 f4       	brcc	.+2      	; 0x2976 <edit_pattern+0x43a>
    2974:	c1 ce       	rjmp	.-638    	; 0x26f8 <edit_pattern+0x1bc>
	shift = 1;
    2976:	01 e0       	ldi	r16, 0x01	; 1
      else if (curr_note <= C4)
    2978:	10 33       	cpi	r17, 0x30	; 48
    297a:	08 f4       	brcc	.+2      	; 0x297e <edit_pattern+0x442>
    297c:	be ce       	rjmp	.-644    	; 0x26fa <edit_pattern+0x1be>
	shift = 3;
    297e:	03 e0       	ldi	r16, 0x03	; 3
      else if (curr_note <= C5)
    2980:	1c 33       	cpi	r17, 0x3C	; 60
    2982:	08 f0       	brcs	.+2      	; 0x2986 <edit_pattern+0x44a>
    2984:	ba ce       	rjmp	.-652    	; 0x26fa <edit_pattern+0x1be>
	shift = 2;
    2986:	02 e0       	ldi	r16, 0x02	; 2
    2988:	b8 ce       	rjmp	.-656    	; 0x26fa <edit_pattern+0x1be>
	curr_note = 0;
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	d9 ce       	rjmp	.-590    	; 0x2740 <edit_pattern+0x204>
	  clear_led(LED_DONE);
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
    2994:	55 cf       	rjmp	.-342    	; 0x2840 <edit_pattern+0x304>
	clear_note_leds();
    2996:	0e 94 80 0a 	call	0x1500	; 0x1500 <clear_note_leds>
	clear_led_blink(LED_DONE);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	0e 94 30 09 	call	0x1260	; 0x1260 <clear_led_blink>
	clear_led_blink(LED_UP);
    29a0:	83 e0       	ldi	r24, 0x03	; 3
    29a2:	0e 94 30 09 	call	0x1260	; 0x1260 <clear_led_blink>
	set_led(LED_DONE);
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
    29ac:	49 cf       	rjmp	.-366    	; 0x2840 <edit_pattern+0x304>
	    pattern_buff[i] = pattern_buff[i+1];
    29ae:	80 81       	ld	r24, Z
    29b0:	8c 93       	st	X, r24
	    i++;
    29b2:	4f 5f       	subi	r20, 0xFF	; 255
    29b4:	58 cf       	rjmp	.-336    	; 0x2866 <edit_pattern+0x32a>
	if (just_pressed(KEY_NEXT) && is_pressed(KEY_PREV)) {
    29b6:	88 e0       	ldi	r24, 0x08	; 8
    29b8:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    29bc:	88 23       	and	r24, r24
    29be:	f1 f0       	breq	.+60     	; 0x29fc <edit_pattern+0x4c0>
    29c0:	83 e0       	ldi	r24, 0x03	; 3
    29c2:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    29c6:	88 23       	and	r24, r24
    29c8:	c9 f0       	breq	.+50     	; 0x29fc <edit_pattern+0x4c0>
	  uint8_t prev = pattern_buff[0];
    29ca:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <pattern_buff>
	  while (i < PATT_LENGTH-1 && pattern_buff[i+1] != 0xFF) {
    29ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    29d2:	81 50       	subi	r24, 0x01	; 1
    29d4:	99 0b       	sbc	r25, r25
	  uint8_t i  = 0;
    29d6:	20 e0       	ldi	r18, 0x00	; 0
	  while (i < PATT_LENGTH-1 && pattern_buff[i+1] != 0xFF) {
    29d8:	e2 2f       	mov	r30, r18
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	e8 17       	cp	r30, r24
    29de:	f9 07       	cpc	r31, r25
    29e0:	2c f4       	brge	.+10     	; 0x29ec <edit_pattern+0x4b0>
    29e2:	e0 58       	subi	r30, 0x80	; 128
    29e4:	fd 4f       	sbci	r31, 0xFD	; 253
    29e6:	40 81       	ld	r20, Z
    29e8:	4f 3f       	cpi	r20, 0xFF	; 255
    29ea:	19 f4       	brne	.+6      	; 0x29f2 <edit_pattern+0x4b6>
	  pattern_buff[0] = next;
    29ec:	d0 92 7f 02 	sts	0x027F, r13	; 0x80027f <pattern_buff>
    29f0:	49 cf       	rjmp	.-366    	; 0x2884 <edit_pattern+0x348>
		next = pattern_buff[i+1];
    29f2:	d0 80       	ld	r13, Z
	    pattern_buff[++i] = prev;
    29f4:	2f 5f       	subi	r18, 0xFF	; 255
    29f6:	30 83       	st	Z, r19
		prev=next;
    29f8:	3d 2d       	mov	r19, r13
    29fa:	ee cf       	rjmp	.-36     	; 0x29d8 <edit_pattern+0x49c>
    if (just_pressed(KEY_UP) && is_pressed(KEY_PREV)) {
    29fc:	8f e0       	ldi	r24, 0x0F	; 15
    29fe:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2a02:	88 23       	and	r24, r24
    2a04:	d9 f0       	breq	.+54     	; 0x2a3c <edit_pattern+0x500>
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    2a0c:	88 23       	and	r24, r24
    2a0e:	b1 f0       	breq	.+44     	; 0x2a3c <edit_pattern+0x500>
        while(tu < PATT_LENGTH && pattern_buff[tu] != 0xFF) {
    2a10:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <PATT_LENGTH>
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	83 17       	cp	r24, r19
    2a1a:	08 f0       	brcs	.+2      	; 0x2a1e <edit_pattern+0x4e2>
    2a1c:	33 cf       	rjmp	.-410    	; 0x2884 <edit_pattern+0x348>
    2a1e:	fc 01       	movw	r30, r24
    2a20:	e1 58       	subi	r30, 0x81	; 129
    2a22:	fd 4f       	sbci	r31, 0xFD	; 253
    2a24:	20 81       	ld	r18, Z
    2a26:	2f 3f       	cpi	r18, 0xFF	; 255
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <edit_pattern+0x4f0>
    2a2a:	2c cf       	rjmp	.-424    	; 0x2884 <edit_pattern+0x348>
            if (pattern_buff[tu] != 0x3E) pattern_buff[tu]++;
    2a2c:	20 81       	ld	r18, Z
    2a2e:	2e 33       	cpi	r18, 0x3E	; 62
    2a30:	19 f0       	breq	.+6      	; 0x2a38 <edit_pattern+0x4fc>
    2a32:	20 81       	ld	r18, Z
    2a34:	2f 5f       	subi	r18, 0xFF	; 255
    2a36:	20 83       	st	Z, r18
            tu++;
    2a38:	01 96       	adiw	r24, 0x01	; 1
    2a3a:	ee cf       	rjmp	.-36     	; 0x2a18 <edit_pattern+0x4dc>
    if (just_pressed(KEY_DOWN) && is_pressed(KEY_PREV)) {
    2a3c:	8e e0       	ldi	r24, 0x0E	; 14
    2a3e:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2a42:	88 23       	and	r24, r24
    2a44:	d9 f0       	breq	.+54     	; 0x2a7c <edit_pattern+0x540>
    2a46:	83 e0       	ldi	r24, 0x03	; 3
    2a48:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    2a4c:	88 23       	and	r24, r24
    2a4e:	b1 f0       	breq	.+44     	; 0x2a7c <edit_pattern+0x540>
        while(td < PATT_LENGTH && pattern_buff[td] != 0xFF) {
    2a50:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <PATT_LENGTH>
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	83 17       	cp	r24, r19
    2a5a:	08 f0       	brcs	.+2      	; 0x2a5e <edit_pattern+0x522>
    2a5c:	13 cf       	rjmp	.-474    	; 0x2884 <edit_pattern+0x348>
    2a5e:	fc 01       	movw	r30, r24
    2a60:	e1 58       	subi	r30, 0x81	; 129
    2a62:	fd 4f       	sbci	r31, 0xFD	; 253
    2a64:	20 81       	ld	r18, Z
    2a66:	2f 3f       	cpi	r18, 0xFF	; 255
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <edit_pattern+0x530>
    2a6a:	0c cf       	rjmp	.-488    	; 0x2884 <edit_pattern+0x348>
            if (pattern_buff[td] != 0x0B) pattern_buff[td]--;
    2a6c:	20 81       	ld	r18, Z
    2a6e:	2b 30       	cpi	r18, 0x0B	; 11
    2a70:	19 f0       	breq	.+6      	; 0x2a78 <edit_pattern+0x53c>
    2a72:	20 81       	ld	r18, Z
    2a74:	21 50       	subi	r18, 0x01	; 1
    2a76:	20 83       	st	Z, r18
            td++;
    2a78:	01 96       	adiw	r24, 0x01	; 1
    2a7a:	ee cf       	rjmp	.-36     	; 0x2a58 <edit_pattern+0x51c>
	if (just_pressed(KEY_NEXT) || just_pressed(KEY_PREV) || note_entered) {
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2a82:	88 23       	and	r24, r24
      if (in_stepwrite_mode) {
    2a84:	09 f1       	breq	.+66     	; 0x2ac8 <edit_pattern+0x58c>
    2a86:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
    2a8a:	81 11       	cpse	r24, r1
	    if (just_pressed(KEY_NEXT) || note_entered) {
    2a8c:	23 c0       	rjmp	.+70     	; 0x2ad4 <edit_pattern+0x598>
    2a8e:	88 e0       	ldi	r24, 0x08	; 8
    2a90:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2a94:	88 23       	and	r24, r24
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <edit_pattern+0x55e>
	      if (!in_runwrite_mode) {
    2a98:	c0 c0       	rjmp	.+384    	; 0x2c1a <edit_pattern+0x6de>
    2a9a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <in_runwrite_mode>
    2a9e:	81 11       	cpse	r24, r1
		    start_stepwrite_mode();
    2aa0:	98 c0       	rjmp	.+304    	; 0x2bd2 <edit_pattern+0x696>
    2aa2:	32 dd       	rcall	.-1436   	; 0x2508 <start_stepwrite_mode>
		    curr_pattern_index = 0;
    2aa4:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
		    curr_note = pattern_buff[curr_pattern_index];
    2aa8:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	e1 58       	subi	r30, 0x81	; 129
    2ab0:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab2:	80 81       	ld	r24, Z
    2ab4:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>
		    if (curr_note != 0xFF) {
    2ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aba:	09 f4       	brne	.+2      	; 0x2abe <edit_pattern+0x582>
    2abc:	e6 ce       	rjmp	.-564    	; 0x288a <edit_pattern+0x34e>
			  note_on(curr_note & 0x3F,
    2abe:	86 fb       	bst	r24, 6
    2ac0:	44 27       	eor	r20, r20
    2ac2:	40 f9       	bld	r20, 0
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	7d c0       	rjmp	.+250    	; 0x2bc2 <edit_pattern+0x686>
	if (just_pressed(KEY_NEXT) || just_pressed(KEY_PREV) || note_entered) {
    2ac8:	83 e0       	ldi	r24, 0x03	; 3
    2aca:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2ace:	81 11       	cpse	r24, r1
    2ad0:	da cf       	rjmp	.-76     	; 0x2a86 <edit_pattern+0x54a>
    2ad2:	db ce       	rjmp	.-586    	; 0x288a <edit_pattern+0x34e>
	note_off((curr_note >> 7) & 0x1);
    2ad4:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <curr_note>
    2ad8:	11 1f       	adc	r17, r17
    2ada:	11 27       	eor	r17, r17
    2adc:	11 1f       	adc	r17, r17
    2ade:	81 2f       	mov	r24, r17
    2ae0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
	delay_ms(1);
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <delay_ms>
	if (just_pressed(KEY_PREV)) { 
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2af0:	88 23       	and	r24, r24
    2af2:	f1 f1       	breq	.+124    	; 0x2b70 <edit_pattern+0x634>
	  if (curr_pattern_index == 0) {
    2af4:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2af8:	81 11       	cpse	r24, r1
    2afa:	34 c0       	rjmp	.+104    	; 0x2b64 <edit_pattern+0x628>
	    while ((curr_pattern_index < PATT_LENGTH-1) && 
    2afc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    2b00:	81 50       	subi	r24, 0x01	; 1
    2b02:	99 0b       	sbc	r25, r25
    2b04:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <curr_pattern_index>
    2b08:	28 17       	cp	r18, r24
    2b0a:	19 06       	cpc	r1, r25
    2b0c:	44 f4       	brge	.+16     	; 0x2b1e <edit_pattern+0x5e2>
		   (pattern_buff[curr_pattern_index] != END_OF_PATTERN))
    2b0e:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	e1 58       	subi	r30, 0x81	; 129
    2b16:	fd 4f       	sbci	r31, 0xFD	; 253
    2b18:	20 81       	ld	r18, Z
	    while ((curr_pattern_index < PATT_LENGTH-1) && 
    2b1a:	2f 3f       	cpi	r18, 0xFF	; 255
    2b1c:	e9 f4       	brne	.+58     	; 0x2b58 <edit_pattern+0x61c>
	clear_bank_leds();
    2b1e:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
	set_bank_led(curr_pattern_index);
    2b22:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2b26:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
	curr_note = pattern_buff[curr_pattern_index];
    2b2a:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	e1 58       	subi	r30, 0x81	; 129
    2b32:	fd 4f       	sbci	r31, 0xFD	; 253
    2b34:	80 81       	ld	r24, Z
    2b36:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <curr_note>
	if (curr_note == 0xFF) {
    2b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3c:	91 f5       	brne	.+100    	; 0x2ba2 <edit_pattern+0x666>
	  clear_led(LED_ACCENT);
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	  clear_led(LED_SLIDE);
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	  set_led(LED_DONE);
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	  clear_led_blink(LED_DONE);
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	0e 94 30 09 	call	0x1260	; 0x1260 <clear_led_blink>
    2b56:	99 ce       	rjmp	.-718    	; 0x288a <edit_pattern+0x34e>
	      curr_pattern_index++;
    2b58:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <curr_pattern_index>
    2b5c:	2f 5f       	subi	r18, 0xFF	; 255
    2b5e:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <curr_pattern_index>
    2b62:	d0 cf       	rjmp	.-96     	; 0x2b04 <edit_pattern+0x5c8>
	    curr_pattern_index--;
    2b64:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2b68:	81 50       	subi	r24, 0x01	; 1
	    curr_pattern_index++;
    2b6a:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
    2b6e:	d7 cf       	rjmp	.-82     	; 0x2b1e <edit_pattern+0x5e2>
	  if (((curr_pattern_index+1) >= PATT_LENGTH) ||
    2b70:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	01 96       	adiw	r24, 0x01	; 1
    2b78:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <PATT_LENGTH>
    2b7c:	28 17       	cp	r18, r24
    2b7e:	19 06       	cpc	r1, r25
    2b80:	49 f0       	breq	.+18     	; 0x2b94 <edit_pattern+0x658>
    2b82:	44 f0       	brlt	.+16     	; 0x2b94 <edit_pattern+0x658>
	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN))
    2b84:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <curr_pattern_index>
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	e1 58       	subi	r30, 0x81	; 129
    2b8c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b8e:	80 81       	ld	r24, Z
	  if (((curr_pattern_index+1) >= PATT_LENGTH) ||
    2b90:	8f 3f       	cpi	r24, 0xFF	; 255
    2b92:	19 f4       	brne	.+6      	; 0x2b9a <edit_pattern+0x65e>
	    curr_pattern_index = 0;
    2b94:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
    2b98:	c2 cf       	rjmp	.-124    	; 0x2b1e <edit_pattern+0x5e2>
	    curr_pattern_index++;
    2b9a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2b9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ba0:	e4 cf       	rjmp	.-56     	; 0x2b6a <edit_pattern+0x62e>
	  clear_led(LED_DONE);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	  if (dirtyflag)
    2ba8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <dirtyflag>
    2bac:	88 23       	and	r24, r24
    2bae:	19 f0       	breq	.+6      	; 0x2bb6 <edit_pattern+0x67a>
	    set_led_blink(LED_DONE);
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	0e 94 2c 09 	call	0x1258	; 0x1258 <set_led_blink>
		  (curr_note>>6) & 0x1);       // accent
    2bb6:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
	  note_on(curr_note & 0x3F,
    2bba:	86 fb       	bst	r24, 6
    2bbc:	44 27       	eor	r20, r20
    2bbe:	40 f9       	bld	r20, 0
    2bc0:	61 2f       	mov	r22, r17
			  note_on(curr_note & 0x3F,
    2bc2:	8f 73       	andi	r24, 0x3F	; 63
    2bc4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <note_on>
			  set_note_led(curr_note);
    2bc8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <curr_note>
    2bcc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <set_note_led>
    2bd0:	5c ce       	rjmp	.-840    	; 0x288a <edit_pattern+0x34e>
		    if (!running_stepwrite) {
    2bd2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <running_stepwrite>
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	06 c0       	rjmp	.+12     	; 0x2be6 <edit_pattern+0x6aa>
		      running_stepwrite = TRUE;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <running_stepwrite>
	    runstepwrite_pattidx = 0;
    2be0:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <runstepwrite_pattidx>
    2be4:	52 ce       	rjmp	.-860    	; 0x288a <edit_pattern+0x34e>
	  if (((runstepwrite_pattidx+1) >= PATT_LENGTH) ||
    2be6:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <runstepwrite_pattidx>
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	a9 01       	movw	r20, r18
    2bf0:	4f 5f       	subi	r20, 0xFF	; 255
    2bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <PATT_LENGTH>
    2bf8:	94 17       	cp	r25, r20
    2bfa:	15 06       	cpc	r1, r21
    2bfc:	39 f0       	breq	.+14     	; 0x2c0c <edit_pattern+0x6d0>
    2bfe:	34 f0       	brlt	.+12     	; 0x2c0c <edit_pattern+0x6d0>
	      (pattern_buff[runstepwrite_pattidx] == END_OF_PATTERN)) {
    2c00:	21 58       	subi	r18, 0x81	; 129
    2c02:	3d 4f       	sbci	r19, 0xFD	; 253
    2c04:	f9 01       	movw	r30, r18
    2c06:	90 81       	ld	r25, Z
	  if (((runstepwrite_pattidx+1) >= PATT_LENGTH) ||
    2c08:	9f 3f       	cpi	r25, 0xFF	; 255
    2c0a:	19 f4       	brne	.+6      	; 0x2c12 <edit_pattern+0x6d6>
		running_stepwrite = FALSE;
    2c0c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <running_stepwrite>
    2c10:	e7 cf       	rjmp	.-50     	; 0x2be0 <edit_pattern+0x6a4>
	    runstepwrite_pattidx++;
    2c12:	8f 5f       	subi	r24, 0xFF	; 255
	    runstepwrite_pattidx--;
    2c14:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <runstepwrite_pattidx>
    2c18:	38 ce       	rjmp	.-912    	; 0x288a <edit_pattern+0x34e>
		else if (running_stepwrite) {
    2c1a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <running_stepwrite>
    2c1e:	88 23       	and	r24, r24
    2c20:	09 f4       	brne	.+2      	; 0x2c24 <edit_pattern+0x6e8>
    2c22:	33 ce       	rjmp	.-922    	; 0x288a <edit_pattern+0x34e>
	  if (runstepwrite_pattidx == 0) {
    2c24:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <runstepwrite_pattidx>
	    while ((runstepwrite_pattidx < PATT_LENGTH-1) && 
    2c28:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <PATT_LENGTH>
    2c2c:	41 50       	subi	r20, 0x01	; 1
    2c2e:	55 0b       	sbc	r21, r21
	  if (runstepwrite_pattidx == 0) {
    2c30:	88 23       	and	r24, r24
    2c32:	19 f0       	breq	.+6      	; 0x2c3a <edit_pattern+0x6fe>
	    runstepwrite_pattidx--;
    2c34:	81 50       	subi	r24, 0x01	; 1
    2c36:	ee cf       	rjmp	.-36     	; 0x2c14 <edit_pattern+0x6d8>
    2c38:	82 2f       	mov	r24, r18
	    while ((runstepwrite_pattidx < PATT_LENGTH-1) && 
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	24 17       	cp	r18, r20
    2c40:	35 07       	cpc	r19, r21
		   (pattern_buff[runstepwrite_pattidx] != END_OF_PATTERN))
    2c42:	44 f7       	brge	.-48     	; 0x2c14 <edit_pattern+0x6d8>
    2c44:	21 58       	subi	r18, 0x81	; 129
    2c46:	3d 4f       	sbci	r19, 0xFD	; 253
    2c48:	f9 01       	movw	r30, r18
    2c4a:	90 81       	ld	r25, Z
    2c4c:	21 e0       	ldi	r18, 0x01	; 1
	    while ((runstepwrite_pattidx < PATT_LENGTH-1) && 
    2c4e:	28 0f       	add	r18, r24
    2c50:	9f 3f       	cpi	r25, 0xFF	; 255
    2c52:	91 f7       	brne	.-28     	; 0x2c38 <edit_pattern+0x6fc>
    2c54:	df cf       	rjmp	.-66     	; 0x2c14 <edit_pattern+0x6d8>

00002c56 <edit_live>:
  in_runwrite_mode = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <in_runwrite_mode>
  edit_pattern();
    2c5c:	6f cc       	rjmp	.-1826   	; 0x253c <edit_pattern>
    2c5e:	08 95       	ret

00002c60 <do_pattern_edit>:
void do_pattern_edit(void) {
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
  curr_function = function;
    2c64:	d0 91 c6 01 	lds	r29, 0x01C6	; 0x8001c6 <function>
  patt_location = 0;
    2c68:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <patt_location>
  in_stepwrite_mode = 0;
    2c6c:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <in_stepwrite_mode>
  in_runwrite_mode = 0;
    2c70:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <in_runwrite_mode>
  running_stepwrite = FALSE;
    2c74:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <running_stepwrite>
  play_loaded_pattern = 0;
    2c78:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
  curr_pattern_index = 0;
    2c7c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
  curr_note = 0;
    2c80:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <curr_note>
  if (sync == INTERNAL_SYNC)
    2c84:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    2c88:	81 11       	cpse	r24, r1
    turn_on_tempo();
    2c8a:	29 c0       	rjmp	.+82     	; 0x2cde <do_pattern_edit+0x7e>
    2c8c:	0e 94 a6 00 	call	0x14c	; 0x14c <turn_on_tempo>
  read_switches();
    2c90:	0e 94 cf 07 	call	0xf9e	; 0xf9e <read_switches>
  patt_bank = bank;
    2c94:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    2c98:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <patt_bank>
  load_pattern(patt_bank, patt_location);
    2c9c:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <patt_location>
    2ca0:	66 db       	rcall	.-2356   	; 0x236e <load_pattern>
  clear_all_leds();
    2ca2:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
  set_bank_led(bank);
    2ca6:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    2caa:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
    read_switches();
    2cae:	0e 94 cf 07 	call	0xf9e	; 0xf9e <read_switches>
    if (function != curr_function) {
    2cb2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    2cb6:	8d 17       	cp	r24, r29
    2cb8:	b9 f0       	breq	.+46     	; 0x2ce8 <do_pattern_edit+0x88>
      turn_off_tempo();
    2cba:	0e 94 ac 00 	call	0x158	; 0x158 <turn_off_tempo>
      play_loaded_pattern = FALSE;
    2cbe:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
      note_off(0);
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
      dinsync_stop();
    2cc8:	0e 94 5f 07 	call	0xebe	; 0xebe <dinsync_stop>
      midi_stop();
    2ccc:	0e 94 39 07 	call	0xe72	; 0xe72 <midi_stop>
      clear_all_leds();
    2cd0:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
      clock_leds();
    2cd4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <clock_leds>
}
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    turn_off_tempo();
    2cdc:	08 95       	ret
    2cde:	0e 94 ac 00 	call	0x158	; 0x158 <turn_off_tempo>
    dinsync_set_out();
    2ce2:	0e 94 89 07 	call	0xf12	; 0xf12 <dinsync_set_out>
    if (patt_bank != bank) {
    2ce6:	d4 cf       	rjmp	.-88     	; 0x2c90 <do_pattern_edit+0x30>
    2ce8:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <patt_bank>
    2cec:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
      if (in_stepwrite_mode)
    2cf0:	98 17       	cp	r25, r24
    2cf2:	89 f0       	breq	.+34     	; 0x2d16 <do_pattern_edit+0xb6>
    2cf4:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <in_stepwrite_mode>
	stop_stepwrite_mode();
    2cf8:	81 11       	cpse	r24, r1
      patt_bank = bank;
    2cfa:	14 dc       	rcall	.-2008   	; 0x2524 <stop_stepwrite_mode>
    2cfc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    2d00:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <patt_bank>
      load_pattern(patt_bank, patt_location);
    2d04:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <patt_location>
    2d08:	32 db       	rcall	.-2460   	; 0x236e <load_pattern>
      clear_bank_leds();
    2d0a:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
      set_bank_led(bank);
    2d0e:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    2d12:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
    if (! (in_runwrite_mode || in_stepwrite_mode)) {
    2d16:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <in_runwrite_mode>
    2d1a:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <in_stepwrite_mode>
    2d1e:	89 2b       	or	r24, r25
    2d20:	b1 f4       	brne	.+44     	; 0x2d4e <do_pattern_edit+0xee>
      set_numkey_led(patt_location+1);
    2d22:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <patt_location>
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
      i = get_lowest_numkey_pressed();
    2d28:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
    2d2c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <get_lowest_numkey_pressed>
      if (i != 0) {
    2d30:	c8 2f       	mov	r28, r24
	clear_notekey_leds();
    2d32:	88 23       	and	r24, r24
    2d34:	61 f0       	breq	.+24     	; 0x2d4e <do_pattern_edit+0xee>
	set_numkey_led(i);
    2d36:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <clear_notekey_leds>
    2d3a:	8c 2f       	mov	r24, r28
	patt_location = i - 1;
    2d3c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
    2d40:	6f ef       	ldi	r22, 0xFF	; 255
    2d42:	6c 0f       	add	r22, r28
	load_pattern(patt_bank, patt_location);
    2d44:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <patt_location>
    2d48:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <patt_bank>
    edit_pattern();
    2d4c:	10 db       	rcall	.-2528   	; 0x236e <load_pattern>
    2d4e:	f6 db       	rcall	.-2068   	; 0x253c <edit_pattern>
    read_switches();
    2d50:	ae cf       	rjmp	.-164    	; 0x2cae <do_pattern_edit+0x4e>

00002d52 <chains_equiv>:
    }

  }
}

uint8_t chains_equiv(volatile uint8_t *chain1, volatile uint8_t *chain2) {
    2d52:	9c 01       	movw	r18, r24
    2d54:	ab 01       	movw	r20, r22
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t i;
  
  for (i=0; i < MAX_CHAIN; i++) {
    if (chain1[i] != chain2[i])
    2d5a:	f9 01       	movw	r30, r18
    2d5c:	e8 0f       	add	r30, r24
    2d5e:	f9 1f       	adc	r31, r25
    2d60:	70 81       	ld	r23, Z
    2d62:	da 01       	movw	r26, r20
    2d64:	a8 0f       	add	r26, r24
    2d66:	b9 1f       	adc	r27, r25
    2d68:	6c 91       	ld	r22, X
    2d6a:	76 13       	cpse	r23, r22
    2d6c:	09 c0       	rjmp	.+18     	; 0x2d80 <chains_equiv+0x2e>
      return FALSE;
    if (chain1[i] == 0xFF) 
    2d6e:	60 81       	ld	r22, Z
    2d70:	6f 3f       	cpi	r22, 0xFF	; 255
    2d72:	21 f0       	breq	.+8      	; 0x2d7c <chains_equiv+0x2a>
    2d74:	01 96       	adiw	r24, 0x01	; 1
  for (i=0; i < MAX_CHAIN; i++) {
    2d76:	80 32       	cpi	r24, 0x20	; 32
    2d78:	91 05       	cpc	r25, r1
    2d7a:	79 f7       	brne	.-34     	; 0x2d5a <chains_equiv+0x8>
      return TRUE;
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
  }
  return TRUE;
}
    2d7e:	08 95       	ret
      return FALSE;
    2d80:	80 e0       	ldi	r24, 0x00	; 0
    2d82:	08 95       	ret

00002d84 <get_next_patt_idx>:

uint8_t get_next_patt_idx() {
  prev_pattern_index = curr_pattern_index;
    2d84:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2d88:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <prev_pattern_index>
  if (loop && !loop_countdown) {
    2d8c:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <loop>
    2d90:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <loop_countdown>
    2d94:	99 23       	and	r25, r25
    2d96:	a9 f0       	breq	.+42     	; 0x2dc2 <get_next_patt_idx+0x3e>
    2d98:	81 11       	cpse	r24, r1
    2d9a:	15 c0       	rjmp	.+42     	; 0x2dc6 <get_next_patt_idx+0x42>
	if (curr_pattern_index == loop_end-1) return loop_start-1;
    2d9c:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <curr_pattern_index>
    2da0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <loop_end>
    2da4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <loop_start>
    2da8:	69 2f       	mov	r22, r25
    2daa:	61 50       	subi	r22, 0x01	; 1
    2dac:	77 0b       	sbc	r23, r23
    2dae:	46 17       	cp	r20, r22
    2db0:	17 06       	cpc	r1, r23
    2db2:	11 f4       	brne	.+4      	; 0x2db8 <get_next_patt_idx+0x34>
	if (loop_start > loop_end) return curr_pattern_index-1;
    2db4:	81 50       	subi	r24, 0x01	; 1
    2db6:	08 95       	ret
    2db8:	98 17       	cp	r25, r24
    2dba:	90 f4       	brcc	.+36     	; 0x2de0 <get_next_patt_idx+0x5c>
    2dbc:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2dc0:	f9 cf       	rjmp	.-14     	; 0x2db4 <get_next_patt_idx+0x30>
  }
  else if (loop_countdown){
    2dc2:	88 23       	and	r24, r24
    2dc4:	69 f0       	breq	.+26     	; 0x2de0 <get_next_patt_idx+0x5c>
    if (countdown < 0) {
    2dc6:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <countdown>
    2dca:	87 ff       	sbrs	r24, 7
    2dcc:	04 c0       	rjmp	.+8      	; 0x2dd6 <get_next_patt_idx+0x52>
	  countdown++;
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <countdown>
	  return curr_pattern_index-1;
    2dd4:	f3 cf       	rjmp	.-26     	; 0x2dbc <get_next_patt_idx+0x38>
	}
	else if (countdown > 0) countdown--;
    2dd6:	88 23       	and	r24, r24
    2dd8:	39 f0       	breq	.+14     	; 0x2de8 <get_next_patt_idx+0x64>
    2dda:	81 50       	subi	r24, 0x01	; 1
    2ddc:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <countdown>
	  loop_countdown = FALSE;
	  if (loop) return loop_start-1;
	  else return loop_end;
	}
  }
  return curr_pattern_index+1;
    2de0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <curr_pattern_index>
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
}
    2de6:	08 95       	ret
	  loop_countdown = FALSE;
    2de8:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <loop_countdown>
	  if (loop) return loop_start-1;
    2dec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <loop_start>
    2df0:	91 11       	cpse	r25, r1
    2df2:	e0 cf       	rjmp	.-64     	; 0x2db4 <get_next_patt_idx+0x30>
	  else return loop_end;
    2df4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <loop_end>
    2df8:	08 95       	ret

00002dfa <do_patterntrack_play>:
void do_patterntrack_play(void) {
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	a0 e0       	ldi	r26, 0x00	; 0
    2dfe:	e2 e0       	ldi	r30, 0x02	; 2
    2e00:	f7 e1       	ldi	r31, 0x17	; 23
    2e02:	ff c4       	rjmp	.+2558   	; 0x3802 <__prologue_saves__+0x8>
  curr_function = function;
    2e04:	70 90 c6 01 	lds	r7, 0x01C6	; 0x8001c6 <function>
  if (sync == INTERNAL_SYNC) {
    2e08:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	8c c0       	rjmp	.+280    	; 0x2f28 <do_patterntrack_play+0x12e>
    turn_on_tempo();
    2e10:	0e 94 a6 00 	call	0x14c	; 0x14c <turn_on_tempo>
  if (sync == DIN_SYNC) {
    2e14:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <do_patterntrack_play+0x24>
    2e1c:	88 c0       	rjmp	.+272    	; 0x2f2e <do_patterntrack_play+0x134>
    dinsync_set_in();
    2e1e:	0e 94 90 07 	call	0xf20	; 0xf20 <dinsync_set_in>
  clear_all_leds();
    2e22:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
  clear_blinking_leds();
    2e26:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
  next_chain[0] = curr_chain[0] = 0;
    2e2a:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <curr_chain>
    2e2e:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <next_chain>
  next_chain[1] = curr_chain[1] = 0xFF;
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <curr_chain+0x1>
    2e38:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <next_chain+0x1>
  set_numkey_led(1);
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
  playing = FALSE;
    2e42:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <playing>
  curr_track_index = 0;
    2e46:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
  curr_pattern_index = 0;
    2e4a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
  curr_patt = 0;
    2e4e:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <curr_patt+0x1>
    2e52:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <curr_patt>
  curr_chain_index = 0;
    2e56:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <curr_chain_index>
  curr_pitch_shift = next_pitch_shift = 0;
    2e5a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <next_pitch_shift>
    2e5e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <curr_pitch_shift>
  swing_time = 0;
    2e62:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <swing_time>
  live_edit = FALSE;
    2e66:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <live_edit>
  loop = FALSE;
    2e6a:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <loop>
  loop_countdown = FALSE;
    2e6e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <loop_countdown>
  loop_start = 1;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <loop_start>
  loop_end = PATT_LENGTH;
    2e78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    2e7c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <loop_end>
  countdown = 0;
    2e80:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <countdown>
  clear_bank_leds();
    2e84:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
  if (ANYPATTERNPLAYFUNC)
    2e88:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <function>
    2e8c:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    2e90:	9b 30       	cpi	r25, 0x0B	; 11
    2e92:	21 f0       	breq	.+8      	; 0x2e9c <do_patterntrack_play+0xa2>
    2e94:	97 7f       	andi	r25, 0xF7	; 247
    2e96:	97 30       	cpi	r25, 0x07	; 7
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <do_patterntrack_play+0xa2>
    2e9a:	4c c0       	rjmp	.+152    	; 0x2f34 <do_patterntrack_play+0x13a>
    next_bank = curr_bank = bank % 8;
    2e9c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <curr_bank>
    2ea0:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <next_bank>
  set_bank_led(bank);
    2ea4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    2ea8:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
  uint8_t studge = FALSE;//stutter or nudge
    2eac:	c0 e0       	ldi	r28, 0x00	; 0
  uint8_t no_loop = FALSE;
    2eae:	91 2c       	mov	r9, r1
  uint8_t end_point = 0;
    2eb0:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t start_point = 0;
    2eb2:	10 e0       	ldi	r17, 0x00	; 0
	  live_edit = TRUE;
    2eb4:	01 e0       	ldi	r16, 0x01	; 1
	  if (++new_swing_time > 5) new_swing_time = 5;
    2eb6:	85 e0       	ldi	r24, 0x05	; 5
    2eb8:	68 2e       	mov	r6, r24
		next_chain[1] = 0xFF;
    2eba:	88 24       	eor	r8, r8
    2ebc:	8a 94       	dec	r8
	  tap_tempo_timer = 60000UL/tap_tempo_timer; // convert to BPM
    2ebe:	90 e6       	ldi	r25, 0x60	; 96
    2ec0:	e9 2e       	mov	r14, r25
    2ec2:	9a ee       	ldi	r25, 0xEA	; 234
    2ec4:	f9 2e       	mov	r15, r25
    read_switches();
    2ec6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <read_switches>
    if (function_changed && function == EDIT_PATTERN_FUNC) {
    2eca:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    2ece:	87 15       	cp	r24, r7
    2ed0:	39 f0       	breq	.+14     	; 0x2ee0 <do_patterntrack_play+0xe6>
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	29 f4       	brne	.+10     	; 0x2ee0 <do_patterntrack_play+0xe6>
	  live_edit = TRUE;
    2ed6:	00 93 8c 01 	sts	0x018C, r16	; 0x80018c <live_edit>
	  set_led_blink(LED_RS);
    2eda:	81 e2       	ldi	r24, 0x21	; 33
    2edc:	0e 94 2c 09 	call	0x1258	; 0x1258 <set_led_blink>
    if (function_changed && !playing) {
    2ee0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    2ee4:	87 15       	cp	r24, r7
    2ee6:	51 f1       	breq	.+84     	; 0x2f3c <do_patterntrack_play+0x142>
    2ee8:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <playing>
    2eec:	91 11       	cpse	r25, r1
    2eee:	26 c0       	rjmp	.+76     	; 0x2f3c <do_patterntrack_play+0x142>
	  live_edit = FALSE;
    2ef0:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <live_edit>
      dinsync_stop();
    2ef4:	0e 94 5f 07 	call	0xebe	; 0xebe <dinsync_stop>
      midi_stop();
    2ef8:	0e 94 39 07 	call	0xe72	; 0xe72 <midi_stop>
      curr_pitch_shift = next_pitch_shift = 0;
    2efc:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <next_pitch_shift>
    2f00:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <curr_pitch_shift>
      all_accent = all_rest = all_slide = swing_it = 0;
    2f04:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <swing_it>
    2f08:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <all_slide>
    2f0c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <all_rest>
    2f10:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <all_accent>
      clear_all_leds();
    2f14:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
      clear_blinking_leds();
    2f18:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
      clock_leds();
    2f1c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <clock_leds>
}
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	ee e0       	ldi	r30, 0x0E	; 14
    2f26:	89 c4       	rjmp	.+2322   	; 0x383a <__epilogue_restores__+0x8>
    turn_off_tempo();
    2f28:	0e 94 ac 00 	call	0x158	; 0x158 <turn_off_tempo>
    2f2c:	73 cf       	rjmp	.-282    	; 0x2e14 <do_patterntrack_play+0x1a>
    dinsync_set_out();
    2f2e:	0e 94 89 07 	call	0xf12	; 0xf12 <dinsync_set_out>
    2f32:	77 cf       	rjmp	.-274    	; 0x2e22 <do_patterntrack_play+0x28>
    next_bank = curr_bank = bank % 8;
    2f34:	87 70       	andi	r24, 0x07	; 7
    2f36:	b2 cf       	rjmp	.-156    	; 0x2e9c <do_patterntrack_play+0xa2>
	  } else no_loop = FALSE;
    2f38:	91 2c       	mov	r9, r1
    2f3a:	c5 cf       	rjmp	.-118    	; 0x2ec6 <do_patterntrack_play+0xcc>
	if (live_edit && function == EDIT_PATTERN_FUNC) {
    2f3c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <live_edit>
    2f40:	99 23       	and	r25, r25
    2f42:	69 f0       	breq	.+26     	; 0x2f5e <do_patterntrack_play+0x164>
    2f44:	83 30       	cpi	r24, 0x03	; 3
    2f46:	59 f4       	brne	.+22     	; 0x2f5e <do_patterntrack_play+0x164>
	  patt_location = buff_chain[curr_patt];
    2f48:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <curr_patt>
    2f4c:	f0 91 74 02 	lds	r31, 0x0274	; 0x800274 <curr_patt+0x1>
    2f50:	ee 52       	subi	r30, 0x2E	; 46
    2f52:	fd 4f       	sbci	r31, 0xFD	; 253
    2f54:	80 81       	ld	r24, Z
    2f56:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <patt_location>
	  edit_live();
    2f5a:	7d de       	rcall	.-774    	; 0x2c56 <edit_live>
    2f5c:	b4 cf       	rjmp	.-152    	; 0x2ec6 <do_patterntrack_play+0xcc>
    if (just_pressed(KEY_TEMPO) && !is_pressed(KEY_DONE)) {
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2f64:	88 23       	and	r24, r24
    2f66:	39 f1       	breq	.+78     	; 0x2fb6 <do_patterntrack_play+0x1bc>
    2f68:	87 e1       	ldi	r24, 0x17	; 23
    2f6a:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    2f6e:	81 11       	cpse	r24, r1
    2f70:	22 c0       	rjmp	.+68     	; 0x2fb6 <do_patterntrack_play+0x1bc>
      if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
    2f72:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tap_tempo_timer>
    2f76:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tap_tempo_timer+0x1>
    2f7a:	86 30       	cpi	r24, 0x06	; 6
    2f7c:	9d 40       	sbci	r25, 0x0D	; 13
    2f7e:	b8 f4       	brcc	.+46     	; 0x2fae <do_patterntrack_play+0x1b4>
	  && (tap_tempo_timer > 333)) // less than .3ms between taps = 200BPM
    2f80:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tap_tempo_timer>
    2f84:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tap_tempo_timer+0x1>
    2f88:	8e 34       	cpi	r24, 0x4E	; 78
    2f8a:	91 40       	sbci	r25, 0x01	; 1
    2f8c:	80 f0       	brcs	.+32     	; 0x2fae <do_patterntrack_play+0x1b4>
	  tap_tempo_timer = 60000UL/tap_tempo_timer; // convert to BPM
    2f8e:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <tap_tempo_timer>
    2f92:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <tap_tempo_timer+0x1>
    2f96:	c7 01       	movw	r24, r14
    2f98:	e1 d3       	rcall	.+1986   	; 0x375c <__udivmodhi4>
    2f9a:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <tap_tempo_timer+0x1>
    2f9e:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <tap_tempo_timer>
	  change_tempo(tap_tempo_timer);
    2fa2:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <tap_tempo_timer>
    2fa6:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <tap_tempo_timer+0x1>
    2faa:	0e 94 00 05 	call	0xa00	; 0xa00 <change_tempo>
      tap_tempo_timer = 0;
    2fae:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <tap_tempo_timer+0x1>
    2fb2:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <tap_tempo_timer>
    if (just_pressed(KEY_CHAIN)) {
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    2fbc:	88 23       	and	r24, r24
    2fbe:	49 f0       	breq	.+18     	; 0x2fd2 <do_patterntrack_play+0x1d8>
      clear_notekey_leds();
    2fc0:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <clear_notekey_leds>
      clear_blinking_leds();
    2fc4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
      set_led(LED_CHAIN);
    2fc8:	82 e2       	ldi	r24, 0x22	; 34
    2fca:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
      buff_chain_len = 0;  // 'start' to write a new chain
    2fce:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <buff_chain_len>
    if (just_released(KEY_CHAIN)) {
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    2fd8:	88 23       	and	r24, r24
    2fda:	61 f1       	breq	.+88     	; 0x3034 <do_patterntrack_play+0x23a>
    2fdc:	e2 ed       	ldi	r30, 0xD2	; 210
    2fde:	f2 e0       	ldi	r31, 0x02	; 2
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
	next_chain[i] = buff_chain[i];
    2fe4:	21 91       	ld	r18, Z+
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	a1 57       	subi	r26, 0x71	; 113
    2fea:	bd 4f       	sbci	r27, 0xFD	; 253
    2fec:	2c 93       	st	X, r18
    2fee:	01 96       	adiw	r24, 0x01	; 1
      for (i=0; i<MAX_CHAIN; i++) {
    2ff0:	80 32       	cpi	r24, 0x20	; 32
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	b9 f7       	brne	.-18     	; 0x2fe4 <do_patterntrack_play+0x1ea>
      if (!playing) {
    2ff6:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    2ffa:	81 11       	cpse	r24, r1
    2ffc:	18 c0       	rjmp	.+48     	; 0x302e <do_patterntrack_play+0x234>
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	80 e0       	ldi	r24, 0x00	; 0
	  curr_chain[i] = next_chain[i];
    3002:	fc 01       	movw	r30, r24
    3004:	e1 57       	subi	r30, 0x71	; 113
    3006:	fd 4f       	sbci	r31, 0xFD	; 253
    3008:	20 81       	ld	r18, Z
    300a:	fc 01       	movw	r30, r24
    300c:	e1 55       	subi	r30, 0x51	; 81
    300e:	fd 4f       	sbci	r31, 0xFD	; 253
    3010:	20 83       	st	Z, r18
    3012:	01 96       	adiw	r24, 0x01	; 1
	for (i=0; i<MAX_CHAIN; i++)
    3014:	80 32       	cpi	r24, 0x20	; 32
    3016:	91 05       	cpc	r25, r1
    3018:	a1 f7       	brne	.-24     	; 0x3002 <do_patterntrack_play+0x208>
	curr_pitch_shift = next_pitch_shift;
    301a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
    301e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
	clear_led(LED_UP);
    3022:	83 e0       	ldi	r24, 0x03	; 3
    3024:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	clear_led(LED_DOWN);
    3028:	84 e0       	ldi	r24, 0x04	; 4
    302a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
      clear_led(LED_CHAIN);
    302e:	82 e2       	ldi	r24, 0x22	; 34
    3030:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
    if (is_pressed(KEY_CHAIN)) {
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    303a:	81 11       	cpse	r24, r1
    303c:	ca c0       	rjmp	.+404    	; 0x31d2 <do_patterntrack_play+0x3d8>
    else if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    303e:	8f e0       	ldi	r24, 0x0F	; 15
    3040:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    3044:	88 23       	and	r24, r24
    3046:	09 f4       	brne	.+2      	; 0x304a <do_patterntrack_play+0x250>
    3048:	c6 c0       	rjmp	.+396    	; 0x31d6 <do_patterntrack_play+0x3dc>
      int8_t notekey = get_lowest_notekey_pressed();
    304a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <get_lowest_notekey_pressed>
    304e:	d8 2e       	mov	r13, r24
      if (just_pressed(KEY_UP) || just_pressed(KEY_DOWN)) {
    3050:	8f e0       	ldi	r24, 0x0F	; 15
    3052:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    3056:	81 11       	cpse	r24, r1
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <do_patterntrack_play+0x26a>
    305a:	8e e0       	ldi	r24, 0x0E	; 14
    305c:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    3060:	88 23       	and	r24, r24
    3062:	39 f0       	breq	.+14     	; 0x3072 <do_patterntrack_play+0x278>
	clear_notekey_leds();
    3064:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <clear_notekey_leds>
	clear_blinking_leds();
    3068:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
	clear_led(LED_CHAIN);
    306c:	82 e2       	ldi	r24, 0x22	; 34
    306e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
      if (is_pressed(KEY_UP)) {
    3072:	8f e0       	ldi	r24, 0x0F	; 15
    3074:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    3078:	88 23       	and	r24, r24
    307a:	09 f4       	brne	.+2      	; 0x307e <do_patterntrack_play+0x284>
    307c:	18 c1       	rjmp	.+560    	; 0x32ae <do_patterntrack_play+0x4b4>
	clear_led(LED_DOWN);
    307e:	84 e0       	ldi	r24, 0x04	; 4
    3080:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	set_led(LED_UP);
    3084:	83 e0       	ldi	r24, 0x03	; 3
    3086:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	if (notekey != -1) 
    308a:	ff ef       	ldi	r31, 0xFF	; 255
    308c:	df 12       	cpse	r13, r31
	  next_pitch_shift = notekey; 
    308e:	d0 92 82 01 	sts	0x0182, r13	; 0x800182 <next_pitch_shift>
	if (curr_pitch_shift >= 0) {
    3092:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
    3096:	87 fd       	sbrc	r24, 7
    3098:	0a c0       	rjmp	.+20     	; 0x30ae <do_patterntrack_play+0x2b4>
	  if (! is_notekey_led_blink(curr_pitch_shift)) {
    309a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <is_notekey_led_blink>
    309e:	81 11       	cpse	r24, r1
    30a0:	06 c0       	rjmp	.+12     	; 0x30ae <do_patterntrack_play+0x2b4>
	    clear_blinking_leds();
    30a2:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
	    set_notekey_led_blink(curr_pitch_shift);
    30a6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
    30aa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <set_notekey_led_blink>
	if (next_pitch_shift != curr_pitch_shift)
    30ae:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
    30b2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <curr_pitch_shift>
    30b6:	89 13       	cpse	r24, r25
	  set_notekey_led(OCTAVE + next_pitch_shift);
    30b8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <set_notekey_led>
      if (!playing)
    30bc:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    30c0:	81 11       	cpse	r24, r1
    30c2:	2a c0       	rjmp	.+84     	; 0x3118 <do_patterntrack_play+0x31e>
	curr_pitch_shift = next_pitch_shift;      
    30c4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
    30c8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
    30cc:	25 c0       	rjmp	.+74     	; 0x3118 <do_patterntrack_play+0x31e>
	if (buff_chain[i] >= 8)
    30ce:	ed 2d       	mov	r30, r13
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	ee 52       	subi	r30, 0x2E	; 46
    30d4:	fd 4f       	sbci	r31, 0xFD	; 253
    30d6:	80 81       	ld	r24, Z
    30d8:	88 30       	cpi	r24, 0x08	; 8
    30da:	40 f4       	brcc	.+16     	; 0x30ec <do_patterntrack_play+0x2f2>
	set_numkey_led(buff_chain[i]+1);
    30dc:	8f 5f       	subi	r24, 0xFF	; 255
    30de:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
      for (i=0; i<buff_chain_len; i++) {
    30e2:	d3 94       	inc	r13
    30e4:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <buff_chain_len>
    30e8:	d8 16       	cp	r13, r24
    30ea:	88 f3       	brcs	.-30     	; 0x30ce <do_patterntrack_play+0x2d4>
      i = get_lowest_numkey_just_pressed();
    30ec:	0e 94 00 09 	call	0x1200	; 0x1200 <get_lowest_numkey_just_pressed>
      if ((i != 0) && (buff_chain_len < MAX_CHAIN)) {
    30f0:	88 23       	and	r24, r24
    30f2:	91 f0       	breq	.+36     	; 0x3118 <do_patterntrack_play+0x31e>
    30f4:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <buff_chain_len>
    30f8:	e0 32       	cpi	r30, 0x20	; 32
    30fa:	70 f4       	brcc	.+28     	; 0x3118 <do_patterntrack_play+0x31e>
	buff_chain[buff_chain_len++] = i - 1;
    30fc:	91 e0       	ldi	r25, 0x01	; 1
    30fe:	9e 0f       	add	r25, r30
    3100:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <buff_chain_len>
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	ee 52       	subi	r30, 0x2E	; 46
    3108:	fd 4f       	sbci	r31, 0xFD	; 253
    310a:	81 50       	subi	r24, 0x01	; 1
    310c:	80 83       	st	Z, r24
	buff_chain[buff_chain_len] = 0xFF;
    310e:	e9 2f       	mov	r30, r25
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	ee 52       	subi	r30, 0x2E	; 46
    3114:	fd 4f       	sbci	r31, 0xFD	; 253
	clock_ticks();
    3116:	80 82       	st	Z, r8
    3118:	60 d9       	rcall	.-3392   	; 0x23da <clock_ticks>
    if ( ((sync == INTERNAL_SYNC) && just_released(KEY_RS) && 
    311a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    311e:	88 23       	and	r24, r24
    3120:	09 f4       	brne	.+2      	; 0x3124 <do_patterntrack_play+0x32a>
    3122:	5d c1       	rjmp	.+698    	; 0x33de <do_patterntrack_play+0x5e4>
	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    3124:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
	       playing) ||
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	09 f4       	brne	.+2      	; 0x312e <do_patterntrack_play+0x334>
    312c:	a3 c1       	rjmp	.+838    	; 0x3474 <do_patterntrack_play+0x67a>
	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    312e:	81 30       	cpi	r24, 0x01	; 1
    3130:	21 f4       	brne	.+8      	; 0x313a <do_patterntrack_play+0x340>
	 ((sync == DIN_SYNC) && dinsync_stopped()) ) 
    3132:	0e 94 77 07 	call	0xeee	; 0xeee <dinsync_stopped>
    3136:	81 11       	cpse	r24, r1
    3138:	5d c1       	rjmp	.+698    	; 0x33f4 <do_patterntrack_play+0x5fa>
    else if ( ((sync == INTERNAL_SYNC) && just_released(KEY_RS) && !playing) ||
    313a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    313e:	81 11       	cpse	r24, r1
    3140:	9e c1       	rjmp	.+828    	; 0x347e <do_patterntrack_play+0x684>
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    3148:	88 23       	and	r24, r24
    314a:	09 f4       	brne	.+2      	; 0x314e <do_patterntrack_play+0x354>
    314c:	98 c1       	rjmp	.+816    	; 0x347e <do_patterntrack_play+0x684>
    314e:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    3152:	81 11       	cpse	r24, r1
    3154:	94 c1       	rjmp	.+808    	; 0x347e <do_patterntrack_play+0x684>
	set_led(LED_RS);
    3156:	81 e2       	ldi	r24, 0x21	; 33
    3158:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	if (ANYPATTERNPLAYFUNC) {
    315c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    3160:	8b 30       	cpi	r24, 0x0B	; 11
    3162:	21 f0       	breq	.+8      	; 0x316c <do_patterntrack_play+0x372>
    3164:	87 7f       	andi	r24, 0xF7	; 247
    3166:	87 30       	cpi	r24, 0x07	; 7
    3168:	09 f0       	breq	.+2      	; 0x316c <do_patterntrack_play+0x372>
    316a:	f4 c1       	rjmp	.+1000   	; 0x3554 <do_patterntrack_play+0x75a>
	  if (has_bank_knob_changed()) {
    316c:	0e 94 0f 09 	call	0x121e	; 0x121e <has_bank_knob_changed>
    	  load_pattern(bank, curr_chain[0]);
    3170:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <curr_chain>
	  if (has_bank_knob_changed()) {
    3174:	88 23       	and	r24, r24
    3176:	09 f4       	brne	.+2      	; 0x317a <do_patterntrack_play+0x380>
    	  load_pattern(bank, curr_chain[0]);
    3178:	ea c1       	rjmp	.+980    	; 0x354e <do_patterntrack_play+0x754>
    317a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
	      load_pattern(curr_bank, curr_chain[0]);
    317e:	f7 d8       	rcall	.-3602   	; 0x236e <load_pattern>
	curr_note = REST;
    3180:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <curr_note>
	if (! ((sync == MIDI_SYNC) && (midi_cmd == MIDI_CONTINUE))) {
    3184:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    3188:	82 30       	cpi	r24, 0x02	; 2
    318a:	21 f4       	brne	.+8      	; 0x3194 <do_patterntrack_play+0x39a>
    318c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    3190:	8b 3f       	cpi	r24, 0xFB	; 251
    3192:	31 f0       	breq	.+12     	; 0x31a0 <do_patterntrack_play+0x3a6>
	  curr_chain_index = 0;  // index into current chain
    3194:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <curr_chain_index>
	  curr_pattern_index = 0;        // index into current pattern in chain
    3198:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <curr_pattern_index>
	  curr_track_index = 0;        // index into current pattern in chain
    319c:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <curr_track_index>
	note_counter = 0;
    31a0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <note_counter>
	dinsync_counter = 0;
    31a4:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <dinsync_counter>
	dinsync_clocked = 0;
    31a8:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <dinsync_clocked+0x1>
    31ac:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <dinsync_clocked>
	swing_it = 0;
    31b0:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <swing_it>
	playing = TRUE;
    31b4:	00 93 d0 02 	sts	0x02D0, r16	; 0x8002d0 <playing>
	play_loaded_pattern = TRUE;
    31b8:	00 93 7d 02 	sts	0x027D, r16	; 0x80027d <play_loaded_pattern>
	midi_putchar(MIDI_START);
    31bc:	8a ef       	ldi	r24, 0xFA	; 250
    31be:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <midi_putchar>
	if (sync != DIN_SYNC)
    31c2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    31c6:	81 30       	cpi	r24, 0x01	; 1
    31c8:	09 f4       	brne	.+2      	; 0x31cc <do_patterntrack_play+0x3d2>
    31ca:	75 c1       	rjmp	.+746    	; 0x34b6 <do_patterntrack_play+0x6bc>
	  dinsync_start();
    31cc:	0e 94 41 07 	call	0xe82	; 0xe82 <dinsync_start>
    31d0:	72 c1       	rjmp	.+740    	; 0x34b6 <do_patterntrack_play+0x6bc>
      for (i=0; i<buff_chain_len; i++) {
    31d2:	d1 2c       	mov	r13, r1
    31d4:	87 cf       	rjmp	.-242    	; 0x30e4 <do_patterntrack_play+0x2ea>
    else if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    31d6:	8e e0       	ldi	r24, 0x0E	; 14
    31d8:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    31dc:	81 11       	cpse	r24, r1
    31de:	35 cf       	rjmp	.-406    	; 0x304a <do_patterntrack_play+0x250>
      if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    31e0:	8f e0       	ldi	r24, 0x0F	; 15
    31e2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    31e6:	88 23       	and	r24, r24
    31e8:	09 f4       	brne	.+2      	; 0x31ec <do_patterntrack_play+0x3f2>
    31ea:	8d c0       	rjmp	.+282    	; 0x3306 <do_patterntrack_play+0x50c>
	clear_notekey_leds();
    31ec:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <clear_notekey_leds>
	clear_blinking_leds();
    31f0:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
      i = get_lowest_numkey_pressed();
    31f4:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <get_lowest_numkey_pressed>
    31f8:	d8 2e       	mov	r13, r24
      if (!is_pressed(KEY_DONE) && ((i != 0) || has_bank_knob_changed())) {
    31fa:	87 e1       	ldi	r24, 0x17	; 23
    31fc:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    3200:	81 11       	cpse	r24, r1
    3202:	06 c0       	rjmp	.+12     	; 0x3210 <do_patterntrack_play+0x416>
    3204:	d1 10       	cpse	r13, r1
    3206:	6d c2       	rjmp	.+1242   	; 0x36e2 <do_patterntrack_play+0x8e8>
    3208:	0e 94 0f 09 	call	0x121e	; 0x121e <has_bank_knob_changed>
    320c:	81 11       	cpse	r24, r1
    320e:	91 c2       	rjmp	.+1314   	; 0x3732 <do_patterntrack_play+0x938>
	if (sync != MIDI_SYNC) 	midi_cmd = midi_recv_cmd();
    3210:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    3214:	82 30       	cpi	r24, 0x02	; 2
    3216:	21 f0       	breq	.+8      	; 0x3220 <do_patterntrack_play+0x426>
    3218:	0e 94 bc 06 	call	0xd78	; 0xd78 <midi_recv_cmd>
    321c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <midi_cmd>
	if (midi_cmd >> 4 == 0xC) {
    3220:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    3224:	82 95       	swap	r24
    3226:	8f 70       	andi	r24, 0x0F	; 15
    3228:	8c 30       	cpi	r24, 0x0C	; 12
    322a:	09 f0       	breq	.+2      	; 0x322e <do_patterntrack_play+0x434>
    322c:	74 c0       	rjmp	.+232    	; 0x3316 <do_patterntrack_play+0x51c>
	  midi_data = midi_getchar();
    322e:	0e 94 a3 06 	call	0xd46	; 0xd46 <midi_getchar>
      if (!(midi_data & 0x80)) {
    3232:	87 fd       	sbrc	r24, 7
    3234:	1c c0       	rjmp	.+56     	; 0x326e <do_patterntrack_play+0x474>
	    next_bank = midi_data/8;
    3236:	98 2f       	mov	r25, r24
    3238:	96 95       	lsr	r25
    323a:	96 95       	lsr	r25
    323c:	96 95       	lsr	r25
    323e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <next_bank>
		next_chain[0] = midi_data%8;
    3242:	87 70       	andi	r24, 0x07	; 7
    3244:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <next_chain>
		next_chain[1] = 0xFF;
    3248:	80 92 90 02 	sts	0x0290, r8	; 0x800290 <next_chain+0x1>
		if (!playing) {
    324c:	20 91 d0 02 	lds	r18, 0x02D0	; 0x8002d0 <playing>
    3250:	21 11       	cpse	r18, r1
    3252:	06 c0       	rjmp	.+12     	; 0x3260 <do_patterntrack_play+0x466>
		  curr_bank=next_bank;
    3254:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <curr_bank>
		  curr_chain[0]=midi_data%8;
    3258:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <curr_chain>
		  curr_chain[1]=0xFF;
    325c:	80 92 b0 02 	sts	0x02B0, r8	; 0x8002b0 <curr_chain+0x1>
		clear_numkey_leds();
    3260:	0e 94 44 0a 	call	0x1488	; 0x1488 <clear_numkey_leds>
		set_numkey_led(next_chain[0]+1);
    3264:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <next_chain>
    3268:	8f 5f       	subi	r24, 0xFF	; 255
    326a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
      if (!chains_equiv(next_chain, curr_chain)) {
    326e:	6f ea       	ldi	r22, 0xAF	; 175
    3270:	72 e0       	ldi	r23, 0x02	; 2
    3272:	8f e8       	ldi	r24, 0x8F	; 143
    3274:	92 e0       	ldi	r25, 0x02	; 2
    3276:	6d dd       	rcall	.-1318   	; 0x2d52 <chains_equiv>
    3278:	81 11       	cpse	r24, r1
    327a:	73 c0       	rjmp	.+230    	; 0x3362 <do_patterntrack_play+0x568>
	if (next_chain[1] == END_OF_CHAIN && curr_chain[1] == END_OF_CHAIN) {
    327c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <next_chain+0x1>
    3280:	8f 3f       	cpi	r24, 0xFF	; 255
    3282:	49 f4       	brne	.+18     	; 0x3296 <do_patterntrack_play+0x49c>
    3284:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <curr_chain+0x1>
    3288:	8f 3f       	cpi	r24, 0xFF	; 255
    328a:	29 f4       	brne	.+10     	; 0x3296 <do_patterntrack_play+0x49c>
	  set_numkey_led_blink(curr_chain[0]+1);
    328c:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <curr_chain>
    3290:	8f 5f       	subi	r24, 0xFF	; 255
    3292:	0e 94 1f 0a 	call	0x143e	; 0x143e <set_numkey_led_blink>
    3296:	d1 2c       	mov	r13, r1
    3298:	c1 2c       	mov	r12, r1
	  if (next_chain[i] > 8)
    329a:	f6 01       	movw	r30, r12
    329c:	e1 57       	subi	r30, 0x71	; 113
    329e:	fd 4f       	sbci	r31, 0xFD	; 253
    32a0:	80 81       	ld	r24, Z
    32a2:	89 30       	cpi	r24, 0x09	; 9
    32a4:	08 f4       	brcc	.+2      	; 0x32a8 <do_patterntrack_play+0x4ae>
    32a6:	50 c0       	rjmp	.+160    	; 0x3348 <do_patterntrack_play+0x54e>
      display_curr_pitch_shift_ud();
    32a8:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <display_curr_pitch_shift_ud>
    32ac:	35 cf       	rjmp	.-406    	; 0x3118 <do_patterntrack_play+0x31e>
      } else if (is_pressed(KEY_DOWN)) {
    32ae:	8e e0       	ldi	r24, 0x0E	; 14
    32b0:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    32b4:	88 23       	and	r24, r24
    32b6:	09 f4       	brne	.+2      	; 0x32ba <do_patterntrack_play+0x4c0>
    32b8:	01 cf       	rjmp	.-510    	; 0x30bc <do_patterntrack_play+0x2c2>
	clear_led(LED_UP);
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	set_led(LED_DOWN);
    32c0:	84 e0       	ldi	r24, 0x04	; 4
    32c2:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	if (notekey != -1)
    32c6:	2f ef       	ldi	r18, 0xFF	; 255
    32c8:	d2 16       	cp	r13, r18
    32ca:	21 f0       	breq	.+8      	; 0x32d4 <do_patterntrack_play+0x4da>
	  next_pitch_shift = notekey - OCTAVE;  // invert direction 
    32cc:	84 ef       	ldi	r24, 0xF4	; 244
    32ce:	8d 0d       	add	r24, r13
    32d0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <next_pitch_shift>
	if (curr_pitch_shift <= 0) {
    32d4:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
    32d8:	18 16       	cp	r1, r24
    32da:	64 f0       	brlt	.+24     	; 0x32f4 <do_patterntrack_play+0x4fa>
	  if (!is_notekey_led_blink(OCTAVE + curr_pitch_shift)) {
    32dc:	84 5f       	subi	r24, 0xF4	; 244
    32de:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <is_notekey_led_blink>
    32e2:	81 11       	cpse	r24, r1
    32e4:	07 c0       	rjmp	.+14     	; 0x32f4 <do_patterntrack_play+0x4fa>
	    clear_blinking_leds();
    32e6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
	    set_notekey_led_blink(OCTAVE + curr_pitch_shift);
    32ea:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <curr_pitch_shift>
    32ee:	84 5f       	subi	r24, 0xF4	; 244
    32f0:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <set_notekey_led_blink>
	if (next_pitch_shift != curr_pitch_shift)
    32f4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
    32f8:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <curr_pitch_shift>
    32fc:	89 17       	cp	r24, r25
    32fe:	09 f4       	brne	.+2      	; 0x3302 <do_patterntrack_play+0x508>
    3300:	dd ce       	rjmp	.-582    	; 0x30bc <do_patterntrack_play+0x2c2>
	  set_notekey_led(OCTAVE + next_pitch_shift);
    3302:	84 5f       	subi	r24, 0xF4	; 244
    3304:	d9 ce       	rjmp	.-590    	; 0x30b8 <do_patterntrack_play+0x2be>
      if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    3306:	8e e0       	ldi	r24, 0x0E	; 14
    3308:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    330c:	81 11       	cpse	r24, r1
    330e:	6e cf       	rjmp	.-292    	; 0x31ec <do_patterntrack_play+0x3f2>
    3310:	71 cf       	rjmp	.-286    	; 0x31f4 <do_patterntrack_play+0x3fa>
	    next_bank = bank%8;
    3312:	97 70       	andi	r25, 0x07	; 7
    3314:	18 c2       	rjmp	.+1072   	; 0x3746 <do_patterntrack_play+0x94c>
    if ((midi_cmd >> 4 == 0x9) && ((midi_cmd & 0xF) == midi_in_addr)) { //MIDI_NOTE_ON
    3316:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    331a:	82 95       	swap	r24
    331c:	8f 70       	andi	r24, 0x0F	; 15
    331e:	89 30       	cpi	r24, 0x09	; 9
    3320:	09 f0       	breq	.+2      	; 0x3324 <do_patterntrack_play+0x52a>
    3322:	a5 cf       	rjmp	.-182    	; 0x326e <do_patterntrack_play+0x474>
    3324:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    3328:	8f 70       	andi	r24, 0x0F	; 15
    332a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <midi_in_addr>
    332e:	98 13       	cpse	r25, r24
    3330:	9e cf       	rjmp	.-196    	; 0x326e <do_patterntrack_play+0x474>
        int8_t midi_ps = midi_getchar() - 0x3C;
    3332:	0e 94 a3 06 	call	0xd46	; 0xd46 <midi_getchar>
        if (midi_ps < 13 && midi_ps > -13) next_pitch_shift = midi_ps;
    3336:	90 ed       	ldi	r25, 0xD0	; 208
    3338:	98 0f       	add	r25, r24
    333a:	99 31       	cpi	r25, 0x19	; 25
    333c:	08 f0       	brcs	.+2      	; 0x3340 <do_patterntrack_play+0x546>
    333e:	97 cf       	rjmp	.-210    	; 0x326e <do_patterntrack_play+0x474>
        int8_t midi_ps = midi_getchar() - 0x3C;
    3340:	8c 53       	subi	r24, 0x3C	; 60
        if (midi_ps < 13 && midi_ps > -13) next_pitch_shift = midi_ps;
    3342:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <next_pitch_shift>
    3346:	93 cf       	rjmp	.-218    	; 0x326e <do_patterntrack_play+0x474>
	  set_numkey_led(next_chain[i] + 1);
    3348:	80 81       	ld	r24, Z
    334a:	8f 5f       	subi	r24, 0xFF	; 255
    334c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
    3350:	8f ef       	ldi	r24, 0xFF	; 255
    3352:	c8 1a       	sub	r12, r24
    3354:	d8 0a       	sbc	r13, r24
	for (i=0; i<MAX_CHAIN; i++) {
    3356:	90 e2       	ldi	r25, 0x20	; 32
    3358:	c9 16       	cp	r12, r25
    335a:	d1 04       	cpc	r13, r1
    335c:	09 f0       	breq	.+2      	; 0x3360 <do_patterntrack_play+0x566>
    335e:	9d cf       	rjmp	.-198    	; 0x329a <do_patterntrack_play+0x4a0>
    3360:	a3 cf       	rjmp	.-186    	; 0x32a8 <do_patterntrack_play+0x4ae>
    3362:	b1 2c       	mov	r11, r1
    3364:	a1 2c       	mov	r10, r1
	  if (curr_chain[i] > 8)
    3366:	f5 01       	movw	r30, r10
    3368:	e1 55       	subi	r30, 0x51	; 81
    336a:	fd 4f       	sbci	r31, 0xFD	; 253
    336c:	6f 01       	movw	r12, r30
    336e:	80 81       	ld	r24, Z
    3370:	89 30       	cpi	r24, 0x09	; 9
    3372:	08 f0       	brcs	.+2      	; 0x3376 <do_patterntrack_play+0x57c>
    3374:	99 cf       	rjmp	.-206    	; 0x32a8 <do_patterntrack_play+0x4ae>
	  if (playing && (curr_chain[i] == curr_chain[curr_chain_index])) {
    3376:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    337a:	88 23       	and	r24, r24
    337c:	11 f1       	breq	.+68     	; 0x33c2 <do_patterntrack_play+0x5c8>
    337e:	90 81       	ld	r25, Z
    3380:	e0 91 cf 02 	lds	r30, 0x02CF	; 0x8002cf <curr_chain_index>
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	e1 55       	subi	r30, 0x51	; 81
    3388:	fd 4f       	sbci	r31, 0xFD	; 253
    338a:	80 81       	ld	r24, Z
    338c:	98 13       	cpse	r25, r24
    338e:	19 c0       	rjmp	.+50     	; 0x33c2 <do_patterntrack_play+0x5c8>
	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
    3390:	f6 01       	movw	r30, r12
    3392:	80 81       	ld	r24, Z
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	0e 94 2a 0a 	call	0x1454	; 0x1454 <is_numkey_led_blink>
    339a:	81 11       	cpse	r24, r1
    339c:	0a c0       	rjmp	.+20     	; 0x33b2 <do_patterntrack_play+0x5b8>
		clear_numkey_led(curr_chain[i]+1);
    339e:	f6 01       	movw	r30, r12
    33a0:	80 81       	ld	r24, Z
    33a2:	8f 5f       	subi	r24, 0xFF	; 255
    33a4:	0e 94 14 0a 	call	0x1428	; 0x1428 <clear_numkey_led>
		set_numkey_led_blink(curr_chain[i]+1); 
    33a8:	f6 01       	movw	r30, r12
    33aa:	80 81       	ld	r24, Z
    33ac:	8f 5f       	subi	r24, 0xFF	; 255
    33ae:	0e 94 1f 0a 	call	0x143e	; 0x143e <set_numkey_led_blink>
    33b2:	ff ef       	ldi	r31, 0xFF	; 255
    33b4:	af 1a       	sub	r10, r31
    33b6:	bf 0a       	sbc	r11, r31
	for (i=0; i<MAX_CHAIN; i++) {
    33b8:	20 e2       	ldi	r18, 0x20	; 32
    33ba:	a2 16       	cp	r10, r18
    33bc:	b1 04       	cpc	r11, r1
    33be:	99 f6       	brne	.-90     	; 0x3366 <do_patterntrack_play+0x56c>
    33c0:	73 cf       	rjmp	.-282    	; 0x32a8 <do_patterntrack_play+0x4ae>
	    if (is_numkey_led_blink(curr_chain[i]+1))
    33c2:	f6 01       	movw	r30, r12
    33c4:	80 81       	ld	r24, Z
    33c6:	8f 5f       	subi	r24, 0xFF	; 255
    33c8:	0e 94 2a 0a 	call	0x1454	; 0x1454 <is_numkey_led_blink>
    33cc:	81 11       	cpse	r24, r1
	      clear_blinking_leds();
    33ce:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
	    set_numkey_led(curr_chain[i] + 1); 
    33d2:	f6 01       	movw	r30, r12
    33d4:	80 81       	ld	r24, Z
    33d6:	8f 5f       	subi	r24, 0xFF	; 255
    33d8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <set_numkey_led>
    33dc:	ea cf       	rjmp	.-44     	; 0x33b2 <do_patterntrack_play+0x5b8>
    if ( ((sync == INTERNAL_SYNC) && just_released(KEY_RS) && 
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    33e4:	88 23       	and	r24, r24
    33e6:	09 f4       	brne	.+2      	; 0x33ea <do_patterntrack_play+0x5f0>
    33e8:	9d ce       	rjmp	.-710    	; 0x3124 <do_patterntrack_play+0x32a>
    33ea:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    33ee:	88 23       	and	r24, r24
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <do_patterntrack_play+0x5fa>
    33f2:	98 ce       	rjmp	.-720    	; 0x3124 <do_patterntrack_play+0x32a>
	playing = FALSE;
    33f4:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <playing>
	play_loaded_pattern = FALSE;
    33f8:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <play_loaded_pattern>
	loop = FALSE;
    33fc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <loop>
    loop_countdown = FALSE;
    3400:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <loop_countdown>
    loop_start = 1;
    3404:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <loop_start>
    loop_end = PATT_LENGTH;
    3408:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    340c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <loop_end>
    countdown = 0;
    3410:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <countdown>
	note_off(0);
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	0e 94 c9 0c 	call	0x1992	; 0x1992 <note_off>
	midi_stop();
    341a:	0e 94 39 07 	call	0xe72	; 0xe72 <midi_stop>
	if (sync != DIN_SYNC) 
    341e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    3422:	81 30       	cpi	r24, 0x01	; 1
    3424:	b9 f5       	brne	.+110    	; 0x3494 <do_patterntrack_play+0x69a>
	clear_led(LED_RS);
    3426:	81 e2       	ldi	r24, 0x21	; 33
    3428:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <clear_led>
	clear_blinking_leds();
    342c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <clear_blinking_leds>
	clear_bank_leds();
    3430:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
	if (ANYPATTERNPLAYFUNC)	
    3434:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    3438:	8b 30       	cpi	r24, 0x0B	; 11
    343a:	19 f0       	breq	.+6      	; 0x3442 <do_patterntrack_play+0x648>
    343c:	87 7f       	andi	r24, 0xF7	; 247
    343e:	87 30       	cpi	r24, 0x07	; 7
    3440:	61 f5       	brne	.+88     	; 0x349a <do_patterntrack_play+0x6a0>
	  set_bank_led(bank);
    3442:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
	  set_bank_led(bank % 8);
    3446:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
	if (function_changed) {
    344a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    344e:	87 15       	cp	r24, r7
    3450:	91 f1       	breq	.+100    	; 0x34b6 <do_patterntrack_play+0x6bc>
	  live_edit = FALSE;
    3452:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <live_edit>
      curr_pitch_shift = next_pitch_shift = 0;
    3456:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <next_pitch_shift>
    345a:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <curr_pitch_shift>
      all_accent = all_rest = all_slide = swing_it = 0;
    345e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <swing_it>
    3462:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <all_slide>
    3466:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <all_rest>
    346a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <all_accent>
      clear_all_leds();
    346e:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
    3472:	54 cd       	rjmp	.-1368   	; 0x2f1c <do_patterntrack_play+0x122>
	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    3474:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    3478:	8c 3f       	cpi	r24, 0xFC	; 252
    347a:	09 f4       	brne	.+2      	; 0x347e <do_patterntrack_play+0x684>
    347c:	bb cf       	rjmp	.-138    	; 0x33f4 <do_patterntrack_play+0x5fa>
	      ((sync == MIDI_SYNC) && 
    347e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sync>
    else if ( ((sync == INTERNAL_SYNC) && just_released(KEY_RS) && !playing) ||
    3482:	82 30       	cpi	r24, 0x02	; 2
    3484:	71 f0       	breq	.+28     	; 0x34a2 <do_patterntrack_play+0x6a8>
	       ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
    3486:	81 30       	cpi	r24, 0x01	; 1
    3488:	b1 f4       	brne	.+44     	; 0x34b6 <do_patterntrack_play+0x6bc>
	      ((sync == DIN_SYNC) && dinsync_started()) )
    348a:	0e 94 65 07 	call	0xeca	; 0xeca <dinsync_started>
    348e:	81 11       	cpse	r24, r1
    3490:	62 ce       	rjmp	.-828    	; 0x3156 <do_patterntrack_play+0x35c>
    3492:	11 c0       	rjmp	.+34     	; 0x34b6 <do_patterntrack_play+0x6bc>
	  dinsync_stop();
    3494:	0e 94 5f 07 	call	0xebe	; 0xebe <dinsync_stop>
    3498:	c6 cf       	rjmp	.-116    	; 0x3426 <do_patterntrack_play+0x62c>
	  set_bank_led(bank % 8);
    349a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    349e:	87 70       	andi	r24, 0x07	; 7
    34a0:	d2 cf       	rjmp	.-92     	; 0x3446 <do_patterntrack_play+0x64c>
	       ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
    34a2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
	      ((sync == MIDI_SYNC) && 
    34a6:	8a 3f       	cpi	r24, 0xFA	; 250
    34a8:	09 f4       	brne	.+2      	; 0x34ac <do_patterntrack_play+0x6b2>
    34aa:	55 ce       	rjmp	.-854    	; 0x3156 <do_patterntrack_play+0x35c>
	       ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
    34ac:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <midi_cmd>
    34b0:	8b 3f       	cpi	r24, 0xFB	; 251
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <do_patterntrack_play+0x6bc>
    34b4:	50 ce       	rjmp	.-864    	; 0x3156 <do_patterntrack_play+0x35c>
	if (live_edit && 
    34b6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <live_edit>
    34ba:	88 23       	and	r24, r24
    34bc:	69 f0       	breq	.+26     	; 0x34d8 <do_patterntrack_play+0x6de>
    34be:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    34c2:	83 30       	cpi	r24, 0x03	; 3
    34c4:	49 f0       	breq	.+18     	; 0x34d8 <do_patterntrack_play+0x6de>
		  live_edit = FALSE;
    34c6:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <live_edit>
		  running_stepwrite = FALSE;
    34ca:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <running_stepwrite>
		  clear_all_leds();
    34ce:	0e 94 85 09 	call	0x130a	; 0x130a <clear_all_leds>
		  set_led(LED_RS);
    34d2:	81 e2       	ldi	r24, 0x21	; 33
    34d4:	0e 94 28 09 	call	0x1250	; 0x1250 <set_led>
	if (is_pressed(KEY_CHAIN)) {
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    34de:	88 23       	and	r24, r24
    34e0:	51 f0       	breq	.+20     	; 0x34f6 <do_patterntrack_play+0x6fc>
	  if (just_pressed(KEY_PREV)) {
    34e2:	83 e0       	ldi	r24, 0x03	; 3
    34e4:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    34e8:	88 23       	and	r24, r24
    34ea:	29 f0       	breq	.+10     	; 0x34f6 <do_patterntrack_play+0x6fc>
		curr_pattern_index = loop_start-1;
    34ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <loop_start>
    34f0:	81 50       	subi	r24, 0x01	; 1
    34f2:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
	if (is_pressed(KEY_DONE)) {
    34f6:	87 e1       	ldi	r24, 0x17	; 23
    34f8:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    34fc:	88 23       	and	r24, r24
    34fe:	e1 f1       	breq	.+120    	; 0x3578 <do_patterntrack_play+0x77e>
	if (just_pressed(KEY_TEMPO)) {
    3500:	82 e0       	ldi	r24, 0x02	; 2
    3502:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    3506:	88 23       	and	r24, r24
    3508:	49 f0       	breq	.+18     	; 0x351c <do_patterntrack_play+0x722>
	  eighths = !eighths;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <eighths>
    3510:	91 11       	cpse	r25, r1
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <eighths>
	  no_loop = TRUE;
    3518:	99 24       	eor	r9, r9
    351a:	93 94       	inc	r9
	  i = get_lowest_loopkey_just_pressed();
    351c:	0e 94 05 09 	call	0x120a	; 0x120a <get_lowest_loopkey_just_pressed>
	  if (start_point == 0) {
    3520:	11 23       	and	r17, r17
    3522:	09 f4       	brne	.+2      	; 0x3526 <do_patterntrack_play+0x72c>
    3524:	60 c0       	rjmp	.+192    	; 0x35e6 <do_patterntrack_play+0x7ec>
	  else if (end_point == 0){
    3526:	d1 11       	cpse	r29, r1
    3528:	01 c0       	rjmp	.+2      	; 0x352c <do_patterntrack_play+0x732>
	    end_point = i;
    352a:	d8 2f       	mov	r29, r24
	if (just_pressed(KEY_NEXT) && is_pressed(KEY_PREV)) {
    352c:	88 e0       	ldi	r24, 0x08	; 8
    352e:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    3532:	88 23       	and	r24, r24
    3534:	09 f4       	brne	.+2      	; 0x3538 <do_patterntrack_play+0x73e>
    3536:	59 c0       	rjmp	.+178    	; 0x35ea <do_patterntrack_play+0x7f0>
    3538:	83 e0       	ldi	r24, 0x03	; 3
    353a:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    353e:	88 23       	and	r24, r24
    3540:	09 f4       	brne	.+2      	; 0x3544 <do_patterntrack_play+0x74a>
	  curr_pattern_index = get_next_patt_idx();
    3542:	53 c0       	rjmp	.+166    	; 0x35ea <do_patterntrack_play+0x7f0>
    3544:	1f dc       	rcall	.-1986   	; 0x2d84 <get_next_patt_idx>
    3546:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
	  studge = TRUE;
    354a:	c1 e0       	ldi	r28, 0x01	; 1
    354c:	73 c0       	rjmp	.+230    	; 0x3634 <do_patterntrack_play+0x83a>
	      load_pattern(curr_bank, curr_chain[0]);
    354e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <curr_bank>
    3552:	15 ce       	rjmp	.-982    	; 0x317e <do_patterntrack_play+0x384>
	  load_track(bank%8, curr_chain[0]);
    3554:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <curr_chain>
    3558:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <bank>
    355c:	87 70       	andi	r24, 0x07	; 7
    355e:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <load_track>
	  curr_patt = track_buff[0];
    3562:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <track_buff>
    3566:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <track_buff+0x1>
    356a:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <curr_patt+0x1>
    356e:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <curr_patt>
	  load_curr_patt(); // ignore pitch shift returned
    3572:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <load_curr_patt>
    3576:	04 ce       	rjmp	.-1016   	; 0x3180 <do_patterntrack_play+0x386>
	  if (just_pressed(KEY_SLIDE) || just_released(KEY_SLIDE)) {
    3578:	86 e1       	ldi	r24, 0x16	; 22
    357a:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    357e:	88 23       	and	r24, r24
    3580:	01 f1       	breq	.+64     	; 0x35c2 <do_patterntrack_play+0x7c8>
	    all_slide = !all_slide;
    3582:	81 e0       	ldi	r24, 0x01	; 1
    3584:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <all_slide>
    3588:	91 11       	cpse	r25, r1
    358a:	80 e0       	ldi	r24, 0x00	; 0
    358c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <all_slide>
	  if (just_pressed(KEY_ACCENT) || just_released(KEY_ACCENT)) {
    3590:	85 e1       	ldi	r24, 0x15	; 21
    3592:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    3596:	88 23       	and	r24, r24
    3598:	d1 f0       	breq	.+52     	; 0x35ce <do_patterntrack_play+0x7d4>
	    all_accent = !all_accent;
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <all_accent>
    35a0:	91 11       	cpse	r25, r1
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <all_accent>
	  if (just_pressed(KEY_REST) || just_released(KEY_REST)) {
    35a8:	84 e1       	ldi	r24, 0x14	; 20
    35aa:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    35ae:	88 23       	and	r24, r24
    35b0:	a1 f0       	breq	.+40     	; 0x35da <do_patterntrack_play+0x7e0>
	    all_rest = !all_rest;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <all_rest>
    35b8:	91 11       	cpse	r25, r1
    35ba:	80 e0       	ldi	r24, 0x00	; 0
    35bc:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <all_rest>
    35c0:	b5 cf       	rjmp	.-150    	; 0x352c <do_patterntrack_play+0x732>
	  if (just_pressed(KEY_SLIDE) || just_released(KEY_SLIDE)) {
    35c2:	86 e1       	ldi	r24, 0x16	; 22
    35c4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    35c8:	81 11       	cpse	r24, r1
    35ca:	db cf       	rjmp	.-74     	; 0x3582 <do_patterntrack_play+0x788>
    35cc:	e1 cf       	rjmp	.-62     	; 0x3590 <do_patterntrack_play+0x796>
	  if (just_pressed(KEY_ACCENT) || just_released(KEY_ACCENT)) {
    35ce:	85 e1       	ldi	r24, 0x15	; 21
    35d0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    35d4:	81 11       	cpse	r24, r1
    35d6:	e1 cf       	rjmp	.-62     	; 0x359a <do_patterntrack_play+0x7a0>
    35d8:	e7 cf       	rjmp	.-50     	; 0x35a8 <do_patterntrack_play+0x7ae>
	  if (just_pressed(KEY_REST) || just_released(KEY_REST)) {
    35da:	84 e1       	ldi	r24, 0x14	; 20
    35dc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    35e0:	81 11       	cpse	r24, r1
    35e2:	e7 cf       	rjmp	.-50     	; 0x35b2 <do_patterntrack_play+0x7b8>
    35e4:	a3 cf       	rjmp	.-186    	; 0x352c <do_patterntrack_play+0x732>
	    start_point = i;
    35e6:	18 2f       	mov	r17, r24
    35e8:	a1 cf       	rjmp	.-190    	; 0x352c <do_patterntrack_play+0x732>
	else if (just_pressed(KEY_PREV) && is_pressed(KEY_NEXT)) {
    35ea:	83 e0       	ldi	r24, 0x03	; 3
    35ec:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    35f0:	88 23       	and	r24, r24
    35f2:	c1 f0       	breq	.+48     	; 0x3624 <do_patterntrack_play+0x82a>
    35f4:	88 e0       	ldi	r24, 0x08	; 8
    35f6:	0e 94 af 08 	call	0x115e	; 0x115e <is_pressed>
    35fa:	88 23       	and	r24, r24
    35fc:	99 f0       	breq	.+38     	; 0x3624 <do_patterntrack_play+0x82a>
      curr_pattern_index = prev_pattern_index;
    35fe:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <prev_pattern_index>
    3602:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <curr_pattern_index>
	  if (loop_countdown) 
    3606:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <loop_countdown>
    360a:	88 23       	and	r24, r24
    360c:	09 f4       	brne	.+2      	; 0x3610 <do_patterntrack_play+0x816>
    360e:	9d cf       	rjmp	.-198    	; 0x354a <do_patterntrack_play+0x750>
	    if (countdown < 0) 
    3610:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <countdown>
    3614:	87 ff       	sbrs	r24, 7
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <do_patterntrack_play+0x826>
		  countdown--;
    3618:	81 50       	subi	r24, 0x01	; 1
		  countdown++;
    361a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <countdown>
    361e:	95 cf       	rjmp	.-214    	; 0x354a <do_patterntrack_play+0x750>
    3620:	8f 5f       	subi	r24, 0xFF	; 255
    3622:	fb cf       	rjmp	.-10     	; 0x361a <do_patterntrack_play+0x820>
	else if (just_pressed(KEY_NEXT)) {
    3624:	88 e0       	ldi	r24, 0x08	; 8
    3626:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    362a:	88 23       	and	r24, r24
    362c:	71 f1       	breq	.+92     	; 0x368a <do_patterntrack_play+0x890>
	  if (studge) studge = FALSE;
    362e:	cc 23       	and	r28, r28
    3630:	09 f1       	breq	.+66     	; 0x3674 <do_patterntrack_play+0x87a>
    3632:	c0 e0       	ldi	r28, 0x00	; 0
	if (just_released(KEY_DONE)) {
    3634:	87 e1       	ldi	r24, 0x17	; 23
    3636:	0e 94 e5 08 	call	0x11ca	; 0x11ca <just_released>
    363a:	88 23       	and	r24, r24
    363c:	09 f4       	brne	.+2      	; 0x3640 <do_patterntrack_play+0x846>
    363e:	43 cc       	rjmp	.-1914   	; 0x2ec6 <do_patterntrack_play+0xcc>
	  if (!no_loop)
    3640:	91 10       	cpse	r9, r1
    3642:	7a cc       	rjmp	.-1804   	; 0x2f38 <do_patterntrack_play+0x13e>
	  loop_countdown = TRUE;
    3644:	00 93 8a 01 	sts	0x018A, r16	; 0x80018a <loop_countdown>
	  countdown = loop_end - curr_pattern_index - 1;
    3648:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <curr_pattern_index>
    364c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <loop_end>
    3650:	81 50       	subi	r24, 0x01	; 1
    3652:	89 1b       	sub	r24, r25
    3654:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <countdown>
	  if (start_point == 0 && end_point == 0) {
    3658:	11 11       	cpse	r17, r1
    365a:	26 c0       	rjmp	.+76     	; 0x36a8 <do_patterntrack_play+0x8ae>
    365c:	d1 11       	cpse	r29, r1
    365e:	26 c0       	rjmp	.+76     	; 0x36ac <do_patterntrack_play+0x8b2>
		loop_start = 1;
    3660:	00 93 05 01 	sts	0x0105, r16	; 0x800105 <loop_start>
		loop_end = PATT_LENGTH;
    3664:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <PATT_LENGTH>
    3668:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <loop_end>
	    loop = FALSE;		
    366c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <loop>
    3670:	9d 2e       	mov	r9, r29
    3672:	35 c0       	rjmp	.+106    	; 0x36de <do_patterntrack_play+0x8e4>
	  if (++new_swing_time > 5) new_swing_time = 5;
    3674:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <new_swing_time>
    3678:	8f 5f       	subi	r24, 0xFF	; 255
    367a:	86 30       	cpi	r24, 0x06	; 6
    367c:	18 f4       	brcc	.+6      	; 0x3684 <do_patterntrack_play+0x88a>
    367e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <new_swing_time>
    3682:	d7 cf       	rjmp	.-82     	; 0x3632 <do_patterntrack_play+0x838>
    3684:	60 92 8d 01 	sts	0x018D, r6	; 0x80018d <new_swing_time>
    3688:	d5 cf       	rjmp	.-86     	; 0x3634 <do_patterntrack_play+0x83a>
	else if (just_pressed(KEY_PREV)) {
    368a:	83 e0       	ldi	r24, 0x03	; 3
    368c:	0e 94 ca 08 	call	0x1194	; 0x1194 <just_pressed>
    3690:	88 23       	and	r24, r24
    3692:	81 f2       	breq	.-96     	; 0x3634 <do_patterntrack_play+0x83a>
	  if (studge) studge = FALSE;
    3694:	c1 11       	cpse	r28, r1
    3696:	cd cf       	rjmp	.-102    	; 0x3632 <do_patterntrack_play+0x838>
	  if (new_swing_time-- == 0) new_swing_time = 0;
    3698:	c0 91 8d 01 	lds	r28, 0x018D	; 0x80018d <new_swing_time>
    369c:	cc 23       	and	r28, r28
    369e:	51 f2       	breq	.-108    	; 0x3634 <do_patterntrack_play+0x83a>
    36a0:	c1 50       	subi	r28, 0x01	; 1
    36a2:	c0 93 8d 01 	sts	0x018D, r28	; 0x80018d <new_swing_time>
    36a6:	c5 cf       	rjmp	.-118    	; 0x3632 <do_patterntrack_play+0x838>
		if (end_point != 0 && pattern_buff[start_point-1] != 0xFF &&
    36a8:	dd 23       	and	r29, r29
    36aa:	11 f3       	breq	.-60     	; 0x3670 <do_patterntrack_play+0x876>
    36ac:	81 2f       	mov	r24, r17
    36ae:	81 50       	subi	r24, 0x01	; 1
    36b0:	99 0b       	sbc	r25, r25
    36b2:	fc 01       	movw	r30, r24
    36b4:	e1 58       	subi	r30, 0x81	; 129
    36b6:	fd 4f       	sbci	r31, 0xFD	; 253
    36b8:	80 81       	ld	r24, Z
    36ba:	8f 3f       	cpi	r24, 0xFF	; 255
    36bc:	79 f0       	breq	.+30     	; 0x36dc <do_patterntrack_play+0x8e2>
		    pattern_buff[end_point-1] != 0xFF) {
    36be:	8d 2f       	mov	r24, r29
    36c0:	81 50       	subi	r24, 0x01	; 1
    36c2:	99 0b       	sbc	r25, r25
    36c4:	fc 01       	movw	r30, r24
    36c6:	e1 58       	subi	r30, 0x81	; 129
    36c8:	fd 4f       	sbci	r31, 0xFD	; 253
    36ca:	80 81       	ld	r24, Z
		if (end_point != 0 && pattern_buff[start_point-1] != 0xFF &&
    36cc:	8f 3f       	cpi	r24, 0xFF	; 255
    36ce:	31 f0       	breq	.+12     	; 0x36dc <do_patterntrack_play+0x8e2>
     	  loop = TRUE;
    36d0:	00 93 8b 01 	sts	0x018B, r16	; 0x80018b <loop>
	      loop_start = start_point;
    36d4:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <loop_start>
	      loop_end = end_point;
    36d8:	d0 93 04 01 	sts	0x0104, r29	; 0x800104 <loop_end>
	    start_point = end_point = 0;
    36dc:	d0 e0       	ldi	r29, 0x00	; 0
    36de:	10 e0       	ldi	r17, 0x00	; 0
    36e0:	f2 cb       	rjmp	.-2076   	; 0x2ec6 <do_patterntrack_play+0xcc>
	  clear_numkey_leds();
    36e2:	0e 94 44 0a 	call	0x1488	; 0x1488 <clear_numkey_leds>
	  buff_chain[0] = next_chain[0] = i - 1;
    36e6:	da 94       	dec	r13
    36e8:	d0 92 8f 02 	sts	0x028F, r13	; 0x80028f <next_chain>
    36ec:	d0 92 d2 02 	sts	0x02D2, r13	; 0x8002d2 <buff_chain>
	  buff_chain[1] = next_chain[1] = 0xFF;
    36f0:	80 92 90 02 	sts	0x0290, r8	; 0x800290 <next_chain+0x1>
    36f4:	80 92 d3 02 	sts	0x02D3, r8	; 0x8002d3 <buff_chain+0x1>
	  if (!playing)
    36f8:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    36fc:	81 11       	cpse	r24, r1
    36fe:	88 cd       	rjmp	.-1264   	; 0x3210 <do_patterntrack_play+0x416>
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	80 e0       	ldi	r24, 0x00	; 0
	      curr_chain[i] = next_chain[i];
    3704:	fc 01       	movw	r30, r24
    3706:	e1 57       	subi	r30, 0x71	; 113
    3708:	fd 4f       	sbci	r31, 0xFD	; 253
    370a:	20 81       	ld	r18, Z
    370c:	fc 01       	movw	r30, r24
    370e:	e1 55       	subi	r30, 0x51	; 81
    3710:	fd 4f       	sbci	r31, 0xFD	; 253
    3712:	20 83       	st	Z, r18
    3714:	01 96       	adiw	r24, 0x01	; 1
	    for (i=0; i<MAX_CHAIN; i++) 
    3716:	80 32       	cpi	r24, 0x20	; 32
    3718:	91 05       	cpc	r25, r1
    371a:	a1 f7       	brne	.-24     	; 0x3704 <do_patterntrack_play+0x90a>
	  clear_bank_leds();
    371c:	0e 94 94 09 	call	0x1328	; 0x1328 <clear_bank_leds>
	  set_bank_led(next_bank);
    3720:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <next_bank>
    3724:	0e 94 a1 09 	call	0x1342	; 0x1342 <set_bank_led>
	  curr_pitch_shift = next_pitch_shift;
    3728:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <next_pitch_shift>
    372c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <curr_pitch_shift>
    3730:	6f cd       	rjmp	.-1314   	; 0x3210 <do_patterntrack_play+0x416>
	  if (ANYPATTERNPLAYFUNC)
    3732:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <function>
    3736:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <bank>
    373a:	8b 30       	cpi	r24, 0x0B	; 11
    373c:	21 f0       	breq	.+8      	; 0x3746 <do_patterntrack_play+0x94c>
    373e:	87 7f       	andi	r24, 0xF7	; 247
    3740:	87 30       	cpi	r24, 0x07	; 7
    3742:	09 f0       	breq	.+2      	; 0x3746 <do_patterntrack_play+0x94c>
    3744:	e6 cd       	rjmp	.-1076   	; 0x3312 <do_patterntrack_play+0x518>
	    next_bank = bank%8;
    3746:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <next_bank>
	  if (!playing)
    374a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <playing>
    374e:	81 11       	cpse	r24, r1
    3750:	5f cd       	rjmp	.-1346   	; 0x3210 <do_patterntrack_play+0x416>
	    curr_bank = next_bank;
    3752:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <next_bank>
    3756:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <curr_bank>
    375a:	e0 cf       	rjmp	.-64     	; 0x371c <do_patterntrack_play+0x922>

0000375c <__udivmodhi4>:
    375c:	aa 1b       	sub	r26, r26
    375e:	bb 1b       	sub	r27, r27
    3760:	51 e1       	ldi	r21, 0x11	; 17
    3762:	07 c0       	rjmp	.+14     	; 0x3772 <__udivmodhi4_ep>

00003764 <__udivmodhi4_loop>:
    3764:	aa 1f       	adc	r26, r26
    3766:	bb 1f       	adc	r27, r27
    3768:	a6 17       	cp	r26, r22
    376a:	b7 07       	cpc	r27, r23
    376c:	10 f0       	brcs	.+4      	; 0x3772 <__udivmodhi4_ep>
    376e:	a6 1b       	sub	r26, r22
    3770:	b7 0b       	sbc	r27, r23

00003772 <__udivmodhi4_ep>:
    3772:	88 1f       	adc	r24, r24
    3774:	99 1f       	adc	r25, r25
    3776:	5a 95       	dec	r21
    3778:	a9 f7       	brne	.-22     	; 0x3764 <__udivmodhi4_loop>
    377a:	80 95       	com	r24
    377c:	90 95       	com	r25
    377e:	bc 01       	movw	r22, r24
    3780:	cd 01       	movw	r24, r26
    3782:	08 95       	ret

00003784 <__divmodhi4>:
    3784:	97 fb       	bst	r25, 7
    3786:	07 2e       	mov	r0, r23
    3788:	16 f4       	brtc	.+4      	; 0x378e <__divmodhi4+0xa>
    378a:	00 94       	com	r0
    378c:	06 d0       	rcall	.+12     	; 0x379a <__divmodhi4_neg1>
    378e:	77 fd       	sbrc	r23, 7
    3790:	08 d0       	rcall	.+16     	; 0x37a2 <__divmodhi4_neg2>
    3792:	e4 df       	rcall	.-56     	; 0x375c <__udivmodhi4>
    3794:	07 fc       	sbrc	r0, 7
    3796:	05 d0       	rcall	.+10     	; 0x37a2 <__divmodhi4_neg2>
    3798:	3e f4       	brtc	.+14     	; 0x37a8 <__divmodhi4_exit>

0000379a <__divmodhi4_neg1>:
    379a:	90 95       	com	r25
    379c:	81 95       	neg	r24
    379e:	9f 4f       	sbci	r25, 0xFF	; 255
    37a0:	08 95       	ret

000037a2 <__divmodhi4_neg2>:
    37a2:	70 95       	com	r23
    37a4:	61 95       	neg	r22
    37a6:	7f 4f       	sbci	r23, 0xFF	; 255

000037a8 <__divmodhi4_exit>:
    37a8:	08 95       	ret

000037aa <__udivmodsi4>:
    37aa:	a1 e2       	ldi	r26, 0x21	; 33
    37ac:	1a 2e       	mov	r1, r26
    37ae:	aa 1b       	sub	r26, r26
    37b0:	bb 1b       	sub	r27, r27
    37b2:	fd 01       	movw	r30, r26
    37b4:	0d c0       	rjmp	.+26     	; 0x37d0 <__udivmodsi4_ep>

000037b6 <__udivmodsi4_loop>:
    37b6:	aa 1f       	adc	r26, r26
    37b8:	bb 1f       	adc	r27, r27
    37ba:	ee 1f       	adc	r30, r30
    37bc:	ff 1f       	adc	r31, r31
    37be:	a2 17       	cp	r26, r18
    37c0:	b3 07       	cpc	r27, r19
    37c2:	e4 07       	cpc	r30, r20
    37c4:	f5 07       	cpc	r31, r21
    37c6:	20 f0       	brcs	.+8      	; 0x37d0 <__udivmodsi4_ep>
    37c8:	a2 1b       	sub	r26, r18
    37ca:	b3 0b       	sbc	r27, r19
    37cc:	e4 0b       	sbc	r30, r20
    37ce:	f5 0b       	sbc	r31, r21

000037d0 <__udivmodsi4_ep>:
    37d0:	66 1f       	adc	r22, r22
    37d2:	77 1f       	adc	r23, r23
    37d4:	88 1f       	adc	r24, r24
    37d6:	99 1f       	adc	r25, r25
    37d8:	1a 94       	dec	r1
    37da:	69 f7       	brne	.-38     	; 0x37b6 <__udivmodsi4_loop>
    37dc:	60 95       	com	r22
    37de:	70 95       	com	r23
    37e0:	80 95       	com	r24
    37e2:	90 95       	com	r25
    37e4:	9b 01       	movw	r18, r22
    37e6:	ac 01       	movw	r20, r24
    37e8:	bd 01       	movw	r22, r26
    37ea:	cf 01       	movw	r24, r30
    37ec:	08 95       	ret

000037ee <__tablejump2__>:
    37ee:	ee 0f       	add	r30, r30
    37f0:	ff 1f       	adc	r31, r31
    37f2:	05 90       	lpm	r0, Z+
    37f4:	f4 91       	lpm	r31, Z
    37f6:	e0 2d       	mov	r30, r0
    37f8:	09 94       	ijmp

000037fa <__prologue_saves__>:
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	ca 1b       	sub	r28, r26
    3824:	db 0b       	sbc	r29, r27
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	09 94       	ijmp

00003832 <__epilogue_restores__>:
    3832:	2a 88       	ldd	r2, Y+18	; 0x12
    3834:	39 88       	ldd	r3, Y+17	; 0x11
    3836:	48 88       	ldd	r4, Y+16	; 0x10
    3838:	5f 84       	ldd	r5, Y+15	; 0x0f
    383a:	6e 84       	ldd	r6, Y+14	; 0x0e
    383c:	7d 84       	ldd	r7, Y+13	; 0x0d
    383e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3840:	9b 84       	ldd	r9, Y+11	; 0x0b
    3842:	aa 84       	ldd	r10, Y+10	; 0x0a
    3844:	b9 84       	ldd	r11, Y+9	; 0x09
    3846:	c8 84       	ldd	r12, Y+8	; 0x08
    3848:	df 80       	ldd	r13, Y+7	; 0x07
    384a:	ee 80       	ldd	r14, Y+6	; 0x06
    384c:	fd 80       	ldd	r15, Y+5	; 0x05
    384e:	0c 81       	ldd	r16, Y+4	; 0x04
    3850:	1b 81       	ldd	r17, Y+3	; 0x03
    3852:	aa 81       	ldd	r26, Y+2	; 0x02
    3854:	b9 81       	ldd	r27, Y+1	; 0x01
    3856:	ce 0f       	add	r28, r30
    3858:	d1 1d       	adc	r29, r1
    385a:	0f b6       	in	r0, 0x3f	; 63
    385c:	f8 94       	cli
    385e:	de bf       	out	0x3e, r29	; 62
    3860:	0f be       	out	0x3f, r0	; 63
    3862:	cd bf       	out	0x3d, r28	; 61
    3864:	ed 01       	movw	r28, r26
    3866:	08 95       	ret

00003868 <_exit>:
    3868:	f8 94       	cli

0000386a <__stop_program>:
    386a:	ff cf       	rjmp	.-2      	; 0x386a <__stop_program>
    386c:	85 02       	muls	r24, r21
    386e:	74 02       	muls	r23, r20
    3870:	e0 02       	muls	r30, r16
    3872:	74 02       	muls	r23, r20
    3874:	75 03       	mulsu	r23, r21
    3876:	74 02       	muls	r23, r20
    3878:	fa 02       	muls	r31, r26
    387a:	6e 02       	muls	r22, r30
    387c:	75 03       	mulsu	r23, r21
    387e:	74 02       	muls	r23, r20
    3880:	fa 02       	muls	r31, r26
    3882:	e0 02       	muls	r30, r16
    3884:	75 03       	mulsu	r23, r21
    3886:	74 02       	muls	r23, r20
    3888:	fa 02       	muls	r31, r26
    388a:	f9 03       	fmulsu	r23, r17
    388c:	74 02       	muls	r23, r20
    388e:	2b 04       	cpc	r2, r11
    3890:	74 02       	muls	r23, r20
    3892:	60 04       	cpc	r6, r0
    3894:	74 02       	muls	r23, r20
    3896:	58 04       	cpc	r5, r8
    3898:	e7 03       	fmuls	r22, r23
    389a:	60 04       	cpc	r6, r0
    389c:	74 02       	muls	r23, r20
    389e:	58 04       	cpc	r5, r8
    38a0:	2b 04       	cpc	r2, r11
    38a2:	60 04       	cpc	r6, r0
    38a4:	74 02       	muls	r23, r20
    38a6:	58 04       	cpc	r5, r8
    38a8:	d1 05       	cpc	r29, r1
    38aa:	cc 05       	cpc	r28, r12
    38ac:	ae 05       	cpc	r26, r14
    38ae:	bc 05       	cpc	r27, r12
    38b0:	d5 05       	cpc	r29, r5
    38b2:	c6 05       	cpc	r28, r6
    38b4:	ae 05       	cpc	r26, r14
    38b6:	c6 05       	cpc	r28, r6
    38b8:	d9 05       	cpc	r29, r9
    38ba:	c9 05       	cpc	r28, r9
    38bc:	ae 05       	cpc	r26, r14
    38be:	c9 05       	cpc	r28, r9
    38c0:	ae 05       	cpc	r26, r14
    38c2:	c1 05       	cpc	r28, r1
    38c4:	b8 05       	cpc	r27, r8
    38c6:	c1 05       	cpc	r28, r1
