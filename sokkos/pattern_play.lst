   1               		.file	"pattern_play.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	chains_equiv
  12               	chains_equiv:
  13               	.LVL0:
  14               	.LFB2:
  15               		.file 1 "pattern_play.c"
   1:pattern_play.c **** /* 
   2:pattern_play.c ****  * The software for the x0xb0x is available for use in accordance with the 
   3:pattern_play.c ****  * following open source license (MIT License). For more information about
   4:pattern_play.c ****  * OS licensing, please visit -> http://www.opensource.org/
   5:pattern_play.c ****  *
   6:pattern_play.c ****  * For more information about the x0xb0x project, please visit
   7:pattern_play.c ****  * -> http://www.ladyada.net/make/x0xb0x
   8:pattern_play.c ****  *
   9:pattern_play.c ****  *                                     *****
  10:pattern_play.c ****  * Copyright (c) 2005 Limor Fried
  11:pattern_play.c ****  *
  12:pattern_play.c ****  * Permission is hereby granted, free of charge, to any person obtaining a 
  13:pattern_play.c ****  * copy of this software and associated documentation files (the "Software"), 
  14:pattern_play.c ****  * to deal in the Software without restriction, including without limitation 
  15:pattern_play.c ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  16:pattern_play.c ****  * and/or sell copies of the Software, and to permit persons to whom the 
  17:pattern_play.c ****  * Software is furnished to do so, subject to the following conditions:
  18:pattern_play.c ****  *
  19:pattern_play.c ****  * The above copyright notice and this permission notice shall be included in 
  20:pattern_play.c ****  * all copies or substantial portions of the Software.
  21:pattern_play.c ****  *
  22:pattern_play.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
  23:pattern_play.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  24:pattern_play.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
  25:pattern_play.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
  26:pattern_play.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  27:pattern_play.c ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
  28:pattern_play.c ****  * IN THE SOFTWARE.
  29:pattern_play.c ****  *                                     *****
  30:pattern_play.c ****  *
  31:pattern_play.c ****  */
  32:pattern_play.c **** 
  33:pattern_play.c **** #include <inttypes.h>
  34:pattern_play.c **** #include <stdio.h>
  35:pattern_play.c **** #include <avr/interrupt.h>
  36:pattern_play.c **** #include "pattern.h"
  37:pattern_play.c **** #include "track.h"
  38:pattern_play.c **** #include "switch.h"
  39:pattern_play.c **** #include "led.h"
  40:pattern_play.c **** #include "main.h"
  41:pattern_play.c **** #include "synth.h"
  42:pattern_play.c **** #include "delay.h"
  43:pattern_play.c **** #include "dinsync.h"
  44:pattern_play.c **** #include "midi.h"
  45:pattern_play.c **** 
  46:pattern_play.c **** extern uint8_t function, bank;
  47:pattern_play.c **** 
  48:pattern_play.c **** extern uint8_t sync;
  49:pattern_play.c **** 
  50:pattern_play.c **** extern volatile uint8_t note_counter;
  51:pattern_play.c **** extern volatile uint8_t dinsync_counter;
  52:pattern_play.c **** extern volatile int16_t dinsync_clocked, midisync_clocked;
  53:pattern_play.c **** 
  54:pattern_play.c **** // pattern running info
  55:pattern_play.c **** extern volatile uint8_t curr_pattern_index;
  56:pattern_play.c **** extern volatile uint8_t pattern_buff[PATT_SIZE];    // the 'loaded' pattern buffer
  57:pattern_play.c **** extern uint16_t curr_patt;
  58:pattern_play.c **** extern uint8_t patt_location;
  59:pattern_play.c **** 
  60:pattern_play.c **** // track runnning info
  61:pattern_play.c **** extern volatile uint8_t curr_track_index;
  62:pattern_play.c **** extern volatile uint16_t track_buff[TRACK_SIZE]; // the 'loaded' track buffer
  63:pattern_play.c **** 
  64:pattern_play.c **** // a chain can either hold patterns or tracks (depending on the mode
  65:pattern_play.c **** volatile uint8_t curr_chain[MAX_CHAIN];
  66:pattern_play.c **** volatile uint8_t curr_chain_index;
  67:pattern_play.c **** volatile uint8_t next_chain[MAX_CHAIN];
  68:pattern_play.c **** uint8_t buff_chain[MAX_CHAIN];
  69:pattern_play.c **** uint8_t buff_chain_len = 0;
  70:pattern_play.c **** 
  71:pattern_play.c **** // the currently-playing pitch shift and the upcoming pitch shift
  72:pattern_play.c **** extern int8_t curr_pitch_shift;
  73:pattern_play.c **** extern int8_t next_pitch_shift;
  74:pattern_play.c **** 
  75:pattern_play.c **** extern uint8_t curr_note;
  76:pattern_play.c **** extern volatile uint8_t swing_it;
  77:pattern_play.c **** extern uint8_t running_stepwrite;
  78:pattern_play.c **** 
  79:pattern_play.c **** uint8_t PATT_LENGTH = PATT_SIZE;
  80:pattern_play.c **** 
  81:pattern_play.c **** uint8_t all_accent = 0;
  82:pattern_play.c **** uint8_t all_slide = 0;
  83:pattern_play.c **** uint8_t all_rest = 0; // all the time
  84:pattern_play.c **** 
  85:pattern_play.c **** uint8_t curr_bank = 0;
  86:pattern_play.c **** uint8_t next_bank = 0;
  87:pattern_play.c **** 
  88:pattern_play.c **** uint8_t playing;
  89:pattern_play.c **** uint8_t swing_time = 0;
  90:pattern_play.c **** uint8_t new_swing_time = 0;
  91:pattern_play.c **** uint8_t live_edit = FALSE;
  92:pattern_play.c **** uint8_t loop = FALSE;
  93:pattern_play.c **** uint8_t loop_countdown = FALSE;
  94:pattern_play.c **** uint8_t loop_start = 1;
  95:pattern_play.c **** uint8_t loop_end = PATT_SIZE;
  96:pattern_play.c **** int8_t countdown = 0;
  97:pattern_play.c **** uint8_t prev_pattern_index;
  98:pattern_play.c **** /* 8th note stuff */
  99:pattern_play.c **** uint8_t eighths = FALSE;
 100:pattern_play.c **** /* */
 101:pattern_play.c **** 
 102:pattern_play.c **** extern volatile uint8_t play_loaded_pattern; // are we playing?
 103:pattern_play.c **** 
 104:pattern_play.c **** volatile uint16_t tap_tempo_timer = 0;
 105:pattern_play.c **** 
 106:pattern_play.c **** extern volatile uint8_t midi_cmd;
 107:pattern_play.c **** extern uint8_t midi_in_addr;
 108:pattern_play.c **** 
 109:pattern_play.c **** // could be MIDISYNC, DINSYNC or SYNCOUT
 110:pattern_play.c **** #define function_changed (function != curr_function)
 111:pattern_play.c **** 
 112:pattern_play.c **** // both pattern and track play are similar enough in function
 113:pattern_play.c **** // (and codespace is small enough) that they're in the same
 114:pattern_play.c **** // function. eek
 115:pattern_play.c **** void do_patterntrack_play(void) {
 116:pattern_play.c ****   uint8_t i = 0, curr_function;
 117:pattern_play.c ****   uint8_t start_point = 0;
 118:pattern_play.c ****   uint8_t end_point = 0;
 119:pattern_play.c ****   uint8_t midi_data;
 120:pattern_play.c ****   uint8_t no_loop = FALSE;
 121:pattern_play.c **** 
 122:pattern_play.c **** 	  //080602
 123:pattern_play.c ****   uint8_t studge = FALSE;//stutter or nudge
 124:pattern_play.c **** 
 125:pattern_play.c ****   curr_function = function;
 126:pattern_play.c **** 
 127:pattern_play.c ****   if (sync == INTERNAL_SYNC) {
 128:pattern_play.c ****     turn_on_tempo();
 129:pattern_play.c ****   } else {
 130:pattern_play.c ****     turn_off_tempo();
 131:pattern_play.c ****   } 
 132:pattern_play.c ****   if (sync == DIN_SYNC) {
 133:pattern_play.c ****     dinsync_set_in();
 134:pattern_play.c ****   } else {
 135:pattern_play.c ****     dinsync_set_out();
 136:pattern_play.c ****   }
 137:pattern_play.c **** 
 138:pattern_play.c ****   clear_all_leds();
 139:pattern_play.c ****   clear_blinking_leds();
 140:pattern_play.c ****   next_chain[0] = curr_chain[0] = 0;
 141:pattern_play.c ****   next_chain[1] = curr_chain[1] = 0xFF;
 142:pattern_play.c ****   set_numkey_led(1);
 143:pattern_play.c ****  
 144:pattern_play.c ****   playing = FALSE;
 145:pattern_play.c **** 
 146:pattern_play.c ****   curr_track_index = 0;
 147:pattern_play.c ****   curr_pattern_index = 0;
 148:pattern_play.c **** 
 149:pattern_play.c ****   curr_patt = 0;
 150:pattern_play.c **** 
 151:pattern_play.c ****   curr_chain_index = 0;
 152:pattern_play.c **** 
 153:pattern_play.c ****   curr_pitch_shift = next_pitch_shift = 0;
 154:pattern_play.c ****   
 155:pattern_play.c ****   swing_time = 0;
 156:pattern_play.c ****   
 157:pattern_play.c ****   live_edit = FALSE;
 158:pattern_play.c ****   loop = FALSE;
 159:pattern_play.c ****   loop_countdown = FALSE;
 160:pattern_play.c ****   loop_start = 1;
 161:pattern_play.c ****   loop_end = PATT_LENGTH;
 162:pattern_play.c ****   countdown = 0;
 163:pattern_play.c **** 
 164:pattern_play.c ****   clear_bank_leds();
 165:pattern_play.c ****   if (ANYPATTERNPLAYFUNC)
 166:pattern_play.c ****     next_bank = curr_bank = bank;
 167:pattern_play.c ****   else  // TRACKPLAY
 168:pattern_play.c ****     next_bank = curr_bank = bank % 8;
 169:pattern_play.c **** 
 170:pattern_play.c ****   set_bank_led(bank);
 171:pattern_play.c **** 
 172:pattern_play.c ****   while (1) {
 173:pattern_play.c ****     read_switches();
 174:pattern_play.c **** 
 175:pattern_play.c **** //    if (function_changed && is_pressed(KEY_RS)) {
 176:pattern_play.c ****     if (function_changed && function == EDIT_PATTERN_FUNC) {
 177:pattern_play.c **** 	  live_edit = TRUE;
 178:pattern_play.c **** 	  set_led_blink(LED_RS);
 179:pattern_play.c **** 	}
 180:pattern_play.c **** 	
 181:pattern_play.c ****     if (function_changed && !playing) {
 182:pattern_play.c ****       playing = FALSE;
 183:pattern_play.c **** 	  live_edit = FALSE;
 184:pattern_play.c ****       dinsync_stop();
 185:pattern_play.c ****       midi_stop();
 186:pattern_play.c ****       curr_pitch_shift = next_pitch_shift = 0;
 187:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 188:pattern_play.c **** 
 189:pattern_play.c ****       clear_all_leds();
 190:pattern_play.c ****       clear_blinking_leds();
 191:pattern_play.c ****       clock_leds();
 192:pattern_play.c ****       return;
 193:pattern_play.c ****     }
 194:pattern_play.c **** 
 195:pattern_play.c **** 	if (live_edit && function == EDIT_PATTERN_FUNC) {
 196:pattern_play.c **** 	  patt_location = buff_chain[curr_patt];
 197:pattern_play.c **** 	  edit_live();
 198:pattern_play.c **** 	}
 199:pattern_play.c **** 	else {
 200:pattern_play.c **** 
 201:pattern_play.c ****     // detect 'tap tempo' requests by timing between KEY_TEMPO strikes
 202:pattern_play.c ****     if (just_pressed(KEY_TEMPO) && !is_pressed(KEY_DONE)) {
 203:pattern_play.c ****       if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
 204:pattern_play.c **** 	  && (tap_tempo_timer > 333)) // less than .3ms between taps = 200BPM
 205:pattern_play.c **** 	{
 206:pattern_play.c **** 	  tap_tempo_timer = 60000UL/tap_tempo_timer; // convert to BPM
 207:pattern_play.c **** 	  change_tempo(tap_tempo_timer);
 208:pattern_play.c **** 	}
 209:pattern_play.c ****       tap_tempo_timer = 0;
 210:pattern_play.c ****     }
 211:pattern_play.c **** 
 212:pattern_play.c ****     // start a new chain if just pressed
 213:pattern_play.c ****     if (just_pressed(KEY_CHAIN)) {
 214:pattern_play.c ****       clear_notekey_leds();
 215:pattern_play.c ****       clear_blinking_leds();
 216:pattern_play.c ****       set_led(LED_CHAIN);
 217:pattern_play.c ****       buff_chain_len = 0;  // 'start' to write a new chain
 218:pattern_play.c ****     }
 219:pattern_play.c **** 
 220:pattern_play.c ****     // releasing the chain key 'finalizes' the chain buffer
 221:pattern_play.c ****     if (just_released(KEY_CHAIN)) {
 222:pattern_play.c ****       /*
 223:pattern_play.c **** 	putstring("buff'd chain = ");
 224:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++) {
 225:pattern_play.c **** 	  if (buff_chain[i] >= 8)
 226:pattern_play.c **** 	    break;
 227:pattern_play.c **** 	  putnum_ud(buff_chain[i]);
 228:pattern_play.c **** 	  uart_putchar(' ');
 229:pattern_play.c **** 	}
 230:pattern_play.c **** 	putstring("\n\r");
 231:pattern_play.c ****       */
 232:pattern_play.c ****       for (i=0; i<MAX_CHAIN; i++) {
 233:pattern_play.c **** 	next_chain[i] = buff_chain[i];
 234:pattern_play.c ****       }
 235:pattern_play.c ****       // if we're not playing something right now, curr = next
 236:pattern_play.c ****       if (!playing) {
 237:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++)
 238:pattern_play.c **** 	  curr_chain[i] = next_chain[i];
 239:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;
 240:pattern_play.c **** 	clear_led(LED_UP);
 241:pattern_play.c **** 	clear_led(LED_DOWN);
 242:pattern_play.c ****       }
 243:pattern_play.c ****       clear_led(LED_CHAIN);
 244:pattern_play.c ****     }
 245:pattern_play.c **** 
 246:pattern_play.c ****     if (is_pressed(KEY_CHAIN)) {
 247:pattern_play.c ****       // display the current chain
 248:pattern_play.c ****       for (i=0; i<buff_chain_len; i++) {
 249:pattern_play.c **** 	if (buff_chain[i] >= 8)
 250:pattern_play.c **** 	  break;
 251:pattern_play.c **** 	set_numkey_led(buff_chain[i]+1);
 252:pattern_play.c ****       }
 253:pattern_play.c **** 
 254:pattern_play.c ****       // ok lets add patterns/tracks to the buffer chain!
 255:pattern_play.c ****       i = get_lowest_numkey_just_pressed();
 256:pattern_play.c ****       if ((i != 0) && (buff_chain_len < MAX_CHAIN)) {
 257:pattern_play.c **** 	buff_chain[buff_chain_len++] = i - 1;
 258:pattern_play.c **** 	buff_chain[buff_chain_len] = 0xFF;
 259:pattern_play.c **** 		
 260:pattern_play.c **** 	/*
 261:pattern_play.c **** 	  putstring("adding: ");
 262:pattern_play.c **** 	  putnum_uh(buff_chain[buff_chain_len-1]);
 263:pattern_play.c **** 	  putstring("\n\r");
 264:pattern_play.c **** 	*/
 265:pattern_play.c **** 	/*
 266:pattern_play.c **** 	  putstring("buff'd chain = ");
 267:pattern_play.c **** 	  for (i=0; i<MAX_CHAIN; i++) {
 268:pattern_play.c **** 	  if (buff_chain[i] >= 8)
 269:pattern_play.c **** 	  break;
 270:pattern_play.c **** 	  putnum_ud(buff_chain[i]);
 271:pattern_play.c **** 	  uart_putchar(' ');
 272:pattern_play.c **** 	  }
 273:pattern_play.c **** 	  putstring("\n\r");
 274:pattern_play.c **** 	*/
 275:pattern_play.c **** 
 276:pattern_play.c ****       }
 277:pattern_play.c ****     }
 278:pattern_play.c ****     // if they press U or D, show the current pitch shift and allow pitch shift adjust
 279:pattern_play.c ****     else if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
 280:pattern_play.c ****       int8_t notekey = get_lowest_notekey_pressed();
 281:pattern_play.c **** 
 282:pattern_play.c ****       // clear any pattern indicator leds
 283:pattern_play.c ****       if (just_pressed(KEY_UP) || just_pressed(KEY_DOWN)) {
 284:pattern_play.c **** 	clear_notekey_leds();
 285:pattern_play.c **** 	clear_blinking_leds();
 286:pattern_play.c **** 	clear_led(LED_CHAIN);
 287:pattern_play.c ****       }
 288:pattern_play.c **** 
 289:pattern_play.c ****       // check if they are changing the shift
 290:pattern_play.c ****       if (is_pressed(KEY_UP)) {
 291:pattern_play.c **** 	clear_led(LED_DOWN);
 292:pattern_play.c **** 	set_led(LED_UP);
 293:pattern_play.c **** 
 294:pattern_play.c **** 	if (notekey != -1) 
 295:pattern_play.c **** 	  next_pitch_shift = notekey; 
 296:pattern_play.c **** 	if (curr_pitch_shift >= 0) {
 297:pattern_play.c **** 	  if (! is_notekey_led_blink(curr_pitch_shift)) {
 298:pattern_play.c **** 	    clear_blinking_leds();
 299:pattern_play.c **** 	    set_notekey_led_blink(curr_pitch_shift);
 300:pattern_play.c **** 	  }
 301:pattern_play.c **** 	}
 302:pattern_play.c **** 	if (next_pitch_shift != curr_pitch_shift)
 303:pattern_play.c **** 	  set_notekey_led(next_pitch_shift);
 304:pattern_play.c ****       } else if (is_pressed(KEY_DOWN)) {
 305:pattern_play.c **** 	clear_led(LED_UP);
 306:pattern_play.c **** 	set_led(LED_DOWN);
 307:pattern_play.c **** 
 308:pattern_play.c **** 	if (notekey != -1)
 309:pattern_play.c **** 	  next_pitch_shift = notekey - OCTAVE;  // invert direction 
 310:pattern_play.c **** 
 311:pattern_play.c **** 	if (curr_pitch_shift <= 0) {
 312:pattern_play.c **** 	  if (!is_notekey_led_blink(OCTAVE + curr_pitch_shift)) {
 313:pattern_play.c **** 	    clear_blinking_leds();
 314:pattern_play.c **** 	    set_notekey_led_blink(OCTAVE + curr_pitch_shift);
 315:pattern_play.c **** 	  }
 316:pattern_play.c **** 	}
 317:pattern_play.c **** 	if (next_pitch_shift != curr_pitch_shift)
 318:pattern_play.c **** 	  set_notekey_led(OCTAVE + next_pitch_shift);
 319:pattern_play.c ****       }
 320:pattern_play.c **** 
 321:pattern_play.c ****       // if not playing something right now,
 322:pattern_play.c ****       // make the pitch shift effective immediately
 323:pattern_play.c ****       if (!playing)
 324:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;      
 325:pattern_play.c **** 
 326:pattern_play.c ****     } else {
 327:pattern_play.c ****       if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
 328:pattern_play.c **** 	// clear any pitch shift indicators
 329:pattern_play.c **** 	clear_notekey_leds();
 330:pattern_play.c **** 	clear_blinking_leds();
 331:pattern_play.c ****       }
 332:pattern_play.c **** 
 333:pattern_play.c ****       // if they just pressed a numkey, make a chain thats
 334:pattern_play.c ****       // one pattern long
 335:pattern_play.c ****       i = get_lowest_numkey_pressed();
 336:pattern_play.c ****       if (!is_pressed(KEY_DONE) && ((i != 0) || has_bank_knob_changed())) {
 337:pattern_play.c **** 	if (i != 0) {
 338:pattern_play.c **** 	  clear_numkey_leds();
 339:pattern_play.c **** 	  buff_chain[0] = next_chain[0] = i - 1;
 340:pattern_play.c **** 	  buff_chain[1] = next_chain[1] = 0xFF;
 341:pattern_play.c **** 	  
 342:pattern_play.c **** 	  if (!playing)
 343:pattern_play.c **** 	    for (i=0; i<MAX_CHAIN; i++) 
 344:pattern_play.c **** 	      curr_chain[i] = next_chain[i];
 345:pattern_play.c **** 	} else {
 346:pattern_play.c **** 	  if (ANYPATTERNPLAYFUNC)
 347:pattern_play.c **** 	    next_bank = bank;
 348:pattern_play.c **** 	  else
 349:pattern_play.c **** 	    next_bank = bank%8;
 350:pattern_play.c **** 
 351:pattern_play.c **** 	  if (!playing)
 352:pattern_play.c **** 	    curr_bank = next_bank;
 353:pattern_play.c **** 	}
 354:pattern_play.c **** 	if (!playing) {
 355:pattern_play.c **** 	  clear_bank_leds();
 356:pattern_play.c **** 	  set_bank_led(next_bank);
 357:pattern_play.c **** 	  curr_pitch_shift = next_pitch_shift;
 358:pattern_play.c **** 	}
 359:pattern_play.c ****       }
 360:pattern_play.c **** 	  
 361:pattern_play.c **** 	if (sync != MIDI_SYNC) 	midi_cmd = midi_recv_cmd();
 362:pattern_play.c **** 	
 363:pattern_play.c **** 	if (midi_cmd >> 4 == 0xC) {
 364:pattern_play.c **** 	  midi_data = midi_getchar();
 365:pattern_play.c ****       if (!(midi_data & 0x80)) {
 366:pattern_play.c **** 	    next_bank = midi_data/8;
 367:pattern_play.c **** 		next_chain[0] = midi_data%8;
 368:pattern_play.c **** 		next_chain[1] = 0xFF;
 369:pattern_play.c **** 		if (!playing) {
 370:pattern_play.c **** 		  curr_bank=next_bank;
 371:pattern_play.c **** 		  curr_chain[0]=midi_data%8;
 372:pattern_play.c **** 		  curr_chain[1]=0xFF;
 373:pattern_play.c **** 		}
 374:pattern_play.c **** 		clear_numkey_leds();
 375:pattern_play.c **** 		set_numkey_led(next_chain[0]+1);
 376:pattern_play.c ****       }
 377:pattern_play.c **** 	} else // 110109
 378:pattern_play.c ****     if ((midi_cmd >> 4 == 0x9) && ((midi_cmd & 0xF) == midi_in_addr)) { //MIDI_NOTE_ON
 379:pattern_play.c ****         int8_t midi_ps = midi_getchar() - 0x3C;
 380:pattern_play.c ****         if (midi_ps < 13 && midi_ps > -13) next_pitch_shift = midi_ps;
 381:pattern_play.c ****     }
 382:pattern_play.c ****         
 383:pattern_play.c ****       // indicate current pattern & next pattern & shift 
 384:pattern_play.c ****       if (!chains_equiv(next_chain, curr_chain)) {
 385:pattern_play.c **** 	if (next_chain[1] == END_OF_CHAIN && curr_chain[1] == END_OF_CHAIN) {
 386:pattern_play.c **** 	  // basically single patterns. current blinks
 387:pattern_play.c **** 	  set_numkey_led_blink(curr_chain[0]+1);
 388:pattern_play.c **** 	}
 389:pattern_play.c **** 
 390:pattern_play.c **** 	// otherwise, always just show the next chain in all solid lights
 391:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++) {
 392:pattern_play.c **** 	  if (next_chain[i] > 8)
 393:pattern_play.c **** 	    break;
 394:pattern_play.c **** 	  set_numkey_led(next_chain[i] + 1);
 395:pattern_play.c **** 	}
 396:pattern_play.c ****       } else {
 397:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++) {
 398:pattern_play.c **** 	  if (curr_chain[i] > 8)
 399:pattern_play.c **** 	    break;
 400:pattern_play.c **** 	  if (playing && (curr_chain[i] == curr_chain[curr_chain_index])) {
 401:pattern_play.c **** 	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
 402:pattern_play.c **** 	      {
 403:pattern_play.c **** 		// if playing, current pattern/track blinks
 404:pattern_play.c **** 		clear_numkey_led(curr_chain[i]+1);
 405:pattern_play.c **** 		set_numkey_led_blink(curr_chain[i]+1); 
 406:pattern_play.c **** 	      }
 407:pattern_play.c **** 	  } else {
 408:pattern_play.c **** 	    // clear old blinking tracks/patterns
 409:pattern_play.c **** 	    if (is_numkey_led_blink(curr_chain[i]+1))
 410:pattern_play.c **** 	      clear_blinking_leds();
 411:pattern_play.c **** 	    // all other patterns in chain solid
 412:pattern_play.c **** 	    set_numkey_led(curr_chain[i] + 1); 
 413:pattern_play.c **** 	  }
 414:pattern_play.c **** 	}
 415:pattern_play.c ****       }
 416:pattern_play.c ****       display_curr_pitch_shift_ud();
 417:pattern_play.c ****     }
 418:pattern_play.c ****  
 419:pattern_play.c **** 	clock_ticks();
 420:pattern_play.c ****  
 421:pattern_play.c ****     if ( ((sync == INTERNAL_SYNC) && just_released(KEY_RS) && 
 422:pattern_play.c **** 	       playing) ||
 423:pattern_play.c **** //	       playing && !live_edit) ||
 424:pattern_play.c **** 	 ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
 425:pattern_play.c **** 	 ((sync == DIN_SYNC) && dinsync_stopped()) ) 
 426:pattern_play.c ****       {
 427:pattern_play.c **** 	//putstring("stop\n\r");
 428:pattern_play.c **** 	playing = FALSE;
 429:pattern_play.c **** 	play_loaded_pattern = FALSE;
 430:pattern_play.c **** 	loop = FALSE;
 431:pattern_play.c ****     loop_countdown = FALSE;
 432:pattern_play.c ****     loop_start = 1;
 433:pattern_play.c ****     loop_end = PATT_LENGTH;
 434:pattern_play.c ****     countdown = 0;
 435:pattern_play.c **** 	note_off(0);
 436:pattern_play.c **** 	midi_stop();
 437:pattern_play.c **** 	if (sync != DIN_SYNC) 
 438:pattern_play.c **** 	  dinsync_stop();
 439:pattern_play.c **** 
 440:pattern_play.c **** 	clear_led(LED_RS);
 441:pattern_play.c **** 	clear_blinking_leds();
 442:pattern_play.c **** 	clear_bank_leds();
 443:pattern_play.c **** 	if (ANYPATTERNPLAYFUNC)	
 444:pattern_play.c **** 	  set_bank_led(bank);
 445:pattern_play.c **** 	else
 446:pattern_play.c **** 	  set_bank_led(bank % 8);
 447:pattern_play.c **** 	if (function_changed) {
 448:pattern_play.c **** 	  live_edit = FALSE;
 449:pattern_play.c ****       curr_pitch_shift = next_pitch_shift = 0;
 450:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 451:pattern_play.c ****       clear_all_leds();
 452:pattern_play.c ****       clock_leds();
 453:pattern_play.c **** 	  return;
 454:pattern_play.c **** 	}
 455:pattern_play.c ****       }
 456:pattern_play.c ****     else if ( ((sync == INTERNAL_SYNC) && just_released(KEY_RS) && !playing) ||
 457:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 458:pattern_play.c **** 	       ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
 459:pattern_play.c **** 	      ((sync == DIN_SYNC) && dinsync_started()) )
 460:pattern_play.c ****       {
 461:pattern_play.c **** 	set_led(LED_RS);
 462:pattern_play.c **** 	//putstring("start\n\r");
 463:pattern_play.c **** 
 464:pattern_play.c **** 	if (ANYPATTERNPLAYFUNC) {
 465:pattern_play.c **** 	  if (has_bank_knob_changed()) {
 466:pattern_play.c ****     	  load_pattern(bank, curr_chain[0]);
 467:pattern_play.c **** 		  }
 468:pattern_play.c **** 	  else {
 469:pattern_play.c **** 	      load_pattern(curr_bank, curr_chain[0]);
 470:pattern_play.c **** 	      }
 471:pattern_play.c **** 	} else {
 472:pattern_play.c **** 	  load_track(bank%8, curr_chain[0]);
 473:pattern_play.c **** 	  curr_patt = track_buff[0];
 474:pattern_play.c **** 	  load_curr_patt(); // ignore pitch shift returned
 475:pattern_play.c **** 	}
 476:pattern_play.c **** 	curr_note = REST;
 477:pattern_play.c **** 	/*
 478:pattern_play.c **** 	  putstring("next pattern (bank ");
 479:pattern_play.c **** 	  putnum_ud(bank);
 480:pattern_play.c **** 	  putstring(", loc ");
 481:pattern_play.c **** 	  putnum_ud(curr_pattern_location);
 482:pattern_play.c **** 	  putstring("\n\r");
 483:pattern_play.c **** 	*/
 484:pattern_play.c **** 
 485:pattern_play.c **** 	// on midisync continue message, continue!
 486:pattern_play.c **** 	if (! ((sync == MIDI_SYNC) && (midi_cmd == MIDI_CONTINUE))) {
 487:pattern_play.c **** 	  curr_chain_index = 0;  // index into current chain
 488:pattern_play.c **** 	  curr_pattern_index = 0;        // index into current pattern in chain
 489:pattern_play.c **** 	  curr_track_index = 0;        // index into current pattern in chain
 490:pattern_play.c **** 	}
 491:pattern_play.c **** 	
 492:pattern_play.c **** 	note_counter = 0;
 493:pattern_play.c **** 	dinsync_counter = 0;
 494:pattern_play.c **** 	dinsync_clocked = 0;
 495:pattern_play.c **** 	swing_it = 0;
 496:pattern_play.c **** 	playing = TRUE;
 497:pattern_play.c **** 	play_loaded_pattern = TRUE;
 498:pattern_play.c **** 	midi_putchar(MIDI_START);
 499:pattern_play.c **** 	if (sync != DIN_SYNC)
 500:pattern_play.c **** 	  dinsync_start();
 501:pattern_play.c ****       } 
 502:pattern_play.c **** 
 503:pattern_play.c **** ///	if (just_released(KEY_RS) && live_edit && 
 504:pattern_play.c **** 	if (live_edit && 
 505:pattern_play.c **** 	    function != EDIT_PATTERN_FUNC) {
 506:pattern_play.c **** 		  live_edit = FALSE;
 507:pattern_play.c **** 		  running_stepwrite = FALSE;
 508:pattern_play.c **** 		  clear_all_leds();
 509:pattern_play.c **** 		  set_led(LED_RS);
 510:pattern_play.c **** 	}
 511:pattern_play.c **** 	
 512:pattern_play.c **** 	if (is_pressed(KEY_CHAIN)) {
 513:pattern_play.c **** 	  if (just_pressed(KEY_PREV)) {
 514:pattern_play.c **** 		curr_pattern_index = loop_start-1;
 515:pattern_play.c **** 	  }	
 516:pattern_play.c **** 	}
 517:pattern_play.c **** 	
 518:pattern_play.c **** 	if (is_pressed(KEY_DONE)) {
 519:pattern_play.c **** 	
 520:pattern_play.c **** 	/* 8th note stuff */
 521:pattern_play.c **** 	if (just_pressed(KEY_TEMPO)) {
 522:pattern_play.c **** 	  eighths = !eighths;
 523:pattern_play.c **** 	  no_loop = TRUE;
 524:pattern_play.c **** 	  }
 525:pattern_play.c **** 	/* */
 526:pattern_play.c **** 	
 527:pattern_play.c **** 	  i = get_lowest_loopkey_just_pressed();
 528:pattern_play.c **** 	  if (start_point == 0) {
 529:pattern_play.c **** 	    start_point = i;
 530:pattern_play.c **** 	  }
 531:pattern_play.c **** 	  else if (end_point == 0){
 532:pattern_play.c **** 	    end_point = i;
 533:pattern_play.c **** 	  }
 534:pattern_play.c **** 	}
 535:pattern_play.c **** 	else {
 536:pattern_play.c **** 	  if (just_pressed(KEY_SLIDE) || just_released(KEY_SLIDE)) {
 537:pattern_play.c **** 	    all_slide = !all_slide;
 538:pattern_play.c **** //	    if (is_pressed(KEY_SLIDE)) set_led(LED_SLIDE);
 539:pattern_play.c **** //	    else clear_led(LED_SLIDE);
 540:pattern_play.c **** 	  }
 541:pattern_play.c **** 	  if (just_pressed(KEY_ACCENT) || just_released(KEY_ACCENT)) {
 542:pattern_play.c **** 	    all_accent = !all_accent;
 543:pattern_play.c **** //	    if (is_pressed(KEY_ACCENT)) set_led(LED_ACCENT);
 544:pattern_play.c **** //	    else clear_led(LED_ACCENT);
 545:pattern_play.c **** 	  }
 546:pattern_play.c **** 	  if (just_pressed(KEY_REST) || just_released(KEY_REST)) {
 547:pattern_play.c **** 	    all_rest = !all_rest;
 548:pattern_play.c **** //	    if (is_pressed(KEY_REST)) set_led(LED_REST);
 549:pattern_play.c **** //	    else clear_led(LED_REST);
 550:pattern_play.c **** 	  }
 551:pattern_play.c **** 	}
 552:pattern_play.c **** 	
 553:pattern_play.c **** 	if (just_pressed(KEY_NEXT) && is_pressed(KEY_PREV)) {
 554:pattern_play.c **** 	  //080602
 555:pattern_play.c **** 	  studge = TRUE;
 556:pattern_play.c **** 
 557:pattern_play.c **** 	  curr_pattern_index = get_next_patt_idx();
 558:pattern_play.c **** 	}
 559:pattern_play.c **** 	else if (just_pressed(KEY_PREV) && is_pressed(KEY_NEXT)) {
 560:pattern_play.c **** 	  //080602
 561:pattern_play.c **** 	  studge = TRUE;
 562:pattern_play.c **** 
 563:pattern_play.c ****       curr_pattern_index = prev_pattern_index;
 564:pattern_play.c **** 	  if (loop_countdown) 
 565:pattern_play.c **** 	    if (countdown < 0) 
 566:pattern_play.c **** 		  countdown--;
 567:pattern_play.c **** 		else 
 568:pattern_play.c **** 		  countdown++;
 569:pattern_play.c **** 	}
 570:pattern_play.c **** 	else if (just_pressed(KEY_NEXT)) {
 571:pattern_play.c **** //080602
 572:pattern_play.c **** 	  if (studge) studge = FALSE;
 573:pattern_play.c **** 	  else
 574:pattern_play.c **** 	  if (++new_swing_time > 5) new_swing_time = 5;
 575:pattern_play.c **** 	}
 576:pattern_play.c **** 	else if (just_pressed(KEY_PREV)) {
 577:pattern_play.c **** //080602
 578:pattern_play.c **** 	  if (studge) studge = FALSE;
 579:pattern_play.c **** 	  else
 580:pattern_play.c **** 	  if (new_swing_time-- == 0) new_swing_time = 0;
 581:pattern_play.c **** 	}
 582:pattern_play.c **** 
 583:pattern_play.c **** 	if (just_released(KEY_DONE)) {
 584:pattern_play.c **** 	  if (!no_loop)
 585:pattern_play.c **** 	  {
 586:pattern_play.c **** 	  loop_countdown = TRUE;
 587:pattern_play.c **** 	  countdown = loop_end - curr_pattern_index - 1;
 588:pattern_play.c **** 	  if (start_point == 0 && end_point == 0) {
 589:pattern_play.c **** 		loop_start = 1;
 590:pattern_play.c **** 		loop_end = PATT_LENGTH;
 591:pattern_play.c **** 	    loop = FALSE;		
 592:pattern_play.c **** 	  }
 593:pattern_play.c **** 	  else {
 594:pattern_play.c **** 		if (end_point != 0 && pattern_buff[start_point-1] != 0xFF &&
 595:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 596:pattern_play.c ****      	  loop = TRUE;
 597:pattern_play.c **** 	      loop_start = start_point;
 598:pattern_play.c **** 	      loop_end = end_point;
 599:pattern_play.c ****         } 	
 600:pattern_play.c **** 	    start_point = end_point = 0;
 601:pattern_play.c **** 	  }
 602:pattern_play.c **** 	  } else no_loop = FALSE;
 603:pattern_play.c **** 	}
 604:pattern_play.c **** 
 605:pattern_play.c ****     }
 606:pattern_play.c **** 
 607:pattern_play.c ****   }
 608:pattern_play.c **** }
 609:pattern_play.c **** 
 610:pattern_play.c **** uint8_t chains_equiv(volatile uint8_t *chain1, volatile uint8_t *chain2) {
  16               		.loc 1 610 74 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 610 74 is_stmt 0 view .LVU1
  23 0000 9C01      		movw r18,r24
  24 0002 AB01      		movw r20,r22
 611:pattern_play.c ****   uint8_t i;
  25               		.loc 1 611 3 is_stmt 1 view .LVU2
 612:pattern_play.c ****   
 613:pattern_play.c ****   for (i=0; i < MAX_CHAIN; i++) {
  26               		.loc 1 613 3 view .LVU3
  27               	.LVL1:
 610:pattern_play.c ****   uint8_t i;
  28               		.loc 1 610 74 is_stmt 0 view .LVU4
  29 0004 90E0      		ldi r25,0
  30 0006 80E0      		ldi r24,0
  31               	.LVL2:
  32               	.L3:
 614:pattern_play.c ****     if (chain1[i] != chain2[i])
  33               		.loc 1 614 5 is_stmt 1 view .LVU5
  34 0008 F901      		movw r30,r18
  35 000a E80F      		add r30,r24
  36 000c F91F      		adc r31,r25
  37               		.loc 1 614 15 is_stmt 0 view .LVU6
  38 000e 7081      		ld r23,Z
  39 0010 DA01      		movw r26,r20
  40 0012 A80F      		add r26,r24
  41 0014 B91F      		adc r27,r25
  42               		.loc 1 614 28 view .LVU7
  43 0016 6C91      		ld r22,X
  44               		.loc 1 614 8 view .LVU8
  45 0018 7613      		cpse r23,r22
  46 001a 00C0      		rjmp .L4
 615:pattern_play.c ****       return FALSE;
 616:pattern_play.c ****     if (chain1[i] == 0xFF) 
  47               		.loc 1 616 5 is_stmt 1 view .LVU9
  48               		.loc 1 616 15 is_stmt 0 view .LVU10
  49 001c 6081      		ld r22,Z
  50               		.loc 1 616 8 view .LVU11
  51 001e 6F3F      		cpi r22,lo8(-1)
  52 0020 01F0      		breq .L5
  53               	.LVL3:
  54               		.loc 1 616 8 view .LVU12
  55 0022 0196      		adiw r24,1
  56               	.LVL4:
 613:pattern_play.c ****     if (chain1[i] != chain2[i])
  57               		.loc 1 613 3 discriminator 2 view .LVU13
  58 0024 8032      		cpi r24,32
  59 0026 9105      		cpc r25,__zero_reg__
  60 0028 01F4      		brne .L3
  61               	.LVL5:
  62               	.L5:
 617:pattern_play.c ****       return TRUE;
  63               		.loc 1 617 14 view .LVU14
  64 002a 81E0      		ldi r24,lo8(1)
  65               	/* epilogue start */
 618:pattern_play.c ****   }
 619:pattern_play.c ****   return TRUE;
 620:pattern_play.c **** }
  66               		.loc 1 620 1 view .LVU15
  67 002c 0895      		ret
  68               	.LVL6:
  69               	.L4:
 615:pattern_play.c ****     if (chain1[i] == 0xFF) 
  70               		.loc 1 615 14 view .LVU16
  71 002e 80E0      		ldi r24,0
  72               	.LVL7:
 615:pattern_play.c ****     if (chain1[i] == 0xFF) 
  73               		.loc 1 615 14 view .LVU17
  74 0030 0895      		ret
  75               		.cfi_endproc
  76               	.LFE2:
  78               	.global	get_next_patt_idx
  80               	get_next_patt_idx:
  81               	.LFB3:
 621:pattern_play.c **** 
 622:pattern_play.c **** uint8_t get_next_patt_idx() {
  82               		.loc 1 622 29 is_stmt 1 view -0
  83               		.cfi_startproc
  84               	/* prologue: function */
  85               	/* frame size = 0 */
  86               	/* stack size = 0 */
  87               	.L__stack_usage = 0
 623:pattern_play.c ****   prev_pattern_index = curr_pattern_index;
  88               		.loc 1 623 3 view .LVU19
  89               		.loc 1 623 22 is_stmt 0 view .LVU20
  90 0032 8091 0000 		lds r24,curr_pattern_index
  91 0036 8093 0000 		sts prev_pattern_index,r24
 624:pattern_play.c ****   if (loop && !loop_countdown) {
  92               		.loc 1 624 3 is_stmt 1 view .LVU21
  93               		.loc 1 624 7 is_stmt 0 view .LVU22
  94 003a 9091 0000 		lds r25,loop
  95 003e 8091 0000 		lds r24,loop_countdown
  96               		.loc 1 624 6 view .LVU23
  97 0042 9923      		tst r25
  98 0044 01F0      		breq .L8
  99               		.loc 1 624 12 discriminator 1 view .LVU24
 100 0046 8111      		cpse r24,__zero_reg__
 101 0048 00C0      		rjmp .L9
 625:pattern_play.c **** 	if (curr_pattern_index == loop_end-1) return loop_start-1;
 102               		.loc 1 625 2 is_stmt 1 view .LVU25
 103               		.loc 1 625 25 is_stmt 0 view .LVU26
 104 004a 4091 0000 		lds r20,curr_pattern_index
 105               		.loc 1 625 36 view .LVU27
 106 004e 9091 0000 		lds r25,loop_end
 107 0052 8091 0000 		lds r24,loop_start
 108 0056 692F      		mov r22,r25
 109 0058 6150      		subi r22,1
 110 005a 770B      		sbc r23,r23
 111               		.loc 1 625 5 view .LVU28
 112 005c 4617      		cp r20,r22
 113 005e 1706      		cpc __zero_reg__,r23
 114 0060 01F4      		brne .L10
 115               	.L19:
 626:pattern_play.c **** 	if (loop_start > loop_end) return curr_pattern_index-1;
 116               		.loc 1 626 54 discriminator 1 view .LVU29
 117 0062 8150      		subi r24,lo8(-(-1))
 118 0064 0895      		ret
 119               	.L10:
 120               		.loc 1 626 2 is_stmt 1 view .LVU30
 121               		.loc 1 626 5 is_stmt 0 view .LVU31
 122 0066 9817      		cp r25,r24
 123 0068 00F4      		brsh .L12
 124               	.L20:
 125               		.loc 1 626 29 is_stmt 1 discriminator 1 view .LVU32
 126               		.loc 1 626 54 is_stmt 0 discriminator 1 view .LVU33
 127 006a 8091 0000 		lds r24,curr_pattern_index
 128 006e 00C0      		rjmp .L19
 129               	.L8:
 627:pattern_play.c ****   }
 628:pattern_play.c ****   else if (loop_countdown){
 130               		.loc 1 628 8 is_stmt 1 view .LVU34
 131               		.loc 1 628 11 is_stmt 0 view .LVU35
 132 0070 8823      		tst r24
 133 0072 01F0      		breq .L12
 134               	.L9:
 629:pattern_play.c ****     if (countdown < 0) {
 135               		.loc 1 629 5 is_stmt 1 view .LVU36
 136               		.loc 1 629 19 is_stmt 0 view .LVU37
 137 0074 8091 0000 		lds r24,countdown
 138               		.loc 1 629 8 view .LVU38
 139 0078 87FF      		sbrs r24,7
 140 007a 00C0      		rjmp .L13
 630:pattern_play.c **** 	  countdown++;
 141               		.loc 1 630 4 is_stmt 1 view .LVU39
 142               		.loc 1 630 13 is_stmt 0 view .LVU40
 143 007c 8F5F      		subi r24,lo8(-(1))
 144 007e 8093 0000 		sts countdown,r24
 631:pattern_play.c **** 	  return curr_pattern_index-1;
 145               		.loc 1 631 4 is_stmt 1 view .LVU41
 146 0082 00C0      		rjmp .L20
 147               	.L13:
 632:pattern_play.c **** 	}
 633:pattern_play.c **** 	else if (countdown > 0) countdown--;
 148               		.loc 1 633 7 view .LVU42
 149               		.loc 1 633 10 is_stmt 0 view .LVU43
 150 0084 8823      		tst r24
 151 0086 01F0      		breq .L14
 152               		.loc 1 633 26 is_stmt 1 discriminator 1 view .LVU44
 153               		.loc 1 633 35 is_stmt 0 discriminator 1 view .LVU45
 154 0088 8150      		subi r24,lo8(-(-1))
 155 008a 8093 0000 		sts countdown,r24
 156               	.L12:
 634:pattern_play.c **** 	else {
 635:pattern_play.c **** 	  loop_countdown = FALSE;
 636:pattern_play.c **** 	  if (loop) return loop_start-1;
 637:pattern_play.c **** 	  else return loop_end;
 638:pattern_play.c **** 	}
 639:pattern_play.c ****   }
 640:pattern_play.c ****   return curr_pattern_index+1;
 157               		.loc 1 640 3 is_stmt 1 view .LVU46
 158               		.loc 1 640 28 is_stmt 0 view .LVU47
 159 008e 8091 0000 		lds r24,curr_pattern_index
 160 0092 8F5F      		subi r24,lo8(-(1))
 161               	/* epilogue start */
 641:pattern_play.c **** }
 162               		.loc 1 641 1 view .LVU48
 163 0094 0895      		ret
 164               	.L14:
 635:pattern_play.c **** 	  if (loop) return loop_start-1;
 165               		.loc 1 635 4 is_stmt 1 view .LVU49
 635:pattern_play.c **** 	  if (loop) return loop_start-1;
 166               		.loc 1 635 19 is_stmt 0 view .LVU50
 167 0096 1092 0000 		sts loop_countdown,__zero_reg__
 636:pattern_play.c **** 	  else return loop_end;
 168               		.loc 1 636 4 is_stmt 1 view .LVU51
 636:pattern_play.c **** 	  else return loop_end;
 169               		.loc 1 636 31 is_stmt 0 view .LVU52
 170 009a 8091 0000 		lds r24,loop_start
 636:pattern_play.c **** 	  else return loop_end;
 171               		.loc 1 636 7 view .LVU53
 172 009e 9111      		cpse r25,__zero_reg__
 173 00a0 00C0      		rjmp .L19
 637:pattern_play.c **** 	}
 174               		.loc 1 637 9 is_stmt 1 view .LVU54
 637:pattern_play.c **** 	}
 175               		.loc 1 637 16 is_stmt 0 view .LVU55
 176 00a2 8091 0000 		lds r24,loop_end
 177 00a6 0895      		ret
 178               		.cfi_endproc
 179               	.LFE3:
 181               	.global	do_patterntrack_play
 183               	do_patterntrack_play:
 184               	.LFB1:
 115:pattern_play.c ****   uint8_t i = 0, curr_function;
 185               		.loc 1 115 33 is_stmt 1 view -0
 186               		.cfi_startproc
 187 00a8 B0E0      		ldi r27,0
 188 00aa A0E0      		ldi r26,0
 189 00ac E0E0      		ldi r30,lo8(gs(1f))
 190 00ae F0E0      		ldi r31,hi8(gs(1f))
 191 00b0 0C94 0000 		jmp __prologue_saves__+((18 - 14) * 2)
 192               	1:
 193               		.cfi_offset 6, -2
 194               		.cfi_offset 7, -3
 195               		.cfi_offset 8, -4
 196               		.cfi_offset 9, -5
 197               		.cfi_offset 10, -6
 198               		.cfi_offset 11, -7
 199               		.cfi_offset 12, -8
 200               		.cfi_offset 13, -9
 201               		.cfi_offset 14, -10
 202               		.cfi_offset 15, -11
 203               		.cfi_offset 16, -12
 204               		.cfi_offset 17, -13
 205               		.cfi_offset 28, -14
 206               		.cfi_offset 29, -15
 207               		.cfi_def_cfa_offset 16
 208               	/* prologue: function */
 209               	/* frame size = 0 */
 210               	/* stack size = 14 */
 211               	.L__stack_usage = 14
 116:pattern_play.c ****   uint8_t start_point = 0;
 212               		.loc 1 116 3 view .LVU57
 213               	.LVL8:
 117:pattern_play.c ****   uint8_t end_point = 0;
 214               		.loc 1 117 3 view .LVU58
 118:pattern_play.c ****   uint8_t midi_data;
 215               		.loc 1 118 3 view .LVU59
 119:pattern_play.c ****   uint8_t no_loop = FALSE;
 216               		.loc 1 119 3 view .LVU60
 120:pattern_play.c **** 
 217               		.loc 1 120 3 view .LVU61
 123:pattern_play.c **** 
 218               		.loc 1 123 3 view .LVU62
 125:pattern_play.c **** 
 219               		.loc 1 125 3 view .LVU63
 125:pattern_play.c **** 
 220               		.loc 1 125 17 is_stmt 0 view .LVU64
 221 00b4 7090 0000 		lds r7,function
 222               	.LVL9:
 127:pattern_play.c ****     turn_on_tempo();
 223               		.loc 1 127 3 is_stmt 1 view .LVU65
 127:pattern_play.c ****     turn_on_tempo();
 224               		.loc 1 127 6 is_stmt 0 view .LVU66
 225 00b8 8091 0000 		lds r24,sync
 226 00bc 8111      		cpse r24,__zero_reg__
 227 00be 00C0      		rjmp .L22
 128:pattern_play.c ****   } else {
 228               		.loc 1 128 5 is_stmt 1 view .LVU67
 229 00c0 0E94 0000 		call turn_on_tempo
 230               	.LVL10:
 231               	.L23:
 132:pattern_play.c ****     dinsync_set_in();
 232               		.loc 1 132 3 view .LVU68
 132:pattern_play.c ****     dinsync_set_in();
 233               		.loc 1 132 6 is_stmt 0 view .LVU69
 234 00c4 8091 0000 		lds r24,sync
 235 00c8 8130      		cpi r24,lo8(1)
 236 00ca 01F0      		breq .+2
 237 00cc 00C0      		rjmp .L24
 133:pattern_play.c ****   } else {
 238               		.loc 1 133 5 is_stmt 1 view .LVU70
 239 00ce 0E94 0000 		call dinsync_set_in
 240               	.LVL11:
 241               	.L25:
 138:pattern_play.c ****   clear_blinking_leds();
 242               		.loc 1 138 3 view .LVU71
 243 00d2 0E94 0000 		call clear_all_leds
 244               	.LVL12:
 139:pattern_play.c ****   next_chain[0] = curr_chain[0] = 0;
 245               		.loc 1 139 3 view .LVU72
 246 00d6 0E94 0000 		call clear_blinking_leds
 247               	.LVL13:
 140:pattern_play.c ****   next_chain[1] = curr_chain[1] = 0xFF;
 248               		.loc 1 140 3 view .LVU73
 140:pattern_play.c ****   next_chain[1] = curr_chain[1] = 0xFF;
 249               		.loc 1 140 33 is_stmt 0 view .LVU74
 250 00da 1092 0000 		sts curr_chain,__zero_reg__
 140:pattern_play.c ****   next_chain[1] = curr_chain[1] = 0xFF;
 251               		.loc 1 140 17 view .LVU75
 252 00de 1092 0000 		sts next_chain,__zero_reg__
 141:pattern_play.c ****   set_numkey_led(1);
 253               		.loc 1 141 3 is_stmt 1 view .LVU76
 141:pattern_play.c ****   set_numkey_led(1);
 254               		.loc 1 141 33 is_stmt 0 view .LVU77
 255 00e2 8FEF      		ldi r24,lo8(-1)
 256 00e4 8093 0000 		sts curr_chain+1,r24
 141:pattern_play.c ****   set_numkey_led(1);
 257               		.loc 1 141 17 view .LVU78
 258 00e8 8093 0000 		sts next_chain+1,r24
 142:pattern_play.c ****  
 259               		.loc 1 142 3 is_stmt 1 view .LVU79
 260 00ec 81E0      		ldi r24,lo8(1)
 261 00ee 0E94 0000 		call set_numkey_led
 262               	.LVL14:
 144:pattern_play.c **** 
 263               		.loc 1 144 3 view .LVU80
 144:pattern_play.c **** 
 264               		.loc 1 144 11 is_stmt 0 view .LVU81
 265 00f2 1092 0000 		sts playing,__zero_reg__
 146:pattern_play.c ****   curr_pattern_index = 0;
 266               		.loc 1 146 3 is_stmt 1 view .LVU82
 146:pattern_play.c ****   curr_pattern_index = 0;
 267               		.loc 1 146 20 is_stmt 0 view .LVU83
 268 00f6 1092 0000 		sts curr_track_index,__zero_reg__
 147:pattern_play.c **** 
 269               		.loc 1 147 3 is_stmt 1 view .LVU84
 147:pattern_play.c **** 
 270               		.loc 1 147 22 is_stmt 0 view .LVU85
 271 00fa 1092 0000 		sts curr_pattern_index,__zero_reg__
 149:pattern_play.c **** 
 272               		.loc 1 149 3 is_stmt 1 view .LVU86
 149:pattern_play.c **** 
 273               		.loc 1 149 13 is_stmt 0 view .LVU87
 274 00fe 1092 0000 		sts curr_patt+1,__zero_reg__
 275 0102 1092 0000 		sts curr_patt,__zero_reg__
 151:pattern_play.c **** 
 276               		.loc 1 151 3 is_stmt 1 view .LVU88
 151:pattern_play.c **** 
 277               		.loc 1 151 20 is_stmt 0 view .LVU89
 278 0106 1092 0000 		sts curr_chain_index,__zero_reg__
 153:pattern_play.c ****   
 279               		.loc 1 153 3 is_stmt 1 view .LVU90
 153:pattern_play.c ****   
 280               		.loc 1 153 39 is_stmt 0 view .LVU91
 281 010a 1092 0000 		sts next_pitch_shift,__zero_reg__
 153:pattern_play.c ****   
 282               		.loc 1 153 20 view .LVU92
 283 010e 1092 0000 		sts curr_pitch_shift,__zero_reg__
 155:pattern_play.c ****   
 284               		.loc 1 155 3 is_stmt 1 view .LVU93
 155:pattern_play.c ****   
 285               		.loc 1 155 14 is_stmt 0 view .LVU94
 286 0112 1092 0000 		sts swing_time,__zero_reg__
 157:pattern_play.c ****   loop = FALSE;
 287               		.loc 1 157 3 is_stmt 1 view .LVU95
 157:pattern_play.c ****   loop = FALSE;
 288               		.loc 1 157 13 is_stmt 0 view .LVU96
 289 0116 1092 0000 		sts live_edit,__zero_reg__
 158:pattern_play.c ****   loop_countdown = FALSE;
 290               		.loc 1 158 3 is_stmt 1 view .LVU97
 158:pattern_play.c ****   loop_countdown = FALSE;
 291               		.loc 1 158 8 is_stmt 0 view .LVU98
 292 011a 1092 0000 		sts loop,__zero_reg__
 159:pattern_play.c ****   loop_start = 1;
 293               		.loc 1 159 3 is_stmt 1 view .LVU99
 159:pattern_play.c ****   loop_start = 1;
 294               		.loc 1 159 18 is_stmt 0 view .LVU100
 295 011e 1092 0000 		sts loop_countdown,__zero_reg__
 160:pattern_play.c ****   loop_end = PATT_LENGTH;
 296               		.loc 1 160 3 is_stmt 1 view .LVU101
 160:pattern_play.c ****   loop_end = PATT_LENGTH;
 297               		.loc 1 160 14 is_stmt 0 view .LVU102
 298 0122 81E0      		ldi r24,lo8(1)
 299 0124 8093 0000 		sts loop_start,r24
 161:pattern_play.c ****   countdown = 0;
 300               		.loc 1 161 3 is_stmt 1 view .LVU103
 161:pattern_play.c ****   countdown = 0;
 301               		.loc 1 161 12 is_stmt 0 view .LVU104
 302 0128 8091 0000 		lds r24,PATT_LENGTH
 303 012c 8093 0000 		sts loop_end,r24
 162:pattern_play.c **** 
 304               		.loc 1 162 3 is_stmt 1 view .LVU105
 162:pattern_play.c **** 
 305               		.loc 1 162 13 is_stmt 0 view .LVU106
 306 0130 1092 0000 		sts countdown,__zero_reg__
 164:pattern_play.c ****   if (ANYPATTERNPLAYFUNC)
 307               		.loc 1 164 3 is_stmt 1 view .LVU107
 308 0134 0E94 0000 		call clear_bank_leds
 309               	.LVL15:
 165:pattern_play.c ****     next_bank = curr_bank = bank;
 310               		.loc 1 165 3 view .LVU108
 165:pattern_play.c ****     next_bank = curr_bank = bank;
 311               		.loc 1 165 7 is_stmt 0 view .LVU109
 312 0138 9091 0000 		lds r25,function
 313 013c 8091 0000 		lds r24,bank
 314 0140 9B30      		cpi r25,lo8(11)
 315 0142 01F0      		breq .L280
 165:pattern_play.c ****     next_bank = curr_bank = bank;
 316               		.loc 1 165 7 discriminator 2 view .LVU110
 317 0144 977F      		andi r25,lo8(-9)
 318 0146 9730      		cpi r25,lo8(7)
 319 0148 01F0      		breq .+2
 320 014a 00C0      		rjmp .L27
 321               	.L280:
 168:pattern_play.c **** 
 322               		.loc 1 168 27 view .LVU111
 323 014c 8093 0000 		sts curr_bank,r24
 168:pattern_play.c **** 
 324               		.loc 1 168 15 view .LVU112
 325 0150 8093 0000 		sts next_bank,r24
 170:pattern_play.c **** 
 326               		.loc 1 170 3 is_stmt 1 view .LVU113
 327 0154 8091 0000 		lds r24,bank
 328 0158 0E94 0000 		call set_bank_led
 329               	.LVL16:
 123:pattern_play.c **** 
 330               		.loc 1 123 11 is_stmt 0 view .LVU114
 331 015c C0E0      		ldi r28,0
 120:pattern_play.c **** 
 332               		.loc 1 120 11 view .LVU115
 333 015e 912C      		mov r9,__zero_reg__
 118:pattern_play.c ****   uint8_t midi_data;
 334               		.loc 1 118 11 view .LVU116
 335 0160 D0E0      		ldi r29,0
 117:pattern_play.c ****   uint8_t end_point = 0;
 336               		.loc 1 117 11 view .LVU117
 337 0162 10E0      		ldi r17,0
 177:pattern_play.c **** 	  set_led_blink(LED_RS);
 338               		.loc 1 177 14 view .LVU118
 339 0164 01E0      		ldi r16,lo8(1)
 574:pattern_play.c **** 	}
 340               		.loc 1 574 45 view .LVU119
 341 0166 85E0      		ldi r24,lo8(5)
 342 0168 682E      		mov r6,r24
 368:pattern_play.c **** 		if (!playing) {
 343               		.loc 1 368 17 view .LVU120
 344 016a 8824      		clr r8
 345 016c 8A94      		dec r8
 206:pattern_play.c **** 	  change_tempo(tap_tempo_timer);
 346               		.loc 1 206 20 view .LVU121
 347 016e 90E6      		ldi r25,lo8(96)
 348 0170 E92E      		mov r14,r25
 349 0172 9AEE      		ldi r25,lo8(-22)
 350 0174 F92E      		mov r15,r25
 351               	.LVL17:
 352               	.L29:
 172:pattern_play.c ****     read_switches();
 353               		.loc 1 172 3 is_stmt 1 view .LVU122
 173:pattern_play.c **** 
 354               		.loc 1 173 5 view .LVU123
 355 0176 0E94 0000 		call read_switches
 356               	.LVL18:
 176:pattern_play.c **** 	  live_edit = TRUE;
 357               		.loc 1 176 5 view .LVU124
 176:pattern_play.c **** 	  live_edit = TRUE;
 358               		.loc 1 176 9 is_stmt 0 view .LVU125
 359 017a 8091 0000 		lds r24,function
 176:pattern_play.c **** 	  live_edit = TRUE;
 360               		.loc 1 176 8 view .LVU126
 361 017e 8715      		cp r24,r7
 362 0180 01F0      		breq .L30
 176:pattern_play.c **** 	  live_edit = TRUE;
 363               		.loc 1 176 26 discriminator 1 view .LVU127
 364 0182 8330      		cpi r24,lo8(3)
 365 0184 01F4      		brne .L30
 177:pattern_play.c **** 	  set_led_blink(LED_RS);
 366               		.loc 1 177 4 is_stmt 1 view .LVU128
 177:pattern_play.c **** 	  set_led_blink(LED_RS);
 367               		.loc 1 177 14 is_stmt 0 view .LVU129
 368 0186 0093 0000 		sts live_edit,r16
 178:pattern_play.c **** 	}
 369               		.loc 1 178 4 is_stmt 1 view .LVU130
 370 018a 81E2      		ldi r24,lo8(33)
 371 018c 0E94 0000 		call set_led_blink
 372               	.LVL19:
 373               	.L30:
 181:pattern_play.c ****       playing = FALSE;
 374               		.loc 1 181 5 view .LVU131
 181:pattern_play.c ****       playing = FALSE;
 375               		.loc 1 181 9 is_stmt 0 view .LVU132
 376 0190 8091 0000 		lds r24,function
 181:pattern_play.c ****       playing = FALSE;
 377               		.loc 1 181 8 view .LVU133
 378 0194 8715      		cp r24,r7
 379 0196 01F0      		breq .L31
 181:pattern_play.c ****       playing = FALSE;
 380               		.loc 1 181 26 discriminator 1 view .LVU134
 381 0198 9091 0000 		lds r25,playing
 382 019c 9111      		cpse r25,__zero_reg__
 383 019e 00C0      		rjmp .L31
 182:pattern_play.c **** 	  live_edit = FALSE;
 384               		.loc 1 182 7 is_stmt 1 view .LVU135
 183:pattern_play.c ****       dinsync_stop();
 385               		.loc 1 183 4 view .LVU136
 183:pattern_play.c ****       dinsync_stop();
 386               		.loc 1 183 14 is_stmt 0 view .LVU137
 387 01a0 1092 0000 		sts live_edit,__zero_reg__
 184:pattern_play.c ****       midi_stop();
 388               		.loc 1 184 7 is_stmt 1 view .LVU138
 389 01a4 0E94 0000 		call dinsync_stop
 390               	.LVL20:
 185:pattern_play.c ****       curr_pitch_shift = next_pitch_shift = 0;
 391               		.loc 1 185 7 view .LVU139
 392 01a8 0E94 0000 		call midi_stop
 393               	.LVL21:
 186:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 394               		.loc 1 186 7 view .LVU140
 186:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 395               		.loc 1 186 43 is_stmt 0 view .LVU141
 396 01ac 1092 0000 		sts next_pitch_shift,__zero_reg__
 186:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 397               		.loc 1 186 24 view .LVU142
 398 01b0 1092 0000 		sts curr_pitch_shift,__zero_reg__
 187:pattern_play.c **** 
 399               		.loc 1 187 7 is_stmt 1 view .LVU143
 187:pattern_play.c **** 
 400               		.loc 1 187 52 is_stmt 0 view .LVU144
 401 01b4 1092 0000 		sts swing_it,__zero_reg__
 187:pattern_play.c **** 
 402               		.loc 1 187 41 view .LVU145
 403 01b8 1092 0000 		sts all_slide,__zero_reg__
 187:pattern_play.c **** 
 404               		.loc 1 187 29 view .LVU146
 405 01bc 1092 0000 		sts all_rest,__zero_reg__
 187:pattern_play.c **** 
 406               		.loc 1 187 18 view .LVU147
 407 01c0 1092 0000 		sts all_accent,__zero_reg__
 189:pattern_play.c ****       clear_blinking_leds();
 408               		.loc 1 189 7 is_stmt 1 view .LVU148
 409 01c4 0E94 0000 		call clear_all_leds
 410               	.LVL22:
 190:pattern_play.c ****       clock_leds();
 411               		.loc 1 190 7 view .LVU149
 412 01c8 0E94 0000 		call clear_blinking_leds
 413               	.LVL23:
 191:pattern_play.c ****       return;
 414               		.loc 1 191 7 view .LVU150
 415               	.L286:
 452:pattern_play.c **** 	  return;
 416               		.loc 1 452 7 view .LVU151
 417 01cc 0E94 0000 		call clock_leds
 418               	.LVL24:
 453:pattern_play.c **** 	}
 419               		.loc 1 453 4 view .LVU152
 420               	/* epilogue start */
 608:pattern_play.c **** 
 421               		.loc 1 608 1 is_stmt 0 view .LVU153
 422 01d0 CDB7      		in r28,__SP_L__
 423 01d2 DEB7      		in r29,__SP_H__
 424               	.LVL25:
 608:pattern_play.c **** 
 425               		.loc 1 608 1 view .LVU154
 426 01d4 EEE0      		ldi r30, lo8(14)
 427 01d6 0C94 0000 		jmp __epilogue_restores__ + ((18 - 14) * 2)
 428               	.LVL26:
 429               	.L22:
 130:pattern_play.c ****   } 
 430               		.loc 1 130 5 is_stmt 1 view .LVU155
 431 01da 0E94 0000 		call turn_off_tempo
 432               	.LVL27:
 433 01de 00C0      		rjmp .L23
 434               	.L24:
 135:pattern_play.c ****   }
 435               		.loc 1 135 5 view .LVU156
 436 01e0 0E94 0000 		call dinsync_set_out
 437               	.LVL28:
 438 01e4 00C0      		rjmp .L25
 439               	.L27:
 168:pattern_play.c **** 
 440               		.loc 1 168 5 view .LVU157
 168:pattern_play.c **** 
 441               		.loc 1 168 34 is_stmt 0 view .LVU158
 442 01e6 8770      		andi r24,lo8(7)
 443 01e8 00C0      		rjmp .L280
 444               	.LVL29:
 445               	.L155:
 602:pattern_play.c **** 	}
 446               		.loc 1 602 19 view .LVU159
 447 01ea 912C      		mov r9,__zero_reg__
 448               	.LVL30:
 602:pattern_play.c **** 	}
 449               		.loc 1 602 19 view .LVU160
 450 01ec 00C0      		rjmp .L29
 451               	.LVL31:
 452               	.L31:
 195:pattern_play.c **** 	  patt_location = buff_chain[curr_patt];
 453               		.loc 1 195 2 is_stmt 1 view .LVU161
 195:pattern_play.c **** 	  patt_location = buff_chain[curr_patt];
 454               		.loc 1 195 5 is_stmt 0 view .LVU162
 455 01ee 9091 0000 		lds r25,live_edit
 456 01f2 9923      		tst r25
 457 01f4 01F0      		breq .L33
 195:pattern_play.c **** 	  patt_location = buff_chain[curr_patt];
 458               		.loc 1 195 16 discriminator 1 view .LVU163
 459 01f6 8330      		cpi r24,lo8(3)
 460 01f8 01F4      		brne .L33
 196:pattern_play.c **** 	  edit_live();
 461               		.loc 1 196 4 is_stmt 1 view .LVU164
 196:pattern_play.c **** 	  edit_live();
 462               		.loc 1 196 30 is_stmt 0 view .LVU165
 463 01fa E091 0000 		lds r30,curr_patt
 464 01fe F091 0000 		lds r31,curr_patt+1
 465 0202 E050      		subi r30,lo8(-(buff_chain))
 466 0204 F040      		sbci r31,hi8(-(buff_chain))
 196:pattern_play.c **** 	  edit_live();
 467               		.loc 1 196 18 view .LVU166
 468 0206 8081      		ld r24,Z
 469 0208 8093 0000 		sts patt_location,r24
 197:pattern_play.c **** 	}
 470               		.loc 1 197 4 is_stmt 1 view .LVU167
 471 020c 0E94 0000 		call edit_live
 472               	.LVL32:
 473 0210 00C0      		rjmp .L29
 474               	.L33:
 202:pattern_play.c ****       if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
 475               		.loc 1 202 5 view .LVU168
 202:pattern_play.c ****       if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
 476               		.loc 1 202 9 is_stmt 0 view .LVU169
 477 0212 82E0      		ldi r24,lo8(2)
 478 0214 0E94 0000 		call just_pressed
 479               	.LVL33:
 202:pattern_play.c ****       if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
 480               		.loc 1 202 8 view .LVU170
 481 0218 8823      		tst r24
 482 021a 01F0      		breq .L36
 202:pattern_play.c ****       if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
 483               		.loc 1 202 37 discriminator 1 view .LVU171
 484 021c 87E1      		ldi r24,lo8(23)
 485 021e 0E94 0000 		call is_pressed
 486               	.LVL34:
 202:pattern_play.c ****       if ((tap_tempo_timer < 3334) //  more than 3s between taps = 20BPM
 487               		.loc 1 202 33 discriminator 1 view .LVU172
 488 0222 8111      		cpse r24,__zero_reg__
 489 0224 00C0      		rjmp .L36
 203:pattern_play.c **** 	  && (tap_tempo_timer > 333)) // less than .3ms between taps = 200BPM
 490               		.loc 1 203 7 is_stmt 1 view .LVU173
 203:pattern_play.c **** 	  && (tap_tempo_timer > 333)) // less than .3ms between taps = 200BPM
 491               		.loc 1 203 28 is_stmt 0 view .LVU174
 492 0226 8091 0000 		lds r24,tap_tempo_timer
 493 022a 9091 0000 		lds r25,tap_tempo_timer+1
 203:pattern_play.c **** 	  && (tap_tempo_timer > 333)) // less than .3ms between taps = 200BPM
 494               		.loc 1 203 10 view .LVU175
 495 022e 8630      		cpi r24,6
 496 0230 9D40      		sbci r25,13
 497 0232 00F4      		brsh .L38
 204:pattern_play.c **** 	{
 498               		.loc 1 204 24 view .LVU176
 499 0234 8091 0000 		lds r24,tap_tempo_timer
 500 0238 9091 0000 		lds r25,tap_tempo_timer+1
 204:pattern_play.c **** 	{
 501               		.loc 1 204 4 view .LVU177
 502 023c 8E34      		cpi r24,78
 503 023e 9140      		sbci r25,1
 504 0240 00F0      		brlo .L38
 206:pattern_play.c **** 	  change_tempo(tap_tempo_timer);
 505               		.loc 1 206 4 is_stmt 1 view .LVU178
 206:pattern_play.c **** 	  change_tempo(tap_tempo_timer);
 506               		.loc 1 206 20 is_stmt 0 view .LVU179
 507 0242 6091 0000 		lds r22,tap_tempo_timer
 508 0246 7091 0000 		lds r23,tap_tempo_timer+1
 509 024a C701      		movw r24,r14
 510 024c 0E94 0000 		call __udivmodhi4
 511 0250 7093 0000 		sts tap_tempo_timer+1,r23
 512 0254 6093 0000 		sts tap_tempo_timer,r22
 207:pattern_play.c **** 	}
 513               		.loc 1 207 4 is_stmt 1 view .LVU180
 514 0258 8091 0000 		lds r24,tap_tempo_timer
 515 025c 9091 0000 		lds r25,tap_tempo_timer+1
 516 0260 0E94 0000 		call change_tempo
 517               	.LVL35:
 518               	.L38:
 209:pattern_play.c ****     }
 519               		.loc 1 209 7 view .LVU181
 209:pattern_play.c ****     }
 520               		.loc 1 209 23 is_stmt 0 view .LVU182
 521 0264 1092 0000 		sts tap_tempo_timer+1,__zero_reg__
 522 0268 1092 0000 		sts tap_tempo_timer,__zero_reg__
 523               	.L36:
 213:pattern_play.c ****       clear_notekey_leds();
 524               		.loc 1 213 5 is_stmt 1 view .LVU183
 213:pattern_play.c ****       clear_notekey_leds();
 525               		.loc 1 213 9 is_stmt 0 view .LVU184
 526 026c 80E0      		ldi r24,0
 527 026e 0E94 0000 		call just_pressed
 528               	.LVL36:
 213:pattern_play.c ****       clear_notekey_leds();
 529               		.loc 1 213 8 view .LVU185
 530 0272 8823      		tst r24
 531 0274 01F0      		breq .L39
 214:pattern_play.c ****       clear_blinking_leds();
 532               		.loc 1 214 7 is_stmt 1 view .LVU186
 533 0276 0E94 0000 		call clear_notekey_leds
 534               	.LVL37:
 215:pattern_play.c ****       set_led(LED_CHAIN);
 535               		.loc 1 215 7 view .LVU187
 536 027a 0E94 0000 		call clear_blinking_leds
 537               	.LVL38:
 216:pattern_play.c ****       buff_chain_len = 0;  // 'start' to write a new chain
 538               		.loc 1 216 7 view .LVU188
 539 027e 82E2      		ldi r24,lo8(34)
 540 0280 0E94 0000 		call set_led
 541               	.LVL39:
 217:pattern_play.c ****     }
 542               		.loc 1 217 7 view .LVU189
 217:pattern_play.c ****     }
 543               		.loc 1 217 22 is_stmt 0 view .LVU190
 544 0284 1092 0000 		sts buff_chain_len,__zero_reg__
 545               	.L39:
 221:pattern_play.c ****       /*
 546               		.loc 1 221 5 is_stmt 1 view .LVU191
 221:pattern_play.c ****       /*
 547               		.loc 1 221 9 is_stmt 0 view .LVU192
 548 0288 80E0      		ldi r24,0
 549 028a 0E94 0000 		call just_released
 550               	.LVL40:
 221:pattern_play.c ****       /*
 551               		.loc 1 221 8 view .LVU193
 552 028e 8823      		tst r24
 553 0290 01F0      		breq .L40
 554 0292 E0E0      		ldi r30,lo8(buff_chain)
 555 0294 F0E0      		ldi r31,hi8(buff_chain)
 556 0296 90E0      		ldi r25,0
 557 0298 80E0      		ldi r24,0
 558               	.L41:
 559               	.LVL41:
 233:pattern_play.c ****       }
 560               		.loc 1 233 2 is_stmt 1 discriminator 3 view .LVU194
 233:pattern_play.c ****       }
 561               		.loc 1 233 28 is_stmt 0 discriminator 3 view .LVU195
 562 029a 2191      		ld r18,Z+
 233:pattern_play.c ****       }
 563               		.loc 1 233 16 discriminator 3 view .LVU196
 564 029c DC01      		movw r26,r24
 565 029e A050      		subi r26,lo8(-(next_chain))
 566 02a0 B040      		sbci r27,hi8(-(next_chain))
 567 02a2 2C93      		st X,r18
 568               	.LVL42:
 233:pattern_play.c ****       }
 569               		.loc 1 233 16 discriminator 3 view .LVU197
 570 02a4 0196      		adiw r24,1
 571               	.LVL43:
 232:pattern_play.c **** 	next_chain[i] = buff_chain[i];
 572               		.loc 1 232 7 discriminator 3 view .LVU198
 573 02a6 8032      		cpi r24,32
 574 02a8 9105      		cpc r25,__zero_reg__
 575 02aa 01F4      		brne .L41
 236:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++)
 576               		.loc 1 236 7 is_stmt 1 view .LVU199
 236:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++)
 577               		.loc 1 236 10 is_stmt 0 view .LVU200
 578 02ac 8091 0000 		lds r24,playing
 579               	.LVL44:
 236:pattern_play.c **** 	for (i=0; i<MAX_CHAIN; i++)
 580               		.loc 1 236 10 view .LVU201
 581 02b0 8111      		cpse r24,__zero_reg__
 582 02b2 00C0      		rjmp .L42
 583 02b4 90E0      		ldi r25,0
 584 02b6 80E0      		ldi r24,0
 585               	.LVL45:
 586               	.L43:
 238:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;
 587               		.loc 1 238 4 is_stmt 1 discriminator 3 view .LVU202
 238:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;
 588               		.loc 1 238 30 is_stmt 0 discriminator 3 view .LVU203
 589 02b8 FC01      		movw r30,r24
 590 02ba E050      		subi r30,lo8(-(next_chain))
 591 02bc F040      		sbci r31,hi8(-(next_chain))
 592 02be 2081      		ld r18,Z
 238:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;
 593               		.loc 1 238 18 discriminator 3 view .LVU204
 594 02c0 FC01      		movw r30,r24
 595 02c2 E050      		subi r30,lo8(-(curr_chain))
 596 02c4 F040      		sbci r31,hi8(-(curr_chain))
 597 02c6 2083      		st Z,r18
 598               	.LVL46:
 238:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;
 599               		.loc 1 238 18 discriminator 3 view .LVU205
 600 02c8 0196      		adiw r24,1
 601               	.LVL47:
 237:pattern_play.c **** 	  curr_chain[i] = next_chain[i];
 602               		.loc 1 237 2 discriminator 3 view .LVU206
 603 02ca 8032      		cpi r24,32
 604 02cc 9105      		cpc r25,__zero_reg__
 605 02ce 01F4      		brne .L43
 239:pattern_play.c **** 	clear_led(LED_UP);
 606               		.loc 1 239 2 is_stmt 1 view .LVU207
 239:pattern_play.c **** 	clear_led(LED_UP);
 607               		.loc 1 239 19 is_stmt 0 view .LVU208
 608 02d0 8091 0000 		lds r24,next_pitch_shift
 609               	.LVL48:
 239:pattern_play.c **** 	clear_led(LED_UP);
 610               		.loc 1 239 19 view .LVU209
 611 02d4 8093 0000 		sts curr_pitch_shift,r24
 240:pattern_play.c **** 	clear_led(LED_DOWN);
 612               		.loc 1 240 2 is_stmt 1 view .LVU210
 613 02d8 83E0      		ldi r24,lo8(3)
 614 02da 0E94 0000 		call clear_led
 615               	.LVL49:
 241:pattern_play.c ****       }
 616               		.loc 1 241 2 view .LVU211
 617 02de 84E0      		ldi r24,lo8(4)
 618 02e0 0E94 0000 		call clear_led
 619               	.LVL50:
 620               	.L42:
 243:pattern_play.c ****     }
 621               		.loc 1 243 7 view .LVU212
 622 02e4 82E2      		ldi r24,lo8(34)
 623 02e6 0E94 0000 		call clear_led
 624               	.LVL51:
 625               	.L40:
 246:pattern_play.c ****       // display the current chain
 626               		.loc 1 246 5 view .LVU213
 246:pattern_play.c ****       // display the current chain
 627               		.loc 1 246 9 is_stmt 0 view .LVU214
 628 02ea 80E0      		ldi r24,0
 629 02ec 0E94 0000 		call is_pressed
 630               	.LVL52:
 246:pattern_play.c ****       // display the current chain
 631               		.loc 1 246 8 view .LVU215
 632 02f0 8111      		cpse r24,__zero_reg__
 633 02f2 00C0      		rjmp .L151
 279:pattern_play.c ****       int8_t notekey = get_lowest_notekey_pressed();
 634               		.loc 1 279 10 is_stmt 1 view .LVU216
 279:pattern_play.c ****       int8_t notekey = get_lowest_notekey_pressed();
 635               		.loc 1 279 14 is_stmt 0 view .LVU217
 636 02f4 8FE0      		ldi r24,lo8(15)
 637 02f6 0E94 0000 		call is_pressed
 638               	.LVL53:
 279:pattern_play.c ****       int8_t notekey = get_lowest_notekey_pressed();
 639               		.loc 1 279 13 view .LVU218
 640 02fa 8823      		tst r24
 641 02fc 01F4      		brne .+2
 642 02fe 00C0      		rjmp .L51
 643               	.L54:
 644               	.LBB2:
 280:pattern_play.c **** 
 645               		.loc 1 280 7 is_stmt 1 view .LVU219
 280:pattern_play.c **** 
 646               		.loc 1 280 24 is_stmt 0 view .LVU220
 647 0300 0E94 0000 		call get_lowest_notekey_pressed
 648               	.LVL54:
 649 0304 D82E      		mov r13,r24
 650               	.LVL55:
 283:pattern_play.c **** 	clear_notekey_leds();
 651               		.loc 1 283 7 is_stmt 1 view .LVU221
 283:pattern_play.c **** 	clear_notekey_leds();
 652               		.loc 1 283 11 is_stmt 0 view .LVU222
 653 0306 8FE0      		ldi r24,lo8(15)
 654 0308 0E94 0000 		call just_pressed
 655               	.LVL56:
 283:pattern_play.c **** 	clear_notekey_leds();
 656               		.loc 1 283 10 view .LVU223
 657 030c 8111      		cpse r24,__zero_reg__
 658 030e 00C0      		rjmp .L52
 283:pattern_play.c **** 	clear_notekey_leds();
 659               		.loc 1 283 35 discriminator 1 view .LVU224
 660 0310 8EE0      		ldi r24,lo8(14)
 661 0312 0E94 0000 		call just_pressed
 662               	.LVL57:
 283:pattern_play.c **** 	clear_notekey_leds();
 663               		.loc 1 283 32 discriminator 1 view .LVU225
 664 0316 8823      		tst r24
 665 0318 01F0      		breq .L56
 666               	.L52:
 284:pattern_play.c **** 	clear_blinking_leds();
 667               		.loc 1 284 2 is_stmt 1 view .LVU226
 668 031a 0E94 0000 		call clear_notekey_leds
 669               	.LVL58:
 285:pattern_play.c **** 	clear_led(LED_CHAIN);
 670               		.loc 1 285 2 view .LVU227
 671 031e 0E94 0000 		call clear_blinking_leds
 672               	.LVL59:
 286:pattern_play.c ****       }
 673               		.loc 1 286 2 view .LVU228
 674 0322 82E2      		ldi r24,lo8(34)
 675 0324 0E94 0000 		call clear_led
 676               	.LVL60:
 677               	.L56:
 290:pattern_play.c **** 	clear_led(LED_DOWN);
 678               		.loc 1 290 7 view .LVU229
 290:pattern_play.c **** 	clear_led(LED_DOWN);
 679               		.loc 1 290 11 is_stmt 0 view .LVU230
 680 0328 8FE0      		ldi r24,lo8(15)
 681 032a 0E94 0000 		call is_pressed
 682               	.LVL61:
 290:pattern_play.c **** 	clear_led(LED_DOWN);
 683               		.loc 1 290 10 view .LVU231
 684 032e 8823      		tst r24
 685 0330 01F4      		brne .+2
 686 0332 00C0      		rjmp .L57
 291:pattern_play.c **** 	set_led(LED_UP);
 687               		.loc 1 291 2 is_stmt 1 view .LVU232
 688 0334 84E0      		ldi r24,lo8(4)
 689 0336 0E94 0000 		call clear_led
 690               	.LVL62:
 292:pattern_play.c **** 
 691               		.loc 1 292 2 view .LVU233
 692 033a 83E0      		ldi r24,lo8(3)
 693 033c 0E94 0000 		call set_led
 694               	.LVL63:
 294:pattern_play.c **** 	  next_pitch_shift = notekey; 
 695               		.loc 1 294 2 view .LVU234
 294:pattern_play.c **** 	  next_pitch_shift = notekey; 
 696               		.loc 1 294 5 is_stmt 0 view .LVU235
 697 0340 FFEF      		ldi r31,lo8(-1)
 698 0342 DF12      		cpse r13,r31
 295:pattern_play.c **** 	if (curr_pitch_shift >= 0) {
 699               		.loc 1 295 4 is_stmt 1 view .LVU236
 295:pattern_play.c **** 	if (curr_pitch_shift >= 0) {
 700               		.loc 1 295 21 is_stmt 0 view .LVU237
 701 0344 D092 0000 		sts next_pitch_shift,r13
 702               	.L58:
 296:pattern_play.c **** 	  if (! is_notekey_led_blink(curr_pitch_shift)) {
 703               		.loc 1 296 2 is_stmt 1 view .LVU238
 296:pattern_play.c **** 	  if (! is_notekey_led_blink(curr_pitch_shift)) {
 704               		.loc 1 296 23 is_stmt 0 view .LVU239
 705 0348 8091 0000 		lds r24,curr_pitch_shift
 296:pattern_play.c **** 	  if (! is_notekey_led_blink(curr_pitch_shift)) {
 706               		.loc 1 296 5 view .LVU240
 707 034c 87FD      		sbrc r24,7
 708 034e 00C0      		rjmp .L60
 297:pattern_play.c **** 	    clear_blinking_leds();
 709               		.loc 1 297 4 is_stmt 1 view .LVU241
 297:pattern_play.c **** 	    clear_blinking_leds();
 710               		.loc 1 297 10 is_stmt 0 view .LVU242
 711 0350 0E94 0000 		call is_notekey_led_blink
 712               	.LVL64:
 297:pattern_play.c **** 	    clear_blinking_leds();
 713               		.loc 1 297 7 view .LVU243
 714 0354 8111      		cpse r24,__zero_reg__
 715 0356 00C0      		rjmp .L60
 298:pattern_play.c **** 	    set_notekey_led_blink(curr_pitch_shift);
 716               		.loc 1 298 6 is_stmt 1 view .LVU244
 717 0358 0E94 0000 		call clear_blinking_leds
 718               	.LVL65:
 299:pattern_play.c **** 	  }
 719               		.loc 1 299 6 view .LVU245
 720 035c 8091 0000 		lds r24,curr_pitch_shift
 721 0360 0E94 0000 		call set_notekey_led_blink
 722               	.LVL66:
 723               	.L60:
 302:pattern_play.c **** 	  set_notekey_led(next_pitch_shift);
 724               		.loc 1 302 2 view .LVU246
 302:pattern_play.c **** 	  set_notekey_led(next_pitch_shift);
 725               		.loc 1 302 23 is_stmt 0 view .LVU247
 726 0364 8091 0000 		lds r24,next_pitch_shift
 302:pattern_play.c **** 	  set_notekey_led(next_pitch_shift);
 727               		.loc 1 302 5 view .LVU248
 728 0368 9091 0000 		lds r25,curr_pitch_shift
 729 036c 8913      		cpse r24,r25
 730               	.L282:
 318:pattern_play.c ****       }
 731               		.loc 1 318 4 view .LVU249
 732 036e 0E94 0000 		call set_notekey_led
 733               	.LVL67:
 734               	.L63:
 323:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;      
 735               		.loc 1 323 7 is_stmt 1 view .LVU250
 323:pattern_play.c **** 	curr_pitch_shift = next_pitch_shift;      
 736               		.loc 1 323 10 is_stmt 0 view .LVU251
 737 0372 8091 0000 		lds r24,playing
 738 0376 8111      		cpse r24,__zero_reg__
 739 0378 00C0      		rjmp .L49
 324:pattern_play.c **** 
 740               		.loc 1 324 2 is_stmt 1 view .LVU252
 324:pattern_play.c **** 
 741               		.loc 1 324 19 is_stmt 0 view .LVU253
 742 037a 8091 0000 		lds r24,next_pitch_shift
 743 037e 8093 0000 		sts curr_pitch_shift,r24
 744 0382 00C0      		rjmp .L49
 745               	.LVL68:
 746               	.L47:
 324:pattern_play.c **** 
 747               		.loc 1 324 19 view .LVU254
 748               	.LBE2:
 249:pattern_play.c **** 	  break;
 749               		.loc 1 249 2 is_stmt 1 view .LVU255
 249:pattern_play.c **** 	  break;
 750               		.loc 1 249 16 is_stmt 0 view .LVU256
 751 0384 ED2D      		mov r30,r13
 752 0386 F0E0      		ldi r31,0
 753 0388 E050      		subi r30,lo8(-(buff_chain))
 754 038a F040      		sbci r31,hi8(-(buff_chain))
 755 038c 8081      		ld r24,Z
 249:pattern_play.c **** 	  break;
 756               		.loc 1 249 5 view .LVU257
 757 038e 8830      		cpi r24,lo8(8)
 758 0390 00F4      		brsh .L46
 251:pattern_play.c ****       }
 759               		.loc 1 251 2 is_stmt 1 discriminator 2 view .LVU258
 760 0392 8F5F      		subi r24,lo8(-(1))
 761 0394 0E94 0000 		call set_numkey_led
 762               	.LVL69:
 248:pattern_play.c **** 	if (buff_chain[i] >= 8)
 763               		.loc 1 248 36 is_stmt 0 discriminator 2 view .LVU259
 764 0398 D394      		inc r13
 765               	.LVL70:
 766               	.L44:
 248:pattern_play.c **** 	if (buff_chain[i] >= 8)
 767               		.loc 1 248 7 discriminator 1 view .LVU260
 768 039a 8091 0000 		lds r24,buff_chain_len
 769 039e D816      		cp r13,r24
 770 03a0 00F0      		brlo .L47
 771               	.L46:
 255:pattern_play.c ****       if ((i != 0) && (buff_chain_len < MAX_CHAIN)) {
 772               		.loc 1 255 7 is_stmt 1 view .LVU261
 255:pattern_play.c ****       if ((i != 0) && (buff_chain_len < MAX_CHAIN)) {
 773               		.loc 1 255 11 is_stmt 0 view .LVU262
 774 03a2 0E94 0000 		call get_lowest_numkey_just_pressed
 775               	.LVL71:
 256:pattern_play.c **** 	buff_chain[buff_chain_len++] = i - 1;
 776               		.loc 1 256 7 is_stmt 1 view .LVU263
 256:pattern_play.c **** 	buff_chain[buff_chain_len++] = i - 1;
 777               		.loc 1 256 10 is_stmt 0 view .LVU264
 778 03a6 8823      		tst r24
 779 03a8 01F0      		breq .L49
 256:pattern_play.c **** 	buff_chain[buff_chain_len++] = i - 1;
 780               		.loc 1 256 39 discriminator 1 view .LVU265
 781 03aa E091 0000 		lds r30,buff_chain_len
 256:pattern_play.c **** 	buff_chain[buff_chain_len++] = i - 1;
 782               		.loc 1 256 20 discriminator 1 view .LVU266
 783 03ae E032      		cpi r30,lo8(32)
 784 03b0 00F4      		brsh .L49
 257:pattern_play.c **** 	buff_chain[buff_chain_len] = 0xFF;
 785               		.loc 1 257 2 is_stmt 1 view .LVU267
 257:pattern_play.c **** 	buff_chain[buff_chain_len] = 0xFF;
 786               		.loc 1 257 27 is_stmt 0 view .LVU268
 787 03b2 91E0      		ldi r25,lo8(1)
 788 03b4 9E0F      		add r25,r30
 789 03b6 9093 0000 		sts buff_chain_len,r25
 790 03ba F0E0      		ldi r31,0
 257:pattern_play.c **** 	buff_chain[buff_chain_len] = 0xFF;
 791               		.loc 1 257 31 view .LVU269
 792 03bc E050      		subi r30,lo8(-(buff_chain))
 793 03be F040      		sbci r31,hi8(-(buff_chain))
 257:pattern_play.c **** 	buff_chain[buff_chain_len] = 0xFF;
 794               		.loc 1 257 35 view .LVU270
 795 03c0 8150      		subi r24,lo8(-(-1))
 796               	.LVL72:
 257:pattern_play.c **** 	buff_chain[buff_chain_len] = 0xFF;
 797               		.loc 1 257 31 view .LVU271
 798 03c2 8083      		st Z,r24
 258:pattern_play.c **** 		
 799               		.loc 1 258 2 is_stmt 1 view .LVU272
 258:pattern_play.c **** 		
 800               		.loc 1 258 12 is_stmt 0 view .LVU273
 801 03c4 E92F      		mov r30,r25
 802 03c6 F0E0      		ldi r31,0
 258:pattern_play.c **** 		
 803               		.loc 1 258 29 view .LVU274
 804 03c8 E050      		subi r30,lo8(-(buff_chain))
 805 03ca F040      		sbci r31,hi8(-(buff_chain))
 806 03cc 8082      		st Z,r8
 807               	.LVL73:
 808               	.L49:
 419:pattern_play.c ****  
 809               		.loc 1 419 2 is_stmt 1 view .LVU275
 810 03ce 0E94 0000 		call clock_ticks
 811               	.LVL74:
 421:pattern_play.c **** 	       playing) ||
 812               		.loc 1 421 5 view .LVU276
 421:pattern_play.c **** 	       playing) ||
 813               		.loc 1 421 8 is_stmt 0 view .LVU277
 814 03d2 8091 0000 		lds r24,sync
 815 03d6 8823      		tst r24
 816 03d8 01F4      		brne .+2
 817 03da 00C0      		rjmp .L94
 818               	.L97:
 424:pattern_play.c **** 	 ((sync == DIN_SYNC) && dinsync_stopped()) ) 
 819               		.loc 1 424 10 view .LVU278
 820 03dc 8091 0000 		lds r24,sync
 422:pattern_play.c **** //	       playing && !live_edit) ||
 821               		.loc 1 422 18 view .LVU279
 822 03e0 8230      		cpi r24,lo8(2)
 823 03e2 01F4      		brne .+2
 824 03e4 00C0      		rjmp .L95
 424:pattern_play.c **** 	 ((sync == DIN_SYNC) && dinsync_stopped()) ) 
 825               		.loc 1 424 52 discriminator 1 view .LVU280
 826 03e6 8130      		cpi r24,lo8(1)
 827 03e8 01F4      		brne .L103
 425:pattern_play.c ****       {
 828               		.loc 1 425 26 view .LVU281
 829 03ea 0E94 0000 		call dinsync_stopped
 830               	.LVL75:
 425:pattern_play.c ****       {
 831               		.loc 1 425 23 view .LVU282
 832 03ee 8111      		cpse r24,__zero_reg__
 833 03f0 00C0      		rjmp .L100
 834               	.L103:
 456:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 835               		.loc 1 456 10 is_stmt 1 view .LVU283
 456:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 836               		.loc 1 456 13 is_stmt 0 view .LVU284
 837 03f2 8091 0000 		lds r24,sync
 838 03f6 8111      		cpse r24,__zero_reg__
 839 03f8 00C0      		rjmp .L109
 456:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 840               		.loc 1 456 43 discriminator 1 view .LVU285
 841 03fa 81E0      		ldi r24,lo8(1)
 842 03fc 0E94 0000 		call just_released
 843               	.LVL76:
 456:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 844               		.loc 1 456 40 discriminator 1 view .LVU286
 845 0400 8823      		tst r24
 846 0402 01F4      		brne .+2
 847 0404 00C0      		rjmp .L109
 456:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 848               		.loc 1 456 65 discriminator 3 view .LVU287
 849 0406 8091 0000 		lds r24,playing
 850 040a 8111      		cpse r24,__zero_reg__
 851 040c 00C0      		rjmp .L109
 852               	.L112:
 461:pattern_play.c **** 	//putstring("start\n\r");
 853               		.loc 1 461 2 is_stmt 1 view .LVU288
 854 040e 81E2      		ldi r24,lo8(33)
 855 0410 0E94 0000 		call set_led
 856               	.LVL77:
 464:pattern_play.c **** 	  if (has_bank_knob_changed()) {
 857               		.loc 1 464 2 view .LVU289
 464:pattern_play.c **** 	  if (has_bank_knob_changed()) {
 858               		.loc 1 464 6 is_stmt 0 view .LVU290
 859 0414 8091 0000 		lds r24,function
 860 0418 8B30      		cpi r24,lo8(11)
 861 041a 01F0      		breq .L110
 464:pattern_play.c **** 	  if (has_bank_knob_changed()) {
 862               		.loc 1 464 6 discriminator 2 view .LVU291
 863 041c 877F      		andi r24,lo8(-9)
 864 041e 8730      		cpi r24,lo8(7)
 865 0420 01F0      		breq .+2
 866 0422 00C0      		rjmp .L114
 867               	.L110:
 465:pattern_play.c ****     	  load_pattern(bank, curr_chain[0]);
 868               		.loc 1 465 4 is_stmt 1 view .LVU292
 465:pattern_play.c ****     	  load_pattern(bank, curr_chain[0]);
 869               		.loc 1 465 8 is_stmt 0 view .LVU293
 870 0424 0E94 0000 		call has_bank_knob_changed
 871               	.LVL78:
 466:pattern_play.c **** 		  }
 872               		.loc 1 466 8 view .LVU294
 873 0428 6091 0000 		lds r22,curr_chain
 465:pattern_play.c ****     	  load_pattern(bank, curr_chain[0]);
 874               		.loc 1 465 7 view .LVU295
 875 042c 8823      		tst r24
 876 042e 01F4      		brne .+2
 877 0430 00C0      		rjmp .L115
 466:pattern_play.c **** 		  }
 878               		.loc 1 466 8 is_stmt 1 view .LVU296
 879 0432 8091 0000 		lds r24,bank
 880               	.L285:
 469:pattern_play.c **** 	      }
 881               		.loc 1 469 8 is_stmt 0 view .LVU297
 882 0436 0E94 0000 		call load_pattern
 883               	.LVL79:
 884               	.L116:
 476:pattern_play.c **** 	/*
 885               		.loc 1 476 2 is_stmt 1 view .LVU298
 476:pattern_play.c **** 	/*
 886               		.loc 1 476 12 is_stmt 0 view .LVU299
 887 043a 1092 0000 		sts curr_note,__zero_reg__
 486:pattern_play.c **** 	  curr_chain_index = 0;  // index into current chain
 888               		.loc 1 486 2 is_stmt 1 view .LVU300
 486:pattern_play.c **** 	  curr_chain_index = 0;  // index into current chain
 889               		.loc 1 486 5 is_stmt 0 view .LVU301
 890 043e 8091 0000 		lds r24,sync
 891 0442 8230      		cpi r24,lo8(2)
 892 0444 01F4      		brne .L117
 486:pattern_play.c **** 	  curr_chain_index = 0;  // index into current chain
 893               		.loc 1 486 42 discriminator 1 view .LVU302
 894 0446 8091 0000 		lds r24,midi_cmd
 486:pattern_play.c **** 	  curr_chain_index = 0;  // index into current chain
 895               		.loc 1 486 6 discriminator 1 view .LVU303
 896 044a 8B3F      		cpi r24,lo8(-5)
 897 044c 01F0      		breq .L118
 898               	.L117:
 487:pattern_play.c **** 	  curr_pattern_index = 0;        // index into current pattern in chain
 899               		.loc 1 487 4 is_stmt 1 view .LVU304
 487:pattern_play.c **** 	  curr_pattern_index = 0;        // index into current pattern in chain
 900               		.loc 1 487 21 is_stmt 0 view .LVU305
 901 044e 1092 0000 		sts curr_chain_index,__zero_reg__
 488:pattern_play.c **** 	  curr_track_index = 0;        // index into current pattern in chain
 902               		.loc 1 488 4 is_stmt 1 view .LVU306
 488:pattern_play.c **** 	  curr_track_index = 0;        // index into current pattern in chain
 903               		.loc 1 488 23 is_stmt 0 view .LVU307
 904 0452 1092 0000 		sts curr_pattern_index,__zero_reg__
 489:pattern_play.c **** 	}
 905               		.loc 1 489 4 is_stmt 1 view .LVU308
 489:pattern_play.c **** 	}
 906               		.loc 1 489 21 is_stmt 0 view .LVU309
 907 0456 1092 0000 		sts curr_track_index,__zero_reg__
 908               	.L118:
 492:pattern_play.c **** 	dinsync_counter = 0;
 909               		.loc 1 492 2 is_stmt 1 view .LVU310
 492:pattern_play.c **** 	dinsync_counter = 0;
 910               		.loc 1 492 15 is_stmt 0 view .LVU311
 911 045a 1092 0000 		sts note_counter,__zero_reg__
 493:pattern_play.c **** 	dinsync_clocked = 0;
 912               		.loc 1 493 2 is_stmt 1 view .LVU312
 493:pattern_play.c **** 	dinsync_clocked = 0;
 913               		.loc 1 493 18 is_stmt 0 view .LVU313
 914 045e 1092 0000 		sts dinsync_counter,__zero_reg__
 494:pattern_play.c **** 	swing_it = 0;
 915               		.loc 1 494 2 is_stmt 1 view .LVU314
 494:pattern_play.c **** 	swing_it = 0;
 916               		.loc 1 494 18 is_stmt 0 view .LVU315
 917 0462 1092 0000 		sts dinsync_clocked+1,__zero_reg__
 918 0466 1092 0000 		sts dinsync_clocked,__zero_reg__
 495:pattern_play.c **** 	playing = TRUE;
 919               		.loc 1 495 2 is_stmt 1 view .LVU316
 495:pattern_play.c **** 	playing = TRUE;
 920               		.loc 1 495 11 is_stmt 0 view .LVU317
 921 046a 1092 0000 		sts swing_it,__zero_reg__
 496:pattern_play.c **** 	play_loaded_pattern = TRUE;
 922               		.loc 1 496 2 is_stmt 1 view .LVU318
 496:pattern_play.c **** 	play_loaded_pattern = TRUE;
 923               		.loc 1 496 10 is_stmt 0 view .LVU319
 924 046e 0093 0000 		sts playing,r16
 497:pattern_play.c **** 	midi_putchar(MIDI_START);
 925               		.loc 1 497 2 is_stmt 1 view .LVU320
 497:pattern_play.c **** 	midi_putchar(MIDI_START);
 926               		.loc 1 497 22 is_stmt 0 view .LVU321
 927 0472 0093 0000 		sts play_loaded_pattern,r16
 498:pattern_play.c **** 	if (sync != DIN_SYNC)
 928               		.loc 1 498 2 is_stmt 1 view .LVU322
 929 0476 8AEF      		ldi r24,lo8(-6)
 930 0478 0E94 0000 		call midi_putchar
 931               	.LVL80:
 499:pattern_play.c **** 	  dinsync_start();
 932               		.loc 1 499 2 view .LVU323
 499:pattern_play.c **** 	  dinsync_start();
 933               		.loc 1 499 5 is_stmt 0 view .LVU324
 934 047c 8091 0000 		lds r24,sync
 935 0480 8130      		cpi r24,lo8(1)
 936 0482 01F4      		brne .+2
 937 0484 00C0      		rjmp .L108
 500:pattern_play.c ****       } 
 938               		.loc 1 500 4 is_stmt 1 view .LVU325
 939 0486 0E94 0000 		call dinsync_start
 940               	.LVL81:
 941 048a 00C0      		rjmp .L108
 942               	.L151:
 248:pattern_play.c **** 	if (buff_chain[i] >= 8)
 943               		.loc 1 248 13 is_stmt 0 view .LVU326
 944 048c D12C      		mov r13,__zero_reg__
 945 048e 00C0      		rjmp .L44
 946               	.L51:
 279:pattern_play.c ****       int8_t notekey = get_lowest_notekey_pressed();
 947               		.loc 1 279 36 discriminator 1 view .LVU327
 948 0490 8EE0      		ldi r24,lo8(14)
 949 0492 0E94 0000 		call is_pressed
 950               	.LVL82:
 279:pattern_play.c ****       int8_t notekey = get_lowest_notekey_pressed();
 951               		.loc 1 279 33 discriminator 1 view .LVU328
 952 0496 8111      		cpse r24,__zero_reg__
 953 0498 00C0      		rjmp .L54
 327:pattern_play.c **** 	// clear any pitch shift indicators
 954               		.loc 1 327 7 is_stmt 1 view .LVU329
 327:pattern_play.c **** 	// clear any pitch shift indicators
 955               		.loc 1 327 11 is_stmt 0 view .LVU330
 956 049a 8FE0      		ldi r24,lo8(15)
 957 049c 0E94 0000 		call just_released
 958               	.LVL83:
 327:pattern_play.c **** 	// clear any pitch shift indicators
 959               		.loc 1 327 10 view .LVU331
 960 04a0 8823      		tst r24
 961 04a2 01F4      		brne .+2
 962 04a4 00C0      		rjmp .L69
 963               	.L71:
 329:pattern_play.c **** 	clear_blinking_leds();
 964               		.loc 1 329 2 is_stmt 1 view .LVU332
 965 04a6 0E94 0000 		call clear_notekey_leds
 966               	.LVL84:
 330:pattern_play.c ****       }
 967               		.loc 1 330 2 view .LVU333
 968 04aa 0E94 0000 		call clear_blinking_leds
 969               	.LVL85:
 970               	.L70:
 335:pattern_play.c ****       if (!is_pressed(KEY_DONE) && ((i != 0) || has_bank_knob_changed())) {
 971               		.loc 1 335 7 view .LVU334
 335:pattern_play.c ****       if (!is_pressed(KEY_DONE) && ((i != 0) || has_bank_knob_changed())) {
 972               		.loc 1 335 11 is_stmt 0 view .LVU335
 973 04ae 0E94 0000 		call get_lowest_numkey_pressed
 974               	.LVL86:
 975 04b2 D82E      		mov r13,r24
 976               	.LVL87:
 336:pattern_play.c **** 	if (i != 0) {
 977               		.loc 1 336 7 is_stmt 1 view .LVU336
 336:pattern_play.c **** 	if (i != 0) {
 978               		.loc 1 336 12 is_stmt 0 view .LVU337
 979 04b4 87E1      		ldi r24,lo8(23)
 980 04b6 0E94 0000 		call is_pressed
 981               	.LVL88:
 336:pattern_play.c **** 	if (i != 0) {
 982               		.loc 1 336 10 view .LVU338
 983 04ba 8111      		cpse r24,__zero_reg__
 984 04bc 00C0      		rjmp .L150
 336:pattern_play.c **** 	if (i != 0) {
 985               		.loc 1 336 33 discriminator 1 view .LVU339
 986 04be D110      		cpse r13,__zero_reg__
 987 04c0 00C0      		rjmp .L73
 336:pattern_play.c **** 	if (i != 0) {
 988               		.loc 1 336 49 discriminator 2 view .LVU340
 989 04c2 0E94 0000 		call has_bank_knob_changed
 990               	.LVL89:
 336:pattern_play.c **** 	if (i != 0) {
 991               		.loc 1 336 46 discriminator 2 view .LVU341
 992 04c6 8111      		cpse r24,__zero_reg__
 993 04c8 00C0      		rjmp .L74
 994               	.LVL90:
 995               	.L150:
 361:pattern_play.c **** 	
 996               		.loc 1 361 2 is_stmt 1 view .LVU342
 361:pattern_play.c **** 	
 997               		.loc 1 361 5 is_stmt 0 view .LVU343
 998 04ca 8091 0000 		lds r24,sync
 999 04ce 8230      		cpi r24,lo8(2)
 1000 04d0 01F0      		breq .L80
 361:pattern_play.c **** 	
 1001               		.loc 1 361 26 is_stmt 1 discriminator 1 view .LVU344
 361:pattern_play.c **** 	
 1002               		.loc 1 361 37 is_stmt 0 discriminator 1 view .LVU345
 1003 04d2 0E94 0000 		call midi_recv_cmd
 1004               	.LVL91:
 361:pattern_play.c **** 	
 1005               		.loc 1 361 35 discriminator 1 view .LVU346
 1006 04d6 8093 0000 		sts midi_cmd,r24
 1007               	.L80:
 363:pattern_play.c **** 	  midi_data = midi_getchar();
 1008               		.loc 1 363 2 is_stmt 1 view .LVU347
 363:pattern_play.c **** 	  midi_data = midi_getchar();
 1009               		.loc 1 363 20 is_stmt 0 view .LVU348
 1010 04da 8091 0000 		lds r24,midi_cmd
 1011 04de 8295      		swap r24
 1012 04e0 8F70      		andi r24,lo8(15)
 363:pattern_play.c **** 	  midi_data = midi_getchar();
 1013               		.loc 1 363 5 view .LVU349
 1014 04e2 8C30      		cpi r24,lo8(12)
 1015 04e4 01F0      		breq .+2
 1016 04e6 00C0      		rjmp .L81
 364:pattern_play.c ****       if (!(midi_data & 0x80)) {
 1017               		.loc 1 364 4 is_stmt 1 view .LVU350
 364:pattern_play.c ****       if (!(midi_data & 0x80)) {
 1018               		.loc 1 364 16 is_stmt 0 view .LVU351
 1019 04e8 0E94 0000 		call midi_getchar
 1020               	.LVL92:
 365:pattern_play.c **** 	    next_bank = midi_data/8;
 1021               		.loc 1 365 7 is_stmt 1 view .LVU352
 365:pattern_play.c **** 	    next_bank = midi_data/8;
 1022               		.loc 1 365 10 is_stmt 0 view .LVU353
 1023 04ec 87FD      		sbrc r24,7
 1024 04ee 00C0      		rjmp .L83
 366:pattern_play.c **** 		next_chain[0] = midi_data%8;
 1025               		.loc 1 366 6 is_stmt 1 view .LVU354
 366:pattern_play.c **** 		next_chain[0] = midi_data%8;
 1026               		.loc 1 366 16 is_stmt 0 view .LVU355
 1027 04f0 982F      		mov r25,r24
 1028 04f2 9695      		lsr r25
 1029 04f4 9695      		lsr r25
 1030 04f6 9695      		lsr r25
 1031 04f8 9093 0000 		sts next_bank,r25
 367:pattern_play.c **** 		next_chain[1] = 0xFF;
 1032               		.loc 1 367 3 is_stmt 1 view .LVU356
 367:pattern_play.c **** 		next_chain[1] = 0xFF;
 1033               		.loc 1 367 28 is_stmt 0 view .LVU357
 1034 04fc 8770      		andi r24,lo8(7)
 1035               	.LVL93:
 367:pattern_play.c **** 		next_chain[1] = 0xFF;
 1036               		.loc 1 367 17 view .LVU358
 1037 04fe 8093 0000 		sts next_chain,r24
 368:pattern_play.c **** 		if (!playing) {
 1038               		.loc 1 368 3 is_stmt 1 view .LVU359
 368:pattern_play.c **** 		if (!playing) {
 1039               		.loc 1 368 17 is_stmt 0 view .LVU360
 1040 0502 8092 0000 		sts next_chain+1,r8
 369:pattern_play.c **** 		  curr_bank=next_bank;
 1041               		.loc 1 369 3 is_stmt 1 view .LVU361
 369:pattern_play.c **** 		  curr_bank=next_bank;
 1042               		.loc 1 369 6 is_stmt 0 view .LVU362
 1043 0506 2091 0000 		lds r18,playing
 1044 050a 2111      		cpse r18,__zero_reg__
 1045 050c 00C0      		rjmp .L84
 370:pattern_play.c **** 		  curr_chain[0]=midi_data%8;
 1046               		.loc 1 370 5 is_stmt 1 view .LVU363
 370:pattern_play.c **** 		  curr_chain[0]=midi_data%8;
 1047               		.loc 1 370 14 is_stmt 0 view .LVU364
 1048 050e 9093 0000 		sts curr_bank,r25
 371:pattern_play.c **** 		  curr_chain[1]=0xFF;
 1049               		.loc 1 371 5 is_stmt 1 view .LVU365
 371:pattern_play.c **** 		  curr_chain[1]=0xFF;
 1050               		.loc 1 371 18 is_stmt 0 view .LVU366
 1051 0512 8093 0000 		sts curr_chain,r24
 372:pattern_play.c **** 		}
 1052               		.loc 1 372 5 is_stmt 1 view .LVU367
 372:pattern_play.c **** 		}
 1053               		.loc 1 372 18 is_stmt 0 view .LVU368
 1054 0516 8092 0000 		sts curr_chain+1,r8
 1055               	.L84:
 374:pattern_play.c **** 		set_numkey_led(next_chain[0]+1);
 1056               		.loc 1 374 3 is_stmt 1 view .LVU369
 1057 051a 0E94 0000 		call clear_numkey_leds
 1058               	.LVL94:
 375:pattern_play.c ****       }
 1059               		.loc 1 375 3 view .LVU370
 375:pattern_play.c ****       }
 1060               		.loc 1 375 28 is_stmt 0 view .LVU371
 1061 051e 8091 0000 		lds r24,next_chain
 375:pattern_play.c ****       }
 1062               		.loc 1 375 3 view .LVU372
 1063 0522 8F5F      		subi r24,lo8(-(1))
 1064 0524 0E94 0000 		call set_numkey_led
 1065               	.LVL95:
 1066               	.L83:
 384:pattern_play.c **** 	if (next_chain[1] == END_OF_CHAIN && curr_chain[1] == END_OF_CHAIN) {
 1067               		.loc 1 384 7 is_stmt 1 view .LVU373
 384:pattern_play.c **** 	if (next_chain[1] == END_OF_CHAIN && curr_chain[1] == END_OF_CHAIN) {
 1068               		.loc 1 384 12 is_stmt 0 view .LVU374
 1069 0528 60E0      		ldi r22,lo8(curr_chain)
 1070 052a 70E0      		ldi r23,hi8(curr_chain)
 1071 052c 80E0      		ldi r24,lo8(next_chain)
 1072 052e 90E0      		ldi r25,hi8(next_chain)
 1073 0530 0E94 0000 		call chains_equiv
 1074               	.LVL96:
 384:pattern_play.c **** 	if (next_chain[1] == END_OF_CHAIN && curr_chain[1] == END_OF_CHAIN) {
 1075               		.loc 1 384 10 view .LVU375
 1076 0534 8111      		cpse r24,__zero_reg__
 1077 0536 00C0      		rjmp .L152
 385:pattern_play.c **** 	  // basically single patterns. current blinks
 1078               		.loc 1 385 2 is_stmt 1 view .LVU376
 385:pattern_play.c **** 	  // basically single patterns. current blinks
 1079               		.loc 1 385 16 is_stmt 0 view .LVU377
 1080 0538 8091 0000 		lds r24,next_chain+1
 385:pattern_play.c **** 	  // basically single patterns. current blinks
 1081               		.loc 1 385 5 view .LVU378
 1082 053c 8F3F      		cpi r24,lo8(-1)
 1083 053e 01F4      		brne .L87
 385:pattern_play.c **** 	  // basically single patterns. current blinks
 1084               		.loc 1 385 49 discriminator 1 view .LVU379
 1085 0540 8091 0000 		lds r24,curr_chain+1
 385:pattern_play.c **** 	  // basically single patterns. current blinks
 1086               		.loc 1 385 36 discriminator 1 view .LVU380
 1087 0544 8F3F      		cpi r24,lo8(-1)
 1088 0546 01F4      		brne .L87
 387:pattern_play.c **** 	}
 1089               		.loc 1 387 4 is_stmt 1 view .LVU381
 387:pattern_play.c **** 	}
 1090               		.loc 1 387 35 is_stmt 0 view .LVU382
 1091 0548 8091 0000 		lds r24,curr_chain
 387:pattern_play.c **** 	}
 1092               		.loc 1 387 4 view .LVU383
 1093 054c 8F5F      		subi r24,lo8(-(1))
 1094 054e 0E94 0000 		call set_numkey_led_blink
 1095               	.LVL97:
 1096               	.L87:
 1097 0552 D12C      		mov r13,__zero_reg__
 1098 0554 C12C      		mov r12,__zero_reg__
 1099               	.L89:
 1100               	.LVL98:
 392:pattern_play.c **** 	    break;
 1101               		.loc 1 392 4 is_stmt 1 view .LVU384
 392:pattern_play.c **** 	    break;
 1102               		.loc 1 392 18 is_stmt 0 view .LVU385
 1103 0556 F601      		movw r30,r12
 1104 0558 E050      		subi r30,lo8(-(next_chain))
 1105 055a F040      		sbci r31,hi8(-(next_chain))
 1106 055c 8081      		ld r24,Z
 392:pattern_play.c **** 	    break;
 1107               		.loc 1 392 7 view .LVU386
 1108 055e 8930      		cpi r24,lo8(9)
 1109 0560 00F4      		brsh .+2
 1110 0562 00C0      		rjmp .L88
 1111               	.LVL99:
 1112               	.L90:
 416:pattern_play.c ****     }
 1113               		.loc 1 416 7 is_stmt 1 view .LVU387
 1114 0564 0E94 0000 		call display_curr_pitch_shift_ud
 1115               	.LVL100:
 1116 0568 00C0      		rjmp .L49
 1117               	.LVL101:
 1118               	.L57:
 1119               	.LBB3:
 304:pattern_play.c **** 	clear_led(LED_UP);
 1120               		.loc 1 304 14 view .LVU388
 304:pattern_play.c **** 	clear_led(LED_UP);
 1121               		.loc 1 304 18 is_stmt 0 view .LVU389
 1122 056a 8EE0      		ldi r24,lo8(14)
 1123 056c 0E94 0000 		call is_pressed
 1124               	.LVL102:
 304:pattern_play.c **** 	clear_led(LED_UP);
 1125               		.loc 1 304 17 view .LVU390
 1126 0570 8823      		tst r24
 1127 0572 01F4      		brne .+2
 1128 0574 00C0      		rjmp .L63
 305:pattern_play.c **** 	set_led(LED_DOWN);
 1129               		.loc 1 305 2 is_stmt 1 view .LVU391
 1130 0576 83E0      		ldi r24,lo8(3)
 1131 0578 0E94 0000 		call clear_led
 1132               	.LVL103:
 306:pattern_play.c **** 
 1133               		.loc 1 306 2 view .LVU392
 1134 057c 84E0      		ldi r24,lo8(4)
 1135 057e 0E94 0000 		call set_led
 1136               	.LVL104:
 308:pattern_play.c **** 	  next_pitch_shift = notekey - OCTAVE;  // invert direction 
 1137               		.loc 1 308 2 view .LVU393
 308:pattern_play.c **** 	  next_pitch_shift = notekey - OCTAVE;  // invert direction 
 1138               		.loc 1 308 5 is_stmt 0 view .LVU394
 1139 0582 2FEF      		ldi r18,lo8(-1)
 1140 0584 D216      		cp r13,r18
 1141 0586 01F0      		breq .L65
 309:pattern_play.c **** 
 1142               		.loc 1 309 4 is_stmt 1 view .LVU395
 309:pattern_play.c **** 
 1143               		.loc 1 309 31 is_stmt 0 view .LVU396
 1144 0588 84EF      		ldi r24,lo8(-12)
 1145 058a 8D0D      		add r24,r13
 309:pattern_play.c **** 
 1146               		.loc 1 309 21 view .LVU397
 1147 058c 8093 0000 		sts next_pitch_shift,r24
 1148               	.L65:
 311:pattern_play.c **** 	  if (!is_notekey_led_blink(OCTAVE + curr_pitch_shift)) {
 1149               		.loc 1 311 2 is_stmt 1 view .LVU398
 311:pattern_play.c **** 	  if (!is_notekey_led_blink(OCTAVE + curr_pitch_shift)) {
 1150               		.loc 1 311 23 is_stmt 0 view .LVU399
 1151 0590 8091 0000 		lds r24,curr_pitch_shift
 311:pattern_play.c **** 	  if (!is_notekey_led_blink(OCTAVE + curr_pitch_shift)) {
 1152               		.loc 1 311 5 view .LVU400
 1153 0594 1816      		cp __zero_reg__,r24
 1154 0596 04F0      		brlt .L67
 312:pattern_play.c **** 	    clear_blinking_leds();
 1155               		.loc 1 312 4 is_stmt 1 view .LVU401
 312:pattern_play.c **** 	    clear_blinking_leds();
 1156               		.loc 1 312 9 is_stmt 0 view .LVU402
 1157 0598 845F      		subi r24,lo8(-(12))
 1158 059a 0E94 0000 		call is_notekey_led_blink
 1159               	.LVL105:
 312:pattern_play.c **** 	    clear_blinking_leds();
 1160               		.loc 1 312 7 view .LVU403
 1161 059e 8111      		cpse r24,__zero_reg__
 1162 05a0 00C0      		rjmp .L67
 313:pattern_play.c **** 	    set_notekey_led_blink(OCTAVE + curr_pitch_shift);
 1163               		.loc 1 313 6 is_stmt 1 view .LVU404
 1164 05a2 0E94 0000 		call clear_blinking_leds
 1165               	.LVL106:
 314:pattern_play.c **** 	  }
 1166               		.loc 1 314 6 view .LVU405
 1167 05a6 8091 0000 		lds r24,curr_pitch_shift
 1168 05aa 845F      		subi r24,lo8(-(12))
 1169 05ac 0E94 0000 		call set_notekey_led_blink
 1170               	.LVL107:
 1171               	.L67:
 317:pattern_play.c **** 	  set_notekey_led(OCTAVE + next_pitch_shift);
 1172               		.loc 1 317 2 view .LVU406
 317:pattern_play.c **** 	  set_notekey_led(OCTAVE + next_pitch_shift);
 1173               		.loc 1 317 23 is_stmt 0 view .LVU407
 1174 05b0 8091 0000 		lds r24,next_pitch_shift
 317:pattern_play.c **** 	  set_notekey_led(OCTAVE + next_pitch_shift);
 1175               		.loc 1 317 5 view .LVU408
 1176 05b4 9091 0000 		lds r25,curr_pitch_shift
 1177 05b8 8917      		cp r24,r25
 1178 05ba 01F4      		brne .+2
 1179 05bc 00C0      		rjmp .L63
 318:pattern_play.c ****       }
 1180               		.loc 1 318 4 is_stmt 1 view .LVU409
 1181 05be 845F      		subi r24,lo8(-(12))
 1182 05c0 00C0      		rjmp .L282
 1183               	.LVL108:
 1184               	.L69:
 318:pattern_play.c ****       }
 1185               		.loc 1 318 4 is_stmt 0 view .LVU410
 1186               	.LBE3:
 327:pattern_play.c **** 	// clear any pitch shift indicators
 1187               		.loc 1 327 36 discriminator 1 view .LVU411
 1188 05c2 8EE0      		ldi r24,lo8(14)
 1189 05c4 0E94 0000 		call just_released
 1190               	.LVL109:
 327:pattern_play.c **** 	// clear any pitch shift indicators
 1191               		.loc 1 327 33 discriminator 1 view .LVU412
 1192 05c8 8111      		cpse r24,__zero_reg__
 1193 05ca 00C0      		rjmp .L71
 1194 05cc 00C0      		rjmp .L70
 1195               	.LVL110:
 1196               	.L77:
 349:pattern_play.c **** 
 1197               		.loc 1 349 6 is_stmt 1 view .LVU413
 349:pattern_play.c **** 
 1198               		.loc 1 349 22 is_stmt 0 view .LVU414
 1199 05ce 9770      		andi r25,lo8(7)
 1200 05d0 00C0      		rjmp .L283
 1201               	.LVL111:
 1202               	.L81:
 378:pattern_play.c ****         int8_t midi_ps = midi_getchar() - 0x3C;
 1203               		.loc 1 378 5 is_stmt 1 view .LVU415
 378:pattern_play.c ****         int8_t midi_ps = midi_getchar() - 0x3C;
 1204               		.loc 1 378 24 is_stmt 0 view .LVU416
 1205 05d2 8091 0000 		lds r24,midi_cmd
 1206 05d6 8295      		swap r24
 1207 05d8 8F70      		andi r24,lo8(15)
 378:pattern_play.c ****         int8_t midi_ps = midi_getchar() - 0x3C;
 1208               		.loc 1 378 8 view .LVU417
 1209 05da 8930      		cpi r24,lo8(9)
 1210 05dc 01F0      		breq .+2
 1211 05de 00C0      		rjmp .L83
 378:pattern_play.c ****         int8_t midi_ps = midi_getchar() - 0x3C;
 1212               		.loc 1 378 46 discriminator 1 view .LVU418
 1213 05e0 8091 0000 		lds r24,midi_cmd
 378:pattern_play.c ****         int8_t midi_ps = midi_getchar() - 0x3C;
 1214               		.loc 1 378 32 discriminator 1 view .LVU419
 1215 05e4 8F70      		andi r24,lo8(15)
 1216 05e6 9091 0000 		lds r25,midi_in_addr
 1217 05ea 9813      		cpse r25,r24
 1218 05ec 00C0      		rjmp .L83
 1219               	.LBB4:
 379:pattern_play.c ****         if (midi_ps < 13 && midi_ps > -13) next_pitch_shift = midi_ps;
 1220               		.loc 1 379 9 is_stmt 1 view .LVU420
 379:pattern_play.c ****         if (midi_ps < 13 && midi_ps > -13) next_pitch_shift = midi_ps;
 1221               		.loc 1 379 26 is_stmt 0 view .LVU421
 1222 05ee 0E94 0000 		call midi_getchar
 1223               	.LVL112:
 380:pattern_play.c ****     }
 1224               		.loc 1 380 9 is_stmt 1 view .LVU422
 380:pattern_play.c ****     }
 1225               		.loc 1 380 26 is_stmt 0 view .LVU423
 1226 05f2 90ED      		ldi r25,lo8(-48)
 1227 05f4 980F      		add r25,r24
 380:pattern_play.c ****     }
 1228               		.loc 1 380 12 view .LVU424
 1229 05f6 9931      		cpi r25,lo8(25)
 1230 05f8 00F0      		brlo .+2
 1231 05fa 00C0      		rjmp .L83
 380:pattern_play.c ****     }
 1232               		.loc 1 380 44 is_stmt 1 discriminator 1 view .LVU425
 379:pattern_play.c ****         if (midi_ps < 13 && midi_ps > -13) next_pitch_shift = midi_ps;
 1233               		.loc 1 379 41 is_stmt 0 discriminator 1 view .LVU426
 1234 05fc 8C53      		subi r24,lo8(-(-60))
 1235               	.LVL113:
 380:pattern_play.c ****     }
 1236               		.loc 1 380 61 discriminator 1 view .LVU427
 1237 05fe 8093 0000 		sts next_pitch_shift,r24
 1238 0602 00C0      		rjmp .L83
 1239               	.LVL114:
 1240               	.L88:
 380:pattern_play.c ****     }
 1241               		.loc 1 380 61 discriminator 1 view .LVU428
 1242               	.LBE4:
 394:pattern_play.c **** 	}
 1243               		.loc 1 394 4 is_stmt 1 discriminator 2 view .LVU429
 394:pattern_play.c **** 	}
 1244               		.loc 1 394 29 is_stmt 0 discriminator 2 view .LVU430
 1245 0604 8081      		ld r24,Z
 394:pattern_play.c **** 	}
 1246               		.loc 1 394 4 discriminator 2 view .LVU431
 1247 0606 8F5F      		subi r24,lo8(-(1))
 1248 0608 0E94 0000 		call set_numkey_led
 1249               	.LVL115:
 394:pattern_play.c **** 	}
 1250               		.loc 1 394 4 discriminator 2 view .LVU432
 1251 060c 8FEF      		ldi r24,-1
 1252 060e C81A      		sub r12,r24
 1253 0610 D80A      		sbc r13,r24
 1254               	.LVL116:
 391:pattern_play.c **** 	  if (next_chain[i] > 8)
 1255               		.loc 1 391 2 discriminator 2 view .LVU433
 1256 0612 90E2      		ldi r25,32
 1257 0614 C916      		cp r12,r25
 1258 0616 D104      		cpc r13,__zero_reg__
 1259 0618 01F0      		breq .+2
 1260 061a 00C0      		rjmp .L89
 1261 061c 00C0      		rjmp .L90
 1262               	.LVL117:
 1263               	.L152:
 391:pattern_play.c **** 	  if (next_chain[i] > 8)
 1264               		.loc 1 391 2 discriminator 2 view .LVU434
 1265 061e B12C      		mov r11,__zero_reg__
 1266 0620 A12C      		mov r10,__zero_reg__
 1267               	.L86:
 1268               	.LVL118:
 398:pattern_play.c **** 	    break;
 1269               		.loc 1 398 4 is_stmt 1 view .LVU435
 398:pattern_play.c **** 	    break;
 1270               		.loc 1 398 18 is_stmt 0 view .LVU436
 1271 0622 F501      		movw r30,r10
 1272 0624 E050      		subi r30,lo8(-(curr_chain))
 1273 0626 F040      		sbci r31,hi8(-(curr_chain))
 1274 0628 6F01      		movw r12,r30
 1275 062a 8081      		ld r24,Z
 398:pattern_play.c **** 	    break;
 1276               		.loc 1 398 7 view .LVU437
 1277 062c 8930      		cpi r24,lo8(9)
 1278 062e 00F0      		brlo .+2
 1279 0630 00C0      		rjmp .L90
 400:pattern_play.c **** 	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
 1280               		.loc 1 400 4 is_stmt 1 view .LVU438
 400:pattern_play.c **** 	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
 1281               		.loc 1 400 7 is_stmt 0 view .LVU439
 1282 0632 8091 0000 		lds r24,playing
 1283 0636 8823      		tst r24
 1284 0638 01F0      		breq .L91
 400:pattern_play.c **** 	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
 1285               		.loc 1 400 30 discriminator 1 view .LVU440
 1286 063a 9081      		ld r25,Z
 400:pattern_play.c **** 	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
 1287               		.loc 1 400 47 discriminator 1 view .LVU441
 1288 063c E091 0000 		lds r30,curr_chain_index
 1289 0640 F0E0      		ldi r31,0
 1290 0642 E050      		subi r30,lo8(-(curr_chain))
 1291 0644 F040      		sbci r31,hi8(-(curr_chain))
 1292 0646 8081      		ld r24,Z
 400:pattern_play.c **** 	    if (! is_numkey_led_blink(curr_chain[i]+1) ) 
 1293               		.loc 1 400 16 discriminator 1 view .LVU442
 1294 0648 9813      		cpse r25,r24
 1295 064a 00C0      		rjmp .L91
 401:pattern_play.c **** 	      {
 1296               		.loc 1 401 6 is_stmt 1 view .LVU443
 401:pattern_play.c **** 	      {
 1297               		.loc 1 401 42 is_stmt 0 view .LVU444
 1298 064c F601      		movw r30,r12
 1299 064e 8081      		ld r24,Z
 401:pattern_play.c **** 	      {
 1300               		.loc 1 401 12 view .LVU445
 1301 0650 8F5F      		subi r24,lo8(-(1))
 1302 0652 0E94 0000 		call is_numkey_led_blink
 1303               	.LVL119:
 401:pattern_play.c **** 	      {
 1304               		.loc 1 401 9 view .LVU446
 1305 0656 8111      		cpse r24,__zero_reg__
 1306 0658 00C0      		rjmp .L92
 404:pattern_play.c **** 		set_numkey_led_blink(curr_chain[i]+1); 
 1307               		.loc 1 404 3 is_stmt 1 view .LVU447
 404:pattern_play.c **** 		set_numkey_led_blink(curr_chain[i]+1); 
 1308               		.loc 1 404 30 is_stmt 0 view .LVU448
 1309 065a F601      		movw r30,r12
 1310 065c 8081      		ld r24,Z
 404:pattern_play.c **** 		set_numkey_led_blink(curr_chain[i]+1); 
 1311               		.loc 1 404 3 view .LVU449
 1312 065e 8F5F      		subi r24,lo8(-(1))
 1313 0660 0E94 0000 		call clear_numkey_led
 1314               	.LVL120:
 405:pattern_play.c **** 	      }
 1315               		.loc 1 405 3 is_stmt 1 view .LVU450
 405:pattern_play.c **** 	      }
 1316               		.loc 1 405 34 is_stmt 0 view .LVU451
 1317 0664 F601      		movw r30,r12
 1318 0666 8081      		ld r24,Z
 405:pattern_play.c **** 	      }
 1319               		.loc 1 405 3 view .LVU452
 1320 0668 8F5F      		subi r24,lo8(-(1))
 1321 066a 0E94 0000 		call set_numkey_led_blink
 1322               	.LVL121:
 1323               	.L92:
 405:pattern_play.c **** 	      }
 1324               		.loc 1 405 3 view .LVU453
 1325 066e FFEF      		ldi r31,-1
 1326 0670 AF1A      		sub r10,r31
 1327 0672 BF0A      		sbc r11,r31
 1328               	.LVL122:
 397:pattern_play.c **** 	  if (curr_chain[i] > 8)
 1329               		.loc 1 397 2 discriminator 2 view .LVU454
 1330 0674 20E2      		ldi r18,32
 1331 0676 A216      		cp r10,r18
 1332 0678 B104      		cpc r11,__zero_reg__
 1333 067a 01F4      		brne .L86
 1334 067c 00C0      		rjmp .L90
 1335               	.LVL123:
 1336               	.L91:
 409:pattern_play.c **** 	      clear_blinking_leds();
 1337               		.loc 1 409 6 is_stmt 1 view .LVU455
 409:pattern_play.c **** 	      clear_blinking_leds();
 1338               		.loc 1 409 40 is_stmt 0 view .LVU456
 1339 067e F601      		movw r30,r12
 1340 0680 8081      		ld r24,Z
 409:pattern_play.c **** 	      clear_blinking_leds();
 1341               		.loc 1 409 10 view .LVU457
 1342 0682 8F5F      		subi r24,lo8(-(1))
 1343 0684 0E94 0000 		call is_numkey_led_blink
 1344               	.LVL124:
 409:pattern_play.c **** 	      clear_blinking_leds();
 1345               		.loc 1 409 9 view .LVU458
 1346 0688 8111      		cpse r24,__zero_reg__
 410:pattern_play.c **** 	    // all other patterns in chain solid
 1347               		.loc 1 410 8 is_stmt 1 view .LVU459
 1348 068a 0E94 0000 		call clear_blinking_leds
 1349               	.LVL125:
 1350               	.L93:
 412:pattern_play.c **** 	  }
 1351               		.loc 1 412 6 view .LVU460
 412:pattern_play.c **** 	  }
 1352               		.loc 1 412 31 is_stmt 0 view .LVU461
 1353 068e F601      		movw r30,r12
 1354 0690 8081      		ld r24,Z
 412:pattern_play.c **** 	  }
 1355               		.loc 1 412 6 view .LVU462
 1356 0692 8F5F      		subi r24,lo8(-(1))
 1357 0694 0E94 0000 		call set_numkey_led
 1358               	.LVL126:
 1359 0698 00C0      		rjmp .L92
 1360               	.LVL127:
 1361               	.L94:
 421:pattern_play.c **** 	       playing) ||
 1362               		.loc 1 421 38 discriminator 1 view .LVU463
 1363 069a 81E0      		ldi r24,lo8(1)
 1364 069c 0E94 0000 		call just_released
 1365               	.LVL128:
 421:pattern_play.c **** 	       playing) ||
 1366               		.loc 1 421 35 discriminator 1 view .LVU464
 1367 06a0 8823      		tst r24
 1368 06a2 01F4      		brne .+2
 1369 06a4 00C0      		rjmp .L97
 421:pattern_play.c **** 	       playing) ||
 1370               		.loc 1 421 60 discriminator 2 view .LVU465
 1371 06a6 8091 0000 		lds r24,playing
 1372 06aa 8823      		tst r24
 1373 06ac 01F4      		brne .+2
 1374 06ae 00C0      		rjmp .L97
 1375               	.L100:
 428:pattern_play.c **** 	play_loaded_pattern = FALSE;
 1376               		.loc 1 428 2 is_stmt 1 view .LVU466
 428:pattern_play.c **** 	play_loaded_pattern = FALSE;
 1377               		.loc 1 428 10 is_stmt 0 view .LVU467
 1378 06b0 1092 0000 		sts playing,__zero_reg__
 429:pattern_play.c **** 	loop = FALSE;
 1379               		.loc 1 429 2 is_stmt 1 view .LVU468
 429:pattern_play.c **** 	loop = FALSE;
 1380               		.loc 1 429 22 is_stmt 0 view .LVU469
 1381 06b4 1092 0000 		sts play_loaded_pattern,__zero_reg__
 430:pattern_play.c ****     loop_countdown = FALSE;
 1382               		.loc 1 430 2 is_stmt 1 view .LVU470
 430:pattern_play.c ****     loop_countdown = FALSE;
 1383               		.loc 1 430 7 is_stmt 0 view .LVU471
 1384 06b8 1092 0000 		sts loop,__zero_reg__
 431:pattern_play.c ****     loop_start = 1;
 1385               		.loc 1 431 5 is_stmt 1 view .LVU472
 431:pattern_play.c ****     loop_start = 1;
 1386               		.loc 1 431 20 is_stmt 0 view .LVU473
 1387 06bc 1092 0000 		sts loop_countdown,__zero_reg__
 432:pattern_play.c ****     loop_end = PATT_LENGTH;
 1388               		.loc 1 432 5 is_stmt 1 view .LVU474
 432:pattern_play.c ****     loop_end = PATT_LENGTH;
 1389               		.loc 1 432 16 is_stmt 0 view .LVU475
 1390 06c0 0093 0000 		sts loop_start,r16
 433:pattern_play.c ****     countdown = 0;
 1391               		.loc 1 433 5 is_stmt 1 view .LVU476
 433:pattern_play.c ****     countdown = 0;
 1392               		.loc 1 433 14 is_stmt 0 view .LVU477
 1393 06c4 8091 0000 		lds r24,PATT_LENGTH
 1394 06c8 8093 0000 		sts loop_end,r24
 434:pattern_play.c **** 	note_off(0);
 1395               		.loc 1 434 5 is_stmt 1 view .LVU478
 434:pattern_play.c **** 	note_off(0);
 1396               		.loc 1 434 15 is_stmt 0 view .LVU479
 1397 06cc 1092 0000 		sts countdown,__zero_reg__
 435:pattern_play.c **** 	midi_stop();
 1398               		.loc 1 435 2 is_stmt 1 view .LVU480
 1399 06d0 80E0      		ldi r24,0
 1400 06d2 0E94 0000 		call note_off
 1401               	.LVL129:
 436:pattern_play.c **** 	if (sync != DIN_SYNC) 
 1402               		.loc 1 436 2 view .LVU481
 1403 06d6 0E94 0000 		call midi_stop
 1404               	.LVL130:
 437:pattern_play.c **** 	  dinsync_stop();
 1405               		.loc 1 437 2 view .LVU482
 437:pattern_play.c **** 	  dinsync_stop();
 1406               		.loc 1 437 5 is_stmt 0 view .LVU483
 1407 06da 8091 0000 		lds r24,sync
 1408 06de 8130      		cpi r24,lo8(1)
 1409 06e0 01F4      		brne .L98
 1410               	.L99:
 440:pattern_play.c **** 	clear_blinking_leds();
 1411               		.loc 1 440 2 is_stmt 1 view .LVU484
 1412 06e2 81E2      		ldi r24,lo8(33)
 1413 06e4 0E94 0000 		call clear_led
 1414               	.LVL131:
 441:pattern_play.c **** 	clear_bank_leds();
 1415               		.loc 1 441 2 view .LVU485
 1416 06e8 0E94 0000 		call clear_blinking_leds
 1417               	.LVL132:
 442:pattern_play.c **** 	if (ANYPATTERNPLAYFUNC)	
 1418               		.loc 1 442 2 view .LVU486
 1419 06ec 0E94 0000 		call clear_bank_leds
 1420               	.LVL133:
 443:pattern_play.c **** 	  set_bank_led(bank);
 1421               		.loc 1 443 2 view .LVU487
 443:pattern_play.c **** 	  set_bank_led(bank);
 1422               		.loc 1 443 6 is_stmt 0 view .LVU488
 1423 06f0 8091 0000 		lds r24,function
 1424 06f4 8B30      		cpi r24,lo8(11)
 1425 06f6 01F0      		breq .L104
 443:pattern_play.c **** 	  set_bank_led(bank);
 1426               		.loc 1 443 6 discriminator 2 view .LVU489
 1427 06f8 877F      		andi r24,lo8(-9)
 1428 06fa 8730      		cpi r24,lo8(7)
 1429 06fc 01F4      		brne .L105
 1430               	.L104:
 444:pattern_play.c **** 	else
 1431               		.loc 1 444 4 is_stmt 1 view .LVU490
 1432 06fe 8091 0000 		lds r24,bank
 1433               	.L284:
 446:pattern_play.c **** 	if (function_changed) {
 1434               		.loc 1 446 4 is_stmt 0 view .LVU491
 1435 0702 0E94 0000 		call set_bank_led
 1436               	.LVL134:
 447:pattern_play.c **** 	  live_edit = FALSE;
 1437               		.loc 1 447 2 is_stmt 1 view .LVU492
 447:pattern_play.c **** 	  live_edit = FALSE;
 1438               		.loc 1 447 5 is_stmt 0 view .LVU493
 1439 0706 8091 0000 		lds r24,function
 1440 070a 8715      		cp r24,r7
 1441 070c 01F0      		breq .L108
 448:pattern_play.c ****       curr_pitch_shift = next_pitch_shift = 0;
 1442               		.loc 1 448 4 is_stmt 1 view .LVU494
 448:pattern_play.c ****       curr_pitch_shift = next_pitch_shift = 0;
 1443               		.loc 1 448 14 is_stmt 0 view .LVU495
 1444 070e 1092 0000 		sts live_edit,__zero_reg__
 449:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 1445               		.loc 1 449 7 is_stmt 1 view .LVU496
 449:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 1446               		.loc 1 449 43 is_stmt 0 view .LVU497
 1447 0712 1092 0000 		sts next_pitch_shift,__zero_reg__
 449:pattern_play.c ****       all_accent = all_rest = all_slide = swing_it = 0;
 1448               		.loc 1 449 24 view .LVU498
 1449 0716 1092 0000 		sts curr_pitch_shift,__zero_reg__
 450:pattern_play.c ****       clear_all_leds();
 1450               		.loc 1 450 7 is_stmt 1 view .LVU499
 450:pattern_play.c ****       clear_all_leds();
 1451               		.loc 1 450 52 is_stmt 0 view .LVU500
 1452 071a 1092 0000 		sts swing_it,__zero_reg__
 450:pattern_play.c ****       clear_all_leds();
 1453               		.loc 1 450 41 view .LVU501
 1454 071e 1092 0000 		sts all_slide,__zero_reg__
 450:pattern_play.c ****       clear_all_leds();
 1455               		.loc 1 450 29 view .LVU502
 1456 0722 1092 0000 		sts all_rest,__zero_reg__
 450:pattern_play.c ****       clear_all_leds();
 1457               		.loc 1 450 18 view .LVU503
 1458 0726 1092 0000 		sts all_accent,__zero_reg__
 451:pattern_play.c ****       clock_leds();
 1459               		.loc 1 451 7 is_stmt 1 view .LVU504
 1460 072a 0E94 0000 		call clear_all_leds
 1461               	.LVL135:
 1462 072e 00C0      		rjmp .L286
 1463               	.L95:
 424:pattern_play.c **** 	 ((sync == DIN_SYNC) && dinsync_stopped()) ) 
 1464               		.loc 1 424 37 is_stmt 0 view .LVU505
 1465 0730 8091 0000 		lds r24,midi_cmd
 424:pattern_play.c **** 	 ((sync == DIN_SYNC) && dinsync_stopped()) ) 
 1466               		.loc 1 424 24 view .LVU506
 1467 0734 8C3F      		cpi r24,lo8(-4)
 1468 0736 01F4      		brne .+2
 1469 0738 00C0      		rjmp .L100
 1470               	.L109:
 457:pattern_play.c **** 	       ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
 1471               		.loc 1 457 15 view .LVU507
 1472 073a 8091 0000 		lds r24,sync
 456:pattern_play.c **** 	      ((sync == MIDI_SYNC) && 
 1473               		.loc 1 456 78 view .LVU508
 1474 073e 8230      		cpi r24,lo8(2)
 1475 0740 01F0      		breq .L101
 458:pattern_play.c **** 	      ((sync == DIN_SYNC) && dinsync_started()) )
 1476               		.loc 1 458 68 discriminator 1 view .LVU509
 1477 0742 8130      		cpi r24,lo8(1)
 1478 0744 01F4      		brne .L108
 459:pattern_play.c ****       {
 1479               		.loc 1 459 31 view .LVU510
 1480 0746 0E94 0000 		call dinsync_started
 1481               	.LVL136:
 459:pattern_play.c ****       {
 1482               		.loc 1 459 28 view .LVU511
 1483 074a 8111      		cpse r24,__zero_reg__
 1484 074c 00C0      		rjmp .L112
 1485 074e 00C0      		rjmp .L108
 1486               	.L98:
 438:pattern_play.c **** 
 1487               		.loc 1 438 4 is_stmt 1 view .LVU512
 1488 0750 0E94 0000 		call dinsync_stop
 1489               	.LVL137:
 1490 0754 00C0      		rjmp .L99
 1491               	.L105:
 446:pattern_play.c **** 	if (function_changed) {
 1492               		.loc 1 446 4 view .LVU513
 1493 0756 8091 0000 		lds r24,bank
 1494 075a 8770      		andi r24,lo8(7)
 1495 075c 00C0      		rjmp .L284
 1496               	.L101:
 458:pattern_play.c **** 	      ((sync == DIN_SYNC) && dinsync_started()) )
 1497               		.loc 1 458 20 is_stmt 0 view .LVU514
 1498 075e 8091 0000 		lds r24,midi_cmd
 457:pattern_play.c **** 	       ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
 1499               		.loc 1 457 29 view .LVU515
 1500 0762 8A3F      		cpi r24,lo8(-6)
 1501 0764 01F4      		brne .+2
 1502 0766 00C0      		rjmp .L112
 458:pattern_play.c **** 	      ((sync == DIN_SYNC) && dinsync_started()) )
 1503               		.loc 1 458 48 view .LVU516
 1504 0768 8091 0000 		lds r24,midi_cmd
 458:pattern_play.c **** 	      ((sync == DIN_SYNC) && dinsync_started()) )
 1505               		.loc 1 458 35 view .LVU517
 1506 076c 8B3F      		cpi r24,lo8(-5)
 1507 076e 01F4      		brne .+2
 1508 0770 00C0      		rjmp .L112
 1509               	.L108:
 504:pattern_play.c **** 	    function != EDIT_PATTERN_FUNC) {
 1510               		.loc 1 504 2 is_stmt 1 view .LVU518
 504:pattern_play.c **** 	    function != EDIT_PATTERN_FUNC) {
 1511               		.loc 1 504 5 is_stmt 0 view .LVU519
 1512 0772 8091 0000 		lds r24,live_edit
 1513 0776 8823      		tst r24
 1514 0778 01F0      		breq .L119
 504:pattern_play.c **** 	    function != EDIT_PATTERN_FUNC) {
 1515               		.loc 1 504 16 discriminator 1 view .LVU520
 1516 077a 8091 0000 		lds r24,function
 1517 077e 8330      		cpi r24,lo8(3)
 1518 0780 01F0      		breq .L119
 506:pattern_play.c **** 		  running_stepwrite = FALSE;
 1519               		.loc 1 506 5 is_stmt 1 view .LVU521
 506:pattern_play.c **** 		  running_stepwrite = FALSE;
 1520               		.loc 1 506 15 is_stmt 0 view .LVU522
 1521 0782 1092 0000 		sts live_edit,__zero_reg__
 507:pattern_play.c **** 		  clear_all_leds();
 1522               		.loc 1 507 5 is_stmt 1 view .LVU523
 507:pattern_play.c **** 		  clear_all_leds();
 1523               		.loc 1 507 23 is_stmt 0 view .LVU524
 1524 0786 1092 0000 		sts running_stepwrite,__zero_reg__
 508:pattern_play.c **** 		  set_led(LED_RS);
 1525               		.loc 1 508 5 is_stmt 1 view .LVU525
 1526 078a 0E94 0000 		call clear_all_leds
 1527               	.LVL138:
 509:pattern_play.c **** 	}
 1528               		.loc 1 509 5 view .LVU526
 1529 078e 81E2      		ldi r24,lo8(33)
 1530 0790 0E94 0000 		call set_led
 1531               	.LVL139:
 1532               	.L119:
 512:pattern_play.c **** 	  if (just_pressed(KEY_PREV)) {
 1533               		.loc 1 512 2 view .LVU527
 512:pattern_play.c **** 	  if (just_pressed(KEY_PREV)) {
 1534               		.loc 1 512 6 is_stmt 0 view .LVU528
 1535 0794 80E0      		ldi r24,0
 1536 0796 0E94 0000 		call is_pressed
 1537               	.LVL140:
 512:pattern_play.c **** 	  if (just_pressed(KEY_PREV)) {
 1538               		.loc 1 512 5 view .LVU529
 1539 079a 8823      		tst r24
 1540 079c 01F0      		breq .L121
 513:pattern_play.c **** 		curr_pattern_index = loop_start-1;
 1541               		.loc 1 513 4 is_stmt 1 view .LVU530
 513:pattern_play.c **** 		curr_pattern_index = loop_start-1;
 1542               		.loc 1 513 8 is_stmt 0 view .LVU531
 1543 079e 83E0      		ldi r24,lo8(3)
 1544 07a0 0E94 0000 		call just_pressed
 1545               	.LVL141:
 513:pattern_play.c **** 		curr_pattern_index = loop_start-1;
 1546               		.loc 1 513 7 view .LVU532
 1547 07a4 8823      		tst r24
 1548 07a6 01F0      		breq .L121
 514:pattern_play.c **** 	  }	
 1549               		.loc 1 514 3 is_stmt 1 view .LVU533
 514:pattern_play.c **** 	  }	
 1550               		.loc 1 514 34 is_stmt 0 view .LVU534
 1551 07a8 8091 0000 		lds r24,loop_start
 1552 07ac 8150      		subi r24,lo8(-(-1))
 514:pattern_play.c **** 	  }	
 1553               		.loc 1 514 22 view .LVU535
 1554 07ae 8093 0000 		sts curr_pattern_index,r24
 1555               	.L121:
 518:pattern_play.c **** 	
 1556               		.loc 1 518 2 is_stmt 1 view .LVU536
 518:pattern_play.c **** 	
 1557               		.loc 1 518 6 is_stmt 0 view .LVU537
 1558 07b2 87E1      		ldi r24,lo8(23)
 1559 07b4 0E94 0000 		call is_pressed
 1560               	.LVL142:
 518:pattern_play.c **** 	
 1561               		.loc 1 518 5 view .LVU538
 1562 07b8 8823      		tst r24
 1563 07ba 01F0      		breq .L123
 521:pattern_play.c **** 	  eighths = !eighths;
 1564               		.loc 1 521 2 is_stmt 1 view .LVU539
 521:pattern_play.c **** 	  eighths = !eighths;
 1565               		.loc 1 521 6 is_stmt 0 view .LVU540
 1566 07bc 82E0      		ldi r24,lo8(2)
 1567 07be 0E94 0000 		call just_pressed
 1568               	.LVL143:
 521:pattern_play.c **** 	  eighths = !eighths;
 1569               		.loc 1 521 5 view .LVU541
 1570 07c2 8823      		tst r24
 1571 07c4 01F0      		breq .L124
 522:pattern_play.c **** 	  no_loop = TRUE;
 1572               		.loc 1 522 4 is_stmt 1 view .LVU542
 522:pattern_play.c **** 	  no_loop = TRUE;
 1573               		.loc 1 522 14 is_stmt 0 view .LVU543
 1574 07c6 81E0      		ldi r24,lo8(1)
 1575 07c8 9091 0000 		lds r25,eighths
 1576 07cc 9111      		cpse r25,__zero_reg__
 1577 07ce 80E0      		ldi r24,0
 1578               	.L125:
 522:pattern_play.c **** 	  no_loop = TRUE;
 1579               		.loc 1 522 12 view .LVU544
 1580 07d0 8093 0000 		sts eighths,r24
 523:pattern_play.c **** 	  }
 1581               		.loc 1 523 4 is_stmt 1 view .LVU545
 1582               	.LVL144:
 523:pattern_play.c **** 	  }
 1583               		.loc 1 523 12 is_stmt 0 view .LVU546
 1584 07d4 9924      		clr r9
 1585 07d6 9394      		inc r9
 1586               	.LVL145:
 1587               	.L124:
 527:pattern_play.c **** 	  if (start_point == 0) {
 1588               		.loc 1 527 4 is_stmt 1 view .LVU547
 527:pattern_play.c **** 	  if (start_point == 0) {
 1589               		.loc 1 527 8 is_stmt 0 view .LVU548
 1590 07d8 0E94 0000 		call get_lowest_loopkey_just_pressed
 1591               	.LVL146:
 528:pattern_play.c **** 	    start_point = i;
 1592               		.loc 1 528 4 is_stmt 1 view .LVU549
 528:pattern_play.c **** 	    start_point = i;
 1593               		.loc 1 528 7 is_stmt 0 view .LVU550
 1594 07dc 1123      		tst r17
 1595 07de 01F4      		brne .+2
 1596 07e0 00C0      		rjmp .L153
 531:pattern_play.c **** 	    end_point = i;
 1597               		.loc 1 531 9 is_stmt 1 view .LVU551
 531:pattern_play.c **** 	    end_point = i;
 1598               		.loc 1 531 12 is_stmt 0 view .LVU552
 1599 07e2 D111      		cpse r29,__zero_reg__
 1600 07e4 00C0      		rjmp .L126
 532:pattern_play.c **** 	  }
 1601               		.loc 1 532 16 view .LVU553
 1602 07e6 D82F      		mov r29,r24
 1603               	.LVL147:
 1604               	.L126:
 553:pattern_play.c **** 	  //080602
 1605               		.loc 1 553 2 is_stmt 1 view .LVU554
 553:pattern_play.c **** 	  //080602
 1606               		.loc 1 553 6 is_stmt 0 view .LVU555
 1607 07e8 88E0      		ldi r24,lo8(8)
 1608 07ea 0E94 0000 		call just_pressed
 1609               	.LVL148:
 553:pattern_play.c **** 	  //080602
 1610               		.loc 1 553 5 view .LVU556
 1611 07ee 8823      		tst r24
 1612 07f0 01F4      		brne .+2
 1613 07f2 00C0      		rjmp .L138
 553:pattern_play.c **** 	  //080602
 1614               		.loc 1 553 32 discriminator 1 view .LVU557
 1615 07f4 83E0      		ldi r24,lo8(3)
 1616 07f6 0E94 0000 		call is_pressed
 1617               	.LVL149:
 553:pattern_play.c **** 	  //080602
 1618               		.loc 1 553 29 discriminator 1 view .LVU558
 1619 07fa 8823      		tst r24
 1620 07fc 01F4      		brne .+2
 1621 07fe 00C0      		rjmp .L138
 555:pattern_play.c **** 
 1622               		.loc 1 555 4 is_stmt 1 view .LVU559
 1623               	.LVL150:
 557:pattern_play.c **** 	}
 1624               		.loc 1 557 4 view .LVU560
 557:pattern_play.c **** 	}
 1625               		.loc 1 557 25 is_stmt 0 view .LVU561
 1626 0800 0E94 0000 		call get_next_patt_idx
 1627               	.LVL151:
 557:pattern_play.c **** 	}
 1628               		.loc 1 557 23 view .LVU562
 1629 0804 8093 0000 		sts curr_pattern_index,r24
 1630               	.L154:
 561:pattern_play.c **** 
 1631               		.loc 1 561 11 view .LVU563
 1632 0808 C1E0      		ldi r28,lo8(1)
 1633 080a 00C0      		rjmp .L139
 1634               	.LVL152:
 1635               	.L115:
 469:pattern_play.c **** 	      }
 1636               		.loc 1 469 8 is_stmt 1 view .LVU564
 1637 080c 8091 0000 		lds r24,curr_bank
 1638 0810 00C0      		rjmp .L285
 1639               	.L114:
 472:pattern_play.c **** 	  curr_patt = track_buff[0];
 1640               		.loc 1 472 4 view .LVU565
 1641 0812 6091 0000 		lds r22,curr_chain
 1642 0816 8091 0000 		lds r24,bank
 1643 081a 8770      		andi r24,lo8(7)
 1644 081c 0E94 0000 		call load_track
 1645               	.LVL153:
 473:pattern_play.c **** 	  load_curr_patt(); // ignore pitch shift returned
 1646               		.loc 1 473 4 view .LVU566
 473:pattern_play.c **** 	  load_curr_patt(); // ignore pitch shift returned
 1647               		.loc 1 473 26 is_stmt 0 view .LVU567
 1648 0820 8091 0000 		lds r24,track_buff
 1649 0824 9091 0000 		lds r25,track_buff+1
 473:pattern_play.c **** 	  load_curr_patt(); // ignore pitch shift returned
 1650               		.loc 1 473 14 view .LVU568
 1651 0828 9093 0000 		sts curr_patt+1,r25
 1652 082c 8093 0000 		sts curr_patt,r24
 474:pattern_play.c **** 	}
 1653               		.loc 1 474 4 is_stmt 1 view .LVU569
 1654 0830 0E94 0000 		call load_curr_patt
 1655               	.LVL154:
 1656 0834 00C0      		rjmp .L116
 1657               	.L123:
 536:pattern_play.c **** 	    all_slide = !all_slide;
 1658               		.loc 1 536 4 view .LVU570
 536:pattern_play.c **** 	    all_slide = !all_slide;
 1659               		.loc 1 536 8 is_stmt 0 view .LVU571
 1660 0836 86E1      		ldi r24,lo8(22)
 1661 0838 0E94 0000 		call just_pressed
 1662               	.LVL155:
 536:pattern_play.c **** 	    all_slide = !all_slide;
 1663               		.loc 1 536 7 view .LVU572
 1664 083c 8823      		tst r24
 1665 083e 01F0      		breq .L127
 1666               	.L130:
 537:pattern_play.c **** //	    if (is_pressed(KEY_SLIDE)) set_led(LED_SLIDE);
 1667               		.loc 1 537 6 is_stmt 1 view .LVU573
 537:pattern_play.c **** //	    if (is_pressed(KEY_SLIDE)) set_led(LED_SLIDE);
 1668               		.loc 1 537 18 is_stmt 0 view .LVU574
 1669 0840 81E0      		ldi r24,lo8(1)
 1670 0842 9091 0000 		lds r25,all_slide
 1671 0846 9111      		cpse r25,__zero_reg__
 1672 0848 80E0      		ldi r24,0
 1673               	.L128:
 537:pattern_play.c **** //	    if (is_pressed(KEY_SLIDE)) set_led(LED_SLIDE);
 1674               		.loc 1 537 16 view .LVU575
 1675 084a 8093 0000 		sts all_slide,r24
 1676               	.L129:
 541:pattern_play.c **** 	    all_accent = !all_accent;
 1677               		.loc 1 541 4 is_stmt 1 view .LVU576
 541:pattern_play.c **** 	    all_accent = !all_accent;
 1678               		.loc 1 541 8 is_stmt 0 view .LVU577
 1679 084e 85E1      		ldi r24,lo8(21)
 1680 0850 0E94 0000 		call just_pressed
 1681               	.LVL156:
 541:pattern_play.c **** 	    all_accent = !all_accent;
 1682               		.loc 1 541 7 view .LVU578
 1683 0854 8823      		tst r24
 1684 0856 01F0      		breq .L131
 1685               	.L134:
 542:pattern_play.c **** //	    if (is_pressed(KEY_ACCENT)) set_led(LED_ACCENT);
 1686               		.loc 1 542 6 is_stmt 1 view .LVU579
 542:pattern_play.c **** //	    if (is_pressed(KEY_ACCENT)) set_led(LED_ACCENT);
 1687               		.loc 1 542 19 is_stmt 0 view .LVU580
 1688 0858 81E0      		ldi r24,lo8(1)
 1689 085a 9091 0000 		lds r25,all_accent
 1690 085e 9111      		cpse r25,__zero_reg__
 1691 0860 80E0      		ldi r24,0
 1692               	.L132:
 542:pattern_play.c **** //	    if (is_pressed(KEY_ACCENT)) set_led(LED_ACCENT);
 1693               		.loc 1 542 17 view .LVU581
 1694 0862 8093 0000 		sts all_accent,r24
 1695               	.L133:
 546:pattern_play.c **** 	    all_rest = !all_rest;
 1696               		.loc 1 546 4 is_stmt 1 view .LVU582
 546:pattern_play.c **** 	    all_rest = !all_rest;
 1697               		.loc 1 546 8 is_stmt 0 view .LVU583
 1698 0866 84E1      		ldi r24,lo8(20)
 1699 0868 0E94 0000 		call just_pressed
 1700               	.LVL157:
 546:pattern_play.c **** 	    all_rest = !all_rest;
 1701               		.loc 1 546 7 view .LVU584
 1702 086c 8823      		tst r24
 1703 086e 01F0      		breq .L135
 1704               	.L137:
 547:pattern_play.c **** //	    if (is_pressed(KEY_REST)) set_led(LED_REST);
 1705               		.loc 1 547 6 is_stmt 1 view .LVU585
 547:pattern_play.c **** //	    if (is_pressed(KEY_REST)) set_led(LED_REST);
 1706               		.loc 1 547 17 is_stmt 0 view .LVU586
 1707 0870 81E0      		ldi r24,lo8(1)
 1708 0872 9091 0000 		lds r25,all_rest
 1709 0876 9111      		cpse r25,__zero_reg__
 1710 0878 80E0      		ldi r24,0
 1711               	.L136:
 547:pattern_play.c **** //	    if (is_pressed(KEY_REST)) set_led(LED_REST);
 1712               		.loc 1 547 15 view .LVU587
 1713 087a 8093 0000 		sts all_rest,r24
 1714 087e 00C0      		rjmp .L126
 1715               	.L127:
 536:pattern_play.c **** 	    all_slide = !all_slide;
 1716               		.loc 1 536 35 discriminator 1 view .LVU588
 1717 0880 86E1      		ldi r24,lo8(22)
 1718 0882 0E94 0000 		call just_released
 1719               	.LVL158:
 536:pattern_play.c **** 	    all_slide = !all_slide;
 1720               		.loc 1 536 32 discriminator 1 view .LVU589
 1721 0886 8111      		cpse r24,__zero_reg__
 1722 0888 00C0      		rjmp .L130
 1723 088a 00C0      		rjmp .L129
 1724               	.L131:
 541:pattern_play.c **** 	    all_accent = !all_accent;
 1725               		.loc 1 541 36 discriminator 1 view .LVU590
 1726 088c 85E1      		ldi r24,lo8(21)
 1727 088e 0E94 0000 		call just_released
 1728               	.LVL159:
 541:pattern_play.c **** 	    all_accent = !all_accent;
 1729               		.loc 1 541 33 discriminator 1 view .LVU591
 1730 0892 8111      		cpse r24,__zero_reg__
 1731 0894 00C0      		rjmp .L134
 1732 0896 00C0      		rjmp .L133
 1733               	.L135:
 546:pattern_play.c **** 	    all_rest = !all_rest;
 1734               		.loc 1 546 34 discriminator 1 view .LVU592
 1735 0898 84E1      		ldi r24,lo8(20)
 1736 089a 0E94 0000 		call just_released
 1737               	.LVL160:
 546:pattern_play.c **** 	    all_rest = !all_rest;
 1738               		.loc 1 546 31 discriminator 1 view .LVU593
 1739 089e 8111      		cpse r24,__zero_reg__
 1740 08a0 00C0      		rjmp .L137
 1741 08a2 00C0      		rjmp .L126
 1742               	.LVL161:
 1743               	.L153:
 529:pattern_play.c **** 	  }
 1744               		.loc 1 529 18 view .LVU594
 1745 08a4 182F      		mov r17,r24
 1746               	.LVL162:
 529:pattern_play.c **** 	  }
 1747               		.loc 1 529 18 view .LVU595
 1748 08a6 00C0      		rjmp .L126
 1749               	.LVL163:
 1750               	.L138:
 559:pattern_play.c **** 	  //080602
 1751               		.loc 1 559 7 is_stmt 1 view .LVU596
 559:pattern_play.c **** 	  //080602
 1752               		.loc 1 559 11 is_stmt 0 view .LVU597
 1753 08a8 83E0      		ldi r24,lo8(3)
 1754 08aa 0E94 0000 		call just_pressed
 1755               	.LVL164:
 559:pattern_play.c **** 	  //080602
 1756               		.loc 1 559 10 view .LVU598
 1757 08ae 8823      		tst r24
 1758 08b0 01F0      		breq .L140
 559:pattern_play.c **** 	  //080602
 1759               		.loc 1 559 37 discriminator 1 view .LVU599
 1760 08b2 88E0      		ldi r24,lo8(8)
 1761 08b4 0E94 0000 		call is_pressed
 1762               	.LVL165:
 559:pattern_play.c **** 	  //080602
 1763               		.loc 1 559 34 discriminator 1 view .LVU600
 1764 08b8 8823      		tst r24
 1765 08ba 01F0      		breq .L140
 561:pattern_play.c **** 
 1766               		.loc 1 561 4 is_stmt 1 view .LVU601
 1767               	.LVL166:
 563:pattern_play.c **** 	  if (loop_countdown) 
 1768               		.loc 1 563 7 view .LVU602
 563:pattern_play.c **** 	  if (loop_countdown) 
 1769               		.loc 1 563 26 is_stmt 0 view .LVU603
 1770 08bc 8091 0000 		lds r24,prev_pattern_index
 1771 08c0 8093 0000 		sts curr_pattern_index,r24
 564:pattern_play.c **** 	    if (countdown < 0) 
 1772               		.loc 1 564 4 is_stmt 1 view .LVU604
 564:pattern_play.c **** 	    if (countdown < 0) 
 1773               		.loc 1 564 7 is_stmt 0 view .LVU605
 1774 08c4 8091 0000 		lds r24,loop_countdown
 1775 08c8 8823      		tst r24
 1776 08ca 01F4      		brne .+2
 1777 08cc 00C0      		rjmp .L154
 565:pattern_play.c **** 		  countdown--;
 1778               		.loc 1 565 6 is_stmt 1 view .LVU606
 565:pattern_play.c **** 		  countdown--;
 1779               		.loc 1 565 20 is_stmt 0 view .LVU607
 1780 08ce 8091 0000 		lds r24,countdown
 565:pattern_play.c **** 		  countdown--;
 1781               		.loc 1 565 9 view .LVU608
 1782 08d2 87FF      		sbrs r24,7
 1783 08d4 00C0      		rjmp .L141
 566:pattern_play.c **** 		else 
 1784               		.loc 1 566 5 is_stmt 1 view .LVU609
 566:pattern_play.c **** 		else 
 1785               		.loc 1 566 14 is_stmt 0 view .LVU610
 1786 08d6 8150      		subi r24,lo8(-(-1))
 1787               	.L288:
 568:pattern_play.c **** 	}
 1788               		.loc 1 568 14 view .LVU611
 1789 08d8 8093 0000 		sts countdown,r24
 1790 08dc 00C0      		rjmp .L154
 1791               	.L141:
 568:pattern_play.c **** 	}
 1792               		.loc 1 568 5 is_stmt 1 view .LVU612
 568:pattern_play.c **** 	}
 1793               		.loc 1 568 14 is_stmt 0 view .LVU613
 1794 08de 8F5F      		subi r24,lo8(-(1))
 1795 08e0 00C0      		rjmp .L288
 1796               	.LVL167:
 1797               	.L140:
 570:pattern_play.c **** //080602
 1798               		.loc 1 570 7 is_stmt 1 view .LVU614
 570:pattern_play.c **** //080602
 1799               		.loc 1 570 11 is_stmt 0 view .LVU615
 1800 08e2 88E0      		ldi r24,lo8(8)
 1801 08e4 0E94 0000 		call just_pressed
 1802               	.LVL168:
 570:pattern_play.c **** //080602
 1803               		.loc 1 570 10 view .LVU616
 1804 08e8 8823      		tst r24
 1805 08ea 01F0      		breq .L142
 572:pattern_play.c **** 	  else
 1806               		.loc 1 572 4 is_stmt 1 view .LVU617
 572:pattern_play.c **** 	  else
 1807               		.loc 1 572 7 is_stmt 0 view .LVU618
 1808 08ec CC23      		tst r28
 1809 08ee 01F0      		breq .L143
 1810               	.LVL169:
 1811               	.L145:
 572:pattern_play.c **** 	  else
 1812               		.loc 1 572 23 view .LVU619
 1813 08f0 C0E0      		ldi r28,0
 1814               	.L139:
 1815               	.LVL170:
 583:pattern_play.c **** 	  if (!no_loop)
 1816               		.loc 1 583 2 is_stmt 1 view .LVU620
 583:pattern_play.c **** 	  if (!no_loop)
 1817               		.loc 1 583 6 is_stmt 0 view .LVU621
 1818 08f2 87E1      		ldi r24,lo8(23)
 1819 08f4 0E94 0000 		call just_released
 1820               	.LVL171:
 583:pattern_play.c **** 	  if (!no_loop)
 1821               		.loc 1 583 5 view .LVU622
 1822 08f8 8823      		tst r24
 1823 08fa 01F4      		brne .+2
 1824 08fc 00C0      		rjmp .L29
 584:pattern_play.c **** 	  {
 1825               		.loc 1 584 4 is_stmt 1 view .LVU623
 584:pattern_play.c **** 	  {
 1826               		.loc 1 584 7 is_stmt 0 view .LVU624
 1827 08fe 9110      		cpse r9,__zero_reg__
 1828 0900 00C0      		rjmp .L155
 586:pattern_play.c **** 	  countdown = loop_end - curr_pattern_index - 1;
 1829               		.loc 1 586 4 is_stmt 1 view .LVU625
 586:pattern_play.c **** 	  countdown = loop_end - curr_pattern_index - 1;
 1830               		.loc 1 586 19 is_stmt 0 view .LVU626
 1831 0902 0093 0000 		sts loop_countdown,r16
 587:pattern_play.c **** 	  if (start_point == 0 && end_point == 0) {
 1832               		.loc 1 587 4 is_stmt 1 view .LVU627
 587:pattern_play.c **** 	  if (start_point == 0 && end_point == 0) {
 1833               		.loc 1 587 25 is_stmt 0 view .LVU628
 1834 0906 9091 0000 		lds r25,curr_pattern_index
 587:pattern_play.c **** 	  if (start_point == 0 && end_point == 0) {
 1835               		.loc 1 587 46 view .LVU629
 1836 090a 8091 0000 		lds r24,loop_end
 1837 090e 8150      		subi r24,lo8(-(-1))
 1838 0910 891B      		sub r24,r25
 587:pattern_play.c **** 	  if (start_point == 0 && end_point == 0) {
 1839               		.loc 1 587 14 view .LVU630
 1840 0912 8093 0000 		sts countdown,r24
 588:pattern_play.c **** 		loop_start = 1;
 1841               		.loc 1 588 4 is_stmt 1 view .LVU631
 588:pattern_play.c **** 		loop_start = 1;
 1842               		.loc 1 588 7 is_stmt 0 view .LVU632
 1843 0916 1111      		cpse r17,__zero_reg__
 1844 0918 00C0      		rjmp .L146
 588:pattern_play.c **** 		loop_start = 1;
 1845               		.loc 1 588 25 discriminator 1 view .LVU633
 1846 091a D111      		cpse r29,__zero_reg__
 1847 091c 00C0      		rjmp .L147
 589:pattern_play.c **** 		loop_end = PATT_LENGTH;
 1848               		.loc 1 589 3 is_stmt 1 view .LVU634
 589:pattern_play.c **** 		loop_end = PATT_LENGTH;
 1849               		.loc 1 589 14 is_stmt 0 view .LVU635
 1850 091e 0093 0000 		sts loop_start,r16
 590:pattern_play.c **** 	    loop = FALSE;		
 1851               		.loc 1 590 3 is_stmt 1 view .LVU636
 590:pattern_play.c **** 	    loop = FALSE;		
 1852               		.loc 1 590 12 is_stmt 0 view .LVU637
 1853 0922 8091 0000 		lds r24,PATT_LENGTH
 1854 0926 8093 0000 		sts loop_end,r24
 591:pattern_play.c **** 	  }
 1855               		.loc 1 591 6 is_stmt 1 view .LVU638
 591:pattern_play.c **** 	  }
 1856               		.loc 1 591 11 is_stmt 0 view .LVU639
 1857 092a 1092 0000 		sts loop,__zero_reg__
 1858               	.L287:
 1859 092e 9D2E      		mov r9,r29
 1860               	.LVL172:
 591:pattern_play.c **** 	  }
 1861               		.loc 1 591 11 view .LVU640
 1862 0930 00C0      		rjmp .L281
 1863               	.LVL173:
 1864               	.L143:
 574:pattern_play.c **** 	}
 1865               		.loc 1 574 4 is_stmt 1 view .LVU641
 574:pattern_play.c **** 	}
 1866               		.loc 1 574 8 is_stmt 0 view .LVU642
 1867 0932 8091 0000 		lds r24,new_swing_time
 1868 0936 8F5F      		subi r24,lo8(-(1))
 574:pattern_play.c **** 	}
 1869               		.loc 1 574 7 view .LVU643
 1870 0938 8630      		cpi r24,lo8(6)
 1871 093a 00F4      		brsh .L144
 1872 093c 8093 0000 		sts new_swing_time,r24
 1873 0940 00C0      		rjmp .L145
 1874               	.L144:
 574:pattern_play.c **** 	}
 1875               		.loc 1 574 30 is_stmt 1 discriminator 1 view .LVU644
 574:pattern_play.c **** 	}
 1876               		.loc 1 574 45 is_stmt 0 discriminator 1 view .LVU645
 1877 0942 6092 0000 		sts new_swing_time,r6
 1878 0946 00C0      		rjmp .L139
 1879               	.L142:
 576:pattern_play.c **** //080602
 1880               		.loc 1 576 7 is_stmt 1 view .LVU646
 576:pattern_play.c **** //080602
 1881               		.loc 1 576 11 is_stmt 0 view .LVU647
 1882 0948 83E0      		ldi r24,lo8(3)
 1883 094a 0E94 0000 		call just_pressed
 1884               	.LVL174:
 576:pattern_play.c **** //080602
 1885               		.loc 1 576 10 view .LVU648
 1886 094e 8823      		tst r24
 1887 0950 01F0      		breq .L139
 578:pattern_play.c **** 	  else
 1888               		.loc 1 578 4 is_stmt 1 view .LVU649
 578:pattern_play.c **** 	  else
 1889               		.loc 1 578 7 is_stmt 0 view .LVU650
 1890 0952 C111      		cpse r28,__zero_reg__
 1891 0954 00C0      		rjmp .L145
 580:pattern_play.c **** 	}
 1892               		.loc 1 580 4 is_stmt 1 view .LVU651
 580:pattern_play.c **** 	}
 1893               		.loc 1 580 22 is_stmt 0 view .LVU652
 1894 0956 C091 0000 		lds r28,new_swing_time
 1895               	.LVL175:
 580:pattern_play.c **** 	}
 1896               		.loc 1 580 7 view .LVU653
 1897 095a CC23      		tst r28
 1898 095c 01F0      		breq .L139
 580:pattern_play.c **** 	}
 1899               		.loc 1 580 22 view .LVU654
 1900 095e C150      		subi r28,lo8(-(-1))
 1901 0960 C093 0000 		sts new_swing_time,r28
 1902 0964 00C0      		rjmp .L145
 1903               	.LVL176:
 1904               	.L146:
 594:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 1905               		.loc 1 594 3 is_stmt 1 view .LVU655
 594:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 1906               		.loc 1 594 6 is_stmt 0 view .LVU656
 1907 0966 DD23      		tst r29
 1908 0968 01F0      		breq .L287
 1909               	.L147:
 594:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 1910               		.loc 1 594 49 discriminator 1 view .LVU657
 1911 096a 812F      		mov r24,r17
 1912 096c 8150      		subi r24,1
 1913 096e 990B      		sbc r25,r25
 1914 0970 FC01      		movw r30,r24
 594:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 1915               		.loc 1 594 37 discriminator 1 view .LVU658
 1916 0972 E050      		subi r30,lo8(-(pattern_buff))
 1917 0974 F040      		sbci r31,hi8(-(pattern_buff))
 1918 0976 8081      		ld r24,Z
 594:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 1919               		.loc 1 594 22 discriminator 1 view .LVU659
 1920 0978 8F3F      		cpi r24,lo8(-1)
 1921 097a 01F0      		breq .L158
 595:pattern_play.c ****      	  loop = TRUE;
 1922               		.loc 1 595 29 discriminator 2 view .LVU660
 1923 097c 8D2F      		mov r24,r29
 1924 097e 8150      		subi r24,1
 1925 0980 990B      		sbc r25,r25
 1926 0982 FC01      		movw r30,r24
 595:pattern_play.c ****      	  loop = TRUE;
 1927               		.loc 1 595 19 discriminator 2 view .LVU661
 1928 0984 E050      		subi r30,lo8(-(pattern_buff))
 1929 0986 F040      		sbci r31,hi8(-(pattern_buff))
 1930 0988 8081      		ld r24,Z
 594:pattern_play.c **** 		    pattern_buff[end_point-1] != 0xFF) {
 1931               		.loc 1 594 61 discriminator 2 view .LVU662
 1932 098a 8F3F      		cpi r24,lo8(-1)
 1933 098c 01F0      		breq .L158
 596:pattern_play.c **** 	      loop_start = start_point;
 1934               		.loc 1 596 9 is_stmt 1 view .LVU663
 596:pattern_play.c **** 	      loop_start = start_point;
 1935               		.loc 1 596 14 is_stmt 0 view .LVU664
 1936 098e 0093 0000 		sts loop,r16
 597:pattern_play.c **** 	      loop_end = end_point;
 1937               		.loc 1 597 8 is_stmt 1 view .LVU665
 597:pattern_play.c **** 	      loop_end = end_point;
 1938               		.loc 1 597 19 is_stmt 0 view .LVU666
 1939 0992 1093 0000 		sts loop_start,r17
 598:pattern_play.c ****         } 	
 1940               		.loc 1 598 8 is_stmt 1 view .LVU667
 598:pattern_play.c ****         } 	
 1941               		.loc 1 598 17 is_stmt 0 view .LVU668
 1942 0996 D093 0000 		sts loop_end,r29
 1943               	.L158:
 600:pattern_play.c **** 	  }
 1944               		.loc 1 600 30 view .LVU669
 1945 099a D0E0      		ldi r29,0
 1946               	.LVL177:
 1947               	.L281:
 600:pattern_play.c **** 	  }
 1948               		.loc 1 600 18 view .LVU670
 1949 099c 10E0      		ldi r17,0
 1950               	.LVL178:
 600:pattern_play.c **** 	  }
 1951               		.loc 1 600 18 view .LVU671
 1952 099e 00C0      		rjmp .L29
 1953               	.LVL179:
 1954               	.L73:
 337:pattern_play.c **** 	  clear_numkey_leds();
 1955               		.loc 1 337 2 is_stmt 1 view .LVU672
 338:pattern_play.c **** 	  buff_chain[0] = next_chain[0] = i - 1;
 1956               		.loc 1 338 4 view .LVU673
 1957 09a0 0E94 0000 		call clear_numkey_leds
 1958               	.LVL180:
 339:pattern_play.c **** 	  buff_chain[1] = next_chain[1] = 0xFF;
 1959               		.loc 1 339 4 view .LVU674
 339:pattern_play.c **** 	  buff_chain[1] = next_chain[1] = 0xFF;
 1960               		.loc 1 339 38 is_stmt 0 view .LVU675
 1961 09a4 DA94      		dec r13
 1962               	.LVL181:
 339:pattern_play.c **** 	  buff_chain[1] = next_chain[1] = 0xFF;
 1963               		.loc 1 339 34 view .LVU676
 1964 09a6 D092 0000 		sts next_chain,r13
 339:pattern_play.c **** 	  buff_chain[1] = next_chain[1] = 0xFF;
 1965               		.loc 1 339 18 view .LVU677
 1966 09aa D092 0000 		sts buff_chain,r13
 340:pattern_play.c **** 	  
 1967               		.loc 1 340 4 is_stmt 1 view .LVU678
 340:pattern_play.c **** 	  
 1968               		.loc 1 340 34 is_stmt 0 view .LVU679
 1969 09ae 8092 0000 		sts next_chain+1,r8
 340:pattern_play.c **** 	  
 1970               		.loc 1 340 18 view .LVU680
 1971 09b2 8092 0000 		sts buff_chain+1,r8
 342:pattern_play.c **** 	    for (i=0; i<MAX_CHAIN; i++) 
 1972               		.loc 1 342 4 is_stmt 1 view .LVU681
 342:pattern_play.c **** 	    for (i=0; i<MAX_CHAIN; i++) 
 1973               		.loc 1 342 7 is_stmt 0 view .LVU682
 1974 09b6 8091 0000 		lds r24,playing
 1975 09ba 8111      		cpse r24,__zero_reg__
 1976 09bc 00C0      		rjmp .L150
 1977 09be 90E0      		ldi r25,0
 1978 09c0 80E0      		ldi r24,0
 1979               	.LVL182:
 1980               	.L75:
 344:pattern_play.c **** 	} else {
 1981               		.loc 1 344 8 is_stmt 1 discriminator 3 view .LVU683
 344:pattern_play.c **** 	} else {
 1982               		.loc 1 344 34 is_stmt 0 discriminator 3 view .LVU684
 1983 09c2 FC01      		movw r30,r24
 1984 09c4 E050      		subi r30,lo8(-(next_chain))
 1985 09c6 F040      		sbci r31,hi8(-(next_chain))
 1986 09c8 2081      		ld r18,Z
 344:pattern_play.c **** 	} else {
 1987               		.loc 1 344 22 discriminator 3 view .LVU685
 1988 09ca FC01      		movw r30,r24
 1989 09cc E050      		subi r30,lo8(-(curr_chain))
 1990 09ce F040      		sbci r31,hi8(-(curr_chain))
 1991 09d0 2083      		st Z,r18
 1992               	.LVL183:
 344:pattern_play.c **** 	} else {
 1993               		.loc 1 344 22 discriminator 3 view .LVU686
 1994 09d2 0196      		adiw r24,1
 1995               	.LVL184:
 343:pattern_play.c **** 	      curr_chain[i] = next_chain[i];
 1996               		.loc 1 343 6 discriminator 3 view .LVU687
 1997 09d4 8032      		cpi r24,32
 1998 09d6 9105      		cpc r25,__zero_reg__
 1999 09d8 01F4      		brne .L75
 2000               	.LVL185:
 2001               	.L76:
 354:pattern_play.c **** 	  clear_bank_leds();
 2002               		.loc 1 354 2 is_stmt 1 view .LVU688
 355:pattern_play.c **** 	  set_bank_led(next_bank);
 2003               		.loc 1 355 4 view .LVU689
 2004 09da 0E94 0000 		call clear_bank_leds
 2005               	.LVL186:
 356:pattern_play.c **** 	  curr_pitch_shift = next_pitch_shift;
 2006               		.loc 1 356 4 view .LVU690
 2007 09de 8091 0000 		lds r24,next_bank
 2008 09e2 0E94 0000 		call set_bank_led
 2009               	.LVL187:
 357:pattern_play.c **** 	}
 2010               		.loc 1 357 4 view .LVU691
 357:pattern_play.c **** 	}
 2011               		.loc 1 357 21 is_stmt 0 view .LVU692
 2012 09e6 8091 0000 		lds r24,next_pitch_shift
 2013 09ea 8093 0000 		sts curr_pitch_shift,r24
 2014 09ee 00C0      		rjmp .L150
 2015               	.LVL188:
 2016               	.L74:
 337:pattern_play.c **** 	  clear_numkey_leds();
 2017               		.loc 1 337 2 is_stmt 1 view .LVU693
 346:pattern_play.c **** 	    next_bank = bank;
 2018               		.loc 1 346 4 view .LVU694
 346:pattern_play.c **** 	    next_bank = bank;
 2019               		.loc 1 346 8 is_stmt 0 view .LVU695
 2020 09f0 8091 0000 		lds r24,function
 2021 09f4 9091 0000 		lds r25,bank
 2022 09f8 8B30      		cpi r24,lo8(11)
 2023 09fa 01F0      		breq .L283
 346:pattern_play.c **** 	    next_bank = bank;
 2024               		.loc 1 346 8 discriminator 2 view .LVU696
 2025 09fc 877F      		andi r24,lo8(-9)
 2026 09fe 8730      		cpi r24,lo8(7)
 2027 0a00 01F0      		breq .+2
 2028 0a02 00C0      		rjmp .L77
 2029               	.L283:
 349:pattern_play.c **** 
 2030               		.loc 1 349 16 view .LVU697
 2031 0a04 9093 0000 		sts next_bank,r25
 351:pattern_play.c **** 	    curr_bank = next_bank;
 2032               		.loc 1 351 4 is_stmt 1 view .LVU698
 351:pattern_play.c **** 	    curr_bank = next_bank;
 2033               		.loc 1 351 7 is_stmt 0 view .LVU699
 2034 0a08 8091 0000 		lds r24,playing
 2035 0a0c 8111      		cpse r24,__zero_reg__
 2036 0a0e 00C0      		rjmp .L150
 352:pattern_play.c **** 	}
 2037               		.loc 1 352 6 is_stmt 1 view .LVU700
 352:pattern_play.c **** 	}
 2038               		.loc 1 352 16 is_stmt 0 view .LVU701
 2039 0a10 8091 0000 		lds r24,next_bank
 2040 0a14 8093 0000 		sts curr_bank,r24
 2041 0a18 00C0      		rjmp .L76
 2042               		.cfi_endproc
 2043               	.LFE1:
 2045               	.global	tap_tempo_timer
 2046               		.section .bss
 2049               	tap_tempo_timer:
 2050 0000 0000      		.zero	2
 2051               	.global	eighths
 2054               	eighths:
 2055 0002 00        		.zero	1
 2056               		.comm	prev_pattern_index,1,1
 2057               	.global	countdown
 2060               	countdown:
 2061 0003 00        		.zero	1
 2062               	.global	loop_end
 2063               		.data
 2066               	loop_end:
 2067 0000 10        		.byte	16
 2068               	.global	loop_start
 2071               	loop_start:
 2072 0001 01        		.byte	1
 2073               	.global	loop_countdown
 2074               		.section .bss
 2077               	loop_countdown:
 2078 0004 00        		.zero	1
 2079               	.global	loop
 2082               	loop:
 2083 0005 00        		.zero	1
 2084               	.global	live_edit
 2087               	live_edit:
 2088 0006 00        		.zero	1
 2089               	.global	new_swing_time
 2092               	new_swing_time:
 2093 0007 00        		.zero	1
 2094               	.global	swing_time
 2097               	swing_time:
 2098 0008 00        		.zero	1
 2099               		.comm	playing,1,1
 2100               	.global	next_bank
 2103               	next_bank:
 2104 0009 00        		.zero	1
 2105               	.global	curr_bank
 2108               	curr_bank:
 2109 000a 00        		.zero	1
 2110               	.global	all_rest
 2113               	all_rest:
 2114 000b 00        		.zero	1
 2115               	.global	all_slide
 2118               	all_slide:
 2119 000c 00        		.zero	1
 2120               	.global	all_accent
 2123               	all_accent:
 2124 000d 00        		.zero	1
 2125               	.global	PATT_LENGTH
 2126               		.data
 2129               	PATT_LENGTH:
 2130 0002 10        		.byte	16
 2131               	.global	buff_chain_len
 2132               		.section .bss
 2135               	buff_chain_len:
 2136 000e 00        		.zero	1
 2137               		.comm	buff_chain,32,1
 2138               		.comm	next_chain,32,1
 2139               		.comm	curr_chain_index,1,1
 2140               		.comm	curr_chain,32,1
 2141               		.text
 2142               	.Letext0:
 2143               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 2144               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 2145               		.file 4 "switch.h"
 2146               		.file 5 "led.h"
 2147               		.file 6 "midi.h"
 2148               		.file 7 "main.h"
 2149               		.file 8 "dinsync.h"
 2150               		.file 9 "pattern.h"
 2151               		.file 10 "track.h"
 2152               		.file 11 "synth.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pattern_play.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:12     .text:0000000000000000 chains_equiv
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:80     .text:0000000000000032 get_next_patt_idx
                            *COM*:0000000000000001 prev_pattern_index
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2082   .bss:0000000000000005 loop
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2077   .bss:0000000000000004 loop_countdown
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2066   .data:0000000000000000 loop_end
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2071   .data:0000000000000001 loop_start
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2060   .bss:0000000000000003 countdown
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:183    .text:00000000000000a8 do_patterntrack_play
                            *COM*:0000000000000020 curr_chain
                            *COM*:0000000000000020 next_chain
                            *COM*:0000000000000001 playing
                            *COM*:0000000000000001 curr_chain_index
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2097   .bss:0000000000000008 swing_time
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2087   .bss:0000000000000006 live_edit
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2129   .data:0000000000000002 PATT_LENGTH
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2108   .bss:000000000000000a curr_bank
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2103   .bss:0000000000000009 next_bank
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2118   .bss:000000000000000c all_slide
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2113   .bss:000000000000000b all_rest
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2123   .bss:000000000000000d all_accent
                            *COM*:0000000000000020 buff_chain
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2049   .bss:0000000000000000 tap_tempo_timer
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2135   .bss:000000000000000e buff_chain_len
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2054   .bss:0000000000000002 eighths
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccLDw9g5.s:2092   .bss:0000000000000007 new_swing_time

UNDEFINED SYMBOLS
curr_pattern_index
__prologue_saves__
function
sync
turn_on_tempo
dinsync_set_in
clear_all_leds
clear_blinking_leds
set_numkey_led
curr_track_index
curr_patt
next_pitch_shift
curr_pitch_shift
clear_bank_leds
bank
set_bank_led
read_switches
set_led_blink
dinsync_stop
midi_stop
swing_it
clock_leds
__epilogue_restores__
turn_off_tempo
dinsync_set_out
patt_location
edit_live
just_pressed
is_pressed
__udivmodhi4
change_tempo
clear_notekey_leds
set_led
just_released
clear_led
get_lowest_notekey_pressed
is_notekey_led_blink
set_notekey_led_blink
set_notekey_led
get_lowest_numkey_just_pressed
clock_ticks
dinsync_stopped
has_bank_knob_changed
load_pattern
curr_note
midi_cmd
note_counter
dinsync_counter
dinsync_clocked
play_loaded_pattern
midi_putchar
dinsync_start
get_lowest_numkey_pressed
midi_recv_cmd
midi_getchar
clear_numkey_leds
set_numkey_led_blink
display_curr_pitch_shift_ud
midi_in_addr
is_numkey_led_blink
clear_numkey_led
note_off
dinsync_started
running_stepwrite
get_lowest_loopkey_just_pressed
load_track
track_buff
load_curr_patt
pattern_buff
__do_copy_data
__do_clear_bss
