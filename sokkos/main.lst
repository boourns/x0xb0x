   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_4
  12               	__vector_4:
  13               	.LFB4:
  14               		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * The software for the x0xb0x is available for use in accordance with the 
   3:main.c        ****  * following open source license (MIT License). For more information about
   4:main.c        ****  * OS licensing, please visit -> http://www.opensource.org/
   5:main.c        ****  *
   6:main.c        ****  * For more information about the x0xb0x project, please visit
   7:main.c        ****  * -> http://www.ladyada.net/make/x0xb0x
   8:main.c        ****  *
   9:main.c        ****  *                                     *****
  10:main.c        ****  * Copyright (c) 2005 Limor Fried
  11:main.c        ****  *
  12:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a 
  13:main.c        ****  * copy of this software and associated documentation files (the "Software"), 
  14:main.c        ****  * to deal in the Software without restriction, including without limitation 
  15:main.c        ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  16:main.c        ****  * and/or sell copies of the Software, and to permit persons to whom the 
  17:main.c        ****  * Software is furnished to do so, subject to the following conditions:
  18:main.c        ****  *
  19:main.c        ****  * The above copyright notice and this permission notice shall be included in 
  20:main.c        ****  * all copies or substantial portions of the Software.
  21:main.c        ****  *
  22:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
  23:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
  24:main.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
  25:main.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
  26:main.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
  27:main.c        ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
  28:main.c        ****  * IN THE SOFTWARE.
  29:main.c        ****  *                                     *****
  30:main.c        ****  *
  31:main.c        ****  */
  32:main.c        **** 
  33:main.c        **** #include <avr/io.h>
  34:main.c        **** #include <avr/interrupt.h>
  35:main.c        **** #include <avr/signal.h>
  36:main.c        **** #include <stdio.h>
  37:main.c        **** #include "main.h"
  38:main.c        **** #include "led.h"
  39:main.c        **** #include "switch.h"
  40:main.c        **** #include "delay.h"
  41:main.c        **** #include "pattern.h"
  42:main.c        **** #include "track.h"
  43:main.c        **** #include "compcontrol.h"
  44:main.c        **** #include "keyboard.h"
  45:main.c        **** #include "midi.h"
  46:main.c        **** #include "eeprom.h"
  47:main.c        **** #include "synth.h"
  48:main.c        **** #include "dinsync.h"
  49:main.c        **** 
  50:main.c        **** #define UART_BAUDRATE 19200UL   
  51:main.c        **** #define MIDI_BAUDRATE 31250UL       // the MIDI spec baudrate
  52:main.c        **** uint8_t rand;
  53:main.c        **** 
  54:main.c        **** uint16_t tempo;
  55:main.c        **** uint16_t newtempo; // changed by the interrupt then updated to the current tempo?
  56:main.c        **** 
  57:main.c        **** uint8_t sync = INTERNAL_SYNC;
  58:main.c        **** 
  59:main.c        **** uint16_t timer3_init;  // the value timer 3 is initialized
  60:main.c        **** 
  61:main.c        **** extern volatile uint8_t bank, function;  // in switch.c
  62:main.c        **** extern uint8_t midi_addr;       // in midi.c
  63:main.c        **** 
  64:main.c        **** ///////////////////////////////////////// TEMPO
  65:main.c        **** uint8_t next_random_note;
  66:main.c        **** volatile uint8_t note_counter = 0;
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** extern int8_t curr_pitch_shift;
  70:main.c        **** extern int8_t next_pitch_shift;
  71:main.c        **** 
  72:main.c        **** // from track_edit.c
  73:main.c        **** extern volatile uint8_t curr_track_index;
  74:main.c        **** extern volatile uint8_t play_loaded_track;
  75:main.c        **** extern volatile uint16_t track_buff[TRACK_SIZE];    // the 'loaded' pattern buffer
  76:main.c        **** extern volatile uint16_t curr_patt;     // the current pattern playing in the track
  77:main.c        **** 
  78:main.c        **** // from pattern_edit.c
  79:main.c        **** extern volatile uint8_t curr_pattern_index;
  80:main.c        **** extern volatile uint8_t play_loaded_pattern; // are we playing?
  81:main.c        **** extern volatile uint8_t pattern_buff[PATT_SIZE];    // the 'loaded' pattern buffer
  82:main.c        **** uint8_t curr_note, prev_note = 0;
  83:main.c        **** 
  84:main.c        **** // from pattern_play.c
  85:main.c        **** extern volatile uint8_t curr_chain[MAX_CHAIN];
  86:main.c        **** extern volatile uint8_t next_chain[MAX_CHAIN];
  87:main.c        **** extern volatile uint8_t curr_chain_index;
  88:main.c        **** extern volatile uint8_t curr_bank, next_bank;
  89:main.c        **** extern volatile uint8_t all_accent, all_slide, all_rest; // all the time
  90:main.c        **** extern volatile uint8_t playing;
  91:main.c        **** extern volatile uint8_t swing_time;
  92:main.c        **** extern volatile uint8_t new_swing_time;
  93:main.c        **** 
  94:main.c        **** extern volatile uint8_t dinsync_counter;  // defined in dinsync.c
  95:main.c        **** 
  96:main.c        **** uint8_t swing_it = 0;
  97:main.c        **** extern uint8_t loop;
  98:main.c        **** extern uint8_t loop_end;
  99:main.c        **** extern uint8_t loop_start;
 100:main.c        **** uint8_t running_stepwrite = FALSE;
 101:main.c        **** extern uint8_t runstepwrite_pattidx;
 102:main.c        **** 
 103:main.c        **** /* 8th note stuff */
 104:main.c        **** extern uint8_t eighths;
 105:main.c        **** uint8_t skipit = FALSE;
 106:main.c        **** uint8_t runhalf = FALSE;
 107:main.c        **** uint8_t onemore = FALSE;
 108:main.c        **** 
 109:main.c        **** extern uint8_t PATT_LENGTH;
 110:main.c        **** /* */
 111:main.c        **** 
 112:main.c        **** // the 'tempo' interrupt! (on timer 3) 
 113:main.c        **** // gets called 2*4*DINSYNC_PPQ times per beat (192 calls per beat @ sync24)
 114:main.c        **** // fastest is 300BPM -> 1ms
 115:main.c        **** SIGNAL(SIG_OVERFLOW3) {
 116:main.c        ****   TCNT3 = timer3_init;  // FIXME, use CTC mode
 117:main.c        ****   do_tempo();
 118:main.c        **** }
 119:main.c        **** 
 120:main.c        **** void dispatch_note_off(uint8_t pitch_shift);
 121:main.c        **** void dispatch_note_on(uint8_t pitch_shift);
 122:main.c        **** void load_next_chain(uint8_t reset);
 123:main.c        **** 
 124:main.c        **** // for all intents and purposes, this is basically a software interrupt!
 125:main.c        **** // call sei() before returning, since interrupts are disabled during tempo
 126:main.c        **** void do_tempo(void) {
 127:main.c        ****   uint8_t curr_function = function;
 128:main.c        ****   uint8_t division_factor = PATT_LENGTH/4;
 129:main.c        ****     
 130:main.c        ****   cli();
 131:main.c        **** 
 132:main.c        ****   // if the sync is internal or whatever, we have to generate dinsync/midisync msgs
 133:main.c        **** //  if ((sync != MIDI_SYNC) && (sync != DIN_SYNC)) {// && (curr_function != KEYBOARD_MODE_FUNC)) {
 134:main.c        ****     if (dinsync_counter >= DINSYNC_PPQ/division_factor) {
 135:main.c        ****       dinsync_counter = 0;
 136:main.c        **** 	  if (swing_it) swing_time = new_swing_time;
 137:main.c        **** 	  if (!(note_counter & 0x1)) swing_it = !swing_it;
 138:main.c        **** 	}
 139:main.c        ****     // 24 pulses per quarter, increment
 140:main.c        **** 	if ((sync != MIDI_SYNC) && (sync != DIN_SYNC)) {
 141:main.c        ****     if (dinsync_counter & 0x1)
 142:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 143:main.c        ****     else {
 144:main.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
 145:main.c        ****       midi_putchar(MIDI_CLOCK);
 146:main.c        ****     }
 147:main.c        **** 	}
 148:main.c        ****     // make sure that all notes actually start on the zero count
 149:main.c        ****     // so that tempo and SYNC are aligned. 
 150:main.c        **** 
 151:main.c        **** 	if ((swing_it && dinsync_counter != swing_time) ||
 152:main.c        **** 		(!swing_it && dinsync_counter != 0)){
 153:main.c        **** 	    dinsync_counter++;
 154:main.c        **** 		sei();
 155:main.c        **** 		return;
 156:main.c        **** 	}
 157:main.c        **** 	dinsync_counter++;
 158:main.c        **** //  }
 159:main.c        **** 
 160:main.c        **** /* 8th note stuff */
 161:main.c        **** skipit = !skipit;
 162:main.c        **** 
 163:main.c        **** if ((!runhalf && !onemore) || !skipit){
 164:main.c        **** /* */
 165:main.c        **** 
 166:main.c        ****   // reset note counter
 167:main.c        ****   if( note_counter >= 8 )
 168:main.c        ****     note_counter = 0;
 169:main.c        ****   
 170:main.c        ****   if (note_counter & 0x1) {       // sixteenth notes
 171:main.c        ****   
 172:main.c        ****     switch(curr_function) {
 173:main.c        ****     case RANDOM_MODE_FUNC:
 174:main.c        ****       note_off(0);
 175:main.c        ****       midi_send_note_off(curr_note);
 176:main.c        ****       break;
 177:main.c        **** 
 178:main.c        ****     case EDIT_TRACK_FUNC:
 179:main.c        ****       if (play_loaded_pattern || play_loaded_track) {
 180:main.c        **** 	if (curr_note != 0xFF) {
 181:main.c        **** 	  note_off(((curr_note >> 7) & 0x1)  | all_slide);        // slide
 182:main.c        **** 	}
 183:main.c        ****       }
 184:main.c        ****       if (play_loaded_track) {
 185:main.c        **** 	// last note of this pattern this pattern?
 186:main.c        **** 	if ((curr_pattern_index >= PATT_LENGTH) ||
 187:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 188:main.c        **** 
 189:main.c        **** 	  curr_pattern_index = 0;          // start next pattern in chain
 190:main.c        **** 	  curr_track_index++;      // go to next patt in chain
 191:main.c        **** 	  // last pattern in this chain?
 192:main.c        **** 	  if ((curr_track_index >= TRACK_SIZE) ||
 193:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 194:main.c        **** 	    //putstring("track loop\n\r");
 195:main.c        **** 	    curr_track_index = 0;
 196:main.c        **** 	  }
 197:main.c        **** 
 198:main.c        **** 	  curr_patt = track_buff[curr_track_index];
 199:main.c        **** 	  if (curr_patt == END_OF_TRACK) {
 200:main.c        **** 	    // dont load the pattern, but make sure the pattern buffer wont play
 201:main.c        **** 	    pattern_buff[0] = END_OF_PATTERN;
 202:main.c        **** 	  } else {
 203:main.c        **** 	    curr_pitch_shift = load_curr_patt();
 204:main.c        **** 	    clear_bank_leds();
 205:main.c        **** 	  }
 206:main.c        **** 	}
 207:main.c        ****       }
 208:main.c        **** 	
 209:main.c        ****       break;
 210:main.c        **** 
 211:main.c        ****     case A_FUNC:
 212:main.c        ****     case EDIT_PATTERN_FUNC: 
 213:main.c        ****       if (play_loaded_pattern) {
 214:main.c        **** 		dispatch_note_off(curr_pitch_shift);
 215:main.c        **** 
 216:main.c        **** 	if ((curr_pattern_index >= PATT_LENGTH) || 
 217:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 218:main.c        **** 	  curr_pattern_index = 0;
 219:main.c        **** 	} 
 220:main.c        ****       }
 221:main.c        ****       break;
 222:main.c        **** 
 223:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 224:main.c        ****     case PLAY_PATTERN_DINSYNC_FUNC:
 225:main.c        ****     case PLAY_PATTERN_FUNC: 
 226:main.c        ****       if (playing) {
 227:main.c        **** 	    dispatch_note_off(curr_pitch_shift);
 228:main.c        **** 		
 229:main.c        **** 		
 230:main.c        **** 	  if (loop && curr_pattern_index == loop_start-1) {
 231:main.c        **** 	    curr_pitch_shift = next_pitch_shift;
 232:main.c        **** /* 8th note stuff */
 233:main.c        **** if (runhalf != eighths)
 234:main.c        **** {
 235:main.c        **** runhalf = eighths;
 236:main.c        **** skipit = runhalf;
 237:main.c        **** onemore = !skipit;
 238:main.c        **** }
 239:main.c        **** /* */
 240:main.c        **** 		if (!chains_equiv(next_chain, curr_chain))	{
 241:main.c        **** 		  curr_pattern_index = PATT_LENGTH;
 242:main.c        **** 		  loop_start = 1;
 243:main.c        **** 		  loop_end = PATT_LENGTH;
 244:main.c        **** 		  loop = FALSE;
 245:main.c        **** 		}
 246:main.c        **** 	  }
 247:main.c        **** 		
 248:main.c        **** 		
 249:main.c        **** 	// last note of this pattern?
 250:main.c        **** 	if ((curr_pattern_index >= PATT_LENGTH) ||
 251:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 252:main.c        **** 
 253:main.c        **** /* 8th note stuff */
 254:main.c        **** if (runhalf != eighths)
 255:main.c        **** {
 256:main.c        **** runhalf = eighths;
 257:main.c        **** skipit = runhalf;
 258:main.c        **** onemore = !skipit;
 259:main.c        **** }
 260:main.c        **** /* */
 261:main.c        **** 
 262:main.c        **** 	  curr_pattern_index = 0;          // start next pattern in chain
 263:main.c        **** 	  curr_chain_index++;      // go to next patt in chain
 264:main.c        **** 	  // last pattern in this chain?
 265:main.c        **** 	  if ((curr_chain_index >= MAX_CHAIN) ||
 266:main.c        **** 	      (curr_chain[curr_chain_index] == 0xFF)) {
 267:main.c        **** 	    curr_chain_index = 0;
 268:main.c        **** 	  }
 269:main.c        **** 	  	  
 270:main.c        **** 	  load_next_chain(TRUE);
 271:main.c        **** 
 272:main.c        **** 	  load_pattern(curr_bank, curr_chain[curr_chain_index]);
 273:main.c        **** 	}
 274:main.c        ****       }
 275:main.c        **** 	  	  
 276:main.c        ****       break;
 277:main.c        **** 
 278:main.c        **** 
 279:main.c        ****     case PLAY_TRACK_MIDISYNC_FUNC:
 280:main.c        ****     case PLAY_TRACK_DINSYNC_FUNC:
 281:main.c        ****     case PLAY_TRACK_FUNC: 
 282:main.c        ****       if (playing) {
 283:main.c        **** 	    dispatch_note_off(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 284:main.c        **** 
 285:main.c        **** 	// if this is the last note in the pattern, go to the next in track
 286:main.c        **** 	if ((curr_pattern_index >= PATT_LENGTH) || 
 287:main.c        **** 	    (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 288:main.c        **** 	  curr_pattern_index = 0;          // start next pattern in track
 289:main.c        **** 	  curr_track_index++;      // go to next patt in chain
 290:main.c        **** 	  /*
 291:main.c        **** 	  putstring("Next Pattern in track #"); putnum_ud(curr_track_index);
 292:main.c        **** 	  putstring(" = 0x"); putnum_ud(track_buff[curr_track_index]);
 293:main.c        **** 	  putstring("\n\r");
 294:main.c        **** 	  */
 295:main.c        **** 	  // if this is the end of the track, go to the next one in the chain
 296:main.c        **** 	  if ((curr_track_index >= TRACK_SIZE) ||
 297:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 298:main.c        **** 	    curr_track_index = 0;
 299:main.c        **** 	    curr_chain_index++;      // go to next track in chain
 300:main.c        **** 	    /*
 301:main.c        **** 	    putstring("Next track in chain #"); putnum_ud(curr_chain_index);
 302:main.c        **** 	    putstring(" = 0x"); putnum_ud(curr_chain[curr_chain_index]);
 303:main.c        **** 	    putstring("\n\r");
 304:main.c        **** 	    
 305:main.c        **** 	    putstring("curr chain = ");
 306:main.c        **** 	    for (i=0; i<MAX_CHAIN; i++) {
 307:main.c        **** 	      if (curr_chain[i] >= 8)
 308:main.c        **** 		break;
 309:main.c        **** 	      putnum_ud(curr_chain[i]);
 310:main.c        **** 	      uart_putchar(' ');
 311:main.c        **** 	    }
 312:main.c        **** 	    putstring("\n\r");
 313:main.c        **** 	    */
 314:main.c        **** 	    // last pattern in this chain, go to next chain
 315:main.c        **** 	    if ((curr_chain_index >= MAX_CHAIN) ||
 316:main.c        **** 		(curr_chain[curr_chain_index] == 0xFF)) {
 317:main.c        **** 	      curr_chain_index = 0;
 318:main.c        **** 		  
 319:main.c        **** 		  load_next_chain(FALSE);
 320:main.c        **** 	      	      
 321:main.c        **** 	    }
 322:main.c        **** 	    load_track(curr_bank, curr_chain[curr_chain_index]);
 323:main.c        **** 	  }
 324:main.c        **** 	  curr_patt = track_buff[curr_track_index];
 325:main.c        **** 	  load_curr_patt();
 326:main.c        **** 	}
 327:main.c        ****       }
 328:main.c        ****       break;
 329:main.c        ****       
 330:main.c        ****     } //end switch nr 1
 331:main.c        **** 	
 332:main.c        ****   } else {
 333:main.c        ****   /* break out */
 334:main.c        ****     prev_note = curr_note;
 335:main.c        **** 	
 336:main.c        ****     switch(curr_function) {
 337:main.c        ****     case RANDOM_MODE_FUNC:
 338:main.c        ****       curr_note = next_random_note;
 339:main.c        ****       next_random_note = random();
 340:main.c        **** 
 341:main.c        ****       note_on(curr_note & 0x3f, 
 342:main.c        **** 	      0, //next_random_note>>6) & 0x1,
 343:main.c        **** 	      0); //next_random_note>>7);
 344:main.c        ****       midi_send_note_on(curr_note);
 345:main.c        ****       break;
 346:main.c        **** 
 347:main.c        ****     case EDIT_TRACK_FUNC: 
 348:main.c        ****       if (play_loaded_pattern || play_loaded_track) {
 349:main.c        **** 
 350:main.c        **** 	if (play_loaded_pattern) {
 351:main.c        **** 	  // load up the next note
 352:main.c        **** 	  if ((curr_pattern_index >= PATT_LENGTH) || 
 353:main.c        **** 	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 354:main.c        **** 	    curr_pattern_index = 0;
 355:main.c        **** 	  }
 356:main.c        **** 	}
 357:main.c        **** 	
 358:main.c        **** 	curr_note = pattern_buff[curr_pattern_index];
 359:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 360:main.c        **** 	
 361:main.c        **** 	if (curr_note != 0xFF) {
 362:main.c        **** 	  dispatch_note_on(curr_pitch_shift);
 363:main.c        **** 	}
 364:main.c        ****       }
 365:main.c        ****       break;
 366:main.c        ****       
 367:main.c        ****     case A_FUNC:
 368:main.c        ****     case EDIT_PATTERN_FUNC: 
 369:main.c        ****       if (play_loaded_pattern) {
 370:main.c        **** 	// load up the next note
 371:main.c        **** 	clear_bank_leds();
 372:main.c        **** 	set_bank_led(curr_pattern_index);
 373:main.c        **** 	curr_note = pattern_buff[curr_pattern_index];
 374:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 375:main.c        **** 	//putstring("\n\rlocation "); putnum_ud(curr_pattern_index);
 376:main.c        **** 	//putstring(" note: 0x"); putnum_uh(curr_note);
 377:main.c        **** 	
 378:main.c        **** 	if (curr_note != 0xFF) {
 379:main.c        **** 	  if (!running_stepwrite) set_note_led(curr_note);
 380:main.c        **** 	  else set_bank_led(runstepwrite_pattidx);
 381:main.c        **** 	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 382:main.c        **** 	}
 383:main.c        ****       }
 384:main.c        ****       break;
 385:main.c        **** 
 386:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 387:main.c        ****     case PLAY_PATTERN_DINSYNC_FUNC:
 388:main.c        ****     case PLAY_PATTERN_FUNC: 
 389:main.c        ****       if (playing) {
 390:main.c        **** 	// in pattern play we show each note indexed in the pattern
 391:main.c        **** 	  clear_bank_leds();
 392:main.c        **** 	  set_bank_led(curr_pattern_index);
 393:main.c        ****       }
 394:main.c        ****       // no break here! continue on to shared track/pattern play code...
 395:main.c        ****     case PLAY_TRACK_MIDISYNC_FUNC:
 396:main.c        ****     case PLAY_TRACK_DINSYNC_FUNC:
 397:main.c        ****     case PLAY_TRACK_FUNC: 
 398:main.c        ****       if (playing) {
 399:main.c        **** 	// in track play, we blink the track location but thats
 400:main.c        **** 	// taken care of in the note off portion (when patterns are loaded)
 401:main.c        **** 
 402:main.c        **** 	curr_note = pattern_buff[curr_pattern_index];
 403:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 404:main.c        **** 
 405:main.c        **** 	// end of pattern? (either memory or 0xFF) 
 406:main.c        **** 	if (curr_note != 0xFF) {
 407:main.c        **** 	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 408:main.c        **** 	} 
 409:main.c        ****       }
 410:main.c        ****       break;
 411:main.c        ****     } //end switch nr 2
 412:main.c        **** 	
 413:main.c        ****   }
 414:main.c        **** 
 415:main.c        ****   // blinkie the tempo led & any other LEDs!
 416:main.c        ****   if (note_counter < 4) {
 417:main.c        ****     set_led(LED_TEMPO);
 418:main.c        ****     blink_leds_off();
 419:main.c        ****    }
 420:main.c        ****   else if (note_counter < 8) {
 421:main.c        ****     clear_led(LED_TEMPO);
 422:main.c        ****     blink_leds_on();
 423:main.c        ****   }
 424:main.c        **** 
 425:main.c        ****   clock_leds();
 426:main.c        **** 
 427:main.c        ****   note_counter++;
 428:main.c        **** 
 429:main.c        **** /* 8th note stuff */
 430:main.c        **** } else if (onemore) onemore = FALSE;
 431:main.c        **** /* */
 432:main.c        **** 
 433:main.c        ****   sei();
 434:main.c        **** }
 435:main.c        **** 
 436:main.c        **** ///////////////////////////////////// 'RTC' 1ms timer/counter
 437:main.c        **** volatile extern uint8_t debounce_timer;         // in switch.c
 438:main.c        **** volatile extern uint16_t tap_tempo_timer;        // in pattern_play.c
 439:main.c        **** volatile extern uint8_t last_dinsync_c;
 440:main.c        **** volatile extern int16_t dinsync_clocked, dinsync_clock_timeout;
 441:main.c        **** volatile extern uint16_t uart_timeout;
 442:main.c        **** 
 443:main.c        **** volatile uint8_t blinktimer = 0;
 444:main.c        **** 
 445:main.c        **** SIGNAL(SIG_OUTPUT_COMPARE0) {
 446:main.c        ****   uint8_t curr_dinsync_c;
 447:main.c        **** 
 448:main.c        ****   if (debounce_timer != 0xFF) 
 449:main.c        ****     debounce_timer++;
 450:main.c        ****   if (tap_tempo_timer != 0xFFFF)
 451:main.c        ****     tap_tempo_timer++;
 452:main.c        ****   if (uart_timeout != 0xFFFF)
 453:main.c        ****     uart_timeout++;
 454:main.c        **** 
 455:main.c        ****   if ((sync!=DIN_SYNC) && (dinsync_clock_timeout != 0)) {
 456:main.c        ****     dinsync_clock_timeout--;
 457:main.c        ****     if (dinsync_clock_timeout == 0) {
 458:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);    // lower the clock
 459:main.c        ****     }
 460:main.c        ****   }
 461:main.c        **** 
 462:main.c        ****   if (sync == DIN_SYNC) {
 463:main.c        ****     curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
 464:main.c        ****     
 465:main.c        ****     if (!last_dinsync_c && curr_dinsync_c) {
 466:main.c        ****       dinsync_clocked++;   // notify a clock was recv'd
 467:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 468:main.c        ****       // (DINSYNC to MIDISYNC conversion)
 469:main.c        ****       last_dinsync_c = curr_dinsync_c;
 470:main.c        ****     } else {
 471:main.c        ****       last_dinsync_c = curr_dinsync_c;      
 472:main.c        ****     }
 473:main.c        ****   }
 474:main.c        **** 
 475:main.c        ****   if (! is_tempo_running()) {
 476:main.c        ****     if (blinktimer == 200) {
 477:main.c        ****       blinktimer = 0;
 478:main.c        ****       // turn off
 479:main.c        ****       blink_leds_off();
 480:main.c        ****     } else if (blinktimer == 100) {
 481:main.c        ****       // turn on
 482:main.c        ****       blink_leds_on();
 483:main.c        ****     }
 484:main.c        ****     blinktimer++;
 485:main.c        ****   }
 486:main.c        **** }
 487:main.c        **** 
 488:main.c        **** 
 489:main.c        **** ///////////////////////////////////// pin change interrupts
 490:main.c        **** uint8_t last_tempo;
 491:main.c        **** SIGNAL(SIG_PIN_CHANGE0) {
  15               		.loc 1 491 25 view -0
  16               		.cfi_startproc
  17 0000 1F92 1FB6 		__gcc_isr 1
  17      1F92 1124 
  17      2F93 
  18 000a 3F93      		push r19
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 19, -2
  21 000c 8F93      		push r24
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 24, -3
  24 000e 9F93      		push r25
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 25, -4
  27               	/* prologue: Signal */
  28               	/* frame size = 0 */
  29               	/* stack size = 3...7 */
  30               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 492:main.c        **** 
 493:main.c        ****   uint8_t curr_tempo;
  31               		.loc 1 493 3 view .LVU1
 494:main.c        **** 
 495:main.c        ****   // tempo knob change!
 496:main.c        **** 
 497:main.c        ****   curr_tempo = TEMPO_PIN & 0x3; // pins A0 and A1
  32               		.loc 1 497 3 view .LVU2
  33               		.loc 1 497 26 is_stmt 0 view .LVU3
  34 0010 89B3      		in r24,0x19
  35               		.loc 1 497 14 view .LVU4
  36 0012 8370      		andi r24,lo8(3)
  37               	.LVL0:
 498:main.c        **** 
 499:main.c        ****   if (curr_tempo != last_tempo) {
  38               		.loc 1 499 3 is_stmt 1 view .LVU5
  39               		.loc 1 499 18 is_stmt 0 view .LVU6
  40 0014 9091 0000 		lds r25,last_tempo
  41               		.loc 1 499 6 view .LVU7
  42 0018 9817      		cp r25,r24
  43 001a 01F0      		breq .L1
 500:main.c        ****     if ((last_tempo == 3) && (curr_tempo == 2)) {
  44               		.loc 1 500 5 is_stmt 1 view .LVU8
  45 001c 2091 0000 		lds r18,newtempo
  46 0020 3091 0000 		lds r19,newtempo+1
  47               		.loc 1 500 8 is_stmt 0 view .LVU9
  48 0024 9330      		cpi r25,lo8(3)
  49 0026 01F4      		brne .L3
 501:main.c        ****       newtempo--;
  50               		.loc 1 501 15 discriminator 1 view .LVU10
  51 0028 2150      		subi r18,1
  52 002a 3109      		sbc r19,__zero_reg__
 500:main.c        ****     if ((last_tempo == 3) && (curr_tempo == 2)) {
  53               		.loc 1 500 27 discriminator 1 view .LVU11
  54 002c 8230      		cpi r24,lo8(2)
  55 002e 01F0      		breq .L8
  56               	.L7:
 502:main.c        ****     }
 503:main.c        ****     if ((last_tempo == 2) && (curr_tempo == 3)) {
 504:main.c        ****       newtempo++;
 505:main.c        ****     }
 506:main.c        **** 
 507:main.c        ****     if (newtempo > MAX_TEMPO)
  57               		.loc 1 507 5 is_stmt 1 view .LVU12
  58               		.loc 1 507 18 is_stmt 0 view .LVU13
  59 0030 2091 0000 		lds r18,newtempo
  60 0034 3091 0000 		lds r19,newtempo+1
  61               		.loc 1 507 8 view .LVU14
  62 0038 2D32      		cpi r18,45
  63 003a 91E0      		ldi r25,1
  64 003c 3907      		cpc r19,r25
  65 003e 00F0      		brlo .L5
 508:main.c        ****       newtempo = MAX_TEMPO;
  66               		.loc 1 508 7 is_stmt 1 view .LVU15
  67               		.loc 1 508 16 is_stmt 0 view .LVU16
  68 0040 2CE2      		ldi r18,lo8(44)
  69 0042 31E0      		ldi r19,lo8(1)
  70               	.L9:
 509:main.c        ****     if (newtempo < MIN_TEMPO)
 510:main.c        ****       newtempo = MIN_TEMPO;
  71               		.loc 1 510 16 view .LVU17
  72 0044 3093 0000 		sts newtempo+1,r19
  73 0048 2093 0000 		sts newtempo,r18
  74               	.L6:
 511:main.c        ****     last_tempo = curr_tempo;
  75               		.loc 1 511 5 is_stmt 1 view .LVU18
  76               		.loc 1 511 16 is_stmt 0 view .LVU19
  77 004c 8093 0000 		sts last_tempo,r24
  78               	.L1:
  79               	/* epilogue start */
 512:main.c        ****   }
 513:main.c        ****   
 514:main.c        **** }
  80               		.loc 1 514 1 view .LVU20
  81 0050 9F91      		pop r25
  82 0052 8F91      		pop r24
  83               	.LVL1:
  84               		.loc 1 514 1 view .LVU21
  85 0054 3F91      		pop r19
  86 0056 2F91 1F90 		__gcc_isr 2
  86      1FBE 1F90 
  87 005e 1895      		reti
  88               	.LVL2:
  89               	.L3:
 503:main.c        ****       newtempo++;
  90               		.loc 1 503 5 is_stmt 1 view .LVU22
 503:main.c        ****       newtempo++;
  91               		.loc 1 503 8 is_stmt 0 view .LVU23
  92 0060 9230      		cpi r25,lo8(2)
  93 0062 01F4      		brne .L7
 503:main.c        ****       newtempo++;
  94               		.loc 1 503 27 discriminator 1 view .LVU24
  95 0064 8330      		cpi r24,lo8(3)
  96 0066 01F4      		brne .L7
 504:main.c        ****     }
  97               		.loc 1 504 7 is_stmt 1 view .LVU25
 504:main.c        ****     }
  98               		.loc 1 504 15 is_stmt 0 view .LVU26
  99 0068 2F5F      		subi r18,-1
 100 006a 3F4F      		sbci r19,-1
 101               	.L8:
 102 006c 3093 0000 		sts newtempo+1,r19
 103 0070 2093 0000 		sts newtempo,r18
 104 0074 00C0      		rjmp .L7
 105               	.L5:
 509:main.c        ****       newtempo = MIN_TEMPO;
 106               		.loc 1 509 5 is_stmt 1 view .LVU27
 509:main.c        ****       newtempo = MIN_TEMPO;
 107               		.loc 1 509 8 is_stmt 0 view .LVU28
 108 0076 2431      		cpi r18,20
 109 0078 3105      		cpc r19,__zero_reg__
 110 007a 00F4      		brsh .L6
 510:main.c        ****     last_tempo = curr_tempo;
 111               		.loc 1 510 7 is_stmt 1 view .LVU29
 510:main.c        ****     last_tempo = curr_tempo;
 112               		.loc 1 510 16 is_stmt 0 view .LVU30
 113 007c 24E1      		ldi r18,lo8(20)
 114 007e 30E0      		ldi r19,0
 115 0080 00C0      		rjmp .L9
 116               		__gcc_isr 0,r18
 117               		.cfi_endproc
 118               	.LFE4:
 120               	.global	init_timer0
 122               	init_timer0:
 123               	.LFB6:
 515:main.c        **** 
 516:main.c        **** ////////////////////////////////// main()
 517:main.c        **** int main(void) {
 518:main.c        ****   ioinit();        // set up IO ports and the UART
 519:main.c        **** 
 520:main.c        ****   // start the tempo timer
 521:main.c        ****   init_tempo();
 522:main.c        **** 
 523:main.c        ****   // start the 'rtc' timer0
 524:main.c        ****   init_timer0();
 525:main.c        **** 
 526:main.c        ****   // start the 'dinsync' timer2
 527:main.c        ****   //init_timer2();
 528:main.c        **** 
 529:main.c        ****   rand = tempo;            // stupid initialization, do better?
 530:main.c        **** 
 531:main.c        ****   dinsync_set_out(); // output DINSYNC
 532:main.c        **** 
 533:main.c        ****   init_midi();
 534:main.c        **** 
 535:main.c        ****   sei();  // enable interrupts
 536:main.c        **** 
 537:main.c        ****   // the main loop!
 538:main.c        ****   while (1) {
 539:main.c        ****     read_switches();
 540:main.c        ****     switch (function) {
 541:main.c        ****     case COMPUTER_CONTROL_FUNC:
 542:main.c        ****       //putstring("CompControl\n\r");
 543:main.c        ****       sync = INTERNAL_SYNC;
 544:main.c        ****       do_computer_control();
 545:main.c        ****       break;
 546:main.c        ****     case EDIT_PATTERN_FUNC:
 547:main.c        ****       //putstring("PattEdit\n\r");
 548:main.c        ****       sync = INTERNAL_SYNC;
 549:main.c        ****       do_pattern_edit();
 550:main.c        ****       break;
 551:main.c        ****     case PLAY_PATTERN_FUNC:
 552:main.c        ****     case PLAY_TRACK_FUNC: 
 553:main.c        ****       //putstring("PattPlay\n\r");
 554:main.c        ****       sync = INTERNAL_SYNC;
 555:main.c        ****       do_patterntrack_play();
 556:main.c        ****       break;
 557:main.c        ****     case PLAY_PATTERN_DINSYNC_FUNC:
 558:main.c        ****     case PLAY_TRACK_DINSYNC_FUNC:
 559:main.c        ****       //putstring("PattPlay DINSYNC\n\r");
 560:main.c        ****       sync = DIN_SYNC;
 561:main.c        ****       do_patterntrack_play();
 562:main.c        ****       break;
 563:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 564:main.c        ****     case PLAY_TRACK_MIDISYNC_FUNC:
 565:main.c        ****       //putstring("PattPlay MidiSYNC\n\r");
 566:main.c        ****       sync = MIDI_SYNC;
 567:main.c        ****       do_patterntrack_play();
 568:main.c        ****       break;
 569:main.c        ****     case EDIT_TRACK_FUNC:
 570:main.c        ****       //putstring("TrackEdit\n\r");
 571:main.c        ****       sync = INTERNAL_SYNC;
 572:main.c        ****       do_track_edit();
 573:main.c        ****       break;
 574:main.c        **** //    case PLAY_TRACK_FUNC: 
 575:main.c        ****       //putstring("TrackPlay\n\r");
 576:main.c        **** //      sync = INTERNAL_SYNC;
 577:main.c        **** //      do_patterntrack_play();
 578:main.c        **** //      break;
 579:main.c        **** //    case PLAY_TRACK_DINSYNC_FUNC:
 580:main.c        ****       //putstring("TrackPlay DINSYNC\n\r");
 581:main.c        **** //      sync = DIN_SYNC;
 582:main.c        **** //      do_patterntrack_play();
 583:main.c        **** //      break;
 584:main.c        **** //    case PLAY_TRACK_MIDISYNC_FUNC:
 585:main.c        ****       //putstring("TrackPlay MIDISync\n\r");
 586:main.c        **** //      sync = MIDI_SYNC;
 587:main.c        **** //      do_patterntrack_play();
 588:main.c        **** //      break;
 589:main.c        ****     case MIDI_CONTROL_FUNC:
 590:main.c        ****       //putstring("MIDIControl\n\r");
 591:main.c        ****       sync = INTERNAL_SYNC;
 592:main.c        ****       do_midi_mode();
 593:main.c        ****       break;
 594:main.c        ****     case KEYBOARD_MODE_FUNC:
 595:main.c        ****       //putstring("Keyboard\n\r");
 596:main.c        ****       sync = INTERNAL_SYNC;
 597:main.c        ****       do_keyboard_mode();
 598:main.c        ****       break;
 599:main.c        ****     case RANDOM_MODE_FUNC: {
 600:main.c        ****       //uint8_t dinsync_started = 0; // stopped
 601:main.c        ****       //uint8_t dinsync_lastpulse = 0; // 
 602:main.c        ****       //putstring("rAnD0m\n\r");
 603:main.c        ****       sync = INTERNAL_SYNC;
 604:main.c        ****       turn_on_tempo();
 605:main.c        ****       clear_all_leds();
 606:main.c        ****       //dinsync_start();
 607:main.c        ****       while (1) {
 608:main.c        **** 	read_switches();
 609:main.c        **** 	
 610:main.c        **** 	if (function != RANDOM_MODE_FUNC) {
 611:main.c        **** 	  //dinsync_stop();
 612:main.c        **** 	  turn_off_tempo();
 613:main.c        **** 	  break;
 614:main.c        **** 	}
 615:main.c        ****       }
 616:main.c        ****       break;
 617:main.c        ****     }
 618:main.c        ****     case A_FUNC:
 619:main.c        ****       // edit the pattern with the midi sync axxxion
 620:main.c        **** //      sync = MIDI_SYNC;
 621:main.c        **** //      do_pattern_edit();
 622:main.c        **** //      break;
 623:main.c        ****     case B_FUNC:
 624:main.c        ****     case C_FUNC:
 625:main.c        **** //      clear_all_leds();
 626:main.c        **** //      clock_leds();
 627:main.c        ****     default:
 628:main.c        ****       //putstring("???"); putnum_ud(function);
 629:main.c        ****       // something else
 630:main.c        ****       break;
 631:main.c        ****     }
 632:main.c        ****   }
 633:main.c        **** }
 634:main.c        **** 
 635:main.c        **** /********************* */
 636:main.c        **** void init_timer0(void) {
 124               		.loc 1 636 24 is_stmt 1 view -0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
 637:main.c        ****   sbi(TIMSK, 0);          // timer0 overflow interrupt enable
 130               		.loc 1 637 3 view .LVU32
 131 0082 89B7      		in r24,0x39
 132 0084 8160      		ori r24,lo8(1)
 133 0086 89BF      		out 0x39,r24
 638:main.c        ****   TCCR0 = (1 << WGM01) | 0x3;            // compare mode, clk/64
 134               		.loc 1 638 3 view .LVU33
 135               		.loc 1 638 9 is_stmt 0 view .LVU34
 136 0088 8BE0      		ldi r24,lo8(11)
 137 008a 83BF      		out 0x33,r24
 639:main.c        ****   OCR0 = 250;             // 1KHz
 138               		.loc 1 639 3 is_stmt 1 view .LVU35
 139               		.loc 1 639 8 is_stmt 0 view .LVU36
 140 008c 8AEF      		ldi r24,lo8(-6)
 141 008e 81BF      		out 0x31,r24
 142               	/* epilogue start */
 640:main.c        **** }
 143               		.loc 1 640 1 view .LVU37
 144 0090 0895      		ret
 145               		.cfi_endproc
 146               	.LFE6:
 148               	.global	init_timer2
 150               	init_timer2:
 151               	.LFB7:
 641:main.c        **** 
 642:main.c        **** void init_timer2(void) {
 152               		.loc 1 642 24 is_stmt 1 view -0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 643:main.c        ****   sbi(TIMSK, 0);
 158               		.loc 1 643 3 view .LVU39
 159 0092 89B7      		in r24,0x39
 160 0094 8160      		ori r24,lo8(1)
 161 0096 89BF      		out 0x39,r24
 644:main.c        ****   TCCR2 = (1<<WGM21) | 0x3; // compare mode, clk/32
 162               		.loc 1 644 3 view .LVU40
 163               		.loc 1 644 9 is_stmt 0 view .LVU41
 164 0098 8BE0      		ldi r24,lo8(11)
 165 009a 87BD      		out 0x27,r24
 645:main.c        ****   OCR2 = 50;             // 10khz
 166               		.loc 1 645 3 is_stmt 1 view .LVU42
 167               		.loc 1 645 8 is_stmt 0 view .LVU43
 168 009c 82E3      		ldi r24,lo8(50)
 169 009e 82BD      		out 0x22,r24
 170               	/* epilogue start */
 646:main.c        **** 
 647:main.c        **** }
 171               		.loc 1 647 1 view .LVU44
 172 00a0 0895      		ret
 173               		.cfi_endproc
 174               	.LFE7:
 176               	.global	turn_on_tempo
 178               	turn_on_tempo:
 179               	.LFB9:
 648:main.c        **** 
 649:main.c        **** void init_tempo(void) {
 650:main.c        ****   sbi(PCMSK0, PCINT0); // detect change on pin A0
 651:main.c        ****   sbi(PCMSK0, PCINT1); // detect change on pin A1
 652:main.c        ****   sbi(GICR, PCIE0);    // enable pin change interrupt for tempo knob detect
 653:main.c        **** 
 654:main.c        ****   change_tempo((internal_eeprom_read8(TEMPO_EEADDR)<< 8) |
 655:main.c        **** 	       internal_eeprom_read8(TEMPO_EEADDR+1) );
 656:main.c        ****   note_counter = 0;
 657:main.c        ****   sbi(ETIMSK, TOIE3); // enable tempo interrupt
 658:main.c        **** }
 659:main.c        **** 
 660:main.c        **** // reset the note counter. change the tempo back.
 661:main.c        **** void turn_on_tempo() {
 180               		.loc 1 661 22 is_stmt 1 view -0
 181               		.cfi_startproc
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
 662:main.c        ****   sbi(ETIMSK, TOIE3);
 186               		.loc 1 662 3 view .LVU46
 187 00a2 EDE7      		ldi r30,lo8(125)
 188 00a4 F0E0      		ldi r31,0
 189 00a6 8081      		ld r24,Z
 190 00a8 8460      		ori r24,lo8(4)
 191 00aa 8083      		st Z,r24
 192               	/* epilogue start */
 663:main.c        **** }
 193               		.loc 1 663 1 is_stmt 0 view .LVU47
 194 00ac 0895      		ret
 195               		.cfi_endproc
 196               	.LFE9:
 198               	.global	turn_off_tempo
 200               	turn_off_tempo:
 201               	.LFB10:
 664:main.c        **** 
 665:main.c        **** void turn_off_tempo() {
 202               		.loc 1 665 23 is_stmt 1 view -0
 203               		.cfi_startproc
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 666:main.c        ****   clear_led(LED_TEMPO);
 208               		.loc 1 666 3 view .LVU49
 209 00ae 85E2      		ldi r24,lo8(37)
 210 00b0 0E94 0000 		call clear_led
 211               	.LVL3:
 667:main.c        ****   cbi(ETIMSK, TOIE3);
 212               		.loc 1 667 3 view .LVU50
 213 00b4 EDE7      		ldi r30,lo8(125)
 214 00b6 F0E0      		ldi r31,0
 215 00b8 8081      		ld r24,Z
 216 00ba 8B7F      		andi r24,lo8(-5)
 217 00bc 8083      		st Z,r24
 218               	/* epilogue start */
 668:main.c        **** }
 219               		.loc 1 668 1 is_stmt 0 view .LVU51
 220 00be 0895      		ret
 221               		.cfi_endproc
 222               	.LFE10:
 224               	.global	is_tempo_running
 226               	is_tempo_running:
 227               	.LFB11:
 669:main.c        **** 
 670:main.c        **** uint8_t is_tempo_running() {
 228               		.loc 1 670 28 is_stmt 1 view -0
 229               		.cfi_startproc
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 0 */
 233               	.L__stack_usage = 0
 671:main.c        ****   return (ETIMSK >> TOIE3) & 0x1;
 234               		.loc 1 671 3 view .LVU53
 235               		.loc 1 671 11 is_stmt 0 view .LVU54
 236 00c0 8091 7D00 		lds r24,125
 672:main.c        **** }
 237               		.loc 1 672 1 view .LVU55
 238 00c4 82FB      		bst r24,2
 239 00c6 8827      		clr r24
 240 00c8 80F9      		bld r24,0
 241               	/* epilogue start */
 242 00ca 0895      		ret
 243               		.cfi_endproc
 244               	.LFE11:
 246               	.global	__vector_16
 248               	__vector_16:
 249               	.LFB3:
 445:main.c        ****   uint8_t curr_dinsync_c;
 250               		.loc 1 445 29 is_stmt 1 view -0
 251               		.cfi_startproc
 252 00cc 1F92      		push r1
 253               		.cfi_def_cfa_offset 3
 254               		.cfi_offset 1, -2
 255 00ce 0F92      		push r0
 256               		.cfi_def_cfa_offset 4
 257               		.cfi_offset 0, -3
 258 00d0 0FB6      		in r0,__SREG__
 259 00d2 0F92      		push r0
 260 00d4 1124      		clr __zero_reg__
 261 00d6 2F93      		push r18
 262               		.cfi_def_cfa_offset 5
 263               		.cfi_offset 18, -4
 264 00d8 3F93      		push r19
 265               		.cfi_def_cfa_offset 6
 266               		.cfi_offset 19, -5
 267 00da 4F93      		push r20
 268               		.cfi_def_cfa_offset 7
 269               		.cfi_offset 20, -6
 270 00dc 5F93      		push r21
 271               		.cfi_def_cfa_offset 8
 272               		.cfi_offset 21, -7
 273 00de 6F93      		push r22
 274               		.cfi_def_cfa_offset 9
 275               		.cfi_offset 22, -8
 276 00e0 7F93      		push r23
 277               		.cfi_def_cfa_offset 10
 278               		.cfi_offset 23, -9
 279 00e2 8F93      		push r24
 280               		.cfi_def_cfa_offset 11
 281               		.cfi_offset 24, -10
 282 00e4 9F93      		push r25
 283               		.cfi_def_cfa_offset 12
 284               		.cfi_offset 25, -11
 285 00e6 AF93      		push r26
 286               		.cfi_def_cfa_offset 13
 287               		.cfi_offset 26, -12
 288 00e8 BF93      		push r27
 289               		.cfi_def_cfa_offset 14
 290               		.cfi_offset 27, -13
 291 00ea EF93      		push r30
 292               		.cfi_def_cfa_offset 15
 293               		.cfi_offset 30, -14
 294 00ec FF93      		push r31
 295               		.cfi_def_cfa_offset 16
 296               		.cfi_offset 31, -15
 297               	/* prologue: Signal */
 298               	/* frame size = 0 */
 299               	/* stack size = 15 */
 300               	.L__stack_usage = 15
 446:main.c        **** 
 301               		.loc 1 446 3 view .LVU57
 448:main.c        ****     debounce_timer++;
 302               		.loc 1 448 3 view .LVU58
 448:main.c        ****     debounce_timer++;
 303               		.loc 1 448 22 is_stmt 0 view .LVU59
 304 00ee 8091 0000 		lds r24,debounce_timer
 448:main.c        ****     debounce_timer++;
 305               		.loc 1 448 6 view .LVU60
 306 00f2 8F3F      		cpi r24,lo8(-1)
 307 00f4 01F0      		breq .L16
 449:main.c        ****   if (tap_tempo_timer != 0xFFFF)
 308               		.loc 1 449 5 is_stmt 1 view .LVU61
 449:main.c        ****   if (tap_tempo_timer != 0xFFFF)
 309               		.loc 1 449 19 is_stmt 0 view .LVU62
 310 00f6 8091 0000 		lds r24,debounce_timer
 311 00fa 8F5F      		subi r24,lo8(-(1))
 312 00fc 8093 0000 		sts debounce_timer,r24
 313               	.L16:
 450:main.c        ****     tap_tempo_timer++;
 314               		.loc 1 450 3 is_stmt 1 view .LVU63
 450:main.c        ****     tap_tempo_timer++;
 315               		.loc 1 450 23 is_stmt 0 view .LVU64
 316 0100 8091 0000 		lds r24,tap_tempo_timer
 317 0104 9091 0000 		lds r25,tap_tempo_timer+1
 450:main.c        ****     tap_tempo_timer++;
 318               		.loc 1 450 6 view .LVU65
 319 0108 0196      		adiw r24,1
 320 010a 01F0      		breq .L17
 451:main.c        ****   if (uart_timeout != 0xFFFF)
 321               		.loc 1 451 5 is_stmt 1 view .LVU66
 451:main.c        ****   if (uart_timeout != 0xFFFF)
 322               		.loc 1 451 20 is_stmt 0 view .LVU67
 323 010c 8091 0000 		lds r24,tap_tempo_timer
 324 0110 9091 0000 		lds r25,tap_tempo_timer+1
 325 0114 0196      		adiw r24,1
 326 0116 9093 0000 		sts tap_tempo_timer+1,r25
 327 011a 8093 0000 		sts tap_tempo_timer,r24
 328               	.L17:
 452:main.c        ****     uart_timeout++;
 329               		.loc 1 452 3 is_stmt 1 view .LVU68
 452:main.c        ****     uart_timeout++;
 330               		.loc 1 452 20 is_stmt 0 view .LVU69
 331 011e 8091 0000 		lds r24,uart_timeout
 332 0122 9091 0000 		lds r25,uart_timeout+1
 452:main.c        ****     uart_timeout++;
 333               		.loc 1 452 6 view .LVU70
 334 0126 0196      		adiw r24,1
 335 0128 01F0      		breq .L18
 453:main.c        **** 
 336               		.loc 1 453 5 is_stmt 1 view .LVU71
 453:main.c        **** 
 337               		.loc 1 453 17 is_stmt 0 view .LVU72
 338 012a 8091 0000 		lds r24,uart_timeout
 339 012e 9091 0000 		lds r25,uart_timeout+1
 340 0132 0196      		adiw r24,1
 341 0134 9093 0000 		sts uart_timeout+1,r25
 342 0138 8093 0000 		sts uart_timeout,r24
 343               	.L18:
 455:main.c        ****     dinsync_clock_timeout--;
 344               		.loc 1 455 3 is_stmt 1 view .LVU73
 455:main.c        ****     dinsync_clock_timeout--;
 345               		.loc 1 455 6 is_stmt 0 view .LVU74
 346 013c 8091 0000 		lds r24,sync
 347 0140 8130      		cpi r24,lo8(1)
 348 0142 01F4      		brne .L19
 349               	.L23:
 463:main.c        ****     
 350               		.loc 1 463 5 is_stmt 1 view .LVU75
 463:main.c        ****     
 351               		.loc 1 463 23 is_stmt 0 view .LVU76
 352 0144 80B3      		in r24,0x10
 463:main.c        ****     
 353               		.loc 1 463 20 view .LVU77
 354 0146 8295      		swap r24
 355 0148 8170      		andi r24,1
 356               	.LVL4:
 465:main.c        ****       dinsync_clocked++;   // notify a clock was recv'd
 357               		.loc 1 465 5 is_stmt 1 view .LVU78
 465:main.c        ****       dinsync_clocked++;   // notify a clock was recv'd
 358               		.loc 1 465 9 is_stmt 0 view .LVU79
 359 014a 9091 0000 		lds r25,last_dinsync_c
 465:main.c        ****       dinsync_clocked++;   // notify a clock was recv'd
 360               		.loc 1 465 8 view .LVU80
 361 014e 9923      		tst r25
 362 0150 01F4      		brne .+2
 363 0152 00C0      		rjmp .L20
 364               	.LVL5:
 365               	.L21:
 471:main.c        ****     }
 366               		.loc 1 471 7 is_stmt 1 view .LVU81
 471:main.c        ****     }
 367               		.loc 1 471 22 is_stmt 0 view .LVU82
 368 0154 8093 0000 		sts last_dinsync_c,r24
 369 0158 00C0      		rjmp .L25
 370               	.L19:
 455:main.c        ****     dinsync_clock_timeout--;
 371               		.loc 1 455 50 discriminator 1 view .LVU83
 372 015a 8091 0000 		lds r24,dinsync_clock_timeout
 373 015e 9091 0000 		lds r25,dinsync_clock_timeout+1
 455:main.c        ****     dinsync_clock_timeout--;
 374               		.loc 1 455 24 discriminator 1 view .LVU84
 375 0162 892B      		or r24,r25
 376 0164 01F0      		breq .L25
 456:main.c        ****     if (dinsync_clock_timeout == 0) {
 377               		.loc 1 456 5 is_stmt 1 view .LVU85
 456:main.c        ****     if (dinsync_clock_timeout == 0) {
 378               		.loc 1 456 26 is_stmt 0 view .LVU86
 379 0166 8091 0000 		lds r24,dinsync_clock_timeout
 380 016a 9091 0000 		lds r25,dinsync_clock_timeout+1
 381 016e 0197      		sbiw r24,1
 382 0170 9093 0000 		sts dinsync_clock_timeout+1,r25
 383 0174 8093 0000 		sts dinsync_clock_timeout,r24
 457:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);    // lower the clock
 384               		.loc 1 457 5 is_stmt 1 view .LVU87
 457:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);    // lower the clock
 385               		.loc 1 457 31 is_stmt 0 view .LVU88
 386 0178 8091 0000 		lds r24,dinsync_clock_timeout
 387 017c 9091 0000 		lds r25,dinsync_clock_timeout+1
 457:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);    // lower the clock
 388               		.loc 1 457 8 view .LVU89
 389 0180 892B      		or r24,r25
 390 0182 01F4      		brne .L25
 458:main.c        ****     }
 391               		.loc 1 458 7 is_stmt 1 view .LVU90
 392 0184 9498      		cbi 0x12,4
 462:main.c        ****     curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
 393               		.loc 1 462 3 view .LVU91
 462:main.c        ****     curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
 394               		.loc 1 462 6 is_stmt 0 view .LVU92
 395 0186 8091 0000 		lds r24,sync
 396 018a 8130      		cpi r24,lo8(1)
 397 018c 01F0      		breq .L23
 398               	.L25:
 475:main.c        ****     if (blinktimer == 200) {
 399               		.loc 1 475 3 is_stmt 1 view .LVU93
 475:main.c        ****     if (blinktimer == 200) {
 400               		.loc 1 475 9 is_stmt 0 view .LVU94
 401 018e 0E94 0000 		call is_tempo_running
 402               	.LVL6:
 475:main.c        ****     if (blinktimer == 200) {
 403               		.loc 1 475 6 view .LVU95
 404 0192 8111      		cpse r24,__zero_reg__
 405 0194 00C0      		rjmp .L15
 476:main.c        ****       blinktimer = 0;
 406               		.loc 1 476 5 is_stmt 1 view .LVU96
 476:main.c        ****       blinktimer = 0;
 407               		.loc 1 476 20 is_stmt 0 view .LVU97
 408 0196 8091 0000 		lds r24,blinktimer
 476:main.c        ****       blinktimer = 0;
 409               		.loc 1 476 8 view .LVU98
 410 019a 883C      		cpi r24,lo8(-56)
 411 019c 01F4      		brne .L27
 477:main.c        ****       // turn off
 412               		.loc 1 477 7 is_stmt 1 view .LVU99
 477:main.c        ****       // turn off
 413               		.loc 1 477 18 is_stmt 0 view .LVU100
 414 019e 1092 0000 		sts blinktimer,__zero_reg__
 479:main.c        ****     } else if (blinktimer == 100) {
 415               		.loc 1 479 7 is_stmt 1 view .LVU101
 416 01a2 0E94 0000 		call blink_leds_off
 417               	.LVL7:
 418               	.L28:
 484:main.c        ****   }
 419               		.loc 1 484 5 view .LVU102
 484:main.c        ****   }
 420               		.loc 1 484 15 is_stmt 0 view .LVU103
 421 01a6 8091 0000 		lds r24,blinktimer
 422 01aa 8F5F      		subi r24,lo8(-(1))
 423 01ac 8093 0000 		sts blinktimer,r24
 424               	.L15:
 425               	/* epilogue start */
 486:main.c        **** 
 426               		.loc 1 486 1 view .LVU104
 427 01b0 FF91      		pop r31
 428 01b2 EF91      		pop r30
 429 01b4 BF91      		pop r27
 430 01b6 AF91      		pop r26
 431 01b8 9F91      		pop r25
 432 01ba 8F91      		pop r24
 433 01bc 7F91      		pop r23
 434 01be 6F91      		pop r22
 435 01c0 5F91      		pop r21
 436 01c2 4F91      		pop r20
 437 01c4 3F91      		pop r19
 438 01c6 2F91      		pop r18
 439 01c8 0F90      		pop r0
 440 01ca 0FBE      		out __SREG__,r0
 441 01cc 0F90      		pop r0
 442 01ce 1F90      		pop r1
 443 01d0 1895      		reti
 444               	.LVL8:
 445               	.L20:
 465:main.c        ****       dinsync_clocked++;   // notify a clock was recv'd
 446               		.loc 1 465 25 discriminator 1 view .LVU105
 447 01d2 8823      		tst r24
 448 01d4 01F4      		brne .+2
 449 01d6 00C0      		rjmp .L21
 466:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 450               		.loc 1 466 7 is_stmt 1 view .LVU106
 466:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 451               		.loc 1 466 22 is_stmt 0 view .LVU107
 452 01d8 8091 0000 		lds r24,dinsync_clocked
 453 01dc 9091 0000 		lds r25,dinsync_clocked+1
 454               	.LVL9:
 466:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 455               		.loc 1 466 22 view .LVU108
 456 01e0 0196      		adiw r24,1
 457 01e2 9093 0000 		sts dinsync_clocked+1,r25
 458 01e6 8093 0000 		sts dinsync_clocked,r24
 467:main.c        ****       // (DINSYNC to MIDISYNC conversion)
 459               		.loc 1 467 7 is_stmt 1 view .LVU109
 460 01ea 88EF      		ldi r24,lo8(-8)
 461 01ec 0E94 0000 		call midi_putchar
 462               	.LVL10:
 469:main.c        ****     } else {
 463               		.loc 1 469 7 view .LVU110
 469:main.c        ****     } else {
 464               		.loc 1 469 22 is_stmt 0 view .LVU111
 465 01f0 81E0      		ldi r24,lo8(1)
 466 01f2 00C0      		rjmp .L21
 467               	.L27:
 480:main.c        ****       // turn on
 468               		.loc 1 480 12 is_stmt 1 view .LVU112
 480:main.c        ****       // turn on
 469               		.loc 1 480 27 is_stmt 0 view .LVU113
 470 01f4 8091 0000 		lds r24,blinktimer
 480:main.c        ****       // turn on
 471               		.loc 1 480 15 view .LVU114
 472 01f8 8436      		cpi r24,lo8(100)
 473 01fa 01F4      		brne .L28
 482:main.c        ****     }
 474               		.loc 1 482 7 is_stmt 1 view .LVU115
 475 01fc 0E94 0000 		call blink_leds_on
 476               	.LVL11:
 477 0200 00C0      		rjmp .L28
 478               		.cfi_endproc
 479               	.LFE3:
 481               	.global	dispatch_note_off
 483               	dispatch_note_off:
 484               	.LVL12:
 485               	.LFB13:
 673:main.c        **** 
 674:main.c        **** void change_tempo(uint16_t set_tempo) {
 675:main.c        ****   uint16_t t3_prescale;
 676:main.c        ****   uint32_t num_instr;
 677:main.c        ****   uint16_t top_num_instr;
 678:main.c        **** 
 679:main.c        ****   if (set_tempo > MAX_TEMPO) {
 680:main.c        ****     set_tempo = MAX_TEMPO;
 681:main.c        ****   }
 682:main.c        ****   if (set_tempo < MIN_TEMPO) {
 683:main.c        ****     set_tempo = MIN_TEMPO;
 684:main.c        ****   }
 685:main.c        **** 
 686:main.c        ****   newtempo = tempo = set_tempo;
 687:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 688:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR+1, tempo & 0xFF);
 689:main.c        **** 
 690:main.c        ****   /*
 691:main.c        ****     putnum_ud(tempo);
 692:main.c        ****     putstring(" BPM\n\r");
 693:main.c        ****   */
 694:main.c        ****   send_tempo(tempo);
 695:main.c        **** 
 696:main.c        ****   // figure out what the interrupt should be!
 697:main.c        ****   // (use counter 3 for finest resolution!)
 698:main.c        ****   num_instr = F_CPU * 60;
 699:main.c        **** 
 700:main.c        **** /*
 701:main.c        ****   num_instr /= set_tempo;
 702:main.c        ****   num_instr /= 4;         // sixteenth notes!
 703:main.c        ****   num_instr /= 2;         // call twice per quarter
 704:main.c        ****   num_instr /= DINSYNC_PPQ/4;  // do dinsync on same interrupt
 705:main.c        **** */
 706:main.c        ****   num_instr /= set_tempo*2*DINSYNC_PPQ;  
 707:main.c        ****   
 708:main.c        ****   top_num_instr = num_instr >> 16;
 709:main.c        ****   if (!top_num_instr) {
 710:main.c        ****     t3_prescale = 1;
 711:main.c        ****     timer3_init = num_instr;
 712:main.c        ****     TCCR3B = 1;
 713:main.c        ****   } else if ((top_num_instr & ~0x7) == 0) {
 714:main.c        ****     t3_prescale = 8;
 715:main.c        ****     timer3_init = num_instr >> 3;
 716:main.c        ****     TCCR3B = 2;
 717:main.c        ****   } else if ((top_num_instr & ~0xF) == 0) {
 718:main.c        ****     t3_prescale = 16; 
 719:main.c        ****     timer3_init = num_instr >> 4;
 720:main.c        ****     TCCR3B = 6;
 721:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 722:main.c        ****     t3_prescale = 32;
 723:main.c        ****     timer3_init = num_instr >> 5;
 724:main.c        ****     TCCR3B = 7;
 725:main.c        ****   } else if ((top_num_instr & ~0x3F) == 0) {
 726:main.c        ****     t3_prescale = 64;
 727:main.c        ****     timer3_init = num_instr >> 6;
 728:main.c        ****     TCCR3B = 3;
 729:main.c        ****   } else if ((top_num_instr & ~0xFF) == 0) {
 730:main.c        ****     t3_prescale = 256;
 731:main.c        ****     timer3_init = num_instr >> 8;
 732:main.c        ****     TCCR3B = 4;
 733:main.c        ****   } else if ((top_num_instr & ~0x3FF) == 0) {
 734:main.c        ****     t3_prescale = 1024;
 735:main.c        ****     timer3_init = num_instr >> 10;
 736:main.c        ****     TCCR3B = 5;
 737:main.c        ****   } else {
 738:main.c        ****     t3_prescale = 0;
 739:main.c        ****     TCCR3B = 0;
 740:main.c        ****   }
 741:main.c        ****   
 742:main.c        ****   timer3_init *= -1;
 743:main.c        ****   
 744:main.c        ****   //printf("T3 Prescale: %d. Init: 0x%x\n\r", t3_prescale, timer3_init);
 745:main.c        ****   TCNT3 = timer3_init;
 746:main.c        **** }
 747:main.c        **** 
 748:main.c        **** 
 749:main.c        **** void dispatch_note_off(uint8_t pitch_shift)
 750:main.c        **** {
 486               		.loc 1 750 1 view -0
 487               		.cfi_startproc
 488               		.loc 1 750 1 is_stmt 0 view .LVU117
 489 0202 CF93      		push r28
 490               		.cfi_def_cfa_offset 3
 491               		.cfi_offset 28, -2
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 1 */
 495               	.L__stack_usage = 1
 496 0204 C82F      		mov r28,r24
 751:main.c        ****   if (curr_note != 0xFF) {
 497               		.loc 1 751 3 is_stmt 1 view .LVU118
 498               		.loc 1 751 17 is_stmt 0 view .LVU119
 499 0206 9091 0000 		lds r25,curr_note
 500               		.loc 1 751 6 view .LVU120
 501 020a 9F3F      		cpi r25,lo8(-1)
 502 020c 01F0      		breq .L48
 752:main.c        **** 	if (((curr_note>>7) & 0x1) | all_slide) { 
 503               		.loc 1 752 2 is_stmt 1 view .LVU121
 504               		.loc 1 752 29 is_stmt 0 view .LVU122
 505 020e 8091 0000 		lds r24,all_slide
 506               	.LVL13:
 507               		.loc 1 752 22 view .LVU123
 508 0212 991F      		rol r25
 509 0214 9927      		clr r25
 510 0216 991F      		rol r25
 511               		.loc 1 752 5 view .LVU124
 512 0218 982B      		or r25,r24
 513 021a 01F0      		breq .L49
 753:main.c        ****     // check if the note had slide on it 
 754:main.c        **** 	  note_off(1); // slide
 514               		.loc 1 754 4 is_stmt 1 view .LVU125
 515 021c 81E0      		ldi r24,lo8(1)
 516 021e 0E94 0000 		call note_off
 517               	.LVL14:
 518               	.L48:
 755:main.c        **** 	// DONT send a midi note off
 756:main.c        **** 	} else {
 757:main.c        **** 	  note_off(0); // no slide
 758:main.c        **** 	  if ((curr_note & 0x3F) != 0)  // not rest
 759:main.c        **** 	    midi_send_note_off(curr_note + pitch_shift);
 760:main.c        **** 	  else
 761:main.c        **** 	    midi_send_note_off(curr_note);
 762:main.c        **** 	}
 763:main.c        ****   }
 764:main.c        **** 	if ( (prev_note != 0xFF) &&
 519               		.loc 1 764 2 view .LVU126
 520               		.loc 1 764 18 is_stmt 0 view .LVU127
 521 0222 8091 0000 		lds r24,prev_note
 522               		.loc 1 764 5 view .LVU128
 523 0226 8F3F      		cpi r24,lo8(-1)
 524 0228 01F0      		breq .L47
 765:main.c        **** 	     (((prev_note>>7) & 0x1) | all_slide ) ) {
 525               		.loc 1 765 31 discriminator 1 view .LVU129
 526 022a 2091 0000 		lds r18,all_slide
 527               		.loc 1 765 24 discriminator 1 view .LVU130
 528 022e 982F      		mov r25,r24
 529 0230 991F      		rol r25
 530 0232 9927      		clr r25
 531 0234 991F      		rol r25
 764:main.c        **** 	     (((prev_note>>7) & 0x1) | all_slide ) ) {
 532               		.loc 1 764 27 discriminator 1 view .LVU131
 533 0236 922B      		or r25,r18
 534 0238 01F0      		breq .L47
 766:main.c        **** 	  if ((prev_note & 0x3F) != 0)  // not rest
 535               		.loc 1 766 4 is_stmt 1 view .LVU132
 536               		.loc 1 766 7 is_stmt 0 view .LVU133
 537 023a 982F      		mov r25,r24
 538 023c 9F73      		andi r25,lo8(63)
 539 023e 01F0      		breq .L52
 767:main.c        **** 	    midi_send_note_off(prev_note + pitch_shift);
 540               		.loc 1 767 6 is_stmt 1 view .LVU134
 541 0240 8C0F      		add r24,r28
 542               	.L52:
 768:main.c        **** 	  else
 769:main.c        **** 	    midi_send_note_off(prev_note);
 543               		.loc 1 769 6 view .LVU135
 544 0242 0E94 0000 		call midi_send_note_off
 545               	.LVL15:
 546               	.L47:
 547               	/* epilogue start */
 770:main.c        **** 	}
 771:main.c        ****   
 772:main.c        **** }
 548               		.loc 1 772 1 is_stmt 0 view .LVU136
 549 0246 CF91      		pop r28
 550               	.LVL16:
 551               		.loc 1 772 1 view .LVU137
 552 0248 0895      		ret
 553               	.LVL17:
 554               	.L49:
 757:main.c        **** 	  if ((curr_note & 0x3F) != 0)  // not rest
 555               		.loc 1 757 4 is_stmt 1 view .LVU138
 556 024a 80E0      		ldi r24,0
 557 024c 0E94 0000 		call note_off
 558               	.LVL18:
 758:main.c        **** 	    midi_send_note_off(curr_note + pitch_shift);
 559               		.loc 1 758 4 view .LVU139
 758:main.c        **** 	    midi_send_note_off(curr_note + pitch_shift);
 560               		.loc 1 758 19 is_stmt 0 view .LVU140
 561 0250 8091 0000 		lds r24,curr_note
 758:main.c        **** 	    midi_send_note_off(curr_note + pitch_shift);
 562               		.loc 1 758 7 view .LVU141
 563 0254 982F      		mov r25,r24
 564 0256 9F73      		andi r25,lo8(63)
 565 0258 01F0      		breq .L50
 759:main.c        **** 	  else
 566               		.loc 1 759 6 is_stmt 1 view .LVU142
 567 025a 8C0F      		add r24,r28
 568               	.L50:
 761:main.c        **** 	}
 569               		.loc 1 761 6 view .LVU143
 570 025c 0E94 0000 		call midi_send_note_off
 571               	.LVL19:
 572 0260 00C0      		rjmp .L48
 573               		.cfi_endproc
 574               	.LFE13:
 576               	.global	dispatch_note_on
 578               	dispatch_note_on:
 579               	.LVL20:
 580               	.LFB14:
 773:main.c        **** 
 774:main.c        **** void dispatch_note_on(uint8_t pitch_shift)
 775:main.c        **** {
 581               		.loc 1 775 1 view -0
 582               		.cfi_startproc
 583               		.loc 1 775 1 is_stmt 0 view .LVU145
 584 0262 CF93      		push r28
 585               		.cfi_def_cfa_offset 3
 586               		.cfi_offset 28, -2
 587               	/* prologue: function */
 588               	/* frame size = 0 */
 589               	/* stack size = 1 */
 590               	.L__stack_usage = 1
 591 0264 C82F      		mov r28,r24
 776:main.c        ****     uint8_t ps = pitch_shift;
 592               		.loc 1 776 5 is_stmt 1 view .LVU146
 593               	.LVL21:
 777:main.c        **** 	
 778:main.c        **** 	if (all_rest)
 594               		.loc 1 778 2 view .LVU147
 595               		.loc 1 778 6 is_stmt 0 view .LVU148
 596 0266 8091 0000 		lds r24,all_rest
 597               	.LVL22:
 598               		.loc 1 778 5 view .LVU149
 599 026a 8823      		tst r24
 600 026c 01F0      		breq .L63
 779:main.c        **** 	  curr_note &= 0xC0;
 601               		.loc 1 779 4 is_stmt 1 view .LVU150
 602               		.loc 1 779 14 is_stmt 0 view .LVU151
 603 026e 8091 0000 		lds r24,curr_note
 604 0272 807C      		andi r24,lo8(-64)
 605 0274 8093 0000 		sts curr_note,r24
 606               	.L63:
 780:main.c        **** 
 781:main.c        **** 
 782:main.c        **** 	if ((curr_note & 0x3F) == 0) ps = 0;
 607               		.loc 1 782 2 is_stmt 1 view .LVU152
 608               		.loc 1 782 17 is_stmt 0 view .LVU153
 609 0278 4091 0000 		lds r20,curr_note
 610 027c 842F      		mov r24,r20
 611 027e 8F73      		andi r24,lo8(63)
 612               		.loc 1 782 5 view .LVU154
 613 0280 01F4      		brne .L64
 614               		.loc 1 782 34 view .LVU155
 615 0282 C0E0      		ldi r28,0
 616               	.LVL23:
 617               	.L64:
 783:main.c        **** 
 784:main.c        **** 	  note_on((curr_note & 0x3F) + ps,
 618               		.loc 1 784 4 is_stmt 1 view .LVU156
 785:main.c        **** 		      (prev_note >> 7) | all_slide,  // slide is from prev note!
 786:main.c        **** 		      ((curr_note>>6) & 0x1) | all_accent);       // accent
 619               		.loc 1 786 32 is_stmt 0 view .LVU157
 620 0284 3091 0000 		lds r19,all_accent
 784:main.c        **** 		      (prev_note >> 7) | all_slide,  // slide is from prev note!
 621               		.loc 1 784 4 view .LVU158
 622 0288 2091 0000 		lds r18,all_slide
 623               		.loc 1 786 25 view .LVU159
 624 028c 46FB      		bst r20,6
 625 028e 4427      		clr r20
 626 0290 40F9      		bld r20,0
 627               		.loc 1 786 32 view .LVU160
 628 0292 432B      		or r20,r19
 784:main.c        **** 		      (prev_note >> 7) | all_slide,  // slide is from prev note!
 629               		.loc 1 784 4 view .LVU161
 630 0294 6091 0000 		lds r22,prev_note
 631 0298 661F      		rol r22
 632 029a 6627      		clr r22
 633 029c 661F      		rol r22
 634 029e 622B      		or r22,r18
 635 02a0 8C0F      		add r24,r28
 636 02a2 0E94 0000 		call note_on
 637               	.LVL24:
 787:main.c        **** 	  midi_send_note_on(curr_note + ps);
 638               		.loc 1 787 4 is_stmt 1 view .LVU162
 639 02a6 8091 0000 		lds r24,curr_note
 640 02aa 8C0F      		add r24,r28
 641 02ac 0E94 0000 		call midi_send_note_on
 642               	.LVL25:
 643               	/* epilogue start */
 788:main.c        **** } 
 644               		.loc 1 788 1 is_stmt 0 view .LVU163
 645 02b0 CF91      		pop r28
 646               	.LVL26:
 647               		.loc 1 788 1 view .LVU164
 648 02b2 0895      		ret
 649               		.cfi_endproc
 650               	.LFE14:
 652               	.global	load_next_chain
 654               	load_next_chain:
 655               	.LVL27:
 656               	.LFB15:
 789:main.c        **** 
 790:main.c        **** void load_next_chain(uint8_t reset) {
 657               		.loc 1 790 37 is_stmt 1 view -0
 658               		.cfi_startproc
 659               		.loc 1 790 37 is_stmt 0 view .LVU166
 660 02b4 CF93      		push r28
 661               		.cfi_def_cfa_offset 3
 662               		.cfi_offset 28, -2
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 1 */
 666               	.L__stack_usage = 1
 667 02b6 C82F      		mov r28,r24
 791:main.c        ****   uint8_t i;
 668               		.loc 1 791 3 is_stmt 1 view .LVU167
 792:main.c        **** 	  if (!chains_equiv(next_chain, curr_chain) ||
 669               		.loc 1 792 4 view .LVU168
 670               		.loc 1 792 9 is_stmt 0 view .LVU169
 671 02b8 60E0      		ldi r22,lo8(curr_chain)
 672 02ba 70E0      		ldi r23,hi8(curr_chain)
 673 02bc 80E0      		ldi r24,lo8(next_chain)
 674 02be 90E0      		ldi r25,hi8(next_chain)
 675               	.LVL28:
 676               		.loc 1 792 9 view .LVU170
 677 02c0 0E94 0000 		call chains_equiv
 678               	.LVL29:
 679               		.loc 1 792 7 view .LVU171
 680 02c4 8823      		tst r24
 681 02c6 01F0      		breq .L73
 793:main.c        **** 	      (curr_bank != next_bank)) {
 682               		.loc 1 793 19 discriminator 1 view .LVU172
 683 02c8 9091 0000 		lds r25,curr_bank
 684 02cc 8091 0000 		lds r24,next_bank
 792:main.c        **** 	  if (!chains_equiv(next_chain, curr_chain) ||
 685               		.loc 1 792 46 discriminator 1 view .LVU173
 686 02d0 9817      		cp r25,r24
 687 02d2 01F0      		breq .L70
 688               	.L73:
 689 02d4 30E0      		ldi r19,0
 690 02d6 20E0      		ldi r18,0
 691               	.L71:
 692               	.LVL30:
 794:main.c        **** 
 795:main.c        **** 	    // copy next pattern chain into current pattern chain
 796:main.c        **** 	    for (i=0; i<MAX_CHAIN; i++) 
 797:main.c        **** 	      curr_chain[i] = next_chain[i];
 693               		.loc 1 797 8 is_stmt 1 discriminator 3 view .LVU174
 694               		.loc 1 797 34 is_stmt 0 discriminator 3 view .LVU175
 695 02d8 F901      		movw r30,r18
 696 02da E050      		subi r30,lo8(-(next_chain))
 697 02dc F040      		sbci r31,hi8(-(next_chain))
 698 02de 8081      		ld r24,Z
 699               		.loc 1 797 22 discriminator 3 view .LVU176
 700 02e0 F901      		movw r30,r18
 701 02e2 E050      		subi r30,lo8(-(curr_chain))
 702 02e4 F040      		sbci r31,hi8(-(curr_chain))
 703 02e6 8083      		st Z,r24
 704               	.LVL31:
 705               		.loc 1 797 22 discriminator 3 view .LVU177
 706 02e8 2F5F      		subi r18,-1
 707 02ea 3F4F      		sbci r19,-1
 708               	.LVL32:
 796:main.c        **** 	      curr_chain[i] = next_chain[i];
 709               		.loc 1 796 6 discriminator 3 view .LVU178
 710 02ec 2032      		cpi r18,32
 711 02ee 3105      		cpc r19,__zero_reg__
 712 02f0 01F4      		brne .L71
 798:main.c        **** 	    
 799:main.c        **** 	    if (reset) curr_chain_index = 0;  // reset to beginning
 713               		.loc 1 799 6 is_stmt 1 view .LVU179
 714               		.loc 1 799 9 is_stmt 0 view .LVU180
 715 02f2 C111      		cpse r28,__zero_reg__
 716               		.loc 1 799 17 is_stmt 1 discriminator 1 view .LVU181
 717               		.loc 1 799 34 is_stmt 0 discriminator 1 view .LVU182
 718 02f4 1092 0000 		sts curr_chain_index,__zero_reg__
 719               	.L72:
 800:main.c        **** 
 801:main.c        **** 	    // reset the pitch
 802:main.c        **** 	    next_pitch_shift = curr_pitch_shift = 0;
 720               		.loc 1 802 6 is_stmt 1 view .LVU183
 721               		.loc 1 802 42 is_stmt 0 view .LVU184
 722 02f8 1092 0000 		sts curr_pitch_shift,__zero_reg__
 723               		.loc 1 802 23 view .LVU185
 724 02fc 1092 0000 		sts next_pitch_shift,__zero_reg__
 803:main.c        **** 
 804:main.c        **** 	    clear_notekey_leds();
 725               		.loc 1 804 6 is_stmt 1 view .LVU186
 726 0300 0E94 0000 		call clear_notekey_leds
 727               	.LVL33:
 805:main.c        **** 	    clear_blinking_leds();
 728               		.loc 1 805 6 view .LVU187
 729 0304 0E94 0000 		call clear_blinking_leds
 730               	.LVL34:
 731               	.L70:
 806:main.c        **** 	  }
 807:main.c        **** 	  
 808:main.c        **** 	  curr_bank = next_bank;
 732               		.loc 1 808 4 view .LVU188
 733               		.loc 1 808 14 is_stmt 0 view .LVU189
 734 0308 8091 0000 		lds r24,next_bank
 735 030c 8093 0000 		sts curr_bank,r24
 809:main.c        **** 	  curr_pitch_shift = next_pitch_shift;
 736               		.loc 1 809 4 is_stmt 1 view .LVU190
 737               		.loc 1 809 21 is_stmt 0 view .LVU191
 738 0310 8091 0000 		lds r24,next_pitch_shift
 739 0314 8093 0000 		sts curr_pitch_shift,r24
 740               	/* epilogue start */
 810:main.c        **** }
 741               		.loc 1 810 1 view .LVU192
 742 0318 CF91      		pop r28
 743               	.LVL35:
 744               		.loc 1 810 1 view .LVU193
 745 031a 0895      		ret
 746               		.cfi_endproc
 747               	.LFE15:
 749               	.global	random
 751               	random:
 752               	.LFB16:
 811:main.c        **** 
 812:main.c        **** /********************* Utilities *********************/
 813:main.c        **** /*
 814:main.c        **** void step() {
 815:main.c        ****   uart_getchar();
 816:main.c        **** }
 817:main.c        **** 
 818:main.c        **** 
 819:main.c        **** void halt() {
 820:main.c        ****   putstring("halting");
 821:main.c        ****   // turn off interrupts??
 822:main.c        ****   while (1) {
 823:main.c        ****   }
 824:main.c        **** }
 825:main.c        **** */
 826:main.c        **** 
 827:main.c        **** 
 828:main.c        **** uint8_t random(void) {
 753               		.loc 1 828 22 is_stmt 1 view -0
 754               		.cfi_startproc
 755               	/* prologue: function */
 756               	/* frame size = 0 */
 757               	/* stack size = 0 */
 758               	.L__stack_usage = 0
 829:main.c        ****   rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2))
 759               		.loc 1 829 3 view .LVU195
 830:main.c        **** 	       & 00000001)
 760               		.loc 1 830 9 is_stmt 0 view .LVU196
 761 031c 9091 0000 		lds r25,rand
 762 0320 892F      		mov r24,r25
 763 0322 881F      		rol r24
 764 0324 8827      		clr r24
 765 0326 881F      		rol r24
 766 0328 292F      		mov r18,r25
 767 032a 2295      		swap r18
 768 032c 2695      		lsr r18
 769 032e 2695      		lsr r18
 770 0330 2370      		andi r18,lo8(3)
 771 0332 8227      		eor r24,r18
 772 0334 292F      		mov r18,r25
 773 0336 2295      		swap r18
 774 0338 2F70      		andi r18,lo8(15)
 775 033a 8227      		eor r24,r18
 776 033c 292F      		mov r18,r25
 777 033e 2695      		lsr r18
 778 0340 2695      		lsr r18
 779 0342 8227      		eor r24,r18
 780 0344 8170      		andi r24,lo8(1)
 831:main.c        **** 	      | (rand << 1)); /*Or with the register shifted right.*/
 781               		.loc 1 831 16 view .LVU197
 782 0346 990F      		lsl r25
 783               		.loc 1 831 8 view .LVU198
 784 0348 892B      		or r24,r25
 829:main.c        ****   rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2))
 785               		.loc 1 829 8 view .LVU199
 786 034a 8093 0000 		sts rand,r24
 832:main.c        ****   return rand; /*Return the first bit.*/
 787               		.loc 1 832 3 is_stmt 1 view .LVU200
 788               	/* epilogue start */
 833:main.c        **** }
 789               		.loc 1 833 1 is_stmt 0 view .LVU201
 790 034e 0895      		ret
 791               		.cfi_endproc
 792               	.LFE16:
 794               	.global	do_tempo
 796               	do_tempo:
 797               	.LFB2:
 126:main.c        ****   uint8_t curr_function = function;
 798               		.loc 1 126 21 is_stmt 1 view -0
 799               		.cfi_startproc
 800 0350 CF93      		push r28
 801               		.cfi_def_cfa_offset 3
 802               		.cfi_offset 28, -2
 803               	/* prologue: function */
 804               	/* frame size = 0 */
 805               	/* stack size = 1 */
 806               	.L__stack_usage = 1
 127:main.c        ****   uint8_t division_factor = PATT_LENGTH/4;
 807               		.loc 1 127 3 view .LVU203
 127:main.c        ****   uint8_t division_factor = PATT_LENGTH/4;
 808               		.loc 1 127 11 is_stmt 0 view .LVU204
 809 0352 C091 0000 		lds r28,function
 810               	.LVL36:
 128:main.c        ****     
 811               		.loc 1 128 3 is_stmt 1 view .LVU205
 128:main.c        ****     
 812               		.loc 1 128 11 is_stmt 0 view .LVU206
 813 0356 6091 0000 		lds r22,PATT_LENGTH
 814 035a 6695      		lsr r22
 815 035c 6695      		lsr r22
 816               	.LVL37:
 130:main.c        **** 
 817               		.loc 1 130 3 is_stmt 1 view .LVU207
 818               	/* #APP */
 819               	 ;  130 "main.c" 1
 820 035e F894      		cli
 821               	 ;  0 "" 2
 134:main.c        ****       dinsync_counter = 0;
 822               		.loc 1 134 5 view .LVU208
 134:main.c        ****       dinsync_counter = 0;
 823               		.loc 1 134 25 is_stmt 0 view .LVU209
 824               	/* #NOAPP */
 825 0360 2091 0000 		lds r18,dinsync_counter
 134:main.c        ****       dinsync_counter = 0;
 826               		.loc 1 134 39 view .LVU210
 827 0364 70E0      		ldi r23,0
 828 0366 88E1      		ldi r24,lo8(24)
 829 0368 90E0      		ldi r25,0
 830 036a 0E94 0000 		call __divmodhi4
 831               	.LVL38:
 134:main.c        ****       dinsync_counter = 0;
 832               		.loc 1 134 8 view .LVU211
 833 036e 2617      		cp r18,r22
 834 0370 1706      		cpc __zero_reg__,r23
 835 0372 04F0      		brlt .L81
 135:main.c        **** 	  if (swing_it) swing_time = new_swing_time;
 836               		.loc 1 135 7 is_stmt 1 view .LVU212
 135:main.c        **** 	  if (swing_it) swing_time = new_swing_time;
 837               		.loc 1 135 23 is_stmt 0 view .LVU213
 838 0374 1092 0000 		sts dinsync_counter,__zero_reg__
 136:main.c        **** 	  if (!(note_counter & 0x1)) swing_it = !swing_it;
 839               		.loc 1 136 4 is_stmt 1 view .LVU214
 136:main.c        **** 	  if (!(note_counter & 0x1)) swing_it = !swing_it;
 840               		.loc 1 136 8 is_stmt 0 view .LVU215
 841 0378 9091 0000 		lds r25,swing_it
 136:main.c        **** 	  if (!(note_counter & 0x1)) swing_it = !swing_it;
 842               		.loc 1 136 7 view .LVU216
 843 037c 9923      		tst r25
 844 037e 01F0      		breq .L82
 136:main.c        **** 	  if (!(note_counter & 0x1)) swing_it = !swing_it;
 845               		.loc 1 136 18 is_stmt 1 discriminator 1 view .LVU217
 136:main.c        **** 	  if (!(note_counter & 0x1)) swing_it = !swing_it;
 846               		.loc 1 136 29 is_stmt 0 discriminator 1 view .LVU218
 847 0380 8091 0000 		lds r24,new_swing_time
 848 0384 8093 0000 		sts swing_time,r24
 849               	.L82:
 137:main.c        **** 	}
 850               		.loc 1 137 4 is_stmt 1 view .LVU219
 137:main.c        **** 	}
 851               		.loc 1 137 23 is_stmt 0 view .LVU220
 852 0388 8091 0000 		lds r24,note_counter
 137:main.c        **** 	}
 853               		.loc 1 137 7 view .LVU221
 854 038c 80FD      		sbrc r24,0
 855 038e 00C0      		rjmp .L81
 137:main.c        **** 	}
 856               		.loc 1 137 31 is_stmt 1 discriminator 1 view .LVU222
 137:main.c        **** 	}
 857               		.loc 1 137 42 is_stmt 0 discriminator 1 view .LVU223
 858 0390 81E0      		ldi r24,lo8(1)
 859 0392 9111      		cpse r25,__zero_reg__
 860 0394 80E0      		ldi r24,0
 861               	.L84:
 137:main.c        **** 	}
 862               		.loc 1 137 40 discriminator 1 view .LVU224
 863 0396 8093 0000 		sts swing_it,r24
 864               	.L81:
 140:main.c        ****     if (dinsync_counter & 0x1)
 865               		.loc 1 140 2 is_stmt 1 view .LVU225
 140:main.c        ****     if (dinsync_counter & 0x1)
 866               		.loc 1 140 26 is_stmt 0 view .LVU226
 867 039a 8091 0000 		lds r24,sync
 868 039e 8150      		subi r24,lo8(-(-1))
 140:main.c        ****     if (dinsync_counter & 0x1)
 869               		.loc 1 140 5 view .LVU227
 870 03a0 8230      		cpi r24,lo8(2)
 871 03a2 00F0      		brlo .L85
 141:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 872               		.loc 1 141 5 is_stmt 1 view .LVU228
 141:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 873               		.loc 1 141 25 is_stmt 0 view .LVU229
 874 03a4 8091 0000 		lds r24,dinsync_counter
 141:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 875               		.loc 1 141 8 view .LVU230
 876 03a8 80FF      		sbrs r24,0
 877 03aa 00C0      		rjmp .L86
 142:main.c        ****     else {
 878               		.loc 1 142 7 is_stmt 1 view .LVU231
 879 03ac 9498      		cbi 0x12,4
 880               	.LVL39:
 881               	.L85:
 151:main.c        **** 		(!swing_it && dinsync_counter != 0)){
 882               		.loc 1 151 2 view .LVU232
 151:main.c        **** 		(!swing_it && dinsync_counter != 0)){
 883               		.loc 1 151 5 is_stmt 0 view .LVU233
 884 03ae 8091 0000 		lds r24,swing_it
 885 03b2 8823      		tst r24
 886 03b4 01F0      		breq .L87
 151:main.c        **** 		(!swing_it && dinsync_counter != 0)){
 887               		.loc 1 151 35 discriminator 1 view .LVU234
 888 03b6 9091 0000 		lds r25,dinsync_counter
 889 03ba 8091 0000 		lds r24,swing_time
 151:main.c        **** 		(!swing_it && dinsync_counter != 0)){
 890               		.loc 1 151 16 discriminator 1 view .LVU235
 891 03be 9813      		cpse r25,r24
 892 03c0 00C0      		rjmp .L88
 893               	.L89:
 157:main.c        **** //  }
 894               		.loc 1 157 2 is_stmt 1 view .LVU236
 157:main.c        **** //  }
 895               		.loc 1 157 17 is_stmt 0 view .LVU237
 896 03c2 8091 0000 		lds r24,dinsync_counter
 897 03c6 8F5F      		subi r24,lo8(-(1))
 898 03c8 8093 0000 		sts dinsync_counter,r24
 161:main.c        **** 
 899               		.loc 1 161 1 is_stmt 1 view .LVU238
 161:main.c        **** 
 900               		.loc 1 161 10 is_stmt 0 view .LVU239
 901 03cc 8091 0000 		lds r24,skipit
 902 03d0 91E0      		ldi r25,lo8(1)
 903 03d2 8111      		cpse r24,__zero_reg__
 904 03d4 90E0      		ldi r25,0
 905               	.L91:
 161:main.c        **** 
 906               		.loc 1 161 8 view .LVU240
 907 03d6 9093 0000 		sts skipit,r25
 163:main.c        **** /* */
 908               		.loc 1 163 1 is_stmt 1 view .LVU241
 163:main.c        **** /* */
 909               		.loc 1 163 4 is_stmt 0 view .LVU242
 910 03da 9091 0000 		lds r25,runhalf
 911 03de 9111      		cpse r25,__zero_reg__
 912 03e0 00C0      		rjmp .L92
 163:main.c        **** /* */
 913               		.loc 1 163 15 discriminator 1 view .LVU243
 914 03e2 9091 0000 		lds r25,onemore
 915 03e6 9923      		tst r25
 916 03e8 01F0      		breq .L93
 163:main.c        **** /* */
 917               		.loc 1 163 28 view .LVU244
 918 03ea 8111      		cpse r24,__zero_reg__
 919 03ec 00C0      		rjmp .L93
 920 03ee 00C0      		rjmp .L144
 921               	.LVL40:
 922               	.L86:
 144:main.c        ****       midi_putchar(MIDI_CLOCK);
 923               		.loc 1 144 7 is_stmt 1 view .LVU245
 924 03f0 949A      		sbi 0x12,4
 145:main.c        ****     }
 925               		.loc 1 145 7 view .LVU246
 926 03f2 88EF      		ldi r24,lo8(-8)
 927 03f4 0E94 0000 		call midi_putchar
 928               	.LVL41:
 145:main.c        ****     }
 929               		.loc 1 145 7 is_stmt 0 view .LVU247
 930 03f8 00C0      		rjmp .L85
 931               	.L87:
 152:main.c        **** 	    dinsync_counter++;
 932               		.loc 1 152 33 view .LVU248
 933 03fa 8091 0000 		lds r24,dinsync_counter
 152:main.c        **** 	    dinsync_counter++;
 934               		.loc 1 152 14 view .LVU249
 935 03fe 8823      		tst r24
 936 0400 01F0      		breq .L89
 937               	.L88:
 153:main.c        **** 		sei();
 938               		.loc 1 153 6 is_stmt 1 view .LVU250
 153:main.c        **** 		sei();
 939               		.loc 1 153 21 is_stmt 0 view .LVU251
 940 0402 8091 0000 		lds r24,dinsync_counter
 941 0406 8F5F      		subi r24,lo8(-(1))
 942 0408 8093 0000 		sts dinsync_counter,r24
 154:main.c        **** 		return;
 943               		.loc 1 154 3 is_stmt 1 view .LVU252
 944               	.LVL42:
 945               	.L143:
 433:main.c        **** }
 946               		.loc 1 433 3 view .LVU253
 947               	/* #APP */
 948               	 ;  433 "main.c" 1
 949 040c 7894      		sei
 950               	 ;  0 "" 2
 951               	/* #NOAPP */
 952               	/* epilogue start */
 434:main.c        **** 
 953               		.loc 1 434 1 is_stmt 0 view .LVU254
 954 040e CF91      		pop r28
 955 0410 0895      		ret
 956               	.LVL43:
 957               	.L92:
 163:main.c        **** /* */
 958               		.loc 1 163 28 discriminator 3 view .LVU255
 959 0412 8823      		tst r24
 960 0414 01F4      		brne .+2
 961 0416 00C0      		rjmp .L95
 962               	.L93:
 167:main.c        ****     note_counter = 0;
 963               		.loc 1 167 3 is_stmt 1 view .LVU256
 167:main.c        ****     note_counter = 0;
 964               		.loc 1 167 20 is_stmt 0 view .LVU257
 965 0418 8091 0000 		lds r24,note_counter
 167:main.c        ****     note_counter = 0;
 966               		.loc 1 167 5 view .LVU258
 967 041c 8830      		cpi r24,lo8(8)
 968 041e 00F0      		brlo .L96
 168:main.c        ****   
 969               		.loc 1 168 5 is_stmt 1 view .LVU259
 168:main.c        ****   
 970               		.loc 1 168 18 is_stmt 0 view .LVU260
 971 0420 1092 0000 		sts note_counter,__zero_reg__
 972               	.L96:
 170:main.c        ****   
 973               		.loc 1 170 3 is_stmt 1 view .LVU261
 170:main.c        ****   
 974               		.loc 1 170 20 is_stmt 0 view .LVU262
 975 0424 8091 0000 		lds r24,note_counter
 976 0428 C150      		subi r28,lo8(-(-1))
 977               	.LVL44:
 170:main.c        ****   
 978               		.loc 1 170 6 view .LVU263
 979 042a 80FF      		sbrs r24,0
 980 042c 00C0      		rjmp .L97
 172:main.c        ****     case RANDOM_MODE_FUNC:
 981               		.loc 1 172 5 is_stmt 1 view .LVU264
 982 042e CF30      		cpi r28,lo8(15)
 983 0430 00F4      		brsh .L105
 984 0432 EC2F      		mov r30,r28
 985 0434 F0E0      		ldi r31,0
 986 0436 E050      		subi r30,lo8(-(gs(.L100)))
 987 0438 F040      		sbci r31,hi8(-(gs(.L100)))
 988 043a 0C94 0000 		jmp __tablejump2__
 989               		.section	.jumptables.gcc.do_tempo,"a",@progbits
 990               		.p2align	1
 991               	.L100:
 992 0000 0000      		.word gs(.L104)
 993 0002 0000      		.word gs(.L105)
 994 0004 0000      		.word gs(.L102)
 995 0006 0000      		.word gs(.L105)
 996 0008 0000      		.word gs(.L101)
 997 000a 0000      		.word gs(.L105)
 998 000c 0000      		.word gs(.L99)
 999 000e 0000      		.word gs(.L103)
 1000 0010 0000      		.word gs(.L101)
 1001 0012 0000      		.word gs(.L105)
 1002 0014 0000      		.word gs(.L99)
 1003 0016 0000      		.word gs(.L102)
 1004 0018 0000      		.word gs(.L101)
 1005 001a 0000      		.word gs(.L105)
 1006 001c 0000      		.word gs(.L99)
 1007               		.text
 1008               	.L103:
 174:main.c        ****       midi_send_note_off(curr_note);
 1009               		.loc 1 174 7 view .LVU265
 1010 043e 80E0      		ldi r24,0
 1011 0440 0E94 0000 		call note_off
 1012               	.LVL45:
 175:main.c        ****       break;
 1013               		.loc 1 175 7 view .LVU266
 1014 0444 8091 0000 		lds r24,curr_note
 1015 0448 0E94 0000 		call midi_send_note_off
 1016               	.LVL46:
 176:main.c        **** 
 1017               		.loc 1 176 7 view .LVU267
 1018               	.L105:
 416:main.c        ****     set_led(LED_TEMPO);
 1019               		.loc 1 416 3 view .LVU268
 416:main.c        ****     set_led(LED_TEMPO);
 1020               		.loc 1 416 20 is_stmt 0 view .LVU269
 1021 044c 8091 0000 		lds r24,note_counter
 416:main.c        ****     set_led(LED_TEMPO);
 1022               		.loc 1 416 6 view .LVU270
 1023 0450 8430      		cpi r24,lo8(4)
 1024 0452 00F0      		brlo .+2
 1025 0454 00C0      		rjmp .L141
 417:main.c        ****     blink_leds_off();
 1026               		.loc 1 417 5 is_stmt 1 view .LVU271
 1027 0456 85E2      		ldi r24,lo8(37)
 1028 0458 0E94 0000 		call set_led
 1029               	.LVL47:
 418:main.c        ****    }
 1030               		.loc 1 418 5 view .LVU272
 1031 045c 0E94 0000 		call blink_leds_off
 1032               	.LVL48:
 1033               	.L142:
 425:main.c        **** 
 1034               		.loc 1 425 3 view .LVU273
 1035 0460 0E94 0000 		call clock_leds
 1036               	.LVL49:
 427:main.c        **** 
 1037               		.loc 1 427 3 view .LVU274
 427:main.c        **** 
 1038               		.loc 1 427 15 is_stmt 0 view .LVU275
 1039 0464 8091 0000 		lds r24,note_counter
 1040 0468 8F5F      		subi r24,lo8(-(1))
 1041 046a 8093 0000 		sts note_counter,r24
 1042 046e 00C0      		rjmp .L143
 1043               	.L104:
 179:main.c        **** 	if (curr_note != 0xFF) {
 1044               		.loc 1 179 7 is_stmt 1 view .LVU276
 179:main.c        **** 	if (curr_note != 0xFF) {
 1045               		.loc 1 179 11 is_stmt 0 view .LVU277
 1046 0470 8091 0000 		lds r24,play_loaded_pattern
 179:main.c        **** 	if (curr_note != 0xFF) {
 1047               		.loc 1 179 10 view .LVU278
 1048 0474 8111      		cpse r24,__zero_reg__
 1049 0476 00C0      		rjmp .L106
 179:main.c        **** 	if (curr_note != 0xFF) {
 1050               		.loc 1 179 31 discriminator 1 view .LVU279
 1051 0478 8091 0000 		lds r24,play_loaded_track
 1052 047c 8823      		tst r24
 1053 047e 01F0      		breq .L107
 1054               	.L106:
 180:main.c        **** 	  note_off(((curr_note >> 7) & 0x1)  | all_slide);        // slide
 1055               		.loc 1 180 2 is_stmt 1 view .LVU280
 180:main.c        **** 	  note_off(((curr_note >> 7) & 0x1)  | all_slide);        // slide
 1056               		.loc 1 180 16 is_stmt 0 view .LVU281
 1057 0480 9091 0000 		lds r25,curr_note
 180:main.c        **** 	  note_off(((curr_note >> 7) & 0x1)  | all_slide);        // slide
 1058               		.loc 1 180 5 view .LVU282
 1059 0484 9F3F      		cpi r25,lo8(-1)
 1060 0486 01F0      		breq .L107
 181:main.c        **** 	}
 1061               		.loc 1 181 4 is_stmt 1 view .LVU283
 181:main.c        **** 	}
 1062               		.loc 1 181 39 is_stmt 0 view .LVU284
 1063 0488 8091 0000 		lds r24,all_slide
 1064 048c 991F      		rol r25
 1065 048e 9927      		clr r25
 1066 0490 991F      		rol r25
 181:main.c        **** 	}
 1067               		.loc 1 181 4 view .LVU285
 1068 0492 892B      		or r24,r25
 1069 0494 0E94 0000 		call note_off
 1070               	.LVL50:
 1071               	.L107:
 184:main.c        **** 	// last note of this pattern this pattern?
 1072               		.loc 1 184 7 is_stmt 1 view .LVU286
 184:main.c        **** 	// last note of this pattern this pattern?
 1073               		.loc 1 184 11 is_stmt 0 view .LVU287
 1074 0498 8091 0000 		lds r24,play_loaded_track
 184:main.c        **** 	// last note of this pattern this pattern?
 1075               		.loc 1 184 10 view .LVU288
 1076 049c 8823      		tst r24
 1077 049e 01F0      		breq .L105
 186:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1078               		.loc 1 186 2 is_stmt 1 view .LVU289
 186:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1079               		.loc 1 186 26 is_stmt 0 view .LVU290
 1080 04a0 9091 0000 		lds r25,curr_pattern_index
 186:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1081               		.loc 1 186 5 view .LVU291
 1082 04a4 8091 0000 		lds r24,PATT_LENGTH
 1083 04a8 9817      		cp r25,r24
 1084 04aa 00F4      		brsh .L109
 187:main.c        **** 
 1085               		.loc 1 187 19 discriminator 1 view .LVU292
 1086 04ac E091 0000 		lds r30,curr_pattern_index
 1087 04b0 F0E0      		ldi r31,0
 1088 04b2 E050      		subi r30,lo8(-(pattern_buff))
 1089 04b4 F040      		sbci r31,hi8(-(pattern_buff))
 1090 04b6 8081      		ld r24,Z
 186:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1091               		.loc 1 186 42 discriminator 1 view .LVU293
 1092 04b8 8F3F      		cpi r24,lo8(-1)
 1093 04ba 01F4      		brne .L105
 1094               	.L109:
 189:main.c        **** 	  curr_track_index++;      // go to next patt in chain
 1095               		.loc 1 189 4 is_stmt 1 view .LVU294
 189:main.c        **** 	  curr_track_index++;      // go to next patt in chain
 1096               		.loc 1 189 23 is_stmt 0 view .LVU295
 1097 04bc 1092 0000 		sts curr_pattern_index,__zero_reg__
 190:main.c        **** 	  // last pattern in this chain?
 1098               		.loc 1 190 4 is_stmt 1 view .LVU296
 190:main.c        **** 	  // last pattern in this chain?
 1099               		.loc 1 190 20 is_stmt 0 view .LVU297
 1100 04c0 8091 0000 		lds r24,curr_track_index
 1101 04c4 8F5F      		subi r24,lo8(-(1))
 1102 04c6 8093 0000 		sts curr_track_index,r24
 192:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1103               		.loc 1 192 4 is_stmt 1 view .LVU298
 192:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1104               		.loc 1 192 26 is_stmt 0 view .LVU299
 1105 04ca 8091 0000 		lds r24,curr_track_index
 192:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1106               		.loc 1 192 7 view .LVU300
 1107 04ce 8031      		cpi r24,lo8(16)
 1108 04d0 00F4      		brsh .L111
 193:main.c        **** 	    //putstring("track loop\n\r");
 1109               		.loc 1 193 19 discriminator 1 view .LVU301
 1110 04d2 E091 0000 		lds r30,curr_track_index
 1111 04d6 F0E0      		ldi r31,0
 1112 04d8 EE0F      		lsl r30
 1113 04da FF1F      		rol r31
 1114 04dc E050      		subi r30,lo8(-(track_buff))
 1115 04de F040      		sbci r31,hi8(-(track_buff))
 1116 04e0 8081      		ld r24,Z
 1117 04e2 9181      		ldd r25,Z+1
 192:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1118               		.loc 1 192 41 discriminator 1 view .LVU302
 1119 04e4 0196      		adiw r24,1
 1120 04e6 01F4      		brne .L112
 1121               	.L111:
 195:main.c        **** 	  }
 1122               		.loc 1 195 6 is_stmt 1 view .LVU303
 195:main.c        **** 	  }
 1123               		.loc 1 195 23 is_stmt 0 view .LVU304
 1124 04e8 1092 0000 		sts curr_track_index,__zero_reg__
 1125               	.L112:
 198:main.c        **** 	  if (curr_patt == END_OF_TRACK) {
 1126               		.loc 1 198 4 is_stmt 1 view .LVU305
 198:main.c        **** 	  if (curr_patt == END_OF_TRACK) {
 1127               		.loc 1 198 26 is_stmt 0 view .LVU306
 1128 04ec E091 0000 		lds r30,curr_track_index
 1129 04f0 F0E0      		ldi r31,0
 1130 04f2 EE0F      		lsl r30
 1131 04f4 FF1F      		rol r31
 1132 04f6 E050      		subi r30,lo8(-(track_buff))
 1133 04f8 F040      		sbci r31,hi8(-(track_buff))
 1134 04fa 8081      		ld r24,Z
 1135 04fc 9181      		ldd r25,Z+1
 198:main.c        **** 	  if (curr_patt == END_OF_TRACK) {
 1136               		.loc 1 198 14 view .LVU307
 1137 04fe 9093 0000 		sts curr_patt+1,r25
 1138 0502 8093 0000 		sts curr_patt,r24
 199:main.c        **** 	    // dont load the pattern, but make sure the pattern buffer wont play
 1139               		.loc 1 199 4 is_stmt 1 view .LVU308
 199:main.c        **** 	    // dont load the pattern, but make sure the pattern buffer wont play
 1140               		.loc 1 199 18 is_stmt 0 view .LVU309
 1141 0506 8091 0000 		lds r24,curr_patt
 1142 050a 9091 0000 		lds r25,curr_patt+1
 199:main.c        **** 	    // dont load the pattern, but make sure the pattern buffer wont play
 1143               		.loc 1 199 7 view .LVU310
 1144 050e 0196      		adiw r24,1
 1145 0510 01F4      		brne .L113
 201:main.c        **** 	  } else {
 1146               		.loc 1 201 6 is_stmt 1 view .LVU311
 201:main.c        **** 	  } else {
 1147               		.loc 1 201 22 is_stmt 0 view .LVU312
 1148 0512 8FEF      		ldi r24,lo8(-1)
 1149 0514 8093 0000 		sts pattern_buff,r24
 1150 0518 00C0      		rjmp .L105
 1151               	.L113:
 203:main.c        **** 	    clear_bank_leds();
 1152               		.loc 1 203 6 is_stmt 1 view .LVU313
 203:main.c        **** 	    clear_bank_leds();
 1153               		.loc 1 203 25 is_stmt 0 view .LVU314
 1154 051a 0E94 0000 		call load_curr_patt
 1155               	.LVL51:
 203:main.c        **** 	    clear_bank_leds();
 1156               		.loc 1 203 23 view .LVU315
 1157 051e 8093 0000 		sts curr_pitch_shift,r24
 204:main.c        **** 	  }
 1158               		.loc 1 204 6 is_stmt 1 view .LVU316
 1159 0522 0E94 0000 		call clear_bank_leds
 1160               	.LVL52:
 1161 0526 00C0      		rjmp .L105
 1162               	.L102:
 213:main.c        **** 		dispatch_note_off(curr_pitch_shift);
 1163               		.loc 1 213 7 view .LVU317
 213:main.c        **** 		dispatch_note_off(curr_pitch_shift);
 1164               		.loc 1 213 11 is_stmt 0 view .LVU318
 1165 0528 8091 0000 		lds r24,play_loaded_pattern
 213:main.c        **** 		dispatch_note_off(curr_pitch_shift);
 1166               		.loc 1 213 10 view .LVU319
 1167 052c 8823      		tst r24
 1168 052e 01F4      		brne .+2
 1169 0530 00C0      		rjmp .L105
 214:main.c        **** 
 1170               		.loc 1 214 3 is_stmt 1 view .LVU320
 1171 0532 8091 0000 		lds r24,curr_pitch_shift
 1172 0536 0E94 0000 		call dispatch_note_off
 1173               	.LVL53:
 216:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1174               		.loc 1 216 2 view .LVU321
 216:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1175               		.loc 1 216 26 is_stmt 0 view .LVU322
 1176 053a 9091 0000 		lds r25,curr_pattern_index
 216:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1177               		.loc 1 216 5 view .LVU323
 1178 053e 8091 0000 		lds r24,PATT_LENGTH
 1179 0542 9817      		cp r25,r24
 1180 0544 00F4      		brsh .L114
 217:main.c        **** 	  curr_pattern_index = 0;
 1181               		.loc 1 217 19 discriminator 1 view .LVU324
 1182 0546 E091 0000 		lds r30,curr_pattern_index
 1183 054a F0E0      		ldi r31,0
 1184 054c E050      		subi r30,lo8(-(pattern_buff))
 1185 054e F040      		sbci r31,hi8(-(pattern_buff))
 1186 0550 8081      		ld r24,Z
 216:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1187               		.loc 1 216 42 discriminator 1 view .LVU325
 1188 0552 8F3F      		cpi r24,lo8(-1)
 1189 0554 01F0      		breq .+2
 1190 0556 00C0      		rjmp .L105
 1191               	.L114:
 218:main.c        **** 	} 
 1192               		.loc 1 218 4 is_stmt 1 view .LVU326
 218:main.c        **** 	} 
 1193               		.loc 1 218 23 is_stmt 0 view .LVU327
 1194 0558 1092 0000 		sts curr_pattern_index,__zero_reg__
 1195 055c 00C0      		rjmp .L105
 1196               	.L99:
 226:main.c        **** 	    dispatch_note_off(curr_pitch_shift);
 1197               		.loc 1 226 7 is_stmt 1 view .LVU328
 226:main.c        **** 	    dispatch_note_off(curr_pitch_shift);
 1198               		.loc 1 226 11 is_stmt 0 view .LVU329
 1199 055e 8091 0000 		lds r24,playing
 226:main.c        **** 	    dispatch_note_off(curr_pitch_shift);
 1200               		.loc 1 226 10 view .LVU330
 1201 0562 8823      		tst r24
 1202 0564 01F4      		brne .+2
 1203 0566 00C0      		rjmp .L105
 227:main.c        **** 		
 1204               		.loc 1 227 6 is_stmt 1 view .LVU331
 1205 0568 8091 0000 		lds r24,curr_pitch_shift
 1206 056c 0E94 0000 		call dispatch_note_off
 1207               	.LVL54:
 230:main.c        **** 	    curr_pitch_shift = next_pitch_shift;
 1208               		.loc 1 230 4 view .LVU332
 230:main.c        **** 	    curr_pitch_shift = next_pitch_shift;
 1209               		.loc 1 230 7 is_stmt 0 view .LVU333
 1210 0570 8091 0000 		lds r24,loop
 1211 0574 8823      		tst r24
 1212 0576 01F0      		breq .L116
 230:main.c        **** 	    curr_pitch_shift = next_pitch_shift;
 1213               		.loc 1 230 35 discriminator 1 view .LVU334
 1214 0578 2091 0000 		lds r18,curr_pattern_index
 230:main.c        **** 	    curr_pitch_shift = next_pitch_shift;
 1215               		.loc 1 230 48 discriminator 1 view .LVU335
 1216 057c 8091 0000 		lds r24,loop_start
 1217 0580 8150      		subi r24,1
 1218 0582 990B      		sbc r25,r25
 230:main.c        **** 	    curr_pitch_shift = next_pitch_shift;
 1219               		.loc 1 230 13 discriminator 1 view .LVU336
 1220 0584 2817      		cp r18,r24
 1221 0586 1906      		cpc __zero_reg__,r25
 1222 0588 01F4      		brne .L116
 231:main.c        **** /* 8th note stuff */
 1223               		.loc 1 231 6 is_stmt 1 view .LVU337
 231:main.c        **** /* 8th note stuff */
 1224               		.loc 1 231 23 is_stmt 0 view .LVU338
 1225 058a 8091 0000 		lds r24,next_pitch_shift
 1226 058e 8093 0000 		sts curr_pitch_shift,r24
 233:main.c        **** {
 1227               		.loc 1 233 1 is_stmt 1 view .LVU339
 233:main.c        **** {
 1228               		.loc 1 233 13 is_stmt 0 view .LVU340
 1229 0592 8091 0000 		lds r24,eighths
 233:main.c        **** {
 1230               		.loc 1 233 4 view .LVU341
 1231 0596 9091 0000 		lds r25,runhalf
 1232 059a 9817      		cp r25,r24
 1233 059c 01F0      		breq .L118
 235:main.c        **** skipit = runhalf;
 1234               		.loc 1 235 1 is_stmt 1 view .LVU342
 235:main.c        **** skipit = runhalf;
 1235               		.loc 1 235 9 is_stmt 0 view .LVU343
 1236 059e 8093 0000 		sts runhalf,r24
 236:main.c        **** onemore = !skipit;
 1237               		.loc 1 236 1 is_stmt 1 view .LVU344
 236:main.c        **** onemore = !skipit;
 1238               		.loc 1 236 8 is_stmt 0 view .LVU345
 1239 05a2 8093 0000 		sts skipit,r24
 237:main.c        **** }
 1240               		.loc 1 237 1 is_stmt 1 view .LVU346
 237:main.c        **** }
 1241               		.loc 1 237 11 is_stmt 0 view .LVU347
 1242 05a6 91E0      		ldi r25,lo8(1)
 1243 05a8 8111      		cpse r24,__zero_reg__
 1244 05aa 90E0      		ldi r25,0
 1245               	.L119:
 237:main.c        **** }
 1246               		.loc 1 237 9 view .LVU348
 1247 05ac 9093 0000 		sts onemore,r25
 1248               	.L118:
 240:main.c        **** 		  curr_pattern_index = PATT_LENGTH;
 1249               		.loc 1 240 3 is_stmt 1 view .LVU349
 240:main.c        **** 		  curr_pattern_index = PATT_LENGTH;
 1250               		.loc 1 240 8 is_stmt 0 view .LVU350
 1251 05b0 60E0      		ldi r22,lo8(curr_chain)
 1252 05b2 70E0      		ldi r23,hi8(curr_chain)
 1253 05b4 80E0      		ldi r24,lo8(next_chain)
 1254 05b6 90E0      		ldi r25,hi8(next_chain)
 1255 05b8 0E94 0000 		call chains_equiv
 1256               	.LVL55:
 240:main.c        **** 		  curr_pattern_index = PATT_LENGTH;
 1257               		.loc 1 240 6 view .LVU351
 1258 05bc 8111      		cpse r24,__zero_reg__
 1259 05be 00C0      		rjmp .L116
 241:main.c        **** 		  loop_start = 1;
 1260               		.loc 1 241 5 is_stmt 1 view .LVU352
 241:main.c        **** 		  loop_start = 1;
 1261               		.loc 1 241 24 is_stmt 0 view .LVU353
 1262 05c0 8091 0000 		lds r24,PATT_LENGTH
 1263 05c4 8093 0000 		sts curr_pattern_index,r24
 242:main.c        **** 		  loop_end = PATT_LENGTH;
 1264               		.loc 1 242 5 is_stmt 1 view .LVU354
 242:main.c        **** 		  loop_end = PATT_LENGTH;
 1265               		.loc 1 242 16 is_stmt 0 view .LVU355
 1266 05c8 91E0      		ldi r25,lo8(1)
 1267 05ca 9093 0000 		sts loop_start,r25
 243:main.c        **** 		  loop = FALSE;
 1268               		.loc 1 243 5 is_stmt 1 view .LVU356
 243:main.c        **** 		  loop = FALSE;
 1269               		.loc 1 243 14 is_stmt 0 view .LVU357
 1270 05ce 8093 0000 		sts loop_end,r24
 244:main.c        **** 		}
 1271               		.loc 1 244 5 is_stmt 1 view .LVU358
 244:main.c        **** 		}
 1272               		.loc 1 244 10 is_stmt 0 view .LVU359
 1273 05d2 1092 0000 		sts loop,__zero_reg__
 1274               	.L116:
 250:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1275               		.loc 1 250 2 is_stmt 1 view .LVU360
 250:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1276               		.loc 1 250 26 is_stmt 0 view .LVU361
 1277 05d6 9091 0000 		lds r25,curr_pattern_index
 250:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1278               		.loc 1 250 5 view .LVU362
 1279 05da 8091 0000 		lds r24,PATT_LENGTH
 1280 05de 9817      		cp r25,r24
 1281 05e0 00F4      		brsh .L120
 251:main.c        **** 
 1282               		.loc 1 251 19 discriminator 1 view .LVU363
 1283 05e2 E091 0000 		lds r30,curr_pattern_index
 1284 05e6 F0E0      		ldi r31,0
 1285 05e8 E050      		subi r30,lo8(-(pattern_buff))
 1286 05ea F040      		sbci r31,hi8(-(pattern_buff))
 1287 05ec 8081      		ld r24,Z
 250:main.c        **** 	    (pattern_buff[curr_pattern_index] == 0xFF)) {
 1288               		.loc 1 250 42 discriminator 1 view .LVU364
 1289 05ee 8F3F      		cpi r24,lo8(-1)
 1290 05f0 01F0      		breq .+2
 1291 05f2 00C0      		rjmp .L105
 1292               	.L120:
 254:main.c        **** {
 1293               		.loc 1 254 1 is_stmt 1 view .LVU365
 254:main.c        **** {
 1294               		.loc 1 254 13 is_stmt 0 view .LVU366
 1295 05f4 8091 0000 		lds r24,eighths
 254:main.c        **** {
 1296               		.loc 1 254 4 view .LVU367
 1297 05f8 9091 0000 		lds r25,runhalf
 1298 05fc 9817      		cp r25,r24
 1299 05fe 01F0      		breq .L121
 256:main.c        **** skipit = runhalf;
 1300               		.loc 1 256 1 is_stmt 1 view .LVU368
 256:main.c        **** skipit = runhalf;
 1301               		.loc 1 256 9 is_stmt 0 view .LVU369
 1302 0600 8093 0000 		sts runhalf,r24
 257:main.c        **** onemore = !skipit;
 1303               		.loc 1 257 1 is_stmt 1 view .LVU370
 257:main.c        **** onemore = !skipit;
 1304               		.loc 1 257 8 is_stmt 0 view .LVU371
 1305 0604 8093 0000 		sts skipit,r24
 258:main.c        **** }
 1306               		.loc 1 258 1 is_stmt 1 view .LVU372
 258:main.c        **** }
 1307               		.loc 1 258 11 is_stmt 0 view .LVU373
 1308 0608 91E0      		ldi r25,lo8(1)
 1309 060a 8111      		cpse r24,__zero_reg__
 1310 060c 90E0      		ldi r25,0
 1311               	.L122:
 258:main.c        **** }
 1312               		.loc 1 258 9 view .LVU374
 1313 060e 9093 0000 		sts onemore,r25
 1314               	.L121:
 262:main.c        **** 	  curr_chain_index++;      // go to next patt in chain
 1315               		.loc 1 262 4 is_stmt 1 view .LVU375
 262:main.c        **** 	  curr_chain_index++;      // go to next patt in chain
 1316               		.loc 1 262 23 is_stmt 0 view .LVU376
 1317 0612 1092 0000 		sts curr_pattern_index,__zero_reg__
 263:main.c        **** 	  // last pattern in this chain?
 1318               		.loc 1 263 4 is_stmt 1 view .LVU377
 263:main.c        **** 	  // last pattern in this chain?
 1319               		.loc 1 263 20 is_stmt 0 view .LVU378
 1320 0616 8091 0000 		lds r24,curr_chain_index
 1321 061a 8F5F      		subi r24,lo8(-(1))
 1322 061c 8093 0000 		sts curr_chain_index,r24
 265:main.c        **** 	      (curr_chain[curr_chain_index] == 0xFF)) {
 1323               		.loc 1 265 4 is_stmt 1 view .LVU379
 265:main.c        **** 	      (curr_chain[curr_chain_index] == 0xFF)) {
 1324               		.loc 1 265 26 is_stmt 0 view .LVU380
 1325 0620 8091 0000 		lds r24,curr_chain_index
 265:main.c        **** 	      (curr_chain[curr_chain_index] == 0xFF)) {
 1326               		.loc 1 265 7 view .LVU381
 1327 0624 8032      		cpi r24,lo8(32)
 1328 0626 00F4      		brsh .L123
 266:main.c        **** 	    curr_chain_index = 0;
 1329               		.loc 1 266 19 discriminator 1 view .LVU382
 1330 0628 E091 0000 		lds r30,curr_chain_index
 1331 062c F0E0      		ldi r31,0
 1332 062e E050      		subi r30,lo8(-(curr_chain))
 1333 0630 F040      		sbci r31,hi8(-(curr_chain))
 1334 0632 8081      		ld r24,Z
 265:main.c        **** 	      (curr_chain[curr_chain_index] == 0xFF)) {
 1335               		.loc 1 265 40 discriminator 1 view .LVU383
 1336 0634 8F3F      		cpi r24,lo8(-1)
 1337 0636 01F4      		brne .L124
 1338               	.L123:
 267:main.c        **** 	  }
 1339               		.loc 1 267 6 is_stmt 1 view .LVU384
 267:main.c        **** 	  }
 1340               		.loc 1 267 23 is_stmt 0 view .LVU385
 1341 0638 1092 0000 		sts curr_chain_index,__zero_reg__
 1342               	.L124:
 270:main.c        **** 
 1343               		.loc 1 270 4 is_stmt 1 view .LVU386
 1344 063c 81E0      		ldi r24,lo8(1)
 1345 063e 0E94 0000 		call load_next_chain
 1346               	.LVL56:
 272:main.c        **** 	}
 1347               		.loc 1 272 4 view .LVU387
 1348 0642 E091 0000 		lds r30,curr_chain_index
 1349 0646 F0E0      		ldi r31,0
 1350 0648 E050      		subi r30,lo8(-(curr_chain))
 1351 064a F040      		sbci r31,hi8(-(curr_chain))
 1352 064c 6081      		ld r22,Z
 1353 064e 8091 0000 		lds r24,curr_bank
 1354 0652 0E94 0000 		call load_pattern
 1355               	.LVL57:
 1356 0656 00C0      		rjmp .L105
 1357               	.L101:
 282:main.c        **** 	    dispatch_note_off(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 1358               		.loc 1 282 7 view .LVU388
 282:main.c        **** 	    dispatch_note_off(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 1359               		.loc 1 282 11 is_stmt 0 view .LVU389
 1360 0658 8091 0000 		lds r24,playing
 282:main.c        **** 	    dispatch_note_off(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 1361               		.loc 1 282 10 view .LVU390
 1362 065c 8823      		tst r24
 1363 065e 01F4      		brne .+2
 1364 0660 00C0      		rjmp .L105
 283:main.c        **** 
 1365               		.loc 1 283 6 is_stmt 1 view .LVU391
 283:main.c        **** 
 1366               		.loc 1 283 43 is_stmt 0 view .LVU392
 1367 0662 8091 0000 		lds r24,curr_patt
 1368 0666 9091 0000 		lds r25,curr_patt+1
 1369 066a 0E94 0000 		call get_pitchshift_from_patt
 1370               	.LVL58:
 283:main.c        **** 
 1371               		.loc 1 283 6 view .LVU393
 1372 066e 9091 0000 		lds r25,curr_pitch_shift
 1373 0672 890F      		add r24,r25
 1374 0674 0E94 0000 		call dispatch_note_off
 1375               	.LVL59:
 286:main.c        **** 	    (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1376               		.loc 1 286 2 is_stmt 1 view .LVU394
 286:main.c        **** 	    (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1377               		.loc 1 286 26 is_stmt 0 view .LVU395
 1378 0678 9091 0000 		lds r25,curr_pattern_index
 286:main.c        **** 	    (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1379               		.loc 1 286 5 view .LVU396
 1380 067c 8091 0000 		lds r24,PATT_LENGTH
 1381 0680 9817      		cp r25,r24
 1382 0682 00F4      		brsh .L125
 287:main.c        **** 	  curr_pattern_index = 0;          // start next pattern in track
 1383               		.loc 1 287 19 discriminator 1 view .LVU397
 1384 0684 E091 0000 		lds r30,curr_pattern_index
 1385 0688 F0E0      		ldi r31,0
 1386 068a E050      		subi r30,lo8(-(pattern_buff))
 1387 068c F040      		sbci r31,hi8(-(pattern_buff))
 1388 068e 8081      		ld r24,Z
 286:main.c        **** 	    (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1389               		.loc 1 286 42 discriminator 1 view .LVU398
 1390 0690 8F3F      		cpi r24,lo8(-1)
 1391 0692 01F0      		breq .+2
 1392 0694 00C0      		rjmp .L105
 1393               	.L125:
 288:main.c        **** 	  curr_track_index++;      // go to next patt in chain
 1394               		.loc 1 288 4 is_stmt 1 view .LVU399
 288:main.c        **** 	  curr_track_index++;      // go to next patt in chain
 1395               		.loc 1 288 23 is_stmt 0 view .LVU400
 1396 0696 1092 0000 		sts curr_pattern_index,__zero_reg__
 289:main.c        **** 	  /*
 1397               		.loc 1 289 4 is_stmt 1 view .LVU401
 289:main.c        **** 	  /*
 1398               		.loc 1 289 20 is_stmt 0 view .LVU402
 1399 069a 8091 0000 		lds r24,curr_track_index
 1400 069e 8F5F      		subi r24,lo8(-(1))
 1401 06a0 8093 0000 		sts curr_track_index,r24
 296:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1402               		.loc 1 296 4 is_stmt 1 view .LVU403
 296:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1403               		.loc 1 296 26 is_stmt 0 view .LVU404
 1404 06a4 8091 0000 		lds r24,curr_track_index
 296:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1405               		.loc 1 296 7 view .LVU405
 1406 06a8 8031      		cpi r24,lo8(16)
 1407 06aa 00F4      		brsh .L126
 297:main.c        **** 	    curr_track_index = 0;
 1408               		.loc 1 297 19 discriminator 1 view .LVU406
 1409 06ac E091 0000 		lds r30,curr_track_index
 1410 06b0 F0E0      		ldi r31,0
 1411 06b2 EE0F      		lsl r30
 1412 06b4 FF1F      		rol r31
 1413 06b6 E050      		subi r30,lo8(-(track_buff))
 1414 06b8 F040      		sbci r31,hi8(-(track_buff))
 1415 06ba 8081      		ld r24,Z
 1416 06bc 9181      		ldd r25,Z+1
 296:main.c        **** 	      (track_buff[curr_track_index] == END_OF_TRACK)) {
 1417               		.loc 1 296 41 discriminator 1 view .LVU407
 1418 06be 0196      		adiw r24,1
 1419 06c0 01F4      		brne .L127
 1420               	.L126:
 298:main.c        **** 	    curr_chain_index++;      // go to next track in chain
 1421               		.loc 1 298 6 is_stmt 1 view .LVU408
 298:main.c        **** 	    curr_chain_index++;      // go to next track in chain
 1422               		.loc 1 298 23 is_stmt 0 view .LVU409
 1423 06c2 1092 0000 		sts curr_track_index,__zero_reg__
 299:main.c        **** 	    /*
 1424               		.loc 1 299 6 is_stmt 1 view .LVU410
 299:main.c        **** 	    /*
 1425               		.loc 1 299 22 is_stmt 0 view .LVU411
 1426 06c6 8091 0000 		lds r24,curr_chain_index
 1427 06ca 8F5F      		subi r24,lo8(-(1))
 1428 06cc 8093 0000 		sts curr_chain_index,r24
 315:main.c        **** 		(curr_chain[curr_chain_index] == 0xFF)) {
 1429               		.loc 1 315 6 is_stmt 1 view .LVU412
 315:main.c        **** 		(curr_chain[curr_chain_index] == 0xFF)) {
 1430               		.loc 1 315 28 is_stmt 0 view .LVU413
 1431 06d0 8091 0000 		lds r24,curr_chain_index
 315:main.c        **** 		(curr_chain[curr_chain_index] == 0xFF)) {
 1432               		.loc 1 315 9 view .LVU414
 1433 06d4 8032      		cpi r24,lo8(32)
 1434 06d6 00F4      		brsh .L128
 316:main.c        **** 	      curr_chain_index = 0;
 1435               		.loc 1 316 14 discriminator 1 view .LVU415
 1436 06d8 E091 0000 		lds r30,curr_chain_index
 1437 06dc F0E0      		ldi r31,0
 1438 06de E050      		subi r30,lo8(-(curr_chain))
 1439 06e0 F040      		sbci r31,hi8(-(curr_chain))
 1440 06e2 8081      		ld r24,Z
 315:main.c        **** 		(curr_chain[curr_chain_index] == 0xFF)) {
 1441               		.loc 1 315 42 discriminator 1 view .LVU416
 1442 06e4 8F3F      		cpi r24,lo8(-1)
 1443 06e6 01F4      		brne .L129
 1444               	.L128:
 317:main.c        **** 		  
 1445               		.loc 1 317 8 is_stmt 1 view .LVU417
 317:main.c        **** 		  
 1446               		.loc 1 317 25 is_stmt 0 view .LVU418
 1447 06e8 1092 0000 		sts curr_chain_index,__zero_reg__
 319:main.c        **** 	      	      
 1448               		.loc 1 319 5 is_stmt 1 view .LVU419
 1449 06ec 80E0      		ldi r24,0
 1450 06ee 0E94 0000 		call load_next_chain
 1451               	.LVL60:
 1452               	.L129:
 322:main.c        **** 	  }
 1453               		.loc 1 322 6 view .LVU420
 1454 06f2 E091 0000 		lds r30,curr_chain_index
 1455 06f6 F0E0      		ldi r31,0
 1456 06f8 E050      		subi r30,lo8(-(curr_chain))
 1457 06fa F040      		sbci r31,hi8(-(curr_chain))
 1458 06fc 6081      		ld r22,Z
 1459 06fe 8091 0000 		lds r24,curr_bank
 1460 0702 0E94 0000 		call load_track
 1461               	.LVL61:
 1462               	.L127:
 324:main.c        **** 	  load_curr_patt();
 1463               		.loc 1 324 4 view .LVU421
 324:main.c        **** 	  load_curr_patt();
 1464               		.loc 1 324 26 is_stmt 0 view .LVU422
 1465 0706 E091 0000 		lds r30,curr_track_index
 1466 070a F0E0      		ldi r31,0
 1467 070c EE0F      		lsl r30
 1468 070e FF1F      		rol r31
 1469 0710 E050      		subi r30,lo8(-(track_buff))
 1470 0712 F040      		sbci r31,hi8(-(track_buff))
 1471 0714 8081      		ld r24,Z
 1472 0716 9181      		ldd r25,Z+1
 324:main.c        **** 	  load_curr_patt();
 1473               		.loc 1 324 14 view .LVU423
 1474 0718 9093 0000 		sts curr_patt+1,r25
 1475 071c 8093 0000 		sts curr_patt,r24
 325:main.c        **** 	}
 1476               		.loc 1 325 4 is_stmt 1 view .LVU424
 1477 0720 0E94 0000 		call load_curr_patt
 1478               	.LVL62:
 1479 0724 00C0      		rjmp .L105
 1480               	.L97:
 334:main.c        **** 	
 1481               		.loc 1 334 5 view .LVU425
 334:main.c        **** 	
 1482               		.loc 1 334 15 is_stmt 0 view .LVU426
 1483 0726 8091 0000 		lds r24,curr_note
 1484 072a 8093 0000 		sts prev_note,r24
 336:main.c        ****     case RANDOM_MODE_FUNC:
 1485               		.loc 1 336 5 is_stmt 1 view .LVU427
 1486 072e CF30      		cpi r28,lo8(15)
 1487 0730 00F0      		brlo .+2
 1488 0732 00C0      		rjmp .L105
 1489 0734 EC2F      		mov r30,r28
 1490 0736 F0E0      		ldi r31,0
 1491 0738 E050      		subi r30,lo8(-(gs(.L131)))
 1492 073a F040      		sbci r31,hi8(-(gs(.L131)))
 1493 073c 0C94 0000 		jmp __tablejump2__
 1494               		.section	.jumptables.gcc.do_tempo,"a",@progbits
 1495               		.p2align	1
 1496               	.L131:
 1497 001e 0000      		.word gs(.L135)
 1498 0020 0000      		.word gs(.L105)
 1499 0022 0000      		.word gs(.L133)
 1500 0024 0000      		.word gs(.L105)
 1501 0026 0000      		.word gs(.L132)
 1502 0028 0000      		.word gs(.L105)
 1503 002a 0000      		.word gs(.L130)
 1504 002c 0000      		.word gs(.L134)
 1505 002e 0000      		.word gs(.L132)
 1506 0030 0000      		.word gs(.L105)
 1507 0032 0000      		.word gs(.L130)
 1508 0034 0000      		.word gs(.L133)
 1509 0036 0000      		.word gs(.L132)
 1510 0038 0000      		.word gs(.L105)
 1511 003a 0000      		.word gs(.L130)
 1512               		.text
 1513               	.L134:
 338:main.c        ****       next_random_note = random();
 1514               		.loc 1 338 7 view .LVU428
 338:main.c        ****       next_random_note = random();
 1515               		.loc 1 338 17 is_stmt 0 view .LVU429
 1516 0740 8091 0000 		lds r24,next_random_note
 1517 0744 8093 0000 		sts curr_note,r24
 339:main.c        **** 
 1518               		.loc 1 339 7 is_stmt 1 view .LVU430
 339:main.c        **** 
 1519               		.loc 1 339 26 is_stmt 0 view .LVU431
 1520 0748 0E94 0000 		call random
 1521               	.LVL63:
 339:main.c        **** 
 1522               		.loc 1 339 24 view .LVU432
 1523 074c 8093 0000 		sts next_random_note,r24
 341:main.c        **** 	      0, //next_random_note>>6) & 0x1,
 1524               		.loc 1 341 7 is_stmt 1 view .LVU433
 1525 0750 8091 0000 		lds r24,curr_note
 1526 0754 40E0      		ldi r20,0
 1527 0756 60E0      		ldi r22,0
 1528 0758 8F73      		andi r24,lo8(63)
 1529 075a 0E94 0000 		call note_on
 1530               	.LVL64:
 344:main.c        ****       break;
 1531               		.loc 1 344 7 view .LVU434
 1532 075e 8091 0000 		lds r24,curr_note
 1533 0762 0E94 0000 		call midi_send_note_on
 1534               	.LVL65:
 345:main.c        **** 
 1535               		.loc 1 345 7 view .LVU435
 1536 0766 00C0      		rjmp .L105
 1537               	.L135:
 348:main.c        **** 
 1538               		.loc 1 348 7 view .LVU436
 348:main.c        **** 
 1539               		.loc 1 348 11 is_stmt 0 view .LVU437
 1540 0768 8091 0000 		lds r24,play_loaded_pattern
 348:main.c        **** 
 1541               		.loc 1 348 10 view .LVU438
 1542 076c 8111      		cpse r24,__zero_reg__
 1543 076e 00C0      		rjmp .L136
 348:main.c        **** 
 1544               		.loc 1 348 31 discriminator 1 view .LVU439
 1545 0770 8091 0000 		lds r24,play_loaded_track
 1546 0774 8823      		tst r24
 1547 0776 01F4      		brne .+2
 1548 0778 00C0      		rjmp .L105
 1549               	.L136:
 350:main.c        **** 	  // load up the next note
 1550               		.loc 1 350 2 is_stmt 1 view .LVU440
 350:main.c        **** 	  // load up the next note
 1551               		.loc 1 350 6 is_stmt 0 view .LVU441
 1552 077a 8091 0000 		lds r24,play_loaded_pattern
 350:main.c        **** 	  // load up the next note
 1553               		.loc 1 350 5 view .LVU442
 1554 077e 8823      		tst r24
 1555 0780 01F0      		breq .L137
 352:main.c        **** 	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1556               		.loc 1 352 4 is_stmt 1 view .LVU443
 352:main.c        **** 	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1557               		.loc 1 352 28 is_stmt 0 view .LVU444
 1558 0782 9091 0000 		lds r25,curr_pattern_index
 352:main.c        **** 	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1559               		.loc 1 352 7 view .LVU445
 1560 0786 8091 0000 		lds r24,PATT_LENGTH
 1561 078a 9817      		cp r25,r24
 1562 078c 00F4      		brsh .L138
 353:main.c        **** 	    curr_pattern_index = 0;
 1563               		.loc 1 353 21 discriminator 1 view .LVU446
 1564 078e E091 0000 		lds r30,curr_pattern_index
 1565 0792 F0E0      		ldi r31,0
 1566 0794 E050      		subi r30,lo8(-(pattern_buff))
 1567 0796 F040      		sbci r31,hi8(-(pattern_buff))
 1568 0798 8081      		ld r24,Z
 352:main.c        **** 	      (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1569               		.loc 1 352 44 discriminator 1 view .LVU447
 1570 079a 8F3F      		cpi r24,lo8(-1)
 1571 079c 01F4      		brne .L137
 1572               	.L138:
 354:main.c        **** 	  }
 1573               		.loc 1 354 6 is_stmt 1 view .LVU448
 354:main.c        **** 	  }
 1574               		.loc 1 354 25 is_stmt 0 view .LVU449
 1575 079e 1092 0000 		sts curr_pattern_index,__zero_reg__
 1576               	.L137:
 358:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1577               		.loc 1 358 2 is_stmt 1 view .LVU450
 358:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1578               		.loc 1 358 26 is_stmt 0 view .LVU451
 1579 07a2 E091 0000 		lds r30,curr_pattern_index
 1580 07a6 F0E0      		ldi r31,0
 1581 07a8 E050      		subi r30,lo8(-(pattern_buff))
 1582 07aa F040      		sbci r31,hi8(-(pattern_buff))
 1583 07ac 8081      		ld r24,Z
 358:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1584               		.loc 1 358 12 view .LVU452
 1585 07ae 8093 0000 		sts curr_note,r24
 359:main.c        **** 	
 1586               		.loc 1 359 2 is_stmt 1 view .LVU453
 359:main.c        **** 	
 1587               		.loc 1 359 23 is_stmt 0 view .LVU454
 1588 07b2 0E94 0000 		call get_next_patt_idx
 1589               	.LVL66:
 359:main.c        **** 	
 1590               		.loc 1 359 21 view .LVU455
 1591 07b6 8093 0000 		sts curr_pattern_index,r24
 361:main.c        **** 	  dispatch_note_on(curr_pitch_shift);
 1592               		.loc 1 361 2 is_stmt 1 view .LVU456
 361:main.c        **** 	  dispatch_note_on(curr_pitch_shift);
 1593               		.loc 1 361 5 is_stmt 0 view .LVU457
 1594 07ba 8091 0000 		lds r24,curr_note
 1595 07be 8F3F      		cpi r24,lo8(-1)
 1596 07c0 01F4      		brne .+2
 1597 07c2 00C0      		rjmp .L105
 362:main.c        **** 	}
 1598               		.loc 1 362 4 is_stmt 1 view .LVU458
 1599 07c4 8091 0000 		lds r24,curr_pitch_shift
 1600               	.L209:
 407:main.c        **** 	} 
 1601               		.loc 1 407 4 is_stmt 0 view .LVU459
 1602 07c8 0E94 0000 		call dispatch_note_on
 1603               	.LVL67:
 1604 07cc 00C0      		rjmp .L105
 1605               	.L133:
 369:main.c        **** 	// load up the next note
 1606               		.loc 1 369 7 is_stmt 1 view .LVU460
 369:main.c        **** 	// load up the next note
 1607               		.loc 1 369 11 is_stmt 0 view .LVU461
 1608 07ce 8091 0000 		lds r24,play_loaded_pattern
 369:main.c        **** 	// load up the next note
 1609               		.loc 1 369 10 view .LVU462
 1610 07d2 8823      		tst r24
 1611 07d4 01F4      		brne .+2
 1612 07d6 00C0      		rjmp .L105
 371:main.c        **** 	set_bank_led(curr_pattern_index);
 1613               		.loc 1 371 2 is_stmt 1 view .LVU463
 1614 07d8 0E94 0000 		call clear_bank_leds
 1615               	.LVL68:
 372:main.c        **** 	curr_note = pattern_buff[curr_pattern_index];
 1616               		.loc 1 372 2 view .LVU464
 1617 07dc 8091 0000 		lds r24,curr_pattern_index
 1618 07e0 0E94 0000 		call set_bank_led
 1619               	.LVL69:
 373:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1620               		.loc 1 373 2 view .LVU465
 373:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1621               		.loc 1 373 26 is_stmt 0 view .LVU466
 1622 07e4 E091 0000 		lds r30,curr_pattern_index
 1623 07e8 F0E0      		ldi r31,0
 1624 07ea E050      		subi r30,lo8(-(pattern_buff))
 1625 07ec F040      		sbci r31,hi8(-(pattern_buff))
 1626 07ee 8081      		ld r24,Z
 373:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1627               		.loc 1 373 12 view .LVU467
 1628 07f0 8093 0000 		sts curr_note,r24
 374:main.c        **** 	//putstring("\n\rlocation "); putnum_ud(curr_pattern_index);
 1629               		.loc 1 374 2 is_stmt 1 view .LVU468
 374:main.c        **** 	//putstring("\n\rlocation "); putnum_ud(curr_pattern_index);
 1630               		.loc 1 374 23 is_stmt 0 view .LVU469
 1631 07f4 0E94 0000 		call get_next_patt_idx
 1632               	.LVL70:
 374:main.c        **** 	//putstring("\n\rlocation "); putnum_ud(curr_pattern_index);
 1633               		.loc 1 374 21 view .LVU470
 1634 07f8 8093 0000 		sts curr_pattern_index,r24
 378:main.c        **** 	  if (!running_stepwrite) set_note_led(curr_note);
 1635               		.loc 1 378 2 is_stmt 1 view .LVU471
 378:main.c        **** 	  if (!running_stepwrite) set_note_led(curr_note);
 1636               		.loc 1 378 16 is_stmt 0 view .LVU472
 1637 07fc 8091 0000 		lds r24,curr_note
 378:main.c        **** 	  if (!running_stepwrite) set_note_led(curr_note);
 1638               		.loc 1 378 5 view .LVU473
 1639 0800 8F3F      		cpi r24,lo8(-1)
 1640 0802 01F4      		brne .+2
 1641 0804 00C0      		rjmp .L105
 379:main.c        **** 	  else set_bank_led(runstepwrite_pattidx);
 1642               		.loc 1 379 4 is_stmt 1 view .LVU474
 379:main.c        **** 	  else set_bank_led(runstepwrite_pattidx);
 1643               		.loc 1 379 7 is_stmt 0 view .LVU475
 1644 0806 9091 0000 		lds r25,running_stepwrite
 1645 080a 9111      		cpse r25,__zero_reg__
 1646 080c 00C0      		rjmp .L139
 379:main.c        **** 	  else set_bank_led(runstepwrite_pattidx);
 1647               		.loc 1 379 28 is_stmt 1 discriminator 1 view .LVU476
 1648 080e 0E94 0000 		call set_note_led
 1649               	.LVL71:
 1650               	.L210:
 407:main.c        **** 	} 
 1651               		.loc 1 407 4 view .LVU477
 407:main.c        **** 	} 
 1652               		.loc 1 407 40 is_stmt 0 view .LVU478
 1653 0812 8091 0000 		lds r24,curr_patt
 1654 0816 9091 0000 		lds r25,curr_patt+1
 1655 081a 0E94 0000 		call get_pitchshift_from_patt
 1656               	.LVL72:
 407:main.c        **** 	} 
 1657               		.loc 1 407 4 view .LVU479
 1658 081e 9091 0000 		lds r25,curr_pitch_shift
 1659 0822 890F      		add r24,r25
 1660 0824 00C0      		rjmp .L209
 1661               	.L139:
 380:main.c        **** 	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 1662               		.loc 1 380 9 is_stmt 1 view .LVU480
 1663 0826 8091 0000 		lds r24,runstepwrite_pattidx
 1664 082a 0E94 0000 		call set_bank_led
 1665               	.LVL73:
 381:main.c        **** 	}
 1666               		.loc 1 381 4 view .LVU481
 1667 082e 00C0      		rjmp .L210
 1668               	.L130:
 389:main.c        **** 	// in pattern play we show each note indexed in the pattern
 1669               		.loc 1 389 7 view .LVU482
 389:main.c        **** 	// in pattern play we show each note indexed in the pattern
 1670               		.loc 1 389 11 is_stmt 0 view .LVU483
 1671 0830 8091 0000 		lds r24,playing
 389:main.c        **** 	// in pattern play we show each note indexed in the pattern
 1672               		.loc 1 389 10 view .LVU484
 1673 0834 8823      		tst r24
 1674 0836 01F0      		breq .L132
 391:main.c        **** 	  set_bank_led(curr_pattern_index);
 1675               		.loc 1 391 4 is_stmt 1 view .LVU485
 1676 0838 0E94 0000 		call clear_bank_leds
 1677               	.LVL74:
 392:main.c        ****       }
 1678               		.loc 1 392 4 view .LVU486
 1679 083c 8091 0000 		lds r24,curr_pattern_index
 1680 0840 0E94 0000 		call set_bank_led
 1681               	.LVL75:
 1682               	.L132:
 398:main.c        **** 	// in track play, we blink the track location but thats
 1683               		.loc 1 398 7 view .LVU487
 398:main.c        **** 	// in track play, we blink the track location but thats
 1684               		.loc 1 398 11 is_stmt 0 view .LVU488
 1685 0844 8091 0000 		lds r24,playing
 398:main.c        **** 	// in track play, we blink the track location but thats
 1686               		.loc 1 398 10 view .LVU489
 1687 0848 8823      		tst r24
 1688 084a 01F4      		brne .+2
 1689 084c 00C0      		rjmp .L105
 402:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1690               		.loc 1 402 2 is_stmt 1 view .LVU490
 402:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1691               		.loc 1 402 26 is_stmt 0 view .LVU491
 1692 084e E091 0000 		lds r30,curr_pattern_index
 1693 0852 F0E0      		ldi r31,0
 1694 0854 E050      		subi r30,lo8(-(pattern_buff))
 1695 0856 F040      		sbci r31,hi8(-(pattern_buff))
 1696 0858 8081      		ld r24,Z
 402:main.c        **** 	curr_pattern_index = get_next_patt_idx();
 1697               		.loc 1 402 12 view .LVU492
 1698 085a 8093 0000 		sts curr_note,r24
 403:main.c        **** 
 1699               		.loc 1 403 2 is_stmt 1 view .LVU493
 403:main.c        **** 
 1700               		.loc 1 403 23 is_stmt 0 view .LVU494
 1701 085e 0E94 0000 		call get_next_patt_idx
 1702               	.LVL76:
 403:main.c        **** 
 1703               		.loc 1 403 21 view .LVU495
 1704 0862 8093 0000 		sts curr_pattern_index,r24
 406:main.c        **** 	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 1705               		.loc 1 406 2 is_stmt 1 view .LVU496
 406:main.c        **** 	  dispatch_note_on(curr_pitch_shift + get_pitchshift_from_patt(curr_patt));
 1706               		.loc 1 406 5 is_stmt 0 view .LVU497
 1707 0866 8091 0000 		lds r24,curr_note
 1708 086a 8F3F      		cpi r24,lo8(-1)
 1709 086c 01F4      		brne .+2
 1710 086e 00C0      		rjmp .L105
 1711 0870 00C0      		rjmp .L210
 1712               	.L141:
 420:main.c        ****     clear_led(LED_TEMPO);
 1713               		.loc 1 420 8 is_stmt 1 view .LVU498
 420:main.c        ****     clear_led(LED_TEMPO);
 1714               		.loc 1 420 25 is_stmt 0 view .LVU499
 1715 0872 8091 0000 		lds r24,note_counter
 420:main.c        ****     clear_led(LED_TEMPO);
 1716               		.loc 1 420 11 view .LVU500
 1717 0876 8830      		cpi r24,lo8(8)
 1718 0878 00F0      		brlo .+2
 1719 087a 00C0      		rjmp .L142
 421:main.c        ****     blink_leds_on();
 1720               		.loc 1 421 5 is_stmt 1 view .LVU501
 1721 087c 85E2      		ldi r24,lo8(37)
 1722 087e 0E94 0000 		call clear_led
 1723               	.LVL77:
 422:main.c        ****   }
 1724               		.loc 1 422 5 view .LVU502
 1725 0882 0E94 0000 		call blink_leds_on
 1726               	.LVL78:
 1727 0886 00C0      		rjmp .L142
 1728               	.LVL79:
 1729               	.L95:
 430:main.c        **** /* */
 1730               		.loc 1 430 8 view .LVU503
 430:main.c        **** /* */
 1731               		.loc 1 430 11 is_stmt 0 view .LVU504
 1732 0888 8091 0000 		lds r24,onemore
 1733 088c 8823      		tst r24
 1734 088e 01F4      		brne .+2
 1735 0890 00C0      		rjmp .L143
 1736               	.L144:
 430:main.c        **** /* */
 1737               		.loc 1 430 21 is_stmt 1 discriminator 1 view .LVU505
 430:main.c        **** /* */
 1738               		.loc 1 430 29 is_stmt 0 discriminator 1 view .LVU506
 1739 0892 1092 0000 		sts onemore,__zero_reg__
 1740 0896 00C0      		rjmp .L143
 1741               		.cfi_endproc
 1742               	.LFE2:
 1744               	.global	__vector_9
 1746               	__vector_9:
 1747               	.LFB1:
 115:main.c        ****   TCNT3 = timer3_init;  // FIXME, use CTC mode
 1748               		.loc 1 115 23 is_stmt 1 view -0
 1749               		.cfi_startproc
 1750 0898 1F92      		push r1
 1751               		.cfi_def_cfa_offset 3
 1752               		.cfi_offset 1, -2
 1753 089a 0F92      		push r0
 1754               		.cfi_def_cfa_offset 4
 1755               		.cfi_offset 0, -3
 1756 089c 0FB6      		in r0,__SREG__
 1757 089e 0F92      		push r0
 1758 08a0 1124      		clr __zero_reg__
 1759 08a2 2F93      		push r18
 1760               		.cfi_def_cfa_offset 5
 1761               		.cfi_offset 18, -4
 1762 08a4 3F93      		push r19
 1763               		.cfi_def_cfa_offset 6
 1764               		.cfi_offset 19, -5
 1765 08a6 4F93      		push r20
 1766               		.cfi_def_cfa_offset 7
 1767               		.cfi_offset 20, -6
 1768 08a8 5F93      		push r21
 1769               		.cfi_def_cfa_offset 8
 1770               		.cfi_offset 21, -7
 1771 08aa 6F93      		push r22
 1772               		.cfi_def_cfa_offset 9
 1773               		.cfi_offset 22, -8
 1774 08ac 7F93      		push r23
 1775               		.cfi_def_cfa_offset 10
 1776               		.cfi_offset 23, -9
 1777 08ae 8F93      		push r24
 1778               		.cfi_def_cfa_offset 11
 1779               		.cfi_offset 24, -10
 1780 08b0 9F93      		push r25
 1781               		.cfi_def_cfa_offset 12
 1782               		.cfi_offset 25, -11
 1783 08b2 AF93      		push r26
 1784               		.cfi_def_cfa_offset 13
 1785               		.cfi_offset 26, -12
 1786 08b4 BF93      		push r27
 1787               		.cfi_def_cfa_offset 14
 1788               		.cfi_offset 27, -13
 1789 08b6 EF93      		push r30
 1790               		.cfi_def_cfa_offset 15
 1791               		.cfi_offset 30, -14
 1792 08b8 FF93      		push r31
 1793               		.cfi_def_cfa_offset 16
 1794               		.cfi_offset 31, -15
 1795               	/* prologue: Signal */
 1796               	/* frame size = 0 */
 1797               	/* stack size = 15 */
 1798               	.L__stack_usage = 15
 116:main.c        ****   do_tempo();
 1799               		.loc 1 116 3 view .LVU508
 116:main.c        ****   do_tempo();
 1800               		.loc 1 116 9 is_stmt 0 view .LVU509
 1801 08ba 8091 0000 		lds r24,timer3_init
 1802 08be 9091 0000 		lds r25,timer3_init+1
 1803 08c2 9093 8900 		sts 136+1,r25
 1804 08c6 8093 8800 		sts 136,r24
 117:main.c        **** }
 1805               		.loc 1 117 3 is_stmt 1 view .LVU510
 1806 08ca 0E94 0000 		call do_tempo
 1807               	.LVL80:
 1808               	/* epilogue start */
 118:main.c        **** 
 1809               		.loc 1 118 1 is_stmt 0 view .LVU511
 1810 08ce FF91      		pop r31
 1811 08d0 EF91      		pop r30
 1812 08d2 BF91      		pop r27
 1813 08d4 AF91      		pop r26
 1814 08d6 9F91      		pop r25
 1815 08d8 8F91      		pop r24
 1816 08da 7F91      		pop r23
 1817 08dc 6F91      		pop r22
 1818 08de 5F91      		pop r21
 1819 08e0 4F91      		pop r20
 1820 08e2 3F91      		pop r19
 1821 08e4 2F91      		pop r18
 1822 08e6 0F90      		pop r0
 1823 08e8 0FBE      		out __SREG__,r0
 1824 08ea 0F90      		pop r0
 1825 08ec 1F90      		pop r1
 1826 08ee 1895      		reti
 1827               		.cfi_endproc
 1828               	.LFE1:
 1830               	.global	uart_putchar
 1832               	uart_putchar:
 1833               	.LFB19:
 834:main.c        **** 
 835:main.c        **** 
 836:main.c        **** /************************** UART *************************/
 837:main.c        **** /*
 838:main.c        **** void putstring(char *str) {
 839:main.c        ****   while (str[0] != 0) {
 840:main.c        ****     uart_putchar(str[0]);
 841:main.c        ****     str++;
 842:main.c        ****   }
 843:main.c        **** }
 844:main.c        **** 
 845:main.c        **** void putnum_ud(uint16_t n) {
 846:main.c        ****   uint16_t pow;
 847:main.c        **** 
 848:main.c        ****   for (pow = 10000UL; pow >= 10; pow /= 10) {
 849:main.c        ****     if (n / pow) {
 850:main.c        ****       uart_putchar((n/pow)+'0');
 851:main.c        ****       n %= pow;
 852:main.c        ****       pow/= 10;
 853:main.c        ****       break;
 854:main.c        ****     }
 855:main.c        ****     n %= pow;
 856:main.c        ****   }
 857:main.c        ****   for (;pow != 0; pow /= 10) {
 858:main.c        ****     uart_putchar((n/pow)+'0');
 859:main.c        ****     n %= pow;
 860:main.c        ****   }
 861:main.c        ****   return;
 862:main.c        **** }
 863:main.c        **** */
 864:main.c        **** 
 865:main.c        **** void printhex(uint8_t hex) {
 866:main.c        ****   hex &= 0xF;
 867:main.c        ****   if (hex < 10)
 868:main.c        ****     uart_putchar(hex + '0');
 869:main.c        ****   else
 870:main.c        ****     uart_putchar(hex + 'A' - 10);
 871:main.c        **** }
 872:main.c        **** 
 873:main.c        **** void putnum_uh(uint16_t n) {
 874:main.c        ****   if (n >> 12)
 875:main.c        ****     printhex(n>>12);
 876:main.c        ****   if (n >> 8)
 877:main.c        ****     printhex(n >> 8);
 878:main.c        ****   if (n >> 4)
 879:main.c        ****     printhex(n >> 4);
 880:main.c        ****   printhex(n);
 881:main.c        **** 
 882:main.c        ****   return;
 883:main.c        **** }
 884:main.c        ****  
 885:main.c        **** int uart_putchar(char c)
 886:main.c        **** {
 1834               		.loc 1 886 1 is_stmt 1 view -0
 1835               		.cfi_startproc
 1836               	/* prologue: function */
 1837               	/* frame size = 0 */
 1838               	/* stack size = 0 */
 1839               	.L__stack_usage = 0
 1840               	.LVL81:
 1841               	.L213:
 887:main.c        ****    loop_until_bit_is_set(UCSR1A, UDRE1);
 1842               		.loc 1 887 4 discriminator 1 view .LVU513
 1843               		.loc 1 887 4 discriminator 1 view .LVU514
 1844 08f0 159B      		sbis 0x2,5
 1845 08f2 00C0      		rjmp .L213
 888:main.c        ****    UDR1 = c;
 1846               		.loc 1 888 4 view .LVU515
 1847               		.loc 1 888 9 is_stmt 0 view .LVU516
 1848 08f4 83B9      		out 0x3,r24
 889:main.c        ****    return 0;
 1849               		.loc 1 889 4 is_stmt 1 view .LVU517
 890:main.c        **** }
 1850               		.loc 1 890 1 is_stmt 0 view .LVU518
 1851 08f6 90E0      		ldi r25,0
 1852 08f8 80E0      		ldi r24,0
 1853               	.LVL82:
 1854               	/* epilogue start */
 1855               		.loc 1 890 1 view .LVU519
 1856 08fa 0895      		ret
 1857               		.cfi_endproc
 1858               	.LFE19:
 1860               	.global	printhex
 1862               	printhex:
 1863               	.LVL83:
 1864               	.LFB17:
 865:main.c        ****   hex &= 0xF;
 1865               		.loc 1 865 28 is_stmt 1 view -0
 1866               		.cfi_startproc
 1867               	/* prologue: function */
 1868               	/* frame size = 0 */
 1869               	/* stack size = 0 */
 1870               	.L__stack_usage = 0
 866:main.c        ****   if (hex < 10)
 1871               		.loc 1 866 3 view .LVU521
 866:main.c        ****   if (hex < 10)
 1872               		.loc 1 866 7 is_stmt 0 view .LVU522
 1873 08fc 8F70      		andi r24,lo8(15)
 1874               	.LVL84:
 867:main.c        ****     uart_putchar(hex + '0');
 1875               		.loc 1 867 3 is_stmt 1 view .LVU523
 867:main.c        ****     uart_putchar(hex + '0');
 1876               		.loc 1 867 6 is_stmt 0 view .LVU524
 1877 08fe 8A30      		cpi r24,lo8(10)
 1878 0900 00F4      		brsh .L217
 868:main.c        ****   else
 1879               		.loc 1 868 5 is_stmt 1 view .LVU525
 1880 0902 805D      		subi r24,lo8(-(48))
 1881               	.LVL85:
 1882               	.L219:
 870:main.c        **** }
 1883               		.loc 1 870 5 is_stmt 0 view .LVU526
 1884 0904 0E94 0000 		call uart_putchar
 1885               	.LVL86:
 1886               	/* epilogue start */
 871:main.c        **** 
 1887               		.loc 1 871 1 view .LVU527
 1888 0908 0895      		ret
 1889               	.LVL87:
 1890               	.L217:
 870:main.c        **** }
 1891               		.loc 1 870 5 is_stmt 1 view .LVU528
 1892 090a 895C      		subi r24,lo8(-(55))
 1893               	.LVL88:
 870:main.c        **** }
 1894               		.loc 1 870 5 is_stmt 0 view .LVU529
 1895 090c 00C0      		rjmp .L219
 1896               		.cfi_endproc
 1897               	.LFE17:
 1899               	.global	putnum_uh
 1901               	putnum_uh:
 1902               	.LVL89:
 1903               	.LFB18:
 873:main.c        ****   if (n >> 12)
 1904               		.loc 1 873 28 is_stmt 1 view -0
 1905               		.cfi_startproc
 873:main.c        ****   if (n >> 12)
 1906               		.loc 1 873 28 is_stmt 0 view .LVU531
 1907 090e CF93      		push r28
 1908               		.cfi_def_cfa_offset 3
 1909               		.cfi_offset 28, -2
 1910 0910 DF93      		push r29
 1911               		.cfi_def_cfa_offset 4
 1912               		.cfi_offset 29, -3
 1913               	/* prologue: function */
 1914               	/* frame size = 0 */
 1915               	/* stack size = 2 */
 1916               	.L__stack_usage = 2
 1917 0912 EC01      		movw r28,r24
 874:main.c        ****     printhex(n>>12);
 1918               		.loc 1 874 3 is_stmt 1 view .LVU532
 874:main.c        ****     printhex(n>>12);
 1919               		.loc 1 874 9 is_stmt 0 view .LVU533
 1920 0914 892F      		mov r24,r25
 1921 0916 9927      		clr r25
 1922 0918 8295      		swap r24
 1923 091a 8F70      		andi r24,0x0f
 1924               	.LVL90:
 874:main.c        ****     printhex(n>>12);
 1925               		.loc 1 874 6 view .LVU534
 1926 091c 0097      		sbiw r24,0
 1927 091e 01F0      		breq .L221
 875:main.c        ****   if (n >> 8)
 1928               		.loc 1 875 5 is_stmt 1 view .LVU535
 1929 0920 0E94 0000 		call printhex
 1930               	.LVL91:
 1931               	.L221:
 876:main.c        ****     printhex(n >> 8);
 1932               		.loc 1 876 3 view .LVU536
 876:main.c        ****     printhex(n >> 8);
 1933               		.loc 1 876 9 is_stmt 0 view .LVU537
 1934 0924 8D2F      		mov r24,r29
 1935 0926 9927      		clr r25
 876:main.c        ****     printhex(n >> 8);
 1936               		.loc 1 876 6 view .LVU538
 1937 0928 0097      		sbiw r24,0
 1938 092a 01F0      		breq .L222
 877:main.c        ****   if (n >> 4)
 1939               		.loc 1 877 5 is_stmt 1 view .LVU539
 1940 092c 0E94 0000 		call printhex
 1941               	.LVL92:
 1942               	.L222:
 878:main.c        ****     printhex(n >> 4);
 1943               		.loc 1 878 3 view .LVU540
 878:main.c        ****     printhex(n >> 4);
 1944               		.loc 1 878 9 is_stmt 0 view .LVU541
 1945 0930 CE01      		movw r24,r28
 1946 0932 24E0      		ldi r18,4
 1947               		1:
 1948 0934 9695      		lsr r25
 1949 0936 8795      		ror r24
 1950 0938 2A95      		dec r18
 1951 093a 01F4      		brne 1b
 878:main.c        ****     printhex(n >> 4);
 1952               		.loc 1 878 6 view .LVU542
 1953 093c 0097      		sbiw r24,0
 1954 093e 01F0      		breq .L223
 879:main.c        ****   printhex(n);
 1955               		.loc 1 879 5 is_stmt 1 view .LVU543
 1956 0940 0E94 0000 		call printhex
 1957               	.LVL93:
 1958               	.L223:
 880:main.c        **** 
 1959               		.loc 1 880 3 view .LVU544
 1960 0944 8C2F      		mov r24,r28
 1961 0946 0E94 0000 		call printhex
 1962               	.LVL94:
 882:main.c        **** }
 1963               		.loc 1 882 3 view .LVU545
 1964               	/* epilogue start */
 883:main.c        ****  
 1965               		.loc 1 883 1 is_stmt 0 view .LVU546
 1966 094a DF91      		pop r29
 1967 094c CF91      		pop r28
 1968               	.LVL95:
 883:main.c        ****  
 1969               		.loc 1 883 1 view .LVU547
 1970 094e 0895      		ret
 1971               		.cfi_endproc
 1972               	.LFE18:
 1974               	.global	uart_getch
 1976               	uart_getch:
 1977               	.LFB20:
 891:main.c        **** 
 892:main.c        **** int uart_getch() {     // checks if there is a character waiting!
 1978               		.loc 1 892 18 is_stmt 1 view -0
 1979               		.cfi_startproc
 1980               	/* prologue: function */
 1981               	/* frame size = 0 */
 1982               	/* stack size = 0 */
 1983               	.L__stack_usage = 0
 893:main.c        ****   if (bit_is_set(UCSR1A, RXC1))
 1984               		.loc 1 893 3 view .LVU549
 1985               		.loc 1 893 7 is_stmt 0 view .LVU550
 1986 0950 82B1      		in r24,0x2
 1987               		.loc 1 893 6 view .LVU551
 1988 0952 082E      		mov __tmp_reg__,r24
 1989 0954 000C      		lsl r0
 1990 0956 990B      		sbc r25,r25
 894:main.c        ****     return 1;
 895:main.c        ****   return 0;
 896:main.c        **** }
 1991               		.loc 1 896 1 view .LVU552
 1992 0958 892F      		mov r24,r25
 1993 095a 881F      		rol r24
 1994 095c 8827      		clr r24
 1995 095e 881F      		rol r24
 1996 0960 90E0      		ldi r25,0
 1997               	/* epilogue start */
 1998 0962 0895      		ret
 1999               		.cfi_endproc
 2000               	.LFE20:
 2002               	.global	uart_getchar
 2004               	uart_getchar:
 2005               	.LFB21:
 897:main.c        **** 
 898:main.c        **** 
 899:main.c        **** int uart_getchar(void) {
 2006               		.loc 1 899 24 is_stmt 1 view -0
 2007               		.cfi_startproc
 2008               	/* prologue: function */
 2009               	/* frame size = 0 */
 2010               	/* stack size = 0 */
 2011               	.L__stack_usage = 0
 2012               	.L235:
 900:main.c        ****   char c;
 2013               		.loc 1 900 3 discriminator 1 view .LVU554
 901:main.c        ****   loop_until_bit_is_set(UCSR1A, RXC1);
 2014               		.loc 1 901 3 discriminator 1 view .LVU555
 2015               		.loc 1 901 3 discriminator 1 view .LVU556
 2016 0964 179B      		sbis 0x2,7
 2017 0966 00C0      		rjmp .L235
 902:main.c        ****   c = UDR1;
 2018               		.loc 1 902 3 view .LVU557
 2019               		.loc 1 902 5 is_stmt 0 view .LVU558
 2020 0968 83B1      		in r24,0x3
 2021               	.LVL96:
 903:main.c        ****   return (int)c;
 2022               		.loc 1 903 3 is_stmt 1 view .LVU559
 904:main.c        **** }
 2023               		.loc 1 904 1 is_stmt 0 view .LVU560
 2024 096a 90E0      		ldi r25,0
 2025               	/* epilogue start */
 2026 096c 0895      		ret
 2027               		.cfi_endproc
 2028               	.LFE21:
 2030               	.global	internal_eeprom_read8
 2032               	internal_eeprom_read8:
 2033               	.LVL97:
 2034               	.LFB22:
 905:main.c        **** 
 906:main.c        **** //**************************************************
 907:main.c        **** //         Internal EEPROM
 908:main.c        **** //**************************************************
 909:main.c        **** 
 910:main.c        **** uint8_t internal_eeprom_read8(uint16_t addr) {
 2035               		.loc 1 910 46 is_stmt 1 view -0
 2036               		.cfi_startproc
 2037               	/* prologue: function */
 2038               	/* frame size = 0 */
 2039               	/* stack size = 0 */
 2040               	.L__stack_usage = 0
 2041               		.loc 1 910 46 is_stmt 0 view .LVU562
 2042 096e 9C01      		movw r18,r24
 2043               	.L238:
 911:main.c        ****   loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
 2044               		.loc 1 911 3 is_stmt 1 discriminator 1 view .LVU563
 2045               		.loc 1 911 3 discriminator 1 view .LVU564
 2046 0970 E199      		sbic 0x1c,1
 2047 0972 00C0      		rjmp .L238
 912:main.c        ****   EEAR = addr;
 2048               		.loc 1 912 3 view .LVU565
 2049               		.loc 1 912 8 is_stmt 0 view .LVU566
 2050 0974 3FBB      		out 0x1e+1,r19
 2051 0976 2EBB      		out 0x1e,r18
 913:main.c        ****   sbi(EECR, EERE);        // start EEPROM read
 2052               		.loc 1 913 3 is_stmt 1 view .LVU567
 2053 0978 E09A      		sbi 0x1c,0
 914:main.c        ****   return EEDR;            // takes only 1 cycle
 2054               		.loc 1 914 3 view .LVU568
 2055               		.loc 1 914 10 is_stmt 0 view .LVU569
 2056 097a 8DB3      		in r24,0x1d
 2057               	.LVL98:
 2058               	/* epilogue start */
 915:main.c        **** }
 2059               		.loc 1 915 1 view .LVU570
 2060 097c 0895      		ret
 2061               		.cfi_endproc
 2062               	.LFE22:
 2064               	.global	internal_eeprom_write8
 2066               	internal_eeprom_write8:
 2067               	.LVL99:
 2068               	.LFB23:
 916:main.c        **** 
 917:main.c        **** void internal_eeprom_write8(uint16_t addr, uint8_t data) {
 2069               		.loc 1 917 58 is_stmt 1 view -0
 2070               		.cfi_startproc
 2071               	/* prologue: function */
 2072               	/* frame size = 0 */
 2073               	/* stack size = 0 */
 2074               	.L__stack_usage = 0
 2075               		.loc 1 917 58 is_stmt 0 view .LVU572
 2076 097e 9C01      		movw r18,r24
 2077               	.L241:
 918:main.c        ****   //printf("writing %d to addr 0x%x...", data, addr);
 919:main.c        ****   loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
 2078               		.loc 1 919 3 is_stmt 1 discriminator 1 view .LVU573
 2079               		.loc 1 919 3 discriminator 1 view .LVU574
 2080 0980 E199      		sbic 0x1c,1
 2081 0982 00C0      		rjmp .L241
 920:main.c        ****   EEAR = addr;
 2082               		.loc 1 920 3 view .LVU575
 2083               		.loc 1 920 8 is_stmt 0 view .LVU576
 2084 0984 3FBB      		out 0x1e+1,r19
 2085 0986 2EBB      		out 0x1e,r18
 921:main.c        ****   EEDR = data;
 2086               		.loc 1 921 3 is_stmt 1 view .LVU577
 2087               		.loc 1 921 8 is_stmt 0 view .LVU578
 2088 0988 6DBB      		out 0x1d,r22
 922:main.c        ****   cli();                // turn off interrupts 
 2089               		.loc 1 922 3 is_stmt 1 view .LVU579
 2090               	/* #APP */
 2091               	 ;  922 "main.c" 1
 2092 098a F894      		cli
 2093               	 ;  0 "" 2
 923:main.c        ****   sbi(EECR, EEMWE);     // these instructions must happen within 4 cycles
 2094               		.loc 1 923 3 view .LVU580
 2095               	/* #NOAPP */
 2096 098c E29A      		sbi 0x1c,2
 924:main.c        ****   sbi(EECR, EEWE);
 2097               		.loc 1 924 3 view .LVU581
 2098 098e E19A      		sbi 0x1c,1
 925:main.c        ****   sei();                // turn on interrupts again
 2099               		.loc 1 925 3 view .LVU582
 2100               	/* #APP */
 2101               	 ;  925 "main.c" 1
 2102 0990 7894      		sei
 2103               	 ;  0 "" 2
 2104               	/* #NOAPP */
 2105               	/* epilogue start */
 926:main.c        ****   //putstring("done\n\r");
 927:main.c        **** }
 2106               		.loc 1 927 1 is_stmt 0 view .LVU583
 2107 0992 0895      		ret
 2108               		.cfi_endproc
 2109               	.LFE23:
 2111               	.global	change_tempo
 2113               	change_tempo:
 2114               	.LVL100:
 2115               	.LFB12:
 674:main.c        ****   uint16_t t3_prescale;
 2116               		.loc 1 674 39 is_stmt 1 view -0
 2117               		.cfi_startproc
 674:main.c        ****   uint16_t t3_prescale;
 2118               		.loc 1 674 39 is_stmt 0 view .LVU585
 2119 0994 CF93      		push r28
 2120               		.cfi_def_cfa_offset 3
 2121               		.cfi_offset 28, -2
 2122 0996 DF93      		push r29
 2123               		.cfi_def_cfa_offset 4
 2124               		.cfi_offset 29, -3
 2125               	/* prologue: function */
 2126               	/* frame size = 0 */
 2127               	/* stack size = 2 */
 2128               	.L__stack_usage = 2
 2129 0998 EC01      		movw r28,r24
 675:main.c        ****   uint32_t num_instr;
 2130               		.loc 1 675 3 is_stmt 1 view .LVU586
 676:main.c        ****   uint16_t top_num_instr;
 2131               		.loc 1 676 3 view .LVU587
 677:main.c        **** 
 2132               		.loc 1 677 3 view .LVU588
 679:main.c        ****     set_tempo = MAX_TEMPO;
 2133               		.loc 1 679 3 view .LVU589
 2134 099a 4497      		sbiw r24,20
 2135 099c 00F4      		brsh .L244
 2136 099e C4E1      		ldi r28,lo8(20)
 2137 09a0 D0E0      		ldi r29,0
 2138               	.L244:
 2139 09a2 CD32      		cpi r28,45
 2140 09a4 81E0      		ldi r24,1
 2141 09a6 D807      		cpc r29,r24
 2142               	.LVL101:
 679:main.c        ****     set_tempo = MAX_TEMPO;
 2143               		.loc 1 679 3 is_stmt 0 view .LVU590
 2144 09a8 00F0      		brlo .L245
 2145 09aa CCE2      		ldi r28,lo8(44)
 2146 09ac D1E0      		ldi r29,lo8(1)
 2147               	.L245:
 2148               	.LVL102:
 686:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 2149               		.loc 1 686 3 is_stmt 1 view .LVU591
 686:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 2150               		.loc 1 686 20 is_stmt 0 view .LVU592
 2151 09ae D093 0000 		sts tempo+1,r29
 2152 09b2 C093 0000 		sts tempo,r28
 686:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 2153               		.loc 1 686 12 view .LVU593
 2154 09b6 D093 0000 		sts newtempo+1,r29
 2155 09ba C093 0000 		sts newtempo,r28
 687:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR+1, tempo & 0xFF);
 2156               		.loc 1 687 3 is_stmt 1 view .LVU594
 2157 09be 6D2F      		mov r22,r29
 2158 09c0 85E0      		ldi r24,lo8(5)
 2159 09c2 90E0      		ldi r25,0
 2160 09c4 0E94 0000 		call internal_eeprom_write8
 2161               	.LVL103:
 688:main.c        **** 
 2162               		.loc 1 688 3 view .LVU595
 2163 09c8 6091 0000 		lds r22,tempo
 2164 09cc 86E0      		ldi r24,lo8(6)
 2165 09ce 90E0      		ldi r25,0
 2166 09d0 0E94 0000 		call internal_eeprom_write8
 2167               	.LVL104:
 694:main.c        **** 
 2168               		.loc 1 694 3 view .LVU596
 2169 09d4 8091 0000 		lds r24,tempo
 2170 09d8 9091 0000 		lds r25,tempo+1
 2171 09dc 0E94 0000 		call send_tempo
 2172               	.LVL105:
 698:main.c        **** 
 2173               		.loc 1 698 3 view .LVU597
 706:main.c        ****   
 2174               		.loc 1 706 3 view .LVU598
 706:main.c        ****   
 2175               		.loc 1 706 27 is_stmt 0 view .LVU599
 2176 09e0 80E3      		ldi r24,lo8(48)
 2177 09e2 8C9F      		mul r24,r28
 2178 09e4 9001      		movw r18,r0
 2179 09e6 8D9F      		mul r24,r29
 2180 09e8 300D      		add r19,r0
 2181 09ea 1124      		clr __zero_reg__
 2182 09ec 50E0      		ldi r21,0
 2183 09ee 40E0      		ldi r20,0
 706:main.c        ****   
 2184               		.loc 1 706 13 view .LVU600
 2185 09f0 60E0      		ldi r22,0
 2186 09f2 70E7      		ldi r23,lo8(112)
 2187 09f4 88E3      		ldi r24,lo8(56)
 2188 09f6 99E3      		ldi r25,lo8(57)
 2189 09f8 0E94 0000 		call __udivmodsi4
 2190               	.LVL106:
 708:main.c        ****   if (!top_num_instr) {
 2191               		.loc 1 708 3 is_stmt 1 view .LVU601
 709:main.c        ****     t3_prescale = 1;
 2192               		.loc 1 709 3 view .LVU602
 713:main.c        ****     t3_prescale = 8;
 2193               		.loc 1 713 10 view .LVU603
 713:main.c        ****     t3_prescale = 8;
 2194               		.loc 1 713 29 is_stmt 0 view .LVU604
 2195 09fc CA01      		movw r24,r20
 2196 09fe 887F      		andi r24,248
 713:main.c        ****     t3_prescale = 8;
 2197               		.loc 1 713 13 view .LVU605
 2198 0a00 892B      		or r24,r25
 2199 0a02 01F4      		brne .L246
 714:main.c        ****     timer3_init = num_instr >> 3;
 2200               		.loc 1 714 5 is_stmt 1 view .LVU606
 2201               	.LVL107:
 715:main.c        ****     TCCR3B = 2;
 2202               		.loc 1 715 5 view .LVU607
 715:main.c        ****     TCCR3B = 2;
 2203               		.loc 1 715 29 is_stmt 0 view .LVU608
 2204 0a04 93E0      		ldi r25,3
 2205               		1:
 2206 0a06 5695      		lsr r21
 2207 0a08 4795      		ror r20
 2208 0a0a 3795      		ror r19
 2209 0a0c 2795      		ror r18
 2210 0a0e 9A95      		dec r25
 2211 0a10 01F4      		brne 1b
 2212               	.LVL108:
 715:main.c        ****     TCCR3B = 2;
 2213               		.loc 1 715 17 view .LVU609
 2214 0a12 3093 0000 		sts timer3_init+1,r19
 2215 0a16 2093 0000 		sts timer3_init,r18
 716:main.c        ****   } else if ((top_num_instr & ~0xF) == 0) {
 2216               		.loc 1 716 5 is_stmt 1 view .LVU610
 716:main.c        ****   } else if ((top_num_instr & ~0xF) == 0) {
 2217               		.loc 1 716 12 is_stmt 0 view .LVU611
 2218 0a1a 82E0      		ldi r24,lo8(2)
 2219               	.LVL109:
 2220               	.L248:
 720:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 2221               		.loc 1 720 12 view .LVU612
 2222 0a1c 8093 8A00 		sts 138,r24
 742:main.c        ****   
 2223               		.loc 1 742 3 is_stmt 1 view .LVU613
 742:main.c        ****   
 2224               		.loc 1 742 15 is_stmt 0 view .LVU614
 2225 0a20 8091 0000 		lds r24,timer3_init
 2226 0a24 9091 0000 		lds r25,timer3_init+1
 2227 0a28 9195      		neg r25
 2228 0a2a 8195      		neg r24
 2229 0a2c 9109      		sbc r25,__zero_reg__
 2230 0a2e 9093 0000 		sts timer3_init+1,r25
 2231 0a32 8093 0000 		sts timer3_init,r24
 745:main.c        **** }
 2232               		.loc 1 745 3 is_stmt 1 view .LVU615
 745:main.c        **** }
 2233               		.loc 1 745 9 is_stmt 0 view .LVU616
 2234 0a36 9093 8900 		sts 136+1,r25
 2235 0a3a 8093 8800 		sts 136,r24
 2236               	/* epilogue start */
 746:main.c        **** 
 2237               		.loc 1 746 1 view .LVU617
 2238 0a3e DF91      		pop r29
 2239 0a40 CF91      		pop r28
 2240               	.LVL110:
 746:main.c        **** 
 2241               		.loc 1 746 1 view .LVU618
 2242 0a42 0895      		ret
 2243               	.LVL111:
 2244               	.L246:
 717:main.c        ****     t3_prescale = 16; 
 2245               		.loc 1 717 10 is_stmt 1 view .LVU619
 718:main.c        ****     timer3_init = num_instr >> 4;
 2246               		.loc 1 718 5 view .LVU620
 719:main.c        ****     TCCR3B = 6;
 2247               		.loc 1 719 5 view .LVU621
 719:main.c        ****     TCCR3B = 6;
 2248               		.loc 1 719 29 is_stmt 0 view .LVU622
 2249 0a44 84E0      		ldi r24,4
 2250               		1:
 2251 0a46 5695      		lsr r21
 2252 0a48 4795      		ror r20
 2253 0a4a 3795      		ror r19
 2254 0a4c 2795      		ror r18
 2255 0a4e 8A95      		dec r24
 2256 0a50 01F4      		brne 1b
 2257               	.LVL112:
 719:main.c        ****     TCCR3B = 6;
 2258               		.loc 1 719 17 view .LVU623
 2259 0a52 3093 0000 		sts timer3_init+1,r19
 2260 0a56 2093 0000 		sts timer3_init,r18
 720:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 2261               		.loc 1 720 5 is_stmt 1 view .LVU624
 720:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 2262               		.loc 1 720 12 is_stmt 0 view .LVU625
 2263 0a5a 86E0      		ldi r24,lo8(6)
 2264 0a5c 00C0      		rjmp .L248
 2265               		.cfi_endproc
 2266               	.LFE12:
 2268               	.global	init_tempo
 2270               	init_tempo:
 2271               	.LFB8:
 649:main.c        ****   sbi(PCMSK0, PCINT0); // detect change on pin A0
 2272               		.loc 1 649 23 is_stmt 1 view -0
 2273               		.cfi_startproc
 2274 0a5e CF93      		push r28
 2275               		.cfi_def_cfa_offset 3
 2276               		.cfi_offset 28, -2
 2277               	/* prologue: function */
 2278               	/* frame size = 0 */
 2279               	/* stack size = 1 */
 2280               	.L__stack_usage = 1
 650:main.c        ****   sbi(PCMSK0, PCINT1); // detect change on pin A1
 2281               		.loc 1 650 3 view .LVU627
 2282 0a60 EBE6      		ldi r30,lo8(107)
 2283 0a62 F0E0      		ldi r31,0
 2284 0a64 8081      		ld r24,Z
 2285 0a66 8160      		ori r24,lo8(1)
 2286 0a68 8083      		st Z,r24
 651:main.c        ****   sbi(GICR, PCIE0);    // enable pin change interrupt for tempo knob detect
 2287               		.loc 1 651 3 view .LVU628
 2288 0a6a 8081      		ld r24,Z
 2289 0a6c 8260      		ori r24,lo8(2)
 2290 0a6e 8083      		st Z,r24
 652:main.c        **** 
 2291               		.loc 1 652 3 view .LVU629
 2292 0a70 8BB7      		in r24,0x3b
 2293 0a72 8860      		ori r24,lo8(8)
 2294 0a74 8BBF      		out 0x3b,r24
 654:main.c        **** 	       internal_eeprom_read8(TEMPO_EEADDR+1) );
 2295               		.loc 1 654 3 view .LVU630
 654:main.c        **** 	       internal_eeprom_read8(TEMPO_EEADDR+1) );
 2296               		.loc 1 654 17 is_stmt 0 view .LVU631
 2297 0a76 85E0      		ldi r24,lo8(5)
 2298 0a78 90E0      		ldi r25,0
 2299 0a7a 0E94 0000 		call internal_eeprom_read8
 2300               	.LVL113:
 2301 0a7e C82F      		mov r28,r24
 655:main.c        ****   note_counter = 0;
 2302               		.loc 1 655 9 view .LVU632
 2303 0a80 86E0      		ldi r24,lo8(6)
 2304 0a82 90E0      		ldi r25,0
 2305 0a84 0E94 0000 		call internal_eeprom_read8
 2306               	.LVL114:
 654:main.c        **** 	       internal_eeprom_read8(TEMPO_EEADDR+1) );
 2307               		.loc 1 654 3 view .LVU633
 2308 0a88 9C2F      		mov r25,r28
 2309 0a8a 0E94 0000 		call change_tempo
 2310               	.LVL115:
 656:main.c        ****   sbi(ETIMSK, TOIE3); // enable tempo interrupt
 2311               		.loc 1 656 3 is_stmt 1 view .LVU634
 656:main.c        ****   sbi(ETIMSK, TOIE3); // enable tempo interrupt
 2312               		.loc 1 656 16 is_stmt 0 view .LVU635
 2313 0a8e 1092 0000 		sts note_counter,__zero_reg__
 657:main.c        **** }
 2314               		.loc 1 657 3 is_stmt 1 view .LVU636
 2315 0a92 EDE7      		ldi r30,lo8(125)
 2316 0a94 F0E0      		ldi r31,0
 2317 0a96 8081      		ld r24,Z
 2318 0a98 8460      		ori r24,lo8(4)
 2319 0a9a 8083      		st Z,r24
 2320               	/* epilogue start */
 658:main.c        **** 
 2321               		.loc 1 658 1 is_stmt 0 view .LVU637
 2322 0a9c CF91      		pop r28
 2323 0a9e 0895      		ret
 2324               		.cfi_endproc
 2325               	.LFE8:
 2327               	.global	ioinit
 2329               	ioinit:
 2330               	.LFB24:
 928:main.c        **** 
 929:main.c        **** void ioinit() {
 2331               		.loc 1 929 15 is_stmt 1 view -0
 2332               		.cfi_startproc
 2333               	/* prologue: function */
 2334               	/* frame size = 0 */
 2335               	/* stack size = 0 */
 2336               	.L__stack_usage = 0
 930:main.c        ****   uint16_t baud = (F_CPU / (16 * UART_BAUDRATE)) - 1;
 2337               		.loc 1 930 3 view .LVU639
 2338               	.LVL116:
 931:main.c        ****   
 932:main.c        ****   /* setup the main UART */
 933:main.c        ****   UCSR1B |= (1<<RXEN1) | (1<<TXEN1);    // read and write & intr
 2339               		.loc 1 933 3 view .LVU640
 2340               		.loc 1 933 10 is_stmt 0 view .LVU641
 2341 0aa0 81B1      		in r24,0x1
 2342 0aa2 8861      		ori r24,lo8(24)
 2343 0aa4 81B9      		out 0x1,r24
 934:main.c        ****   UBRR1L = (uint8_t)baud;               // set baudrate
 2344               		.loc 1 934 3 is_stmt 1 view .LVU642
 2345               		.loc 1 934 10 is_stmt 0 view .LVU643
 2346 0aa6 83E3      		ldi r24,lo8(51)
 2347 0aa8 80B9      		out 0,r24
 935:main.c        ****   UBRR1H = (uint8_t)(baud>>8);
 2348               		.loc 1 935 3 is_stmt 1 view .LVU644
 2349               		.loc 1 935 10 is_stmt 0 view .LVU645
 2350 0aaa 1CBE      		out 0x3c,__zero_reg__
 936:main.c        ****   // first flush the input
 937:main.c        ****   while (uart_getch()) {
 2351               		.loc 1 937 3 is_stmt 1 view .LVU646
 2352               	.L251:
 2353               		.loc 1 937 10 is_stmt 0 view .LVU647
 2354 0aac 0E94 0000 		call uart_getch
 2355               	.LVL117:
 2356               		.loc 1 937 9 view .LVU648
 2357 0ab0 892B      		or r24,r25
 2358 0ab2 01F4      		brne .L252
 938:main.c        ****     uart_getchar();
 939:main.c        ****     delay_ms(10);
 940:main.c        ****   }
 941:main.c        ****   UCSR1B |= (1<<RXCIE1); // now turn on interrupts
 2359               		.loc 1 941 3 is_stmt 1 view .LVU649
 2360               		.loc 1 941 10 is_stmt 0 view .LVU650
 2361 0ab4 0F9A      		sbi 0x1,7
 942:main.c        **** 
 943:main.c        ****   /* setup the MIDI UART */
 944:main.c        ****   baud = (F_CPU / (16 * MIDI_BAUDRATE)) - 1;
 2362               		.loc 1 944 3 is_stmt 1 view .LVU651
 2363               	.LVL118:
 945:main.c        ****   UCSR0B |= (1<<RXEN0) | (1<<TXEN0)| (1<<RXCIE0);    // read and write, interrupt on recv.
 2364               		.loc 1 945 3 view .LVU652
 2365               		.loc 1 945 10 is_stmt 0 view .LVU653
 2366 0ab6 8AB1      		in r24,0xa
 2367 0ab8 8869      		ori r24,lo8(-104)
 2368 0aba 8AB9      		out 0xa,r24
 946:main.c        ****   UBRR0L = (uint8_t)baud;               // set baudrate
 2369               		.loc 1 946 3 is_stmt 1 view .LVU654
 2370               		.loc 1 946 10 is_stmt 0 view .LVU655
 2371 0abc 8FE1      		ldi r24,lo8(31)
 2372 0abe 89B9      		out 0x9,r24
 947:main.c        ****   UBRR0H = (uint8_t)(baud>>8);
 2373               		.loc 1 947 3 is_stmt 1 view .LVU656
 2374               		.loc 1 947 10 is_stmt 0 view .LVU657
 2375 0ac0 10BC      		out 0x20,__zero_reg__
 948:main.c        **** 
 949:main.c        ****   DDRA = 0xC0;              // led latch (o), rotary com (o), rot1, rot2, rot4, ro8, tempoa, tempob
 2376               		.loc 1 949 3 is_stmt 1 view .LVU658
 2377               		.loc 1 949 8 is_stmt 0 view .LVU659
 2378 0ac2 80EC      		ldi r24,lo8(-64)
 2379 0ac4 8ABB      		out 0x1a,r24
 950:main.c        ****   PORTA = 0x3C;              // pullups on rotary1,2,4,8
 2380               		.loc 1 950 3 is_stmt 1 view .LVU660
 2381               		.loc 1 950 9 is_stmt 0 view .LVU661
 2382 0ac6 8CE3      		ldi r24,lo8(60)
 2383 0ac8 8BBB      		out 0x1b,r24
 951:main.c        ****   
 952:main.c        ****   DDRB = 0xBB;              // spi_clk, spi_in, spi_out, NC, TX, RX, NC, switch latch (o)
 2384               		.loc 1 952 3 is_stmt 1 view .LVU662
 2385               		.loc 1 952 8 is_stmt 0 view .LVU663
 2386 0aca 8BEB      		ldi r24,lo8(-69)
 2387 0acc 87BB      		out 0x17,r24
 953:main.c        ****   PORTB = 0x0;
 2388               		.loc 1 953 3 is_stmt 1 view .LVU664
 2389               		.loc 1 953 9 is_stmt 0 view .LVU665
 2390 0ace 18BA      		out 0x18,__zero_reg__
 954:main.c        **** 
 955:main.c        ****   DDRC = 0xFF;              // accent, slide, note[0-5]
 2391               		.loc 1 955 3 is_stmt 1 view .LVU666
 2392               		.loc 1 955 8 is_stmt 0 view .LVU667
 2393 0ad0 8FEF      		ldi r24,lo8(-1)
 2394 0ad2 84BB      		out 0x14,r24
 956:main.c        **** 
 957:main.c        ****   DDRD = 0xFF;              // dinsync1, 2, 3, 4 (outputs), NC, NC, MIDI TX & RX
 2395               		.loc 1 957 3 is_stmt 1 view .LVU668
 2396               		.loc 1 957 8 is_stmt 0 view .LVU669
 2397 0ad4 81BB      		out 0x11,r24
 958:main.c        ****   DDRE = 0xFF;               // note latch, gate, NC
 2398               		.loc 1 958 3 is_stmt 1 view .LVU670
 2399               		.loc 1 958 8 is_stmt 0 view .LVU671
 2400 0ad6 86B9      		out 0x6,r24
 959:main.c        ****   
 960:main.c        **** 
 961:main.c        ****   SPCR = (1<<SPE)|(1<<MSTR) | 0x1 ; // master spi, clk=fosc/8 = 2mhz
 2401               		.loc 1 961 3 is_stmt 1 view .LVU672
 2402               		.loc 1 961 8 is_stmt 0 view .LVU673
 2403 0ad8 81E5      		ldi r24,lo8(81)
 2404 0ada 8DB9      		out 0xd,r24
 2405               	/* epilogue start */
 962:main.c        **** }
 2406               		.loc 1 962 1 view .LVU674
 2407 0adc 0895      		ret
 2408               	.LVL119:
 2409               	.L252:
 938:main.c        ****     delay_ms(10);
 2410               		.loc 1 938 5 is_stmt 1 view .LVU675
 2411 0ade 0E94 0000 		call uart_getchar
 2412               	.LVL120:
 939:main.c        ****   }
 2413               		.loc 1 939 5 view .LVU676
 2414 0ae2 8AE0      		ldi r24,lo8(10)
 2415 0ae4 0E94 0000 		call delay_ms
 2416               	.LVL121:
 2417 0ae8 00C0      		rjmp .L251
 2418               		.cfi_endproc
 2419               	.LFE24:
 2421               	.global	main
 2423               	main:
 2424               	.LFB5:
 517:main.c        ****   ioinit();        // set up IO ports and the UART
 2425               		.loc 1 517 16 view -0
 2426               		.cfi_startproc
 2427               	/* prologue: function */
 2428               	/* frame size = 0 */
 2429               	/* stack size = 0 */
 2430               	.L__stack_usage = 0
 518:main.c        **** 
 2431               		.loc 1 518 3 view .LVU678
 2432 0aea 0E94 0000 		call ioinit
 2433               	.LVL122:
 521:main.c        **** 
 2434               		.loc 1 521 3 view .LVU679
 2435 0aee 0E94 0000 		call init_tempo
 2436               	.LVL123:
 524:main.c        **** 
 2437               		.loc 1 524 3 view .LVU680
 2438 0af2 0E94 0000 		call init_timer0
 2439               	.LVL124:
 529:main.c        **** 
 2440               		.loc 1 529 3 view .LVU681
 529:main.c        **** 
 2441               		.loc 1 529 8 is_stmt 0 view .LVU682
 2442 0af6 8091 0000 		lds r24,tempo
 2443 0afa 8093 0000 		sts rand,r24
 531:main.c        **** 
 2444               		.loc 1 531 3 is_stmt 1 view .LVU683
 2445 0afe 0E94 0000 		call dinsync_set_out
 2446               	.LVL125:
 533:main.c        **** 
 2447               		.loc 1 533 3 view .LVU684
 2448 0b02 0E94 0000 		call init_midi
 2449               	.LVL126:
 535:main.c        **** 
 2450               		.loc 1 535 3 view .LVU685
 2451               	/* #APP */
 2452               	 ;  535 "main.c" 1
 2453 0b06 7894      		sei
 2454               	 ;  0 "" 2
 566:main.c        ****       do_patterntrack_play();
 2455               		.loc 1 566 12 is_stmt 0 view .LVU686
 2456               	/* #NOAPP */
 2457 0b08 C2E0      		ldi r28,lo8(2)
 560:main.c        ****       do_patterntrack_play();
 2458               		.loc 1 560 12 view .LVU687
 2459 0b0a D1E0      		ldi r29,lo8(1)
 2460               	.L269:
 538:main.c        ****     read_switches();
 2461               		.loc 1 538 3 is_stmt 1 view .LVU688
 539:main.c        ****     switch (function) {
 2462               		.loc 1 539 5 view .LVU689
 2463 0b0c 0E94 0000 		call read_switches
 2464               	.LVL127:
 540:main.c        ****     case COMPUTER_CONTROL_FUNC:
 2465               		.loc 1 540 5 view .LVU690
 2466 0b10 E091 0000 		lds r30,function
 2467 0b14 E031      		cpi r30,lo8(16)
 2468 0b16 00F4      		brsh .L269
 2469 0b18 F0E0      		ldi r31,0
 2470 0b1a E050      		subi r30,lo8(-(gs(.L257)))
 2471 0b1c F040      		sbci r31,hi8(-(gs(.L257)))
 2472 0b1e 0C94 0000 		jmp __tablejump2__
 2473               		.section	.jumptables.gcc.main,"a",@progbits
 2474               		.p2align	1
 2475               	.L257:
 2476 0000 0000      		.word gs(.L265)
 2477 0002 0000      		.word gs(.L264)
 2478 0004 0000      		.word gs(.L269)
 2479 0006 0000      		.word gs(.L263)
 2480 0008 0000      		.word gs(.L262)
 2481 000a 0000      		.word gs(.L261)
 2482 000c 0000      		.word gs(.L269)
 2483 000e 0000      		.word gs(.L261)
 2484 0010 0000      		.word gs(.L260)
 2485 0012 0000      		.word gs(.L259)
 2486 0014 0000      		.word gs(.L269)
 2487 0016 0000      		.word gs(.L259)
 2488 0018 0000      		.word gs(.L269)
 2489 001a 0000      		.word gs(.L256)
 2490 001c 0000      		.word gs(.L258)
 2491 001e 0000      		.word gs(.L256)
 2492               		.text
 2493               	.L258:
 543:main.c        ****       do_computer_control();
 2494               		.loc 1 543 7 view .LVU691
 543:main.c        ****       do_computer_control();
 2495               		.loc 1 543 12 is_stmt 0 view .LVU692
 2496 0b22 1092 0000 		sts sync,__zero_reg__
 544:main.c        ****       break;
 2497               		.loc 1 544 7 is_stmt 1 view .LVU693
 2498 0b26 0E94 0000 		call do_computer_control
 2499               	.LVL128:
 545:main.c        ****     case EDIT_PATTERN_FUNC:
 2500               		.loc 1 545 7 view .LVU694
 2501 0b2a 00C0      		rjmp .L269
 2502               	.L263:
 548:main.c        ****       do_pattern_edit();
 2503               		.loc 1 548 7 view .LVU695
 548:main.c        ****       do_pattern_edit();
 2504               		.loc 1 548 12 is_stmt 0 view .LVU696
 2505 0b2c 1092 0000 		sts sync,__zero_reg__
 549:main.c        ****       break;
 2506               		.loc 1 549 7 is_stmt 1 view .LVU697
 2507 0b30 0E94 0000 		call do_pattern_edit
 2508               	.LVL129:
 550:main.c        ****     case PLAY_PATTERN_FUNC:
 2509               		.loc 1 550 7 view .LVU698
 2510 0b34 00C0      		rjmp .L269
 2511               	.L256:
 554:main.c        ****       do_patterntrack_play();
 2512               		.loc 1 554 7 view .LVU699
 554:main.c        ****       do_patterntrack_play();
 2513               		.loc 1 554 12 is_stmt 0 view .LVU700
 2514 0b36 1092 0000 		sts sync,__zero_reg__
 555:main.c        ****       break;
 2515               		.loc 1 555 7 is_stmt 1 view .LVU701
 2516               	.L271:
 561:main.c        ****       break;
 2517               		.loc 1 561 7 view .LVU702
 2518 0b3a 0E94 0000 		call do_patterntrack_play
 2519               	.LVL130:
 562:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 2520               		.loc 1 562 7 view .LVU703
 2521 0b3e 00C0      		rjmp .L269
 2522               	.L261:
 560:main.c        ****       do_patterntrack_play();
 2523               		.loc 1 560 7 view .LVU704
 560:main.c        ****       do_patterntrack_play();
 2524               		.loc 1 560 12 is_stmt 0 view .LVU705
 2525 0b40 D093 0000 		sts sync,r29
 2526 0b44 00C0      		rjmp .L271
 2527               	.L259:
 566:main.c        ****       do_patterntrack_play();
 2528               		.loc 1 566 7 is_stmt 1 view .LVU706
 566:main.c        ****       do_patterntrack_play();
 2529               		.loc 1 566 12 is_stmt 0 view .LVU707
 2530 0b46 C093 0000 		sts sync,r28
 567:main.c        ****       break;
 2531               		.loc 1 567 7 is_stmt 1 view .LVU708
 2532 0b4a 00C0      		rjmp .L271
 2533               	.L264:
 571:main.c        ****       do_track_edit();
 2534               		.loc 1 571 7 view .LVU709
 571:main.c        ****       do_track_edit();
 2535               		.loc 1 571 12 is_stmt 0 view .LVU710
 2536 0b4c 1092 0000 		sts sync,__zero_reg__
 572:main.c        ****       break;
 2537               		.loc 1 572 7 is_stmt 1 view .LVU711
 2538 0b50 0E94 0000 		call do_track_edit
 2539               	.LVL131:
 573:main.c        **** //    case PLAY_TRACK_FUNC: 
 2540               		.loc 1 573 7 view .LVU712
 2541 0b54 00C0      		rjmp .L269
 2542               	.L265:
 591:main.c        ****       do_midi_mode();
 2543               		.loc 1 591 7 view .LVU713
 591:main.c        ****       do_midi_mode();
 2544               		.loc 1 591 12 is_stmt 0 view .LVU714
 2545 0b56 1092 0000 		sts sync,__zero_reg__
 592:main.c        ****       break;
 2546               		.loc 1 592 7 is_stmt 1 view .LVU715
 2547 0b5a 0E94 0000 		call do_midi_mode
 2548               	.LVL132:
 593:main.c        ****     case KEYBOARD_MODE_FUNC:
 2549               		.loc 1 593 7 view .LVU716
 2550 0b5e 00C0      		rjmp .L269
 2551               	.L262:
 596:main.c        ****       do_keyboard_mode();
 2552               		.loc 1 596 7 view .LVU717
 596:main.c        ****       do_keyboard_mode();
 2553               		.loc 1 596 12 is_stmt 0 view .LVU718
 2554 0b60 1092 0000 		sts sync,__zero_reg__
 597:main.c        ****       break;
 2555               		.loc 1 597 7 is_stmt 1 view .LVU719
 2556 0b64 0E94 0000 		call do_keyboard_mode
 2557               	.LVL133:
 598:main.c        ****     case RANDOM_MODE_FUNC: {
 2558               		.loc 1 598 7 view .LVU720
 2559 0b68 00C0      		rjmp .L269
 2560               	.L260:
 603:main.c        ****       turn_on_tempo();
 2561               		.loc 1 603 7 view .LVU721
 603:main.c        ****       turn_on_tempo();
 2562               		.loc 1 603 12 is_stmt 0 view .LVU722
 2563 0b6a 1092 0000 		sts sync,__zero_reg__
 604:main.c        ****       clear_all_leds();
 2564               		.loc 1 604 7 is_stmt 1 view .LVU723
 2565 0b6e 0E94 0000 		call turn_on_tempo
 2566               	.LVL134:
 605:main.c        ****       //dinsync_start();
 2567               		.loc 1 605 7 view .LVU724
 2568 0b72 0E94 0000 		call clear_all_leds
 2569               	.LVL135:
 2570               	.L267:
 607:main.c        **** 	read_switches();
 2571               		.loc 1 607 7 view .LVU725
 608:main.c        **** 	
 2572               		.loc 1 608 2 view .LVU726
 2573 0b76 0E94 0000 		call read_switches
 2574               	.LVL136:
 610:main.c        **** 	  //dinsync_stop();
 2575               		.loc 1 610 2 view .LVU727
 610:main.c        **** 	  //dinsync_stop();
 2576               		.loc 1 610 15 is_stmt 0 view .LVU728
 2577 0b7a 8091 0000 		lds r24,function
 610:main.c        **** 	  //dinsync_stop();
 2578               		.loc 1 610 5 view .LVU729
 2579 0b7e 8830      		cpi r24,lo8(8)
 2580 0b80 01F0      		breq .L267
 612:main.c        **** 	  break;
 2581               		.loc 1 612 4 is_stmt 1 view .LVU730
 2582 0b82 0E94 0000 		call turn_off_tempo
 2583               	.LVL137:
 613:main.c        **** 	}
 2584               		.loc 1 613 4 view .LVU731
 616:main.c        ****     }
 2585               		.loc 1 616 7 view .LVU732
 2586 0b86 00C0      		rjmp .L269
 2587               		.cfi_endproc
 2588               	.LFE5:
 2590               		.comm	last_tempo,1,1
 2591               	.global	blinktimer
 2592               		.section .bss
 2595               	blinktimer:
 2596 0000 00        		.zero	1
 2597               	.global	onemore
 2600               	onemore:
 2601 0001 00        		.zero	1
 2602               	.global	runhalf
 2605               	runhalf:
 2606 0002 00        		.zero	1
 2607               	.global	skipit
 2610               	skipit:
 2611 0003 00        		.zero	1
 2612               	.global	running_stepwrite
 2615               	running_stepwrite:
 2616 0004 00        		.zero	1
 2617               	.global	swing_it
 2620               	swing_it:
 2621 0005 00        		.zero	1
 2622               	.global	prev_note
 2625               	prev_note:
 2626 0006 00        		.zero	1
 2627               		.comm	curr_note,1,1
 2628               	.global	note_counter
 2631               	note_counter:
 2632 0007 00        		.zero	1
 2633               		.comm	next_random_note,1,1
 2634               		.comm	timer3_init,2,1
 2635               	.global	sync
 2638               	sync:
 2639 0008 00        		.zero	1
 2640               		.comm	newtempo,2,1
 2641               		.comm	tempo,2,1
 2642               		.comm	rand,1,1
 2643               		.text
 2644               	.Letext0:
 2645               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 2646               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 2647               		.file 4 "delay.h"
 2648               		.file 5 "pattern.h"
 2649               		.file 6 "led.h"
 2650               		.file 7 "synth.h"
 2651               		.file 8 "midi.h"
 2652               		.file 9 "compcontrol.h"
 2653               		.file 10 "dinsync.h"
 2654               		.file 11 "switch.h"
 2655               		.file 12 "track.h"
 2656               		.file 13 "keyboard.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:12     .text:0000000000000000 __vector_4
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
                            *COM*:0000000000000001 last_tempo
                            *COM*:0000000000000002 newtempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:122    .text:0000000000000082 init_timer0
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:150    .text:0000000000000092 init_timer2
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:178    .text:00000000000000a2 turn_on_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:200    .text:00000000000000ae turn_off_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:226    .text:00000000000000c0 is_tempo_running
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:248    .text:00000000000000cc __vector_16
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2638   .bss:0000000000000008 sync
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2595   .bss:0000000000000000 blinktimer
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:483    .text:0000000000000202 dispatch_note_off
                            *COM*:0000000000000001 curr_note
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2625   .bss:0000000000000006 prev_note
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:578    .text:0000000000000262 dispatch_note_on
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:654    .text:00000000000002b4 load_next_chain
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:751    .text:000000000000031c random
                            *COM*:0000000000000001 rand
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:796    .text:0000000000000350 do_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2620   .bss:0000000000000005 swing_it
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2631   .bss:0000000000000007 note_counter
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2610   .bss:0000000000000003 skipit
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2605   .bss:0000000000000002 runhalf
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2600   .bss:0000000000000001 onemore
                            *COM*:0000000000000001 next_random_note
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2615   .bss:0000000000000004 running_stepwrite
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:1746   .text:0000000000000898 __vector_9
                            *COM*:0000000000000002 timer3_init
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:1832   .text:00000000000008f0 uart_putchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:1862   .text:00000000000008fc printhex
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:1901   .text:000000000000090e putnum_uh
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:1976   .text:0000000000000950 uart_getch
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2004   .text:0000000000000964 uart_getchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2032   .text:000000000000096e internal_eeprom_read8
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2066   .text:000000000000097e internal_eeprom_write8
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2113   .text:0000000000000994 change_tempo
                            *COM*:0000000000000002 tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2270   .text:0000000000000a5e init_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2329   .text:0000000000000aa0 ioinit
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccyVUkyt.s:2423   .text:0000000000000aea main

UNDEFINED SYMBOLS
clear_led
debounce_timer
tap_tempo_timer
uart_timeout
last_dinsync_c
dinsync_clock_timeout
blink_leds_off
dinsync_clocked
midi_putchar
blink_leds_on
all_slide
note_off
midi_send_note_off
all_rest
all_accent
note_on
midi_send_note_on
curr_chain
next_chain
chains_equiv
curr_bank
next_bank
curr_chain_index
curr_pitch_shift
next_pitch_shift
clear_notekey_leds
clear_blinking_leds
function
PATT_LENGTH
dinsync_counter
__divmodhi4
new_swing_time
swing_time
__tablejump2__
set_led
clock_leds
play_loaded_pattern
play_loaded_track
curr_pattern_index
pattern_buff
curr_track_index
track_buff
curr_patt
load_curr_patt
clear_bank_leds
playing
loop
loop_start
eighths
loop_end
load_pattern
get_pitchshift_from_patt
load_track
get_next_patt_idx
set_bank_led
set_note_led
runstepwrite_pattidx
send_tempo
__udivmodsi4
delay_ms
dinsync_set_out
init_midi
read_switches
do_computer_control
do_pattern_edit
do_patterntrack_play
do_track_edit
do_midi_mode
do_keyboard_mode
clear_all_leds
__do_clear_bss
