   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	do_keyboard_mode
  12               	do_keyboard_mode:
  13               	.LFB0:
  14               		.file 1 "keyboard.c"
   1:keyboard.c    **** /*
   2:keyboard.c    ****  * The software for the x0xb0x is available for use in accordance with the
   3:keyboard.c    ****  * following open source license (MIT License). For more information about
   4:keyboard.c    ****  * OS licensing, please visit -> http://www.opensource.org/
   5:keyboard.c    ****  *
   6:keyboard.c    ****  * For more information about the x0xb0x project, please visit
   7:keyboard.c    ****  * -> http://www.ladyada.net/make/x0xb0x
   8:keyboard.c    ****  *
   9:keyboard.c    ****  *                                     *****
  10:keyboard.c    ****  * Copyright (c) 2005 Limor Fried
  11:keyboard.c    ****  *
  12:keyboard.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a
  13:keyboard.c    ****  * copy of this software and associated documentation files (the "Software"),
  14:keyboard.c    ****  * to deal in the Software without restriction, including without limitation
  15:keyboard.c    ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense,
  16:keyboard.c    ****  * and/or sell copies of the Software, and to permit persons to whom the
  17:keyboard.c    ****  * Software is furnished to do so, subject to the following conditions:
  18:keyboard.c    ****  *
  19:keyboard.c    ****  * The above copyright notice and this permission notice shall be included in
  20:keyboard.c    ****  * all copies or substantial portions of the Software.
  21:keyboard.c    ****  *
  22:keyboard.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  23:keyboard.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  24:keyboard.c    ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  25:keyboard.c    ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  26:keyboard.c    ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  27:keyboard.c    ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  28:keyboard.c    ****  * IN THE SOFTWARE.
  29:keyboard.c    ****  *                                     *****
  30:keyboard.c    ****  *
  31:keyboard.c    ****  */
  32:keyboard.c    **** 
  33:keyboard.c    **** #include <avr/io.h>
  34:keyboard.c    **** #include <avr/interrupt.h>
  35:keyboard.c    **** #include "main.h"
  36:keyboard.c    **** #include "synth.h"
  37:keyboard.c    **** #include "delay.h"
  38:keyboard.c    **** #include "led.h"
  39:keyboard.c    **** #include "midi.h"
  40:keyboard.c    **** #include "switch.h"
  41:keyboard.c    **** 
  42:keyboard.c    **** extern uint8_t bank;
  43:keyboard.c    **** extern uint8_t function;
  44:keyboard.c    **** #define function_changed (function != KEYBOARD_MODE_FUNC)
  45:keyboard.c    **** 
  46:keyboard.c    **** // table from notes (C = 0, C' = 12) to note keys
  47:keyboard.c    **** const static uint8_t notekey_tab[13] = {KEY_C,  KEY_CS, KEY_D, KEY_DS, KEY_E,
  48:keyboard.c    ****                                         KEY_F,  KEY_FS, KEY_G, KEY_GS, KEY_A,
  49:keyboard.c    ****                                         KEY_AS, KEY_B,  KEY_C2};
  50:keyboard.c    **** 
  51:keyboard.c    **** extern uint8_t midi_out_addr; // the midi address for outgoing stuff
  52:keyboard.c    **** 
  53:keyboard.c    **** void do_keyboard_mode(void) {
  15               		.loc 1 53 29 view -0
  16               		.cfi_startproc
  17 0000 9F92      		push r9
  18               		.cfi_def_cfa_offset 3
  19               		.cfi_offset 9, -2
  20 0002 AF92      		push r10
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 10, -3
  23 0004 BF92      		push r11
  24               		.cfi_def_cfa_offset 5
  25               		.cfi_offset 11, -4
  26 0006 CF92      		push r12
  27               		.cfi_def_cfa_offset 6
  28               		.cfi_offset 12, -5
  29 0008 DF92      		push r13
  30               		.cfi_def_cfa_offset 7
  31               		.cfi_offset 13, -6
  32 000a EF92      		push r14
  33               		.cfi_def_cfa_offset 8
  34               		.cfi_offset 14, -7
  35 000c FF92      		push r15
  36               		.cfi_def_cfa_offset 9
  37               		.cfi_offset 15, -8
  38 000e 0F93      		push r16
  39               		.cfi_def_cfa_offset 10
  40               		.cfi_offset 16, -9
  41 0010 1F93      		push r17
  42               		.cfi_def_cfa_offset 11
  43               		.cfi_offset 17, -10
  44 0012 CF93      		push r28
  45               		.cfi_def_cfa_offset 12
  46               		.cfi_offset 28, -11
  47 0014 DF93      		push r29
  48               		.cfi_def_cfa_offset 13
  49               		.cfi_offset 29, -12
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 11 */
  53               	.L__stack_usage = 11
  54:keyboard.c    ****   signed int shift = 0;
  54               		.loc 1 54 3 view .LVU1
  55               	.LVL0:
  55:keyboard.c    ****   uint8_t accent = 0, slide = 0;
  56               		.loc 1 55 3 view .LVU2
  56:keyboard.c    ****   uint8_t i, last_bank;
  57               		.loc 1 56 3 view .LVU3
  57:keyboard.c    **** 
  58:keyboard.c    ****   // turn tempo off!
  59:keyboard.c    ****   turn_off_tempo();
  58               		.loc 1 59 3 view .LVU4
  59 0016 0E94 0000 		call turn_off_tempo
  60               	.LVL1:
  60:keyboard.c    **** 
  61:keyboard.c    ****   clear_bank_leds();
  61               		.loc 1 61 3 view .LVU5
  62 001a 0E94 0000 		call clear_bank_leds
  63               	.LVL2:
  62:keyboard.c    **** 
  63:keyboard.c    ****   read_switches();
  64               		.loc 1 63 3 view .LVU6
  65 001e 0E94 0000 		call read_switches
  66               	.LVL3:
  64:keyboard.c    ****   last_bank = bank;
  67               		.loc 1 64 3 view .LVU7
  65:keyboard.c    ****   has_bank_knob_changed(); // ignore startup change
  68               		.loc 1 65 3 view .LVU8
  69 0022 0E94 0000 		call has_bank_knob_changed
  70               	.LVL4:
  55:keyboard.c    ****   uint8_t i, last_bank;
  71               		.loc 1 55 23 is_stmt 0 view .LVU9
  72 0026 E12C      		mov r14,__zero_reg__
  55:keyboard.c    ****   uint8_t i, last_bank;
  73               		.loc 1 55 11 view .LVU10
  74 0028 00E0      		ldi r16,0
  54:keyboard.c    ****   uint8_t accent = 0, slide = 0;
  75               		.loc 1 54 14 view .LVU11
  76 002a D0E0      		ldi r29,0
  77 002c C0E0      		ldi r28,0
  66:keyboard.c    **** 
  67:keyboard.c    ****   while (1) {
  68:keyboard.c    ****     read_switches();
  69:keyboard.c    **** 
  70:keyboard.c    ****     if (function_changed) {
  71:keyboard.c    ****       midi_notesoff(); // turn all notes off
  72:keyboard.c    ****       return;
  73:keyboard.c    ****     }
  74:keyboard.c    **** 
  75:keyboard.c    ****     // show the current MIDI address
  76:keyboard.c    ****     if (!is_bank_led_set(midi_out_addr)) {
  77:keyboard.c    ****       clear_bank_leds();
  78:keyboard.c    ****       set_bank_led(midi_out_addr);
  79:keyboard.c    ****     }
  80:keyboard.c    **** 
  81:keyboard.c    ****     if (has_bank_knob_changed()) {
  82:keyboard.c    ****       // bank knob was changed, which means they want a different
  83:keyboard.c    ****       // midi addr... OK then!
  84:keyboard.c    ****       midi_out_addr = bank;
  85:keyboard.c    **** 
  86:keyboard.c    ****       // set the new midi address (burn to EEPROM)
  87:keyboard.c    ****       internal_eeprom_write8(MIDIOUT_ADDR_EEADDR, midi_out_addr);
  88:keyboard.c    **** 
  89:keyboard.c    ****       last_bank = bank;
  90:keyboard.c    ****     }
  91:keyboard.c    **** 
  92:keyboard.c    ****     // show the octave
  93:keyboard.c    ****     display_octave_shift(shift);
  94:keyboard.c    **** 
  95:keyboard.c    ****     for (i = 0; i < 13; i++) {
  96:keyboard.c    ****       // check if any notes were just pressed
  97:keyboard.c    ****       if (just_pressed(notekey_tab[i])) {
  98:keyboard.c    ****         note_on((C2 + i) + shift * OCTAVE, slide, accent);
  78               		.loc 1 98 26 view .LVU12
  79 002e 2CE0      		ldi r18,lo8(12)
  80 0030 922E      		mov r9,r18
  81               	.LVL5:
  82               	.L2:
  67:keyboard.c    ****     read_switches();
  83               		.loc 1 67 3 is_stmt 1 view .LVU13
  68:keyboard.c    **** 
  84               		.loc 1 68 5 view .LVU14
  85 0032 0E94 0000 		call read_switches
  86               	.LVL6:
  70:keyboard.c    ****       midi_notesoff(); // turn all notes off
  87               		.loc 1 70 5 view .LVU15
  70:keyboard.c    ****       midi_notesoff(); // turn all notes off
  88               		.loc 1 70 8 is_stmt 0 view .LVU16
  89 0036 8091 0000 		lds r24,function
  90 003a 8430      		cpi r24,lo8(4)
  91 003c 01F0      		breq .L3
  71:keyboard.c    ****       return;
  92               		.loc 1 71 7 is_stmt 1 view .LVU17
  93               	/* epilogue start */
  99:keyboard.c    ****         midi_send_note_on(((C2 + i) + shift * OCTAVE) | (accent << 6));
 100:keyboard.c    ****         slide = TRUE;
 101:keyboard.c    **** 
 102:keyboard.c    ****         // turn on that LED
 103:keyboard.c    ****         set_notekey_led(i);
 104:keyboard.c    ****       }
 105:keyboard.c    **** 
 106:keyboard.c    ****       // check if any notes were released
 107:keyboard.c    ****       if (just_released(notekey_tab[i])) {
 108:keyboard.c    ****         midi_send_note_off(((C2 + i) + shift * OCTAVE) | (accent << 6));
 109:keyboard.c    **** 
 110:keyboard.c    ****         // turn off that LED
 111:keyboard.c    ****         clear_notekey_led(i);
 112:keyboard.c    ****       }
 113:keyboard.c    ****     }
 114:keyboard.c    **** 
 115:keyboard.c    ****     if (just_pressed(KEY_UP)) {
 116:keyboard.c    ****       if (shift < 2)
 117:keyboard.c    ****         shift++;
 118:keyboard.c    ****     } else if (just_pressed(KEY_DOWN)) {
 119:keyboard.c    ****       if (shift > -1)
 120:keyboard.c    ****         shift--;
 121:keyboard.c    ****     }
 122:keyboard.c    **** 
 123:keyboard.c    ****     // check if they turned accent on
 124:keyboard.c    ****     if (just_pressed(KEY_ACCENT)) {
 125:keyboard.c    ****       accent = !accent;
 126:keyboard.c    ****       if (accent)
 127:keyboard.c    ****         set_led(LED_ACCENT);
 128:keyboard.c    ****       else
 129:keyboard.c    ****         clear_led(LED_ACCENT);
 130:keyboard.c    ****     }
 131:keyboard.c    **** 
 132:keyboard.c    ****     // if no keys are held down and there was a note just playing
 133:keyboard.c    ****     // turn off the note.
 134:keyboard.c    ****     if ((NOTE_PIN & 0x3F) && no_keys_pressed()) {
 135:keyboard.c    ****       note_off(0);
 136:keyboard.c    ****       slide = FALSE;
 137:keyboard.c    ****       clear_notekey_leds();
 138:keyboard.c    ****     }
 139:keyboard.c    ****   }
 140:keyboard.c    **** }
  94               		.loc 1 140 1 is_stmt 0 view .LVU18
  95 003e DF91      		pop r29
  96 0040 CF91      		pop r28
  97               	.LVL7:
  98               		.loc 1 140 1 view .LVU19
  99 0042 1F91      		pop r17
 100 0044 0F91      		pop r16
 101               	.LVL8:
 102               		.loc 1 140 1 view .LVU20
 103 0046 FF90      		pop r15
 104 0048 EF90      		pop r14
 105               	.LVL9:
 106               		.loc 1 140 1 view .LVU21
 107 004a DF90      		pop r13
 108 004c CF90      		pop r12
 109 004e BF90      		pop r11
 110 0050 AF90      		pop r10
 111 0052 9F90      		pop r9
  71:keyboard.c    ****       return;
 112               		.loc 1 71 7 view .LVU22
 113 0054 0C94 0000 		jmp midi_notesoff
 114               	.LVL10:
 115               	.L3:
  76:keyboard.c    ****       clear_bank_leds();
 116               		.loc 1 76 5 is_stmt 1 view .LVU23
  76:keyboard.c    ****       clear_bank_leds();
 117               		.loc 1 76 10 is_stmt 0 view .LVU24
 118 0058 8091 0000 		lds r24,midi_out_addr
 119 005c 0E94 0000 		call is_bank_led_set
 120               	.LVL11:
  76:keyboard.c    ****       clear_bank_leds();
 121               		.loc 1 76 8 view .LVU25
 122 0060 8111      		cpse r24,__zero_reg__
 123 0062 00C0      		rjmp .L4
  77:keyboard.c    ****       set_bank_led(midi_out_addr);
 124               		.loc 1 77 7 is_stmt 1 view .LVU26
 125 0064 0E94 0000 		call clear_bank_leds
 126               	.LVL12:
  78:keyboard.c    ****     }
 127               		.loc 1 78 7 view .LVU27
 128 0068 8091 0000 		lds r24,midi_out_addr
 129 006c 0E94 0000 		call set_bank_led
 130               	.LVL13:
 131               	.L4:
  81:keyboard.c    ****       // bank knob was changed, which means they want a different
 132               		.loc 1 81 5 view .LVU28
  81:keyboard.c    ****       // bank knob was changed, which means they want a different
 133               		.loc 1 81 9 is_stmt 0 view .LVU29
 134 0070 0E94 0000 		call has_bank_knob_changed
 135               	.LVL14:
  81:keyboard.c    ****       // bank knob was changed, which means they want a different
 136               		.loc 1 81 8 view .LVU30
 137 0074 8823      		tst r24
 138 0076 01F0      		breq .L5
  84:keyboard.c    **** 
 139               		.loc 1 84 7 is_stmt 1 view .LVU31
  84:keyboard.c    **** 
 140               		.loc 1 84 21 is_stmt 0 view .LVU32
 141 0078 6091 0000 		lds r22,bank
 142 007c 6093 0000 		sts midi_out_addr,r22
  87:keyboard.c    **** 
 143               		.loc 1 87 7 is_stmt 1 view .LVU33
 144 0080 84E0      		ldi r24,lo8(4)
 145 0082 90E0      		ldi r25,0
 146 0084 0E94 0000 		call internal_eeprom_write8
 147               	.LVL15:
  89:keyboard.c    ****     }
 148               		.loc 1 89 7 view .LVU34
 149               	.L5:
  93:keyboard.c    **** 
 150               		.loc 1 93 5 view .LVU35
 151 0088 8C2F      		mov r24,r28
 152 008a 0E94 0000 		call display_octave_shift
 153               	.LVL16:
  95:keyboard.c    ****       // check if any notes were just pressed
 154               		.loc 1 95 5 view .LVU36
  98:keyboard.c    ****         midi_send_note_on(((C2 + i) + shift * OCTAVE) | (accent << 6));
 155               		.loc 1 98 26 is_stmt 0 view .LVU37
 156 008e C99D      		mul r28,r9
 157 0090 102D      		mov r17,r0
 158 0092 1124      		clr r1
 159 0094 195E      		subi r17,lo8(-(23))
  99:keyboard.c    ****         slide = TRUE;
 160               		.loc 1 99 55 view .LVU38
 161 0096 B02E      		mov r11,r16
 162 0098 B294      		swap r11
 163 009a BB0C      		lsl r11
 164 009c BB0C      		lsl r11
 165 009e 80EC      		ldi r24,lo8(-64)
 166 00a0 B822      		and r11,r24
 167 00a2 90E0      		ldi r25,lo8(notekey_tab)
 168 00a4 C92E      		mov r12,r25
 169 00a6 90E0      		ldi r25,hi8(notekey_tab)
 170 00a8 D92E      		mov r13,r25
  95:keyboard.c    ****       // check if any notes were just pressed
 171               		.loc 1 95 12 view .LVU39
 172 00aa F12C      		mov r15,__zero_reg__
 173               	.LVL17:
 174               	.L8:
  97:keyboard.c    ****         note_on((C2 + i) + shift * OCTAVE, slide, accent);
 175               		.loc 1 97 7 is_stmt 1 view .LVU40
  97:keyboard.c    ****         note_on((C2 + i) + shift * OCTAVE, slide, accent);
 176               		.loc 1 97 11 is_stmt 0 view .LVU41
 177 00ac F601      		movw r30,r12
 178 00ae A190      		ld r10,Z+
 179 00b0 6F01      		movw r12,r30
 180 00b2 8A2D      		mov r24,r10
 181 00b4 0E94 0000 		call just_pressed
 182               	.LVL18:
  97:keyboard.c    ****         note_on((C2 + i) + shift * OCTAVE, slide, accent);
 183               		.loc 1 97 10 view .LVU42
 184 00b8 8823      		tst r24
 185 00ba 01F0      		breq .L6
  98:keyboard.c    ****         midi_send_note_on(((C2 + i) + shift * OCTAVE) | (accent << 6));
 186               		.loc 1 98 9 is_stmt 1 view .LVU43
 187 00bc 402F      		mov r20,r16
 188 00be 6E2D      		mov r22,r14
 189 00c0 812F      		mov r24,r17
 190 00c2 0E94 0000 		call note_on
 191               	.LVL19:
  99:keyboard.c    ****         slide = TRUE;
 192               		.loc 1 99 9 view .LVU44
 193 00c6 812F      		mov r24,r17
 194 00c8 8B29      		or r24,r11
 195 00ca 0E94 0000 		call midi_send_note_on
 196               	.LVL20:
 100:keyboard.c    **** 
 197               		.loc 1 100 9 view .LVU45
 103:keyboard.c    ****       }
 198               		.loc 1 103 9 view .LVU46
 199 00ce 8F2D      		mov r24,r15
 200 00d0 0E94 0000 		call set_notekey_led
 201               	.LVL21:
 100:keyboard.c    **** 
 202               		.loc 1 100 15 is_stmt 0 view .LVU47
 203 00d4 EE24      		clr r14
 204 00d6 E394      		inc r14
 205               	.LVL22:
 206               	.L6:
 107:keyboard.c    ****         midi_send_note_off(((C2 + i) + shift * OCTAVE) | (accent << 6));
 207               		.loc 1 107 7 is_stmt 1 view .LVU48
 107:keyboard.c    ****         midi_send_note_off(((C2 + i) + shift * OCTAVE) | (accent << 6));
 208               		.loc 1 107 11 is_stmt 0 view .LVU49
 209 00d8 8A2D      		mov r24,r10
 210 00da 0E94 0000 		call just_released
 211               	.LVL23:
 107:keyboard.c    ****         midi_send_note_off(((C2 + i) + shift * OCTAVE) | (accent << 6));
 212               		.loc 1 107 10 view .LVU50
 213 00de 8823      		tst r24
 214 00e0 01F0      		breq .L7
 108:keyboard.c    **** 
 215               		.loc 1 108 9 is_stmt 1 view .LVU51
 216 00e2 812F      		mov r24,r17
 217 00e4 8B29      		or r24,r11
 218 00e6 0E94 0000 		call midi_send_note_off
 219               	.LVL24:
 111:keyboard.c    ****       }
 220               		.loc 1 111 9 view .LVU52
 221 00ea 8F2D      		mov r24,r15
 222 00ec 0E94 0000 		call clear_notekey_led
 223               	.LVL25:
 224               	.L7:
  95:keyboard.c    ****       // check if any notes were just pressed
 225               		.loc 1 95 26 is_stmt 0 discriminator 2 view .LVU53
 226 00f0 F394      		inc r15
 227               	.LVL26:
  95:keyboard.c    ****       // check if any notes were just pressed
 228               		.loc 1 95 26 discriminator 2 view .LVU54
 229 00f2 1F5F      		subi r17,lo8(-(1))
  95:keyboard.c    ****       // check if any notes were just pressed
 230               		.loc 1 95 5 discriminator 2 view .LVU55
 231 00f4 FDE0      		ldi r31,lo8(13)
 232 00f6 FF12      		cpse r15,r31
 233 00f8 00C0      		rjmp .L8
 115:keyboard.c    ****       if (shift < 2)
 234               		.loc 1 115 5 is_stmt 1 view .LVU56
 115:keyboard.c    ****       if (shift < 2)
 235               		.loc 1 115 9 is_stmt 0 view .LVU57
 236 00fa 8FE0      		ldi r24,lo8(15)
 237 00fc 0E94 0000 		call just_pressed
 238               	.LVL27:
 115:keyboard.c    ****       if (shift < 2)
 239               		.loc 1 115 8 view .LVU58
 240 0100 8823      		tst r24
 241 0102 01F0      		breq .L9
 116:keyboard.c    ****         shift++;
 242               		.loc 1 116 7 is_stmt 1 view .LVU59
 116:keyboard.c    ****         shift++;
 243               		.loc 1 116 10 is_stmt 0 view .LVU60
 244 0104 C230      		cpi r28,2
 245 0106 D105      		cpc r29,__zero_reg__
 246 0108 04F4      		brge .L10
 117:keyboard.c    ****     } else if (just_pressed(KEY_DOWN)) {
 247               		.loc 1 117 9 is_stmt 1 view .LVU61
 117:keyboard.c    ****     } else if (just_pressed(KEY_DOWN)) {
 248               		.loc 1 117 14 is_stmt 0 view .LVU62
 249 010a 2196      		adiw r28,1
 250               	.LVL28:
 251               	.L10:
 124:keyboard.c    ****       accent = !accent;
 252               		.loc 1 124 5 is_stmt 1 view .LVU63
 124:keyboard.c    ****       accent = !accent;
 253               		.loc 1 124 9 is_stmt 0 view .LVU64
 254 010c 85E1      		ldi r24,lo8(21)
 255 010e 0E94 0000 		call just_pressed
 256               	.LVL29:
 124:keyboard.c    ****       accent = !accent;
 257               		.loc 1 124 8 view .LVU65
 258 0112 8823      		tst r24
 259 0114 01F0      		breq .L11
 125:keyboard.c    ****       if (accent)
 260               		.loc 1 125 7 is_stmt 1 view .LVU66
 261               	.LVL30:
 126:keyboard.c    ****         set_led(LED_ACCENT);
 262               		.loc 1 126 7 view .LVU67
 127:keyboard.c    ****       else
 263               		.loc 1 127 9 is_stmt 0 view .LVU68
 264 0116 81E0      		ldi r24,lo8(1)
 126:keyboard.c    ****         set_led(LED_ACCENT);
 265               		.loc 1 126 10 view .LVU69
 266 0118 0111      		cpse r16,__zero_reg__
 267 011a 00C0      		rjmp .L12
 127:keyboard.c    ****       else
 268               		.loc 1 127 9 is_stmt 1 view .LVU70
 269 011c 0E94 0000 		call set_led
 270               	.LVL31:
 125:keyboard.c    ****       if (accent)
 271               		.loc 1 125 14 is_stmt 0 view .LVU71
 272 0120 01E0      		ldi r16,lo8(1)
 273               	.LVL32:
 274               	.L11:
 134:keyboard.c    ****       note_off(0);
 275               		.loc 1 134 5 is_stmt 1 view .LVU72
 134:keyboard.c    ****       note_off(0);
 276               		.loc 1 134 10 is_stmt 0 view .LVU73
 277 0122 83B3      		in r24,0x13
 134:keyboard.c    ****       note_off(0);
 278               		.loc 1 134 8 view .LVU74
 279 0124 8F73      		andi r24,lo8(63)
 280 0126 01F4      		brne .+2
 281 0128 00C0      		rjmp .L2
 134:keyboard.c    ****       note_off(0);
 282               		.loc 1 134 30 discriminator 1 view .LVU75
 283 012a 0E94 0000 		call no_keys_pressed
 284               	.LVL33:
 134:keyboard.c    ****       note_off(0);
 285               		.loc 1 134 27 discriminator 1 view .LVU76
 286 012e 8823      		tst r24
 287 0130 01F4      		brne .+2
 288 0132 00C0      		rjmp .L2
 135:keyboard.c    ****       slide = FALSE;
 289               		.loc 1 135 7 is_stmt 1 view .LVU77
 290 0134 80E0      		ldi r24,0
 291 0136 0E94 0000 		call note_off
 292               	.LVL34:
 136:keyboard.c    ****       clear_notekey_leds();
 293               		.loc 1 136 7 view .LVU78
 137:keyboard.c    ****     }
 294               		.loc 1 137 7 view .LVU79
 295 013a 0E94 0000 		call clear_notekey_leds
 296               	.LVL35:
 136:keyboard.c    ****       clear_notekey_leds();
 297               		.loc 1 136 13 is_stmt 0 view .LVU80
 298 013e E12C      		mov r14,__zero_reg__
 299 0140 00C0      		rjmp .L2
 300               	.LVL36:
 301               	.L9:
 118:keyboard.c    ****       if (shift > -1)
 302               		.loc 1 118 12 is_stmt 1 view .LVU81
 118:keyboard.c    ****       if (shift > -1)
 303               		.loc 1 118 16 is_stmt 0 view .LVU82
 304 0142 8EE0      		ldi r24,lo8(14)
 305 0144 0E94 0000 		call just_pressed
 306               	.LVL37:
 118:keyboard.c    ****       if (shift > -1)
 307               		.loc 1 118 15 view .LVU83
 308 0148 8823      		tst r24
 309 014a 01F0      		breq .L10
 119:keyboard.c    ****         shift--;
 310               		.loc 1 119 7 is_stmt 1 view .LVU84
 119:keyboard.c    ****         shift--;
 311               		.loc 1 119 10 is_stmt 0 view .LVU85
 312 014c CF3F      		cpi r28,-1
 313 014e DC07      		cpc r29,r28
 314 0150 01F0      		breq .L10
 120:keyboard.c    ****     }
 315               		.loc 1 120 9 is_stmt 1 view .LVU86
 120:keyboard.c    ****     }
 316               		.loc 1 120 14 is_stmt 0 view .LVU87
 317 0152 2197      		sbiw r28,1
 318               	.LVL38:
 120:keyboard.c    ****     }
 319               		.loc 1 120 14 view .LVU88
 320 0154 00C0      		rjmp .L10
 321               	.LVL39:
 322               	.L12:
 129:keyboard.c    ****     }
 323               		.loc 1 129 9 is_stmt 1 view .LVU89
 324 0156 0E94 0000 		call clear_led
 325               	.LVL40:
 125:keyboard.c    ****       if (accent)
 326               		.loc 1 125 14 is_stmt 0 view .LVU90
 327 015a 00E0      		ldi r16,0
 328               	.LVL41:
 125:keyboard.c    ****       if (accent)
 329               		.loc 1 125 14 view .LVU91
 330 015c 00C0      		rjmp .L11
 331               		.cfi_endproc
 332               	.LFE0:
 334               		.section	.rodata
 337               	notekey_tab:
 338 0000 0409 050A 		.ascii	"\004\t\005\n\006\007\013\021\f\022\r\020\023"
 338      0607 0B11 
 338      0C12 0D10 
 338      13
 339               		.text
 340               	.Letext0:
 341               		.file 2 "main.h"
 342               		.file 3 "led.h"
 343               		.file 4 "switch.h"
 344               		.file 5 "midi.h"
 345               		.file 6 "synth.h"
 346               		.file 7 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:12     .text:0000000000000000 do_keyboard_mode
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cc6vTBGK.s:337    .rodata:0000000000000000 notekey_tab

UNDEFINED SYMBOLS
turn_off_tempo
clear_bank_leds
read_switches
has_bank_knob_changed
function
midi_notesoff
midi_out_addr
is_bank_led_set
set_bank_led
bank
internal_eeprom_write8
display_octave_shift
just_pressed
note_on
midi_send_note_on
set_notekey_led
just_released
midi_send_note_off
clear_notekey_led
set_led
no_keys_pressed
note_off
clear_notekey_leds
clear_led
__do_copy_data
