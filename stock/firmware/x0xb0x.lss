
x0xb0x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  0000356a  000035fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000356a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  00800264  00800264  00003762  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00003762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003774  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000037b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000063ed  00000000  00000000  00003a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ff9  00000000  00000000  00009e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008526  00000000  00000000  0000bdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d60  00000000  00000000  00014324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001015  00000000  00000000  00015084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002556  00000000  00000000  00016099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000185ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_4>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_9>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_16>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__vector_19>
      50:	0c 94 87 0c 	jmp	0x190e	; 0x190e <__vector_20>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ea e6       	ldi	r30, 0x6A	; 106
      84:	f5 e3       	ldi	r31, 0x35	; 53
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 36       	cpi	r26, 0x64	; 100
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	23 e0       	ldi	r18, 0x03	; 3
      94:	a4 e6       	ldi	r26, 0x64	; 100
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ab 3e       	cpi	r26, 0xEB	; 235
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <main>
      a6:	0c 94 85 1a 	jmp	0x350a	; 0x350a <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_4>:
  }
}

///////////////////////////////////// pin change interrupts
uint8_t last_tempo;
SIGNAL(SIG_PIN_CHANGE0) {
      ae:	1f 92       	push	r1
      b0:	1f b6       	in	r1, 0x3f	; 63
      b2:	1f 92       	push	r1
      b4:	11 24       	eor	r1, r1
      b6:	2f 93       	push	r18
      b8:	3f 93       	push	r19
      ba:	8f 93       	push	r24
      bc:	9f 93       	push	r25

  uint8_t curr_tempo;

  // tempo knob change!

  curr_tempo = TEMPO_PIN & 0x3; // pins A0 and A1
      be:	89 b3       	in	r24, 0x19	; 25
      c0:	83 70       	andi	r24, 0x03	; 3

  if (curr_tempo != last_tempo) {
      c2:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <last_tempo>
      c6:	98 17       	cp	r25, r24
      c8:	d1 f0       	breq	.+52     	; 0xfe <__vector_4+0x50>
    if ((last_tempo == 3) && (curr_tempo == 2)) {
      ca:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <newtempo>
      ce:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <newtempo+0x1>
      d2:	93 30       	cpi	r25, 0x03	; 3
      d4:	e1 f4       	brne	.+56     	; 0x10e <__vector_4+0x60>
      newtempo--;
      d6:	21 50       	subi	r18, 0x01	; 1
      d8:	31 09       	sbc	r19, r1
    if ((last_tempo == 3) && (curr_tempo == 2)) {
      da:	82 30       	cpi	r24, 0x02	; 2
      dc:	f1 f0       	breq	.+60     	; 0x11a <__vector_4+0x6c>
    }
    if ((last_tempo == 2) && (curr_tempo == 3)) {
      newtempo++;
    }

    if (newtempo > MAX_TEMPO)
      de:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <newtempo>
      e2:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <newtempo+0x1>
      e6:	2d 32       	cpi	r18, 0x2D	; 45
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	39 07       	cpc	r19, r25
      ec:	d8 f0       	brcs	.+54     	; 0x124 <__vector_4+0x76>
      newtempo = MAX_TEMPO;
      ee:	2c e2       	ldi	r18, 0x2C	; 44
      f0:	31 e0       	ldi	r19, 0x01	; 1
    if (newtempo < MIN_TEMPO)
      newtempo = MIN_TEMPO;
      f2:	30 93 95 02 	sts	0x0295, r19	; 0x800295 <newtempo+0x1>
      f6:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <newtempo>
    last_tempo = curr_tempo;
      fa:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <last_tempo>
  }
}
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	3f 91       	pop	r19
     104:	2f 91       	pop	r18
     106:	1f 90       	pop	r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	1f 90       	pop	r1
     10c:	18 95       	reti
    if ((last_tempo == 2) && (curr_tempo == 3)) {
     10e:	92 30       	cpi	r25, 0x02	; 2
     110:	31 f7       	brne	.-52     	; 0xde <__vector_4+0x30>
     112:	83 30       	cpi	r24, 0x03	; 3
     114:	21 f7       	brne	.-56     	; 0xde <__vector_4+0x30>
      newtempo++;
     116:	2f 5f       	subi	r18, 0xFF	; 255
     118:	3f 4f       	sbci	r19, 0xFF	; 255
     11a:	30 93 95 02 	sts	0x0295, r19	; 0x800295 <newtempo+0x1>
     11e:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <newtempo>
     122:	dd cf       	rjmp	.-70     	; 0xde <__vector_4+0x30>
    if (newtempo < MIN_TEMPO)
     124:	24 31       	cpi	r18, 0x14	; 20
     126:	31 05       	cpc	r19, r1
     128:	40 f7       	brcc	.-48     	; 0xfa <__vector_4+0x4c>
      newtempo = MIN_TEMPO;
     12a:	24 e1       	ldi	r18, 0x14	; 20
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	e1 cf       	rjmp	.-62     	; 0xf2 <__vector_4+0x44>

00000130 <init_timer0>:
  }
}

/********************* */
void init_timer0(void) {
  sbi(TIMSK, 0);              // timer0 overflow interrupt enable
     130:	89 b7       	in	r24, 0x39	; 57
     132:	81 60       	ori	r24, 0x01	; 1
     134:	89 bf       	out	0x39, r24	; 57
  TCCR0 = (1 << WGM01) | 0x3; // compare mode, clk/64
     136:	8b e0       	ldi	r24, 0x0B	; 11
     138:	83 bf       	out	0x33, r24	; 51
  OCR0 = 250;                 // 1KHz
     13a:	8a ef       	ldi	r24, 0xFA	; 250
     13c:	81 bf       	out	0x31, r24	; 49
}
     13e:	08 95       	ret

00000140 <init_timer2>:

void init_timer2(void) {
  sbi(TIMSK, 0);
     140:	89 b7       	in	r24, 0x39	; 57
     142:	81 60       	ori	r24, 0x01	; 1
     144:	89 bf       	out	0x39, r24	; 57
  TCCR2 = (1 << WGM21) | 0x3; // compare mode, clk/32
     146:	8b e0       	ldi	r24, 0x0B	; 11
     148:	87 bd       	out	0x27, r24	; 39
  OCR2 = 50;                  // 10khz
     14a:	82 e3       	ldi	r24, 0x32	; 50
     14c:	82 bd       	out	0x22, r24	; 34
}
     14e:	08 95       	ret

00000150 <turn_on_tempo>:
  note_counter = 0;
  sbi(ETIMSK, TOIE3); // enable tempo interrupt
}

// reset the note counter. change the tempo back.
void turn_on_tempo() { sbi(ETIMSK, TOIE3); }
     150:	ed e7       	ldi	r30, 0x7D	; 125
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	84 60       	ori	r24, 0x04	; 4
     158:	80 83       	st	Z, r24
     15a:	08 95       	ret

0000015c <turn_off_tempo>:

void turn_off_tempo() {
  clear_led(LED_TEMPO);
     15c:	85 e2       	ldi	r24, 0x25	; 37
     15e:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  cbi(ETIMSK, TOIE3);
     162:	ed e7       	ldi	r30, 0x7D	; 125
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	8b 7f       	andi	r24, 0xFB	; 251
     16a:	80 83       	st	Z, r24
}
     16c:	08 95       	ret

0000016e <is_tempo_running>:

uint8_t is_tempo_running() { return (ETIMSK >> TOIE3) & 0x1; }
     16e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <__TEXT_REGION_LENGTH__+0x7e007d>
     172:	82 fb       	bst	r24, 2
     174:	88 27       	eor	r24, r24
     176:	80 f9       	bld	r24, 0
     178:	08 95       	ret

0000017a <__vector_16>:
SIGNAL(SIG_OUTPUT_COMPARE0) {
     17a:	1f 92       	push	r1
     17c:	0f 92       	push	r0
     17e:	0f b6       	in	r0, 0x3f	; 63
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	4f 93       	push	r20
     18a:	5f 93       	push	r21
     18c:	6f 93       	push	r22
     18e:	7f 93       	push	r23
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
  if (debounce_timer != 0xFF)
     19c:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <debounce_timer>
     1a0:	8f 3f       	cpi	r24, 0xFF	; 255
     1a2:	29 f0       	breq	.+10     	; 0x1ae <__vector_16+0x34>
    debounce_timer++;
     1a4:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <debounce_timer>
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <debounce_timer>
  if (tap_tempo_timer != 0xFFFF)
     1ae:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <tap_tempo_timer>
     1b2:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <tap_tempo_timer+0x1>
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	49 f0       	breq	.+18     	; 0x1cc <__vector_16+0x52>
    tap_tempo_timer++;
     1ba:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <tap_tempo_timer>
     1be:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <tap_tempo_timer+0x1>
     1c2:	01 96       	adiw	r24, 0x01	; 1
     1c4:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <tap_tempo_timer+0x1>
     1c8:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <tap_tempo_timer>
  if (uart_timeout != 0xFFFF)
     1cc:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <uart_timeout>
     1d0:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <uart_timeout+0x1>
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	49 f0       	breq	.+18     	; 0x1ea <__vector_16+0x70>
    uart_timeout++;
     1d8:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <uart_timeout>
     1dc:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <uart_timeout+0x1>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <uart_timeout+0x1>
     1e6:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <uart_timeout>
  if ((sync != DIN_SYNC) && (dinsync_clock_timeout != 0)) {
     1ea:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	59 f4       	brne	.+22     	; 0x208 <__vector_16+0x8e>
    curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
     1f2:	80 b3       	in	r24, 0x10	; 16
     1f4:	82 95       	swap	r24
     1f6:	81 70       	andi	r24, 0x01	; 1
    if (!last_dinsync_c && curr_dinsync_c) {
     1f8:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <last_dinsync_c>
     1fc:	99 23       	and	r25, r25
     1fe:	09 f4       	brne	.+2      	; 0x202 <__vector_16+0x88>
     200:	3f c0       	rjmp	.+126    	; 0x280 <__vector_16+0x106>
      last_dinsync_c = curr_dinsync_c;
     202:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <last_dinsync_c>
     206:	1a c0       	rjmp	.+52     	; 0x23c <__vector_16+0xc2>
  if ((sync != DIN_SYNC) && (dinsync_clock_timeout != 0)) {
     208:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <dinsync_clock_timeout>
     20c:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <dinsync_clock_timeout+0x1>
     210:	89 2b       	or	r24, r25
     212:	a1 f0       	breq	.+40     	; 0x23c <__vector_16+0xc2>
    dinsync_clock_timeout--;
     214:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <dinsync_clock_timeout>
     218:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <dinsync_clock_timeout+0x1>
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <dinsync_clock_timeout+0x1>
     222:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <dinsync_clock_timeout>
    if (dinsync_clock_timeout == 0) {
     226:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <dinsync_clock_timeout>
     22a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <dinsync_clock_timeout+0x1>
     22e:	89 2b       	or	r24, r25
     230:	29 f4       	brne	.+10     	; 0x23c <__vector_16+0xc2>
      cbi(DINSYNC_PORT, DINSYNC_CLK); // lower the clock
     232:	94 98       	cbi	0x12, 4	; 18
  if (sync == DIN_SYNC) {
     234:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	d9 f2       	breq	.-74     	; 0x1f2 <__vector_16+0x78>
  if (!is_tempo_running()) {
     23c:	0e 94 b7 00 	call	0x16e	; 0x16e <is_tempo_running>
     240:	81 11       	cpse	r24, r1
     242:	0d c0       	rjmp	.+26     	; 0x25e <__vector_16+0xe4>
    if (blinktimer == 200) {
     244:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     248:	88 3c       	cpi	r24, 0xC8	; 200
     24a:	59 f5       	brne	.+86     	; 0x2a2 <__vector_16+0x128>
      blinktimer = 0;
     24c:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <__data_end>
      blink_leds_off();
     250:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <blink_leds_off>
    blinktimer++;
     254:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <__data_end>
}
     25e:	ff 91       	pop	r31
     260:	ef 91       	pop	r30
     262:	bf 91       	pop	r27
     264:	af 91       	pop	r26
     266:	9f 91       	pop	r25
     268:	8f 91       	pop	r24
     26a:	7f 91       	pop	r23
     26c:	6f 91       	pop	r22
     26e:	5f 91       	pop	r21
     270:	4f 91       	pop	r20
     272:	3f 91       	pop	r19
     274:	2f 91       	pop	r18
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti
    if (!last_dinsync_c && curr_dinsync_c) {
     280:	88 23       	and	r24, r24
     282:	09 f4       	brne	.+2      	; 0x286 <__vector_16+0x10c>
     284:	be cf       	rjmp	.-132    	; 0x202 <__vector_16+0x88>
      dinsync_clocked++;        // notify a clock was recv'd
     286:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <dinsync_clocked>
     28a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <dinsync_clocked+0x1>
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <dinsync_clocked+0x1>
     294:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <dinsync_clocked>
      midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
     298:	88 ef       	ldi	r24, 0xF8	; 248
     29a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
      last_dinsync_c = curr_dinsync_c;
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	b0 cf       	rjmp	.-160    	; 0x202 <__vector_16+0x88>
    } else if (blinktimer == 100) {
     2a2:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <__data_end>
     2a6:	84 36       	cpi	r24, 0x64	; 100
     2a8:	a9 f6       	brne	.-86     	; 0x254 <__vector_16+0xda>
      blink_leds_on();
     2aa:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <blink_leds_on>
     2ae:	d2 cf       	rjmp	.-92     	; 0x254 <__vector_16+0xda>

000002b0 <random>:
  }
}
*/

uint8_t random(void) {
  rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2)) & 00000001) |
     2b0:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <rand>
     2b4:	89 2f       	mov	r24, r25
     2b6:	88 1f       	adc	r24, r24
     2b8:	88 27       	eor	r24, r24
     2ba:	88 1f       	adc	r24, r24
     2bc:	29 2f       	mov	r18, r25
     2be:	22 95       	swap	r18
     2c0:	26 95       	lsr	r18
     2c2:	26 95       	lsr	r18
     2c4:	23 70       	andi	r18, 0x03	; 3
     2c6:	82 27       	eor	r24, r18
     2c8:	29 2f       	mov	r18, r25
     2ca:	22 95       	swap	r18
     2cc:	2f 70       	andi	r18, 0x0F	; 15
     2ce:	82 27       	eor	r24, r18
     2d0:	29 2f       	mov	r18, r25
     2d2:	26 95       	lsr	r18
     2d4:	26 95       	lsr	r18
     2d6:	82 27       	eor	r24, r18
     2d8:	81 70       	andi	r24, 0x01	; 1
          (rand << 1)); /*Or with the register shifted right.*/
     2da:	99 0f       	add	r25, r25
  rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2)) & 00000001) |
     2dc:	89 2b       	or	r24, r25
     2de:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <rand>
  return rand;          /*Return the first bit.*/
}
     2e2:	08 95       	ret

000002e4 <do_tempo>:
void do_tempo(void) {
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
  cli();
     2ec:	f8 94       	cli
  if ((sync != MIDI_SYNC) && (sync != DIN_SYNC) &&
     2ee:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     2f2:	81 50       	subi	r24, 0x01	; 1
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	40 f1       	brcs	.+80     	; 0x348 <do_tempo+0x64>
      (function != KEYBOARD_MODE_FUNC)) {
     2f8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
  if ((sync != MIDI_SYNC) && (sync != DIN_SYNC) &&
     2fc:	84 30       	cpi	r24, 0x04	; 4
     2fe:	21 f1       	breq	.+72     	; 0x348 <do_tempo+0x64>
    if (dinsync_counter >= DINSYNC_PPQ / 4)
     300:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <dinsync_counter>
     304:	86 30       	cpi	r24, 0x06	; 6
     306:	10 f0       	brcs	.+4      	; 0x30c <do_tempo+0x28>
      dinsync_counter = 0;
     308:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <dinsync_counter>
    if (dinsync_counter & 0x1)
     30c:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <dinsync_counter>
     310:	80 ff       	sbrs	r24, 0
     312:	10 c0       	rjmp	.+32     	; 0x334 <do_tempo+0x50>
      cbi(DINSYNC_PORT, DINSYNC_CLK);
     314:	94 98       	cbi	0x12, 4	; 18
    if (dinsync_counter != 0) {
     316:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <dinsync_counter>
     31a:	88 23       	and	r24, r24
     31c:	81 f0       	breq	.+32     	; 0x33e <do_tempo+0x5a>
      dinsync_counter++;
     31e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <dinsync_counter>
     322:	8f 5f       	subi	r24, 0xFF	; 255
     324:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <dinsync_counter>
  sei();
     328:	78 94       	sei
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	08 95       	ret
      sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
     334:	94 9a       	sbi	0x12, 4	; 18
      midi_putchar(MIDI_CLOCK);
     336:	88 ef       	ldi	r24, 0xF8	; 248
     338:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
     33c:	ec cf       	rjmp	.-40     	; 0x316 <do_tempo+0x32>
      dinsync_counter++;
     33e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <dinsync_counter>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <dinsync_counter>
  if (note_counter >= 8)
     348:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
     34c:	88 30       	cpi	r24, 0x08	; 8
     34e:	10 f0       	brcs	.+4      	; 0x354 <do_tempo+0x70>
    note_counter = 0;
     350:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <note_counter>
  if (note_counter & 0x1) { // sixteenth notes
     354:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
    switch (function) {
     358:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <function>
     35c:	e1 50       	subi	r30, 0x01	; 1
  if (note_counter & 0x1) { // sixteenth notes
     35e:	80 ff       	sbrs	r24, 0
     360:	d6 c1       	rjmp	.+940    	; 0x70e <__stack+0x20f>
    switch (function) {
     362:	ef 30       	cpi	r30, 0x0F	; 15
     364:	60 f4       	brcc	.+24     	; 0x37e <do_tempo+0x9a>
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	e9 57       	subi	r30, 0x79	; 121
     36a:	f5 4e       	sbci	r31, 0xE5	; 229
     36c:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__tablejump2__>
      note_off(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      midi_send_note_off(curr_note);
     376:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     37a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <midi_send_note_off>
  if (note_counter < 4) {
     37e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
     382:	84 30       	cpi	r24, 0x04	; 4
     384:	08 f0       	brcs	.+2      	; 0x388 <do_tempo+0xa4>
     386:	be c2       	rjmp	.+1404   	; 0x904 <__stack+0x405>
    set_led(LED_TEMPO);
     388:	85 e2       	ldi	r24, 0x25	; 37
     38a:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    blink_leds_off();
     38e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <blink_leds_off>
  clock_leds();
     392:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clock_leds>
  note_counter++;
     396:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
     39a:	8f 5f       	subi	r24, 0xFF	; 255
     39c:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <note_counter>
     3a0:	c3 cf       	rjmp	.-122    	; 0x328 <do_tempo+0x44>
      if (play_loaded_pattern || play_loaded_track) {
     3a2:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <play_loaded_pattern>
     3a6:	81 11       	cpse	r24, r1
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <do_tempo+0xce>
     3aa:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <play_loaded_track>
     3ae:	88 23       	and	r24, r24
     3b0:	61 f0       	breq	.+24     	; 0x3ca <do_tempo+0xe6>
        if (curr_note != 0xFF) {
     3b2:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <curr_note>
     3b6:	9f 3f       	cpi	r25, 0xFF	; 255
     3b8:	41 f0       	breq	.+16     	; 0x3ca <do_tempo+0xe6>
          note_off(((curr_note >> 7) & 0x1) | all_slide); // slide
     3ba:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <all_slide>
     3be:	99 1f       	adc	r25, r25
     3c0:	99 27       	eor	r25, r25
     3c2:	99 1f       	adc	r25, r25
     3c4:	89 2b       	or	r24, r25
     3c6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      if (play_loaded_track) {
     3ca:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <play_loaded_track>
     3ce:	88 23       	and	r24, r24
     3d0:	b1 f2       	breq	.-84     	; 0x37e <do_tempo+0x9a>
        if ((curr_pattern_index >= PATT_SIZE) ||
     3d2:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     3d6:	80 31       	cpi	r24, 0x10	; 16
     3d8:	40 f4       	brcc	.+16     	; 0x3ea <do_tempo+0x106>
            (pattern_buff[curr_pattern_index] == 0xFF)) {
     3da:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	e7 58       	subi	r30, 0x87	; 135
     3e2:	fc 4f       	sbci	r31, 0xFC	; 252
     3e4:	80 81       	ld	r24, Z
        if ((curr_pattern_index >= PATT_SIZE) ||
     3e6:	8f 3f       	cpi	r24, 0xFF	; 255
     3e8:	51 f6       	brne	.-108    	; 0x37e <do_tempo+0x9a>
          curr_pattern_index = 0; // start next pattern in chain
     3ea:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
          curr_track_index++;     // go to next patt in chain
     3ee:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
     3f2:	8f 5f       	subi	r24, 0xFF	; 255
     3f4:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <curr_track_index>
          if ((curr_track_index >= TRACK_SIZE) ||
     3f8:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
     3fc:	80 31       	cpi	r24, 0x10	; 16
     3fe:	58 f4       	brcc	.+22     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
              (track_buff[curr_track_index] == END_OF_TRACK)) {
     400:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	ee 0f       	add	r30, r30
     408:	ff 1f       	adc	r31, r31
     40a:	e4 5b       	subi	r30, 0xB4	; 180
     40c:	fc 4f       	sbci	r31, 0xFC	; 252
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
          if ((curr_track_index >= TRACK_SIZE) ||
     412:	01 96       	adiw	r24, 0x01	; 1
     414:	11 f4       	brne	.+4      	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
            curr_track_index = 0;
     416:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
          curr_patt = track_buff[curr_track_index];
     41a:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	e4 5b       	subi	r30, 0xB4	; 180
     426:	fc 4f       	sbci	r31, 0xFC	; 252
     428:	80 81       	ld	r24, Z
     42a:	91 81       	ldd	r25, Z+1	; 0x01
     42c:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
     430:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
          if (curr_patt == END_OF_TRACK) {
     434:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
     438:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	21 f4       	brne	.+8      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
            pattern_buff[0] = END_OF_PATTERN;
     440:	8f ef       	ldi	r24, 0xFF	; 255
     442:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <pattern_buff>
     446:	9b cf       	rjmp	.-202    	; 0x37e <do_tempo+0x9a>
            curr_pitch_shift = load_curr_patt();
     448:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <load_curr_patt>
     44c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
            clear_bank_leds();
     450:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
     454:	94 cf       	rjmp	.-216    	; 0x37e <do_tempo+0x9a>
      if (play_loaded_pattern) {
     456:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <play_loaded_pattern>
     45a:	88 23       	and	r24, r24
     45c:	09 f4       	brne	.+2      	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
     45e:	8f cf       	rjmp	.-226    	; 0x37e <do_tempo+0x9a>
        if (curr_note != 0xFF) {
     460:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     464:	8f 3f       	cpi	r24, 0xFF	; 255
     466:	29 f0       	breq	.+10     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
          note_off((curr_note >> 7) & 0x1); // slide
     468:	88 1f       	adc	r24, r24
     46a:	88 27       	eor	r24, r24
     46c:	88 1f       	adc	r24, r24
     46e:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
        curr_pattern_index++;
     472:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     476:	8f 5f       	subi	r24, 0xFF	; 255
     478:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <curr_pattern_index>
        if ((curr_pattern_index >= PATT_SIZE) ||
     47c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     480:	80 31       	cpi	r24, 0x10	; 16
     482:	48 f4       	brcc	.+18     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
            (pattern_buff[curr_pattern_index] == 0xFF)) {
     484:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	e7 58       	subi	r30, 0x87	; 135
     48c:	fc 4f       	sbci	r31, 0xFC	; 252
     48e:	80 81       	ld	r24, Z
        if ((curr_pattern_index >= PATT_SIZE) ||
     490:	8f 3f       	cpi	r24, 0xFF	; 255
     492:	09 f0       	breq	.+2      	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     494:	74 cf       	rjmp	.-280    	; 0x37e <do_tempo+0x9a>
          curr_pattern_index = 0;
     496:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
     49a:	71 cf       	rjmp	.-286    	; 0x37e <do_tempo+0x9a>
      if (playing) {
     49c:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
     4a0:	88 23       	and	r24, r24
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
     4a4:	6c cf       	rjmp	.-296    	; 0x37e <do_tempo+0x9a>
        if (curr_note != 0xFF) {
     4a6:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     4aa:	8f 3f       	cpi	r24, 0xFF	; 255
     4ac:	59 f0       	breq	.+22     	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
          if (((curr_note >> 7) & 0x1) | all_slide) {
     4ae:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <all_slide>
     4b2:	88 1f       	adc	r24, r24
     4b4:	88 27       	eor	r24, r24
     4b6:	88 1f       	adc	r24, r24
     4b8:	89 2b       	or	r24, r25
     4ba:	09 f4       	brne	.+2      	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
     4bc:	72 c0       	rjmp	.+228    	; 0x5a2 <__stack+0xa3>
            note_off(1); // slide
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
        if ((prev_note != 0xFF) && (((prev_note >> 7) & 0x1) | all_slide)) {
     4c4:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <prev_note>
     4c8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ca:	81 f0       	breq	.+32     	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
     4cc:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <all_slide>
     4d0:	98 2f       	mov	r25, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	99 27       	eor	r25, r25
     4d6:	99 1f       	adc	r25, r25
     4d8:	92 2b       	or	r25, r18
     4da:	41 f0       	breq	.+16     	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
          if ((prev_note & 0x3F) != 0) // not rest
     4dc:	98 2f       	mov	r25, r24
     4de:	9f 73       	andi	r25, 0x3F	; 63
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
            midi_send_note_off(prev_note + curr_pitch_shift);
     4e2:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curr_pitch_shift>
     4e6:	89 0f       	add	r24, r25
            midi_send_note_off(prev_note);
     4e8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <midi_send_note_off>
        if ((curr_pattern_index >= PATT_SIZE) ||
     4ec:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     4f0:	80 31       	cpi	r24, 0x10	; 16
     4f2:	48 f4       	brcc	.+18     	; 0x506 <__stack+0x7>
            (pattern_buff[curr_pattern_index] == 0xFF)) {
     4f4:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	e7 58       	subi	r30, 0x87	; 135
     4fc:	fc 4f       	sbci	r31, 0xFC	; 252
     4fe:	80 81       	ld	r24, Z
        if ((curr_pattern_index >= PATT_SIZE) ||
     500:	8f 3f       	cpi	r24, 0xFF	; 255
     502:	09 f0       	breq	.+2      	; 0x506 <__stack+0x7>
     504:	3c cf       	rjmp	.-392    	; 0x37e <do_tempo+0x9a>
          curr_pattern_index = 0; // start next pattern in chain
     506:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
          curr_chain_index++;     // go to next patt in chain
     50a:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <curr_chain_index>
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <curr_chain_index>
          if ((curr_chain_index >= MAX_CHAIN) ||
     514:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <curr_chain_index>
     518:	80 32       	cpi	r24, 0x20	; 32
     51a:	40 f4       	brcc	.+16     	; 0x52c <__stack+0x2d>
              (curr_chain[curr_chain_index] == 0xFF)) {
     51c:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <curr_chain_index>
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	e7 55       	subi	r30, 0x57	; 87
     524:	fc 4f       	sbci	r31, 0xFC	; 252
     526:	80 81       	ld	r24, Z
          if ((curr_chain_index >= MAX_CHAIN) ||
     528:	8f 3f       	cpi	r24, 0xFF	; 255
     52a:	11 f4       	brne	.+4      	; 0x530 <__stack+0x31>
            curr_chain_index = 0;
     52c:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <curr_chain_index>
          if (!chains_equiv(next_chain, curr_chain) ||
     530:	69 ea       	ldi	r22, 0xA9	; 169
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	89 e8       	ldi	r24, 0x89	; 137
     536:	93 e0       	ldi	r25, 0x03	; 3
     538:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <chains_equiv>
     53c:	88 23       	and	r24, r24
     53e:	31 f0       	breq	.+12     	; 0x54c <__stack+0x4d>
              (curr_bank != next_bank)) {
     540:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <curr_bank>
     544:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <next_bank>
          if (!chains_equiv(next_chain, curr_chain) ||
     548:	98 17       	cp	r25, r24
     54a:	c1 f0       	breq	.+48     	; 0x57c <__stack+0x7d>
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
              curr_chain[i] = next_chain[i];
     550:	fc 01       	movw	r30, r24
     552:	e7 57       	subi	r30, 0x77	; 119
     554:	fc 4f       	sbci	r31, 0xFC	; 252
     556:	20 81       	ld	r18, Z
     558:	fc 01       	movw	r30, r24
     55a:	e7 55       	subi	r30, 0x57	; 87
     55c:	fc 4f       	sbci	r31, 0xFC	; 252
     55e:	20 83       	st	Z, r18
     560:	01 96       	adiw	r24, 0x01	; 1
            for (i = 0; i < MAX_CHAIN; i++)
     562:	80 32       	cpi	r24, 0x20	; 32
     564:	91 05       	cpc	r25, r1
     566:	a1 f7       	brne	.-24     	; 0x550 <__stack+0x51>
            curr_chain_index = 0; // reset to beginning
     568:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <curr_chain_index>
            next_pitch_shift = curr_pitch_shift = 0;
     56c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <curr_pitch_shift>
     570:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <next_pitch_shift>
            clear_notekey_leds();
     574:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
            clear_blinking_leds();
     578:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
          curr_bank = next_bank;
     57c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <next_bank>
     580:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <curr_bank>
          curr_pitch_shift = next_pitch_shift;
     584:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
     588:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
          load_pattern(curr_bank, curr_chain[curr_chain_index]);
     58c:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <curr_chain_index>
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	e7 55       	subi	r30, 0x57	; 87
     594:	fc 4f       	sbci	r31, 0xFC	; 252
     596:	60 81       	ld	r22, Z
     598:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <curr_bank>
     59c:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
     5a0:	ee ce       	rjmp	.-548    	; 0x37e <do_tempo+0x9a>
            note_off(0);                 // no slide
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
            if ((curr_note & 0x3F) != 0) // not rest
     5a8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     5ac:	98 2f       	mov	r25, r24
     5ae:	9f 73       	andi	r25, 0x3F	; 63
     5b0:	19 f0       	breq	.+6      	; 0x5b8 <__stack+0xb9>
              midi_send_note_off(curr_note + curr_pitch_shift);
     5b2:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curr_pitch_shift>
     5b6:	89 0f       	add	r24, r25
              midi_send_note_off(curr_note);
     5b8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <midi_send_note_off>
     5bc:	83 cf       	rjmp	.-250    	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
      if (playing) {
     5be:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
     5c2:	88 23       	and	r24, r24
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <__stack+0xc9>
     5c6:	db ce       	rjmp	.-586    	; 0x37e <do_tempo+0x9a>
        if (curr_note != 0xFF) {
     5c8:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	59 f0       	breq	.+22     	; 0x5e6 <__stack+0xe7>
          if (((curr_note >> 7) & 0x1) | all_slide) {
     5d0:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <all_slide>
     5d4:	88 1f       	adc	r24, r24
     5d6:	88 27       	eor	r24, r24
     5d8:	88 1f       	adc	r24, r24
     5da:	89 2b       	or	r24, r25
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__stack+0xe1>
     5de:	82 c0       	rjmp	.+260    	; 0x6e4 <__stack+0x1e5>
            note_off(1); // slide
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
        if ((curr_pattern_index >= PATT_SIZE) ||
     5e6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     5ea:	80 31       	cpi	r24, 0x10	; 16
     5ec:	48 f4       	brcc	.+18     	; 0x600 <__stack+0x101>
            (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
     5ee:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	e7 58       	subi	r30, 0x87	; 135
     5f6:	fc 4f       	sbci	r31, 0xFC	; 252
     5f8:	80 81       	ld	r24, Z
        if ((curr_pattern_index >= PATT_SIZE) ||
     5fa:	8f 3f       	cpi	r24, 0xFF	; 255
     5fc:	09 f0       	breq	.+2      	; 0x600 <__stack+0x101>
     5fe:	bf ce       	rjmp	.-642    	; 0x37e <do_tempo+0x9a>
          curr_pattern_index = 0; // start next pattern in track
     600:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
          curr_track_index++;     // go to next patt in chain
     604:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
     608:	8f 5f       	subi	r24, 0xFF	; 255
     60a:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <curr_track_index>
          if ((curr_track_index >= TRACK_SIZE) ||
     60e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
     612:	80 31       	cpi	r24, 0x10	; 16
     614:	60 f4       	brcc	.+24     	; 0x62e <__stack+0x12f>
              (track_buff[curr_track_index] == END_OF_TRACK)) {
     616:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e4 5b       	subi	r30, 0xB4	; 180
     622:	fc 4f       	sbci	r31, 0xFC	; 252
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
          if ((curr_track_index >= TRACK_SIZE) ||
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	09 f0       	breq	.+2      	; 0x62e <__stack+0x12f>
     62c:	4b c0       	rjmp	.+150    	; 0x6c4 <__stack+0x1c5>
            curr_track_index = 0;
     62e:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
            curr_chain_index++; // go to next track in chain
     632:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <curr_chain_index>
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <curr_chain_index>
            if ((curr_chain_index >= MAX_CHAIN) ||
     63c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <curr_chain_index>
     640:	80 32       	cpi	r24, 0x20	; 32
     642:	40 f4       	brcc	.+16     	; 0x654 <__stack+0x155>
                (curr_chain[curr_chain_index] == 0xFF)) {
     644:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <curr_chain_index>
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	e7 55       	subi	r30, 0x57	; 87
     64c:	fc 4f       	sbci	r31, 0xFC	; 252
     64e:	80 81       	ld	r24, Z
            if ((curr_chain_index >= MAX_CHAIN) ||
     650:	8f 3f       	cpi	r24, 0xFF	; 255
     652:	71 f5       	brne	.+92     	; 0x6b0 <__stack+0x1b1>
              curr_chain_index = 0;
     654:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <curr_chain_index>
              if (!chains_equiv(next_chain, curr_chain) ||
     658:	69 ea       	ldi	r22, 0xA9	; 169
     65a:	73 e0       	ldi	r23, 0x03	; 3
     65c:	89 e8       	ldi	r24, 0x89	; 137
     65e:	93 e0       	ldi	r25, 0x03	; 3
     660:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <chains_equiv>
     664:	88 23       	and	r24, r24
     666:	31 f0       	breq	.+12     	; 0x674 <__stack+0x175>
                  (curr_bank != next_bank)) {
     668:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <curr_bank>
     66c:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <next_bank>
              if (!chains_equiv(next_chain, curr_chain) ||
     670:	98 17       	cp	r25, r24
     672:	b1 f0       	breq	.+44     	; 0x6a0 <__stack+0x1a1>
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	80 e0       	ldi	r24, 0x00	; 0
                  curr_chain[i] = next_chain[i];
     678:	fc 01       	movw	r30, r24
     67a:	e7 57       	subi	r30, 0x77	; 119
     67c:	fc 4f       	sbci	r31, 0xFC	; 252
     67e:	20 81       	ld	r18, Z
     680:	fc 01       	movw	r30, r24
     682:	e7 55       	subi	r30, 0x57	; 87
     684:	fc 4f       	sbci	r31, 0xFC	; 252
     686:	20 83       	st	Z, r18
     688:	01 96       	adiw	r24, 0x01	; 1
                for (i = 0; i < MAX_CHAIN; i++)
     68a:	80 32       	cpi	r24, 0x20	; 32
     68c:	91 05       	cpc	r25, r1
     68e:	a1 f7       	brne	.-24     	; 0x678 <__stack+0x179>
                next_pitch_shift = curr_pitch_shift = 0;
     690:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <curr_pitch_shift>
     694:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <next_pitch_shift>
                clear_notekey_leds();
     698:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
                clear_blinking_leds();
     69c:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
              curr_bank = next_bank;
     6a0:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <next_bank>
     6a4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <curr_bank>
              curr_pitch_shift = next_pitch_shift;
     6a8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
     6ac:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
            load_track(curr_bank, curr_chain[curr_chain_index]);
     6b0:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <curr_chain_index>
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e7 55       	subi	r30, 0x57	; 87
     6b8:	fc 4f       	sbci	r31, 0xFC	; 252
     6ba:	60 81       	ld	r22, Z
     6bc:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <curr_bank>
     6c0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <load_track>
          curr_patt = track_buff[curr_track_index];
     6c4:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	e4 5b       	subi	r30, 0xB4	; 180
     6d0:	fc 4f       	sbci	r31, 0xFC	; 252
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
     6da:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
          load_curr_patt();
     6de:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <load_curr_patt>
     6e2:	4d ce       	rjmp	.-870    	; 0x37e <do_tempo+0x9a>
            note_off(0);                 // no slide
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
            if ((curr_note & 0x3F) != 0) // not rest
     6ea:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     6ee:	98 2f       	mov	r25, r24
     6f0:	9f 73       	andi	r25, 0x3F	; 63
     6f2:	51 f0       	breq	.+20     	; 0x708 <__stack+0x209>
              midi_send_note_off(curr_note + curr_pitch_shift +
     6f4:	c0 91 86 02 	lds	r28, 0x0286	; 0x800286 <curr_pitch_shift>
     6f8:	c8 0f       	add	r28, r24
                                 get_pitchshift_from_patt(curr_patt));
     6fa:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
     6fe:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
     702:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <get_pitchshift_from_patt>
              midi_send_note_off(curr_note + curr_pitch_shift +
     706:	8c 0f       	add	r24, r28
              midi_send_note_off(curr_note);
     708:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <midi_send_note_off>
     70c:	6c cf       	rjmp	.-296    	; 0x5e6 <__stack+0xe7>
    switch (function) {
     70e:	ef 30       	cpi	r30, 0x0F	; 15
     710:	08 f0       	brcs	.+2      	; 0x714 <__stack+0x215>
     712:	35 ce       	rjmp	.-918    	; 0x37e <do_tempo+0x9a>
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	ea 56       	subi	r30, 0x6A	; 106
     718:	f5 4e       	sbci	r31, 0xE5	; 229
     71a:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__tablejump2__>
      prev_note = curr_note;
     71e:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     722:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <prev_note>
      curr_note = next_random_note;
     726:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <next_random_note>
     72a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
      next_random_note = random();
     72e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <random>
     732:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <next_random_note>
      note_on(curr_note & 0x3f,
     736:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	8f 73       	andi	r24, 0x3F	; 63
            note_on((curr_note & 0x3F),
     740:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
            midi_send_note_on(curr_note);
     744:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     748:	d2 c0       	rjmp	.+420    	; 0x8ee <__stack+0x3ef>
      if (play_loaded_pattern || play_loaded_track) {
     74a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <play_loaded_pattern>
     74e:	81 11       	cpse	r24, r1
     750:	05 c0       	rjmp	.+10     	; 0x75c <__stack+0x25d>
     752:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <play_loaded_track>
     756:	88 23       	and	r24, r24
     758:	09 f4       	brne	.+2      	; 0x75c <__stack+0x25d>
     75a:	11 ce       	rjmp	.-990    	; 0x37e <do_tempo+0x9a>
        if (play_loaded_pattern) {
     75c:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <play_loaded_pattern>
     760:	88 23       	and	r24, r24
     762:	71 f0       	breq	.+28     	; 0x780 <__stack+0x281>
          if ((curr_pattern_index >= PATT_SIZE) ||
     764:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     768:	80 31       	cpi	r24, 0x10	; 16
     76a:	40 f4       	brcc	.+16     	; 0x77c <__stack+0x27d>
              (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
     76c:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e7 58       	subi	r30, 0x87	; 135
     774:	fc 4f       	sbci	r31, 0xFC	; 252
     776:	80 81       	ld	r24, Z
          if ((curr_pattern_index >= PATT_SIZE) ||
     778:	8f 3f       	cpi	r24, 0xFF	; 255
     77a:	11 f4       	brne	.+4      	; 0x780 <__stack+0x281>
            curr_pattern_index = 0;
     77c:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
        prev_note = curr_note;
     780:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <curr_note>
     784:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <prev_note>
        curr_note = pattern_buff[curr_pattern_index++];
     788:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	8e 0f       	add	r24, r30
     790:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <curr_pattern_index>
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	e7 58       	subi	r30, 0x87	; 135
     798:	fc 4f       	sbci	r31, 0xFC	; 252
     79a:	80 81       	ld	r24, Z
     79c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
        if (curr_note != 0xFF) {
     7a0:	8f 3f       	cpi	r24, 0xFF	; 255
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <__stack+0x2a7>
     7a4:	ec cd       	rjmp	.-1064   	; 0x37e <do_tempo+0x9a>
          if (all_rest)
     7a6:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <all_rest>
     7aa:	99 23       	and	r25, r25
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <__stack+0x2b5>
            curr_note &= 0xC0;
     7ae:	80 7c       	andi	r24, 0xC0	; 192
     7b0:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
          if ((curr_note & 0x3F) != 0) { // not rest
     7b4:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <curr_note>
     7b8:	84 2f       	mov	r24, r20
     7ba:	8f 73       	andi	r24, 0x3F	; 63
     7bc:	46 fb       	bst	r20, 6
     7be:	44 27       	eor	r20, r20
     7c0:	40 f9       	bld	r20, 0
     7c2:	66 1f       	adc	r22, r22
     7c4:	66 27       	eor	r22, r22
     7c6:	66 1f       	adc	r22, r22
     7c8:	88 23       	and	r24, r24
     7ca:	61 f0       	breq	.+24     	; 0x7e4 <__stack+0x2e5>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     7cc:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <all_accent>
            note_on((curr_note & 0x3F) + curr_pitch_shift,
     7d0:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <all_slide>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     7d4:	42 2b       	or	r20, r18
            note_on((curr_note & 0x3F) + curr_pitch_shift,
     7d6:	69 2b       	or	r22, r25
     7d8:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curr_pitch_shift>
     7dc:	89 0f       	add	r24, r25
          note_on(curr_note & 0x3F,
     7de:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
     7e2:	cd cd       	rjmp	.-1126   	; 0x37e <do_tempo+0x9a>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     7e4:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <all_accent>
            note_on((curr_note & 0x3F),
     7e8:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <all_slide>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     7ec:	49 2b       	or	r20, r25
            note_on((curr_note & 0x3F),
     7ee:	68 2b       	or	r22, r24
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	f5 cf       	rjmp	.-22     	; 0x7de <__stack+0x2df>
      if (play_loaded_pattern) {
     7f4:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <play_loaded_pattern>
     7f8:	88 23       	and	r24, r24
     7fa:	09 f4       	brne	.+2      	; 0x7fe <__stack+0x2ff>
     7fc:	c0 cd       	rjmp	.-1152   	; 0x37e <do_tempo+0x9a>
        clear_bank_leds();
     7fe:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
        set_bank_led(curr_pattern_index);
     802:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     806:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
        prev_note = curr_note;
     80a:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
     80e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <prev_note>
        curr_note = pattern_buff[curr_pattern_index];
     812:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	e7 58       	subi	r30, 0x87	; 135
     81a:	fc 4f       	sbci	r31, 0xFC	; 252
     81c:	80 81       	ld	r24, Z
     81e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
        if (curr_note != 0xFF) {
     822:	8f 3f       	cpi	r24, 0xFF	; 255
     824:	09 f4       	brne	.+2      	; 0x828 <__stack+0x329>
     826:	ab cd       	rjmp	.-1194   	; 0x37e <do_tempo+0x9a>
          set_note_led(curr_note);
     828:	0e 94 bd 0b 	call	0x177a	; 0x177a <set_note_led>
                  (curr_note >> 6) & 0x1); // accent
     82c:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
          note_on(curr_note & 0x3F,
     830:	86 fb       	bst	r24, 6
     832:	44 27       	eor	r20, r20
     834:	40 f9       	bld	r20, 0
     836:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <prev_note>
     83a:	66 1f       	adc	r22, r22
     83c:	66 27       	eor	r22, r22
     83e:	66 1f       	adc	r22, r22
     840:	8f 73       	andi	r24, 0x3F	; 63
     842:	cd cf       	rjmp	.-102    	; 0x7de <__stack+0x2df>
      if (playing) {
     844:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
     848:	88 23       	and	r24, r24
     84a:	31 f0       	breq	.+12     	; 0x858 <__stack+0x359>
        clear_bank_leds();
     84c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
        set_bank_led(curr_pattern_index);
     850:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
     854:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
      if (playing) {
     858:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
     85c:	88 23       	and	r24, r24
     85e:	09 f4       	brne	.+2      	; 0x862 <__stack+0x363>
     860:	8e cd       	rjmp	.-1252   	; 0x37e <do_tempo+0x9a>
        prev_note = curr_note;
     862:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <curr_note>
     866:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <prev_note>
        curr_note = pattern_buff[curr_pattern_index++];
     86a:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	8e 0f       	add	r24, r30
     872:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <curr_pattern_index>
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	e7 58       	subi	r30, 0x87	; 135
     87a:	fc 4f       	sbci	r31, 0xFC	; 252
     87c:	80 81       	ld	r24, Z
     87e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
        if (curr_note != 0xFF) {
     882:	8f 3f       	cpi	r24, 0xFF	; 255
     884:	09 f4       	brne	.+2      	; 0x888 <__stack+0x389>
     886:	7b cd       	rjmp	.-1290   	; 0x37e <do_tempo+0x9a>
          if (all_rest)
     888:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <all_rest>
     88c:	99 23       	and	r25, r25
     88e:	19 f0       	breq	.+6      	; 0x896 <__stack+0x397>
            curr_note &= 0xC0;
     890:	80 7c       	andi	r24, 0xC0	; 192
     892:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
          if ((curr_note & 0x3F) != 0) { // not rest
     896:	c0 91 91 02 	lds	r28, 0x0291	; 0x800291 <curr_note>
     89a:	8c 2f       	mov	r24, r28
     89c:	8f 73       	andi	r24, 0x3F	; 63
     89e:	c6 fb       	bst	r28, 6
     8a0:	cc 27       	eor	r28, r28
     8a2:	c0 f9       	bld	r28, 0
     8a4:	66 1f       	adc	r22, r22
     8a6:	66 27       	eor	r22, r22
     8a8:	66 1f       	adc	r22, r22
     8aa:	88 23       	and	r24, r24
     8ac:	19 f1       	breq	.+70     	; 0x8f4 <__stack+0x3f5>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     8ae:	00 91 8e 02 	lds	r16, 0x028E	; 0x80028e <all_accent>
            note_on((curr_note & 0x3F) + curr_pitch_shift +
     8b2:	10 91 8d 02 	lds	r17, 0x028D	; 0x80028d <all_slide>
     8b6:	16 2b       	or	r17, r22
     8b8:	d0 91 86 02 	lds	r29, 0x0286	; 0x800286 <curr_pitch_shift>
     8bc:	d8 0f       	add	r29, r24
                        get_pitchshift_from_patt(curr_patt),
     8be:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
     8c2:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
     8c6:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <get_pitchshift_from_patt>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     8ca:	40 2f       	mov	r20, r16
     8cc:	4c 2b       	or	r20, r28
            note_on((curr_note & 0x3F) + curr_pitch_shift +
     8ce:	61 2f       	mov	r22, r17
     8d0:	8d 0f       	add	r24, r29
     8d2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
            midi_send_note_on(curr_note + curr_pitch_shift +
     8d6:	c0 91 91 02 	lds	r28, 0x0291	; 0x800291 <curr_note>
     8da:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curr_pitch_shift>
     8de:	c8 0f       	add	r28, r24
                              get_pitchshift_from_patt(curr_patt));
     8e0:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
     8e4:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
     8e8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <get_pitchshift_from_patt>
            midi_send_note_on(curr_note + curr_pitch_shift +
     8ec:	8c 0f       	add	r24, r28
            midi_send_note_on(curr_note);
     8ee:	0e 94 c3 06 	call	0xd86	; 0xd86 <midi_send_note_on>
     8f2:	45 cd       	rjmp	.-1398   	; 0x37e <do_tempo+0x9a>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     8f4:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <all_accent>
            note_on((curr_note & 0x3F),
     8f8:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <all_slide>
                    ((curr_note >> 6) & 0x1) | all_accent); // accent
     8fc:	4c 2b       	or	r20, r28
            note_on((curr_note & 0x3F),
     8fe:	68 2b       	or	r22, r24
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	1e cf       	rjmp	.-452    	; 0x740 <__stack+0x241>
  } else if (note_counter < 8) {
     904:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
     908:	88 30       	cpi	r24, 0x08	; 8
     90a:	08 f0       	brcs	.+2      	; 0x90e <__stack+0x40f>
     90c:	42 cd       	rjmp	.-1404   	; 0x392 <do_tempo+0xae>
    clear_led(LED_TEMPO);
     90e:	85 e2       	ldi	r24, 0x25	; 37
     910:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    blink_leds_on();
     914:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <blink_leds_on>
     918:	3c cd       	rjmp	.-1416   	; 0x392 <do_tempo+0xae>

0000091a <__vector_9>:
SIGNAL(SIG_OVERFLOW3) {
     91a:	1f 92       	push	r1
     91c:	0f 92       	push	r0
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	0f 92       	push	r0
     922:	11 24       	eor	r1, r1
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
  TCNT3 = timer3_init; // FIXME, use CTC mode
     93c:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <timer3_init>
     940:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <timer3_init+0x1>
     944:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     948:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  do_tempo();
     94c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <do_tempo>
}
     950:	ff 91       	pop	r31
     952:	ef 91       	pop	r30
     954:	bf 91       	pop	r27
     956:	af 91       	pop	r26
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	7f 91       	pop	r23
     95e:	6f 91       	pop	r22
     960:	5f 91       	pop	r21
     962:	4f 91       	pop	r20
     964:	3f 91       	pop	r19
     966:	2f 91       	pop	r18
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	0f 90       	pop	r0
     96e:	1f 90       	pop	r1
     970:	18 95       	reti

00000972 <uart_putchar>:

  return;
}

int uart_putchar(char c) {
  loop_until_bit_is_set(UCSR1A, UDRE1);
     972:	15 9b       	sbis	0x02, 5	; 2
     974:	fe cf       	rjmp	.-4      	; 0x972 <uart_putchar>
  UDR1 = c;
     976:	83 b9       	out	0x03, r24	; 3
  return 0;
}
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	08 95       	ret

0000097e <putstring>:
void putstring(char *str) {
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
  while (str[0] != 0) {
     984:	89 91       	ld	r24, Y+
     986:	81 11       	cpse	r24, r1
     988:	03 c0       	rjmp	.+6      	; 0x990 <putstring+0x12>
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret
    uart_putchar(str[0]);
     990:	0e 94 b9 04 	call	0x972	; 0x972 <uart_putchar>
    str++;
     994:	f7 cf       	rjmp	.-18     	; 0x984 <putstring+0x6>

00000996 <putnum_ud>:
void putnum_ud(uint16_t n) {
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	9c 01       	movw	r18, r24
     9a4:	04 e0       	ldi	r16, 0x04	; 4
     9a6:	10 e0       	ldi	r17, 0x00	; 0
  for (pow = 10000UL; pow >= 10; pow /= 10) {
     9a8:	d0 e1       	ldi	r29, 0x10	; 16
     9aa:	c7 e2       	ldi	r28, 0x27	; 39
     9ac:	8a e0       	ldi	r24, 0x0A	; 10
     9ae:	e8 2e       	mov	r14, r24
     9b0:	f1 2c       	mov	r15, r1
    if (n / pow) {
     9b2:	ed 2f       	mov	r30, r29
     9b4:	fc 2f       	mov	r31, r28
     9b6:	8d 2f       	mov	r24, r29
     9b8:	9c 2f       	mov	r25, r28
     9ba:	b7 01       	movw	r22, r14
     9bc:	0e 94 49 1a 	call	0x3492	; 0x3492 <__udivmodhi4>
     9c0:	d6 2f       	mov	r29, r22
     9c2:	c7 2f       	mov	r28, r23
     9c4:	c9 01       	movw	r24, r18
     9c6:	bf 01       	movw	r22, r30
     9c8:	0e 94 49 1a 	call	0x3492	; 0x3492 <__udivmodhi4>
     9cc:	2e 17       	cp	r18, r30
     9ce:	3f 07       	cpc	r19, r31
     9d0:	28 f1       	brcs	.+74     	; 0xa1c <putnum_ud+0x86>
      uart_putchar((n / pow) + '0');
     9d2:	8c 01       	movw	r16, r24
     9d4:	80 e3       	ldi	r24, 0x30	; 48
     9d6:	86 0f       	add	r24, r22
     9d8:	0e 94 b9 04 	call	0x972	; 0x972 <uart_putchar>
      n %= pow;
     9dc:	98 01       	movw	r18, r16
  for (; pow != 0; pow /= 10) {
     9de:	0a e0       	ldi	r16, 0x0A	; 10
     9e0:	10 e0       	ldi	r17, 0x00	; 0
    uart_putchar((n / pow) + '0');
     9e2:	c9 01       	movw	r24, r18
     9e4:	6d 2f       	mov	r22, r29
     9e6:	7c 2f       	mov	r23, r28
     9e8:	0e 94 49 1a 	call	0x3492	; 0x3492 <__udivmodhi4>
     9ec:	7c 01       	movw	r14, r24
     9ee:	80 e3       	ldi	r24, 0x30	; 48
     9f0:	86 0f       	add	r24, r22
     9f2:	0e 94 b9 04 	call	0x972	; 0x972 <uart_putchar>
    n %= pow;
     9f6:	97 01       	movw	r18, r14
     9f8:	ed 2f       	mov	r30, r29
     9fa:	fc 2f       	mov	r31, r28
  for (; pow != 0; pow /= 10) {
     9fc:	8d 2f       	mov	r24, r29
     9fe:	9c 2f       	mov	r25, r28
     a00:	b8 01       	movw	r22, r16
     a02:	0e 94 49 1a 	call	0x3492	; 0x3492 <__udivmodhi4>
     a06:	d6 2f       	mov	r29, r22
     a08:	c7 2f       	mov	r28, r23
     a0a:	3a 97       	sbiw	r30, 0x0a	; 10
     a0c:	50 f7       	brcc	.-44     	; 0x9e2 <putnum_ud+0x4c>
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	ff 90       	pop	r15
     a18:	ef 90       	pop	r14
     a1a:	08 95       	ret
    n %= pow;
     a1c:	9c 01       	movw	r18, r24
     a1e:	01 50       	subi	r16, 0x01	; 1
     a20:	11 09       	sbc	r17, r1
  for (pow = 10000UL; pow >= 10; pow /= 10) {
     a22:	39 f6       	brne	.-114    	; 0x9b2 <putnum_ud+0x1c>
     a24:	dc cf       	rjmp	.-72     	; 0x9de <putnum_ud+0x48>

00000a26 <printhex>:
  hex &= 0xF;
     a26:	8f 70       	andi	r24, 0x0F	; 15
  if (hex < 10)
     a28:	8a 30       	cpi	r24, 0x0A	; 10
     a2a:	18 f4       	brcc	.+6      	; 0xa32 <printhex+0xc>
    uart_putchar(hex + '0');
     a2c:	80 5d       	subi	r24, 0xD0	; 208
    uart_putchar(hex + 'A' - 10);
     a2e:	0c 94 b9 04 	jmp	0x972	; 0x972 <uart_putchar>
     a32:	89 5c       	subi	r24, 0xC9	; 201
     a34:	fc cf       	rjmp	.-8      	; 0xa2e <printhex+0x8>

00000a36 <putnum_uh>:
void putnum_uh(uint16_t n) {
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	ec 01       	movw	r28, r24
  if (n >> 12)
     a3c:	89 2f       	mov	r24, r25
     a3e:	99 27       	eor	r25, r25
     a40:	82 95       	swap	r24
     a42:	8f 70       	andi	r24, 0x0F	; 15
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	11 f0       	breq	.+4      	; 0xa4c <putnum_uh+0x16>
    printhex(n >> 12);
     a48:	0e 94 13 05 	call	0xa26	; 0xa26 <printhex>
  if (n >> 8)
     a4c:	8d 2f       	mov	r24, r29
     a4e:	99 27       	eor	r25, r25
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	11 f0       	breq	.+4      	; 0xa58 <putnum_uh+0x22>
    printhex(n >> 8);
     a54:	0e 94 13 05 	call	0xa26	; 0xa26 <printhex>
  if (n >> 4)
     a58:	ce 01       	movw	r24, r28
     a5a:	24 e0       	ldi	r18, 0x04	; 4
     a5c:	96 95       	lsr	r25
     a5e:	87 95       	ror	r24
     a60:	2a 95       	dec	r18
     a62:	e1 f7       	brne	.-8      	; 0xa5c <putnum_uh+0x26>
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	11 f0       	breq	.+4      	; 0xa6c <putnum_uh+0x36>
    printhex(n >> 4);
     a68:	0e 94 13 05 	call	0xa26	; 0xa26 <printhex>
  printhex(n);
     a6c:	8c 2f       	mov	r24, r28
}
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
  printhex(n);
     a72:	0c 94 13 05 	jmp	0xa26	; 0xa26 <printhex>

00000a76 <uart_getch>:

int uart_getch() { // checks if there is a character waiting!
  if (bit_is_set(UCSR1A, RXC1))
     a76:	82 b1       	in	r24, 0x02	; 2
     a78:	08 2e       	mov	r0, r24
     a7a:	00 0c       	add	r0, r0
     a7c:	99 0b       	sbc	r25, r25
    return 1;
  return 0;
}
     a7e:	89 2f       	mov	r24, r25
     a80:	88 1f       	adc	r24, r24
     a82:	88 27       	eor	r24, r24
     a84:	88 1f       	adc	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	08 95       	ret

00000a8a <uart_getchar>:

int uart_getchar(void) {
  char c;
  loop_until_bit_is_set(UCSR1A, RXC1);
     a8a:	17 9b       	sbis	0x02, 7	; 2
     a8c:	fe cf       	rjmp	.-4      	; 0xa8a <uart_getchar>
  c = UDR1;
     a8e:	83 b1       	in	r24, 0x03	; 3
  return (int)c;
}
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	08 95       	ret

00000a94 <internal_eeprom_read8>:

//**************************************************
//         Internal EEPROM
//**************************************************

uint8_t internal_eeprom_read8(uint16_t addr) {
     a94:	9c 01       	movw	r18, r24
  loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
     a96:	e1 99       	sbic	0x1c, 1	; 28
     a98:	fe cf       	rjmp	.-4      	; 0xa96 <internal_eeprom_read8+0x2>
  EEAR = addr;
     a9a:	3f bb       	out	0x1f, r19	; 31
     a9c:	2e bb       	out	0x1e, r18	; 30
  sbi(EECR, EERE); // start EEPROM read
     a9e:	e0 9a       	sbi	0x1c, 0	; 28
  return EEDR;     // takes only 1 cycle
     aa0:	8d b3       	in	r24, 0x1d	; 29
}
     aa2:	08 95       	ret

00000aa4 <internal_eeprom_write8>:

void internal_eeprom_write8(uint16_t addr, uint8_t data) {
     aa4:	9c 01       	movw	r18, r24
  // printf("writing %d to addr 0x%x...", data, addr);
  loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
     aa6:	e1 99       	sbic	0x1c, 1	; 28
     aa8:	fe cf       	rjmp	.-4      	; 0xaa6 <internal_eeprom_write8+0x2>
  EEAR = addr;
     aaa:	3f bb       	out	0x1f, r19	; 31
     aac:	2e bb       	out	0x1e, r18	; 30
  EEDR = data;
     aae:	6d bb       	out	0x1d, r22	; 29
  cli();            // turn off interrupts
     ab0:	f8 94       	cli
  sbi(EECR, EEMWE); // these instructions must happen within 4 cycles
     ab2:	e2 9a       	sbi	0x1c, 2	; 28
  sbi(EECR, EEWE);
     ab4:	e1 9a       	sbi	0x1c, 1	; 28
  sei(); // turn on interrupts again
     ab6:	78 94       	sei
  // putstring("done\n\r");
}
     ab8:	08 95       	ret

00000aba <change_tempo>:
void change_tempo(uint16_t set_tempo) {
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <change_tempo+0x6>
     ac0:	00 d0       	rcall	.+0      	; 0xac2 <change_tempo+0x8>
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	9a 83       	std	Y+2, r25	; 0x02
  if (set_tempo > MAX_TEMPO) {
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	44 97       	sbiw	r24, 0x14	; 20
     ad0:	20 f4       	brcc	.+8      	; 0xada <change_tempo+0x20>
     ad2:	84 e1       	ldi	r24, 0x14	; 20
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	89 83       	std	Y+1, r24	; 0x01
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	8d 32       	cpi	r24, 0x2D	; 45
     ae0:	91 40       	sbci	r25, 0x01	; 1
     ae2:	20 f0       	brcs	.+8      	; 0xaec <change_tempo+0x32>
     ae4:	8c e2       	ldi	r24, 0x2C	; 44
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	9a 83       	std	Y+2, r25	; 0x02
     aea:	89 83       	std	Y+1, r24	; 0x01
  newtempo = tempo = set_tempo;
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <tempo+0x1>
     af4:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <tempo>
     af8:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <newtempo+0x1>
     afc:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <newtempo>
  internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
     b00:	6a 81       	ldd	r22, Y+2	; 0x02
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 52 05 	call	0xaa4	; 0xaa4 <internal_eeprom_write8>
  internal_eeprom_write8(TEMPO_EEADDR + 1, tempo & 0xFF);
     b0a:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <tempo>
     b0e:	86 e0       	ldi	r24, 0x06	; 6
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 52 05 	call	0xaa4	; 0xaa4 <internal_eeprom_write8>
  send_tempo(tempo);
     b16:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <tempo>
     b1a:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <tempo+0x1>
     b1e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <send_tempo>
  num_instr /= set_tempo;
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	9c 01       	movw	r18, r24
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e7       	ldi	r23, 0x70	; 112
     b30:	88 e3       	ldi	r24, 0x38	; 56
     b32:	99 e3       	ldi	r25, 0x39	; 57
     b34:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__udivmodsi4>
  num_instr /= DINSYNC_PPQ / 4; // do dinsync on same interrupt
     b38:	ca 01       	movw	r24, r20
     b3a:	b9 01       	movw	r22, r18
     b3c:	20 e3       	ldi	r18, 0x30	; 48
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__udivmodsi4>
  } else if ((top_num_instr & ~0x7) == 0) {
     b48:	ca 01       	movw	r24, r20
     b4a:	88 7f       	andi	r24, 0xF8	; 248
     b4c:	89 2b       	or	r24, r25
     b4e:	21 f5       	brne	.+72     	; 0xb98 <change_tempo+0xde>
    timer3_init = num_instr >> 3;
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	56 95       	lsr	r21
     b54:	47 95       	ror	r20
     b56:	37 95       	ror	r19
     b58:	27 95       	ror	r18
     b5a:	9a 95       	dec	r25
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <change_tempo+0x98>
     b5e:	30 93 98 02 	sts	0x0298, r19	; 0x800298 <timer3_init+0x1>
     b62:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <timer3_init>
    TCCR3B = 2;
     b66:	82 e0       	ldi	r24, 0x02	; 2
    TCCR3B = 6;
     b68:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  timer3_init *= -1;
     b6c:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <timer3_init>
     b70:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <timer3_init+0x1>
     b74:	91 95       	neg	r25
     b76:	81 95       	neg	r24
     b78:	91 09       	sbc	r25, r1
     b7a:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <timer3_init+0x1>
     b7e:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <timer3_init>
  TCNT3 = timer3_init;
     b82:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
}
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	08 95       	ret
    timer3_init = num_instr >> 4;
     b98:	84 e0       	ldi	r24, 0x04	; 4
     b9a:	56 95       	lsr	r21
     b9c:	47 95       	ror	r20
     b9e:	37 95       	ror	r19
     ba0:	27 95       	ror	r18
     ba2:	8a 95       	dec	r24
     ba4:	d1 f7       	brne	.-12     	; 0xb9a <change_tempo+0xe0>
     ba6:	30 93 98 02 	sts	0x0298, r19	; 0x800298 <timer3_init+0x1>
     baa:	20 93 97 02 	sts	0x0297, r18	; 0x800297 <timer3_init>
    TCCR3B = 6;
     bae:	86 e0       	ldi	r24, 0x06	; 6
     bb0:	db cf       	rjmp	.-74     	; 0xb68 <change_tempo+0xae>

00000bb2 <init_tempo>:
void init_tempo(void) {
     bb2:	cf 93       	push	r28
  sbi(PCMSK0, PCINT0); // detect change on pin A0
     bb4:	eb e6       	ldi	r30, 0x6B	; 107
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 83       	st	Z, r24
  sbi(PCMSK0, PCINT1); // detect change on pin A1
     bbe:	80 81       	ld	r24, Z
     bc0:	82 60       	ori	r24, 0x02	; 2
     bc2:	80 83       	st	Z, r24
  sbi(GICR, PCIE0);    // enable pin change interrupt for tempo knob detect
     bc4:	8b b7       	in	r24, 0x3b	; 59
     bc6:	88 60       	ori	r24, 0x08	; 8
     bc8:	8b bf       	out	0x3b, r24	; 59
  change_tempo((internal_eeprom_read8(TEMPO_EEADDR) << 8) |
     bca:	85 e0       	ldi	r24, 0x05	; 5
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 4a 05 	call	0xa94	; 0xa94 <internal_eeprom_read8>
     bd2:	c8 2f       	mov	r28, r24
               internal_eeprom_read8(TEMPO_EEADDR + 1));
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 4a 05 	call	0xa94	; 0xa94 <internal_eeprom_read8>
  change_tempo((internal_eeprom_read8(TEMPO_EEADDR) << 8) |
     bdc:	9c 2f       	mov	r25, r28
     bde:	0e 94 5d 05 	call	0xaba	; 0xaba <change_tempo>
  note_counter = 0;
     be2:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <note_counter>
  sbi(ETIMSK, TOIE3); // enable tempo interrupt
     be6:	ed e7       	ldi	r30, 0x7D	; 125
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	84 60       	ori	r24, 0x04	; 4
     bee:	80 83       	st	Z, r24
}
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <ioinit>:

void ioinit() {
  uint16_t baud = (F_CPU / (16 * UART_BAUDRATE)) - 1;

  /* setup the main UART */
  UCSR1B |= (1 << RXEN1) | (1 << TXEN1); // read and write & intr
     bf4:	81 b1       	in	r24, 0x01	; 1
     bf6:	88 61       	ori	r24, 0x18	; 24
     bf8:	81 b9       	out	0x01, r24	; 1
  UBRR1L = (uint8_t)baud;                // set baudrate
     bfa:	83 e3       	ldi	r24, 0x33	; 51
     bfc:	80 b9       	out	0x00, r24	; 0
  UBRR1H = (uint8_t)(baud >> 8);
     bfe:	1c be       	out	0x3c, r1	; 60
  // first flush the input
  while (uart_getch()) {
     c00:	0e 94 3b 05 	call	0xa76	; 0xa76 <uart_getch>
     c04:	89 2b       	or	r24, r25
     c06:	a9 f4       	brne	.+42     	; 0xc32 <ioinit+0x3e>
    uart_getchar();
    delay_ms(10);
  }
  UCSR1B |= (1 << RXCIE1); // now turn on interrupts
     c08:	0f 9a       	sbi	0x01, 7	; 1

  /* setup the MIDI UART */
  baud = (F_CPU / (16 * MIDI_BAUDRATE)) - 1;
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) |
     c0a:	8a b1       	in	r24, 0x0a	; 10
     c0c:	88 69       	ori	r24, 0x98	; 152
     c0e:	8a b9       	out	0x0a, r24	; 10
            (1 << RXCIE0); // read and write, interrupt on recv.
  UBRR0L = (uint8_t)baud;  // set baudrate
     c10:	8f e1       	ldi	r24, 0x1F	; 31
     c12:	89 b9       	out	0x09, r24	; 9
  UBRR0H = (uint8_t)(baud >> 8);
     c14:	10 bc       	out	0x20, r1	; 32

  DDRA = 0xC0;  // led latch (o), rotary com (o), rot1, rot2, rot4, ro8, tempoa,
     c16:	80 ec       	ldi	r24, 0xC0	; 192
     c18:	8a bb       	out	0x1a, r24	; 26
                // tempob
  PORTA = 0x3C; // pullups on rotary1,2,4,8
     c1a:	8c e3       	ldi	r24, 0x3C	; 60
     c1c:	8b bb       	out	0x1b, r24	; 27

  DDRB = 0xBB; // spi_clk, spi_in, spi_out, NC, TX, RX, NC, switch latch (o)
     c1e:	8b eb       	ldi	r24, 0xBB	; 187
     c20:	87 bb       	out	0x17, r24	; 23
  PORTB = 0x0;
     c22:	18 ba       	out	0x18, r1	; 24

  DDRC = 0xFF; // accent, slide, note[0-5]
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	84 bb       	out	0x14, r24	; 20

  DDRD = 0xFF; // dinsync1, 2, 3, 4 (outputs), NC, NC, MIDI TX & RX
     c28:	81 bb       	out	0x11, r24	; 17
  DDRE = 0xFF; // note latch, gate, NC
     c2a:	86 b9       	out	0x06, r24	; 6

  SPCR = (1 << SPE) | (1 << MSTR) | 0x1; // master spi, clk=fosc/8 = 2mhz
     c2c:	81 e5       	ldi	r24, 0x51	; 81
     c2e:	8d b9       	out	0x0d, r24	; 13
}
     c30:	08 95       	ret
    uart_getchar();
     c32:	0e 94 45 05 	call	0xa8a	; 0xa8a <uart_getchar>
    delay_ms(10);
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
     c3c:	e1 cf       	rjmp	.-62     	; 0xc00 <ioinit+0xc>

00000c3e <delay_ms>:

void delay_ms(unsigned char ms) {
  unsigned short delay_count = F_CPU / 4000;

  unsigned short cnt;
  asm volatile("\n"
     c3e:	20 ea       	ldi	r18, 0xA0	; 160
     c40:	3f e0       	ldi	r19, 0x0F	; 15

00000c42 <L_dl112>:
     c42:	e2 2f       	mov	r30, r18
     c44:	f3 2f       	mov	r31, r19

00000c46 <L_dl212>:
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <L_dl212>
     c4a:	8a 95       	dec	r24
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <L_dl112>
               "brne L_dl2%=\n\t"
               "dec %1\n\t"
               "brne L_dl1%=\n\t"
               : "=&w"(cnt)
               : "r"(ms), "r"((unsigned short)(delay_count)));
}
     c4e:	08 95       	ret

00000c50 <delay_s>:

void delay_s(unsigned char s) {
     c50:	cf 93       	push	r28
     c52:	c8 2f       	mov	r28, r24
  while (s--) {
     c54:	c1 50       	subi	r28, 0x01	; 1
     c56:	10 f4       	brcc	.+4      	; 0xc5c <delay_s+0xc>
    delay_ms(250);
    delay_ms(250);
    delay_ms(250);
    delay_ms(250);
  }
}
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret
    delay_ms(250);
     c5c:	8a ef       	ldi	r24, 0xFA	; 250
     c5e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
    delay_ms(250);
     c62:	8a ef       	ldi	r24, 0xFA	; 250
     c64:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
    delay_ms(250);
     c68:	8a ef       	ldi	r24, 0xFA	; 250
     c6a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
    delay_ms(250);
     c6e:	8a ef       	ldi	r24, 0xFA	; 250
     c70:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
     c74:	ef cf       	rjmp	.-34     	; 0xc54 <delay_s+0x4>

00000c76 <__vector_19>:
volatile uint8_t midi_q[MIDI_Q_SIZE]; // cyclic queue for midi msgs
volatile static uint8_t head_idx = 0;
volatile static uint8_t tail_idx = 0;

// interrupt on receive char
SIGNAL(SIG_USART0_RECV) {
     c76:	1f 92       	push	r1
     c78:	1f b6       	in	r1, 0x3f	; 63
     c7a:	1f 92       	push	r1
     c7c:	11 24       	eor	r1, r1
     c7e:	8f 93       	push	r24
     c80:	9f 93       	push	r25
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
  char c = UDR0;
     c86:	8c b1       	in	r24, 0x0c	; 12

  if (c == MIDI_START) {
     c88:	8a 3f       	cpi	r24, 0xFA	; 250
     c8a:	21 f5       	brne	.+72     	; 0xcd4 <__vector_19+0x5e>
    // we handle the clock counter here so that it is processed in order, otherwise
    // we potentially skip a clock

    midisync_clocked = 0;
     c8c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <midisync_clocked+0x1>
     c90:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <midisync_clocked>
    midisync_clocked++;
    return;
  }

  // putstring("0x"); putnum_uh(c); putstring("   ");
  midi_q[tail_idx++] = c; // place at end of q
     c94:	e0 91 6b 02 	lds	r30, 0x026B	; 0x80026b <tail_idx>
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	9e 0f       	add	r25, r30
     c9c:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <tail_idx>
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	e5 56       	subi	r30, 0x65	; 101
     ca4:	fd 4f       	sbci	r31, 0xFD	; 253
     ca6:	80 83       	st	Z, r24
  tail_idx %= MIDI_Q_SIZE;
     ca8:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <tail_idx>
     cac:	8f 71       	andi	r24, 0x1F	; 31
     cae:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <tail_idx>

  if (tail_idx == head_idx) {
     cb2:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <tail_idx>
     cb6:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <head_idx>
     cba:	98 13       	cpse	r25, r24
     cbc:	1e c0       	rjmp	.+60     	; 0xcfa <__vector_19+0x84>
    // i.e. there are too many msgs in the q
    // drop the oldest msg?
    head_idx++;
     cbe:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <head_idx>
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <head_idx>
    head_idx %= MIDI_Q_SIZE;
     cc8:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <head_idx>
     ccc:	8f 71       	andi	r24, 0x1F	; 31
     cce:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <head_idx>
     cd2:	13 c0       	rjmp	.+38     	; 0xcfa <__vector_19+0x84>
  } else if (c == MIDI_CLOCK) {
     cd4:	88 3f       	cpi	r24, 0xF8	; 248
     cd6:	f1 f6       	brne	.-68     	; 0xc94 <__vector_19+0x1e>
    if (sync != DIN_SYNC) {
     cd8:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	21 f0       	breq	.+8      	; 0xce8 <__vector_19+0x72>
      sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
     ce0:	94 9a       	sbi	0x12, 4	; 18
      dinsync_clock_timeout = 5;      // in 5ms drop the edge, is this enough?
     ce2:	85 e0       	ldi	r24, 0x05	; 5
     ce4:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <dinsync_clock_timeout>
    midisync_clocked++;
     ce8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <midisync_clocked>
     cec:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <midisync_clocked+0x1>
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <midisync_clocked+0x1>
     cf6:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <midisync_clocked>
  }
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	1f 90       	pop	r1
     d04:	1f be       	out	0x3f, r1	; 63
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <get_midi_addr>:

uint8_t get_midi_addr(uint8_t eeaddr) {
  uint8_t midi_addr;

  midi_addr = internal_eeprom_read8(eeaddr);
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 4a 05 	call	0xa94	; 0xa94 <internal_eeprom_read8>
  if (midi_addr > 15)
    midi_addr = 15;
  return midi_addr;
     d10:	80 31       	cpi	r24, 0x10	; 16
     d12:	08 f0       	brcs	.+2      	; 0xd16 <get_midi_addr+0xc>
     d14:	8f e0       	ldi	r24, 0x0F	; 15
}
     d16:	08 95       	ret

00000d18 <init_midi>:

void init_midi(void) {
  midi_in_addr = get_midi_addr(MIDIIN_ADDR_EEADDR);
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	0e 94 85 06 	call	0xd0a	; 0xd0a <get_midi_addr>
     d1e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <midi_in_addr>
  midi_out_addr = get_midi_addr(MIDIOUT_ADDR_EEADDR);
     d22:	84 e0       	ldi	r24, 0x04	; 4
     d24:	0e 94 85 06 	call	0xd0a	; 0xd0a <get_midi_addr>
     d28:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <midi_out_addr>
}
     d2c:	08 95       	ret

00000d2e <midi_note_off>:
  }
  return 0;
}

void midi_note_off(uint8_t note, uint8_t velocity) {
  if (note == prev_note) {
     d2e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <prev_note>
     d32:	98 13       	cpse	r25, r24
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <midi_note_off+0x14>
    note_off(0);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
    prev_note = 255;
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <prev_note>
  }
}
     d42:	08 95       	ret

00000d44 <midi_note_on>:

void midi_note_on(uint8_t note, uint8_t velocity) {
     d44:	cf 93       	push	r28
     d46:	c8 2f       	mov	r28, r24
     d48:	96 2f       	mov	r25, r22
  uint8_t slide = 0;

  if (velocity == 0) {
     d4a:	61 11       	cpse	r22, r1
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <midi_note_on+0x12>
    // strange midi thing: velocity 0 -> note off!
    midi_note_off(note, velocity);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
      note_on(note - 0x19, slide, 0); // no accent
    }

    prev_note = note;
  }
}
     d50:	cf 91       	pop	r28
    midi_note_off(note, velocity);
     d52:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <midi_note_off>
    if (prev_note != 255)
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <prev_note>
     d5c:	8f 3f       	cpi	r24, 0xFF	; 255
     d5e:	09 f4       	brne	.+2      	; 0xd62 <midi_note_on+0x1e>
     d60:	60 e0       	ldi	r22, 0x00	; 0
    if (velocity > ACCENT_THRESH) {
     d62:	87 ee       	ldi	r24, 0xE7	; 231
     d64:	8c 0f       	add	r24, r28
      note_on(note - 0x19, slide, 1); // with accent
     d66:	41 e0       	ldi	r20, 0x01	; 1
    if (velocity > ACCENT_THRESH) {
     d68:	95 36       	cpi	r25, 0x65	; 101
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <midi_note_on+0x2a>
      note_on(note - 0x19, slide, 0); // no accent
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
    prev_note = note;
     d72:	c0 93 65 02 	sts	0x0265, r28	; 0x800265 <prev_note>
}
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <midi_putchar>:

  midi_putchar(midioff_velocity); // velocity
}

int midi_putchar(char c) {
  loop_until_bit_is_set(UCSR0A, UDRE0);
     d7a:	5d 9b       	sbis	0x0b, 5	; 11
     d7c:	fe cf       	rjmp	.-4      	; 0xd7a <midi_putchar>
  UDR0 = c;
     d7e:	8c b9       	out	0x0c, r24	; 12
  return 0;
}
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	08 95       	ret

00000d86 <midi_send_note_on>:
void midi_send_note_on(uint8_t note) {
     d86:	cf 93       	push	r28
     d88:	c8 2f       	mov	r28, r24
  midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
     d8a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <midi_out_addr>
     d8e:	80 69       	ori	r24, 0x90	; 144
     d90:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
  if ((note & 0x3F) == 0)
     d94:	8c 2f       	mov	r24, r28
     d96:	8f 73       	andi	r24, 0x3F	; 63
     d98:	51 f4       	brne	.+20     	; 0xdae <midi_send_note_on+0x28>
    midi_putchar((note & 0x3F) + 0x19); // note
     d9a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
    midi_putchar(midion_accent_velocity);
     d9e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <midion_accent_velocity>
  if ((note >> 6) & 0x1) // if theres an accent, give high velocity
     da2:	c6 ff       	sbrs	r28, 6
    midi_putchar(midion_noaccent_velocity);
     da4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <midion_noaccent_velocity>
}
     da8:	cf 91       	pop	r28
    midi_putchar(midion_noaccent_velocity);
     daa:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <midi_putchar>
    midi_putchar((note & 0x3F) + 0x19); // note
     dae:	87 5e       	subi	r24, 0xE7	; 231
     db0:	f4 cf       	rjmp	.-24     	; 0xd9a <midi_send_note_on+0x14>

00000db2 <midi_send_note_off>:
void midi_send_note_off(uint8_t note) {
     db2:	cf 93       	push	r28
     db4:	c8 2f       	mov	r28, r24
  midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr); // command
     db6:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <midi_out_addr>
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
  if ((note & 0x3F) == 0)
     dc0:	8c 2f       	mov	r24, r28
     dc2:	8f 73       	andi	r24, 0x3F	; 63
     dc4:	39 f4       	brne	.+14     	; 0xdd4 <midi_send_note_off+0x22>
    midi_putchar((note & 0x3F) + 0x19); // note
     dc6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
  midi_putchar(midioff_velocity); // velocity
     dca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <midioff_velocity>
}
     dce:	cf 91       	pop	r28
  midi_putchar(midioff_velocity); // velocity
     dd0:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <midi_putchar>
    midi_putchar((note & 0x3F) + 0x19); // note
     dd4:	87 5e       	subi	r24, 0xE7	; 231
     dd6:	f7 cf       	rjmp	.-18     	; 0xdc6 <midi_send_note_off+0x14>

00000dd8 <midi_getch>:

int midi_getch(void) { // checks if there is a character waiting!
  if (head_idx != tail_idx)
     dd8:	30 91 6c 02 	lds	r19, 0x026C	; 0x80026c <head_idx>
     ddc:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <tail_idx>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	32 13       	cpse	r19, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <midi_getch+0x14>
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
  return 0;
}
     dec:	08 95       	ret

00000dee <midi_getchar>:

int midi_getchar(void) {
  char c;

  while (head_idx == tail_idx)
     dee:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <head_idx>
     df2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <tail_idx>
     df6:	98 17       	cp	r25, r24
     df8:	d1 f3       	breq	.-12     	; 0xdee <midi_getchar>
    ;

  cli();
     dfa:	f8 94       	cli
  c = midi_q[head_idx++];
     dfc:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <head_idx>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8e 0f       	add	r24, r30
     e04:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <head_idx>
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	e5 56       	subi	r30, 0x65	; 101
     e0c:	fd 4f       	sbci	r31, 0xFD	; 253
     e0e:	80 81       	ld	r24, Z
  head_idx %= MIDI_Q_SIZE;
     e10:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <head_idx>
     e14:	9f 71       	andi	r25, 0x1F	; 31
     e16:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <head_idx>
  sei();
     e1a:	78 94       	sei

  return c;
}
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	08 95       	ret

00000e20 <midi_recv_cmd>:
  if (midi_getch()) {
     e20:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <midi_getch>
     e24:	89 2b       	or	r24, r25
     e26:	11 f4       	brne	.+4      	; 0xe2c <midi_recv_cmd+0xc>
  return 0;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret
    c = midi_getchar();
     e2c:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
     e30:	9c 01       	movw	r18, r24
    if (c >> 7) {        // if the top bit is high, this is a command
     e32:	87 ff       	sbrs	r24, 7
     e34:	f9 cf       	rjmp	.-14     	; 0xe28 <midi_recv_cmd+0x8>
      if (c >> 4 == 0xF) // universal cmd, no addressing
     e36:	98 2f       	mov	r25, r24
     e38:	92 95       	swap	r25
     e3a:	9f 70       	andi	r25, 0x0F	; 15
     e3c:	9f 30       	cpi	r25, 0x0F	; 15
     e3e:	49 f0       	breq	.+18     	; 0xe52 <midi_recv_cmd+0x32>
      if ((c & 0xF) == midi_in_addr) {
     e40:	2f 70       	andi	r18, 0x0F	; 15
     e42:	33 27       	eor	r19, r19
     e44:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <midi_in_addr>
     e48:	42 17       	cp	r20, r18
     e4a:	13 06       	cpc	r1, r19
     e4c:	69 f7       	brne	.-38     	; 0xe28 <midi_recv_cmd+0x8>
        midi_running_status = c >> 4;
     e4e:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <midi_running_status>
}
     e52:	08 95       	ret

00000e54 <midi_notesoff>:
    midi_notesoff();
  }
}

void midi_notesoff(void) {
  midi_putchar((MIDI_CONTROLLER << 4) | midi_out_addr);
     e54:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <midi_out_addr>
     e58:	80 6b       	ori	r24, 0xB0	; 176
     e5a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
  midi_putchar(MIDI_ALL_NOTES_OFF);
     e5e:	8b e7       	ldi	r24, 0x7B	; 123
     e60:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
  midi_putchar(0);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <midi_putchar>

00000e6a <do_midi_mode>:
void do_midi_mode(void) {
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
  turn_off_tempo();
     e6e:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>
  clear_bank_leds();
     e72:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
  set_bank_led(midi_in_addr);
     e76:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <midi_in_addr>
     e7a:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
  read_switches();
     e7e:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
  delay_ms(100);
     e82:	84 e6       	ldi	r24, 0x64	; 100
     e84:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
  read_switches();
     e88:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
  delay_ms(100);
     e8c:	84 e6       	ldi	r24, 0x64	; 100
     e8e:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
  read_switches();
     e92:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
  last_bank = bank;
     e96:	d0 91 c8 02 	lds	r29, 0x02C8	; 0x8002c8 <bank>
  prev_note = 255; // no notes played yet
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <prev_note>
    read_switches();
     ea0:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    if (function_changed) {
     ea4:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
     ea8:	88 23       	and	r24, r24
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <do_midi_mode+0x4a>
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
      midi_notesoff(); // clear any stuck notes
     eb0:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <midi_notesoff>
    if (last_bank != bank) {
     eb4:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <bank>
     eb8:	6d 17       	cp	r22, r29
     eba:	71 f0       	breq	.+28     	; 0xed8 <do_midi_mode+0x6e>
      midi_in_addr = bank;
     ebc:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <midi_in_addr>
      internal_eeprom_write8(MIDIIN_ADDR_EEADDR, midi_in_addr);
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <internal_eeprom_write8>
      clear_bank_leds();
     ec8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
      set_bank_led(midi_in_addr);
     ecc:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <midi_in_addr>
     ed0:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
      last_bank = bank;
     ed4:	d0 91 c8 02 	lds	r29, 0x02C8	; 0x8002c8 <bank>
    if (midi_getch()) {
     ed8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <midi_getch>
     edc:	89 2b       	or	r24, r25
     ede:	01 f3       	breq	.-64     	; 0xea0 <do_midi_mode+0x36>
      c = midi_getchar();
     ee0:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
     ee4:	9c 01       	movw	r18, r24
     ee6:	c8 2f       	mov	r28, r24
      if (c >> 7) {            // if the top bit is high, this is a command
     ee8:	87 ff       	sbrs	r24, 7
     eea:	0e c0       	rjmp	.+28     	; 0xf08 <do_midi_mode+0x9e>
        if ((c >> 4 == 0xF) || // universal cmd, no addressing
     eec:	98 2f       	mov	r25, r24
     eee:	92 95       	swap	r25
     ef0:	9f 70       	andi	r25, 0x0F	; 15
     ef2:	9f 30       	cpi	r25, 0x0F	; 15
     ef4:	39 f0       	breq	.+14     	; 0xf04 <do_midi_mode+0x9a>
            ((c & 0xF) == midi_in_addr)) { // matches our addr
     ef6:	2f 70       	andi	r18, 0x0F	; 15
     ef8:	33 27       	eor	r19, r19
     efa:	40 91 bb 02 	lds	r20, 0x02BB	; 0x8002bb <midi_in_addr>
        if ((c >> 4 == 0xF) || // universal cmd, no addressing
     efe:	42 17       	cp	r20, r18
     f00:	13 06       	cpc	r1, r19
     f02:	a1 f4       	brne	.+40     	; 0xf2c <do_midi_mode+0xc2>
          midi_running_status = c >> 4;
     f04:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <midi_running_status>
      switch (midi_running_status) {
     f08:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <midi_running_status>
     f0c:	98 30       	cpi	r25, 0x08	; 8
     f0e:	89 f0       	breq	.+34     	; 0xf32 <do_midi_mode+0xc8>
     f10:	99 30       	cpi	r25, 0x09	; 9
     f12:	31 f6       	brne	.-116    	; 0xea0 <do_midi_mode+0x36>
        if (c >>
     f14:	87 ff       	sbrs	r24, 7
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <do_midi_mode+0xb4>
          note = midi_getchar();
     f18:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
     f1c:	c8 2f       	mov	r28, r24
        velocity = midi_getchar();
     f1e:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
     f22:	68 2f       	mov	r22, r24
        midi_note_on(note, velocity);
     f24:	8c 2f       	mov	r24, r28
     f26:	0e 94 a2 06 	call	0xd44	; 0xd44 <midi_note_on>
        break;
     f2a:	ba cf       	rjmp	.-140    	; 0xea0 <do_midi_mode+0x36>
          midi_running_status = MIDI_IGNORE;
     f2c:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <midi_running_status>
          continue;
     f30:	b7 cf       	rjmp	.-146    	; 0xea0 <do_midi_mode+0x36>
        if (c >> 7)
     f32:	87 ff       	sbrs	r24, 7
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <do_midi_mode+0xd2>
          note = midi_getchar();
     f36:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
     f3a:	c8 2f       	mov	r28, r24
        velocity = midi_getchar();
     f3c:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
     f40:	68 2f       	mov	r22, r24
        midi_note_off(note, velocity);
     f42:	8c 2f       	mov	r24, r28
     f44:	0e 94 97 06 	call	0xd2e	; 0xd2e <midi_note_off>
        break;
     f48:	ab cf       	rjmp	.-170    	; 0xea0 <do_midi_mode+0x36>

00000f4a <midi_stop>:
  if (sync != MIDI_SYNC) {
     f4a:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	29 f0       	breq	.+10     	; 0xf5c <midi_stop+0x12>
    midi_putchar(MIDI_STOP);
     f52:	8c ef       	ldi	r24, 0xFC	; 252
     f54:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
    midi_notesoff();
     f58:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <midi_notesoff>
}
     f5c:	08 95       	ret

00000f5e <dinsync_start>:
extern volatile uint8_t note_counter;
extern uint16_t timer3_init;

/* output functions (dinsync_start/stop) start and stop dinsync
   that is clocked from the internal tempo function */
void dinsync_start(void) {
     f5e:	cf 93       	push	r28
  uint8_t flag = is_tempo_running();
     f60:	0e 94 b7 00 	call	0x16e	; 0x16e <is_tempo_running>
     f64:	c8 2f       	mov	r28, r24

  // make sure we're not in a "dinsync in" mode
  if (sync != DIN_SYNC) {
     f66:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	d1 f0       	breq	.+52     	; 0xfa2 <dinsync_start+0x44>
    // putstring("Starting DIN Sync\n\r");
    if (flag)
     f6e:	c1 11       	cpse	r28, r1
      turn_off_tempo(); // if tempo was on, turn if off
     f70:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>

    // set the clock low (rising edge is a clock)
    cbi(DINSYNC_PORT, DINSYNC_CLK);
     f74:	94 98       	cbi	0x12, 4	; 18
    // send start signal
    DINSYNC_PORT |= _BV(DINSYNC_START);
     f76:	97 9a       	sbi	0x12, 7	; 18

    // wait for start signal to be noticed, then start the tempo up again.
    delay_ms(5);
     f78:	85 e0       	ldi	r24, 0x05	; 5
     f7a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
    TCNT3 = timer3_init - 10; // make it start soon
     f7e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <timer3_init>
     f82:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <timer3_init+0x1>
     f86:	0a 97       	sbiw	r24, 0x0a	; 10
     f88:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     f8c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    dinsync_counter = 0;
     f90:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <dinsync_counter>
    note_counter = 0;
     f94:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <note_counter>
    if (flag)
     f98:	cc 23       	and	r28, r28
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <dinsync_start+0x44>
      turn_on_tempo();
  }
}
     f9c:	cf 91       	pop	r28
      turn_on_tempo();
     f9e:	0c 94 a8 00 	jmp	0x150	; 0x150 <turn_on_tempo>
}
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <dinsync_stop>:

void dinsync_stop(void) {
  if (sync != DIN_SYNC) { // make sure we're not input mode
     fa6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	09 f0       	breq	.+2      	; 0xfb0 <dinsync_stop+0xa>
    // putstring("Stopping DinSync\n\r");
    cbi(DINSYNC_PORT, DINSYNC_START); // easy, just set Start low.
     fae:	97 98       	cbi	0x12, 7	; 18
  }
}
     fb0:	08 95       	ret

00000fb2 <dinsync_started>:
/* dinsync_started returns TRUE if the start pin is high and the previous
   call to this function was FALSE (ie. since the last function call, dinsync
   has started */
uint8_t dinsync_started(void) {
  uint8_t curr_dinsync_s;
  curr_dinsync_s = (DINSYNC_PIN >> DINSYNC_START) & 0x1;
     fb2:	80 b3       	in	r24, 0x10	; 16
     fb4:	88 1f       	adc	r24, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	88 1f       	adc	r24, r24

  if (!last_dinsync_start && curr_dinsync_s) {
     fba:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <last_dinsync_start>
     fbe:	91 11       	cpse	r25, r1
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <dinsync_started+0x1c>
     fc2:	88 23       	and	r24, r24
     fc4:	21 f0       	breq	.+8      	; 0xfce <dinsync_started+0x1c>
    last_dinsync_start = curr_dinsync_s;
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <last_dinsync_start>
    return TRUE;
     fcc:	08 95       	ret
  }

  last_dinsync_start = curr_dinsync_s;
     fce:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <last_dinsync_start>
  return FALSE;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
}
     fd4:	08 95       	ret

00000fd6 <dinsync_stopped>:
/* dinsync_stopped returns TRUE if the start pin is low and the previous
   call to this function was FALSE (ie. since the last function call, dinsync
   has stopped */
uint8_t dinsync_stopped(void) {
  uint8_t curr_dinsync_s;
  curr_dinsync_s = (DINSYNC_PIN >> DINSYNC_START) & 0x1;
     fd6:	80 b3       	in	r24, 0x10	; 16
     fd8:	88 1f       	adc	r24, r24
     fda:	88 27       	eor	r24, r24
     fdc:	88 1f       	adc	r24, r24

  if (last_dinsync_stop && !curr_dinsync_s) {
     fde:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <last_dinsync_stop>
     fe2:	99 23       	and	r25, r25
     fe4:	31 f0       	breq	.+12     	; 0xff2 <dinsync_stopped+0x1c>
     fe6:	81 11       	cpse	r24, r1
     fe8:	04 c0       	rjmp	.+8      	; 0xff2 <dinsync_stopped+0x1c>
    last_dinsync_stop = curr_dinsync_s;
     fea:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <last_dinsync_stop>
    return TRUE;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	08 95       	ret
  }

  last_dinsync_stop = curr_dinsync_s;
     ff2:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <last_dinsync_stop>
  return FALSE;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
}
     ff8:	08 95       	ret

00000ffa <dinsync_set_out>:

/* these functions set the input/output descriptors */
void dinsync_set_out() {

  DINSYNC_DDR |=
     ffa:	81 b3       	in	r24, 0x11	; 17
     ffc:	80 6f       	ori	r24, 0xF0	; 240
     ffe:	81 bb       	out	0x11, r24	; 17
      _BV(DINSYNC_START) | _BV(DINSYNC_CLK) | _BV(DINSYNC_4) | _BV(DINSYNC_5);

  DINSYNC_PORT &= ~(_BV(DINSYNC_START) | _BV(DINSYNC_CLK) | _BV(DINSYNC_4) |
    1000:	82 b3       	in	r24, 0x12	; 18
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	82 bb       	out	0x12, r24	; 18
                    _BV(DINSYNC_5));
}
    1006:	08 95       	ret

00001008 <dinsync_set_in>:

void dinsync_set_in() {

  DINSYNC_DDR &= ~(_BV(DINSYNC_START) | _BV(DINSYNC_CLK) | _BV(DINSYNC_4) |
    1008:	81 b3       	in	r24, 0x11	; 17
    100a:	8f 70       	andi	r24, 0x0F	; 15
    100c:	81 bb       	out	0x11, r24	; 17
                   _BV(DINSYNC_5));

  DINSYNC_PORT &= ~(_BV(DINSYNC_START) | _BV(DINSYNC_CLK) | _BV(DINSYNC_4) |
    100e:	82 b3       	in	r24, 0x12	; 18
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	82 bb       	out	0x12, r24	; 18
                    _BV(DINSYNC_5));
}
    1014:	08 95       	ret

00001016 <read_keypad>:
}

void read_keypad(uint8_t *switchinput) {
  uint8_t i;

  cli();
    1016:	f8 94       	cli

  cbi(SWITCH_LATCH_PORT, SWITCH_LATCH_PIN);
    1018:	c0 98       	cbi	0x18, 0	; 24
	...
  NOP;
  NOP;
  NOP;
  NOP;
  sbi(SWITCH_LATCH_PORT, SWITCH_LATCH_PIN);
    1022:	c0 9a       	sbi	0x18, 0	; 24
  for (i = 0; i < 3; i++) {
    1024:	fc 01       	movw	r30, r24
    1026:	03 96       	adiw	r24, 0x03	; 3
    SPDR = 0;
    1028:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & (1 << SPIF)))
    102a:	77 9b       	sbis	0x0e, 7	; 14
    102c:	fe cf       	rjmp	.-4      	; 0x102a <read_keypad+0x14>
      ;
    switchinput[i] = SPDR;
    102e:	2f b1       	in	r18, 0x0f	; 15
    1030:	21 93       	st	Z+, r18
  for (i = 0; i < 3; i++) {
    1032:	e8 17       	cp	r30, r24
    1034:	f9 07       	cpc	r31, r25
    1036:	c1 f7       	brne	.-16     	; 0x1028 <read_keypad+0x12>
  }
  // printf("got %2x %2x %2x\n\r", switches[2], switches[1], switches[0]);

  sei();
    1038:	78 94       	sei
}
    103a:	08 95       	ret

0000103c <select_bank_read>:

// we need to call this, then wait a bit, then read the value off the pins
void select_bank_read(void) { BANK_COMMON_PORT &= ~_BV(BANK_COMMON_PIN); }
    103c:	de 98       	cbi	0x1b, 6	; 27
    103e:	08 95       	ret

00001040 <select_func_read>:

// we need to call this, then wait a bit, then read the value off the pins
void select_func_read(void) { FUNC_COMMON_PORT |= _BV(FUNC_COMMON_PIN); }
    1040:	de 9a       	sbi	0x1b, 6	; 27
    1042:	08 95       	ret

00001044 <read_bank>:

uint8_t read_bank() {
  uint8_t val;

  val = BANK_PIN;
    1044:	89 b3       	in	r24, 0x19	; 25
  val = (val >> 2) & 0xF;
    1046:	86 95       	lsr	r24
    1048:	86 95       	lsr	r24
    104a:	8f 70       	andi	r24, 0x0F	; 15
  val =
      (val >> 3) | ((val >> 1) & 0x2) | ((val << 1) & 0x4) | ((val << 3) & 0x8);
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	98 2f       	mov	r25, r24
    1052:	96 95       	lsr	r25
    1054:	92 70       	andi	r25, 0x02	; 2
    1056:	86 95       	lsr	r24
    1058:	86 95       	lsr	r24
    105a:	86 95       	lsr	r24
    105c:	98 2b       	or	r25, r24
    105e:	a9 01       	movw	r20, r18
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	44 70       	andi	r20, 0x04	; 4
    1066:	94 2b       	or	r25, r20
    1068:	43 e0       	ldi	r20, 0x03	; 3
    106a:	22 0f       	add	r18, r18
    106c:	33 1f       	adc	r19, r19
    106e:	4a 95       	dec	r20
    1070:	e1 f7       	brne	.-8      	; 0x106a <read_bank+0x26>
    1072:	28 70       	andi	r18, 0x08	; 8
    1074:	92 2b       	or	r25, r18
  return 15 - val;
}
    1076:	8f e0       	ldi	r24, 0x0F	; 15
    1078:	89 1b       	sub	r24, r25
    107a:	08 95       	ret

0000107c <read_function>:

uint8_t read_function() {
  uint8_t val;

  val = FUNC_PIN;
    107c:	89 b3       	in	r24, 0x19	; 25
  val = (val >> 2) & 0xF;
    107e:	86 95       	lsr	r24
    1080:	86 95       	lsr	r24

  return val;
}
    1082:	8f 70       	andi	r24, 0x0F	; 15
    1084:	08 95       	ret

00001086 <read_switches>:
void read_switches(void) {
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <read_switches+0x14>
    109a:	00 d0       	rcall	.+0      	; 0x109c <read_switches+0x16>
    109c:	00 d0       	rcall	.+0      	; 0x109e <read_switches+0x18>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
  if (newtempo != tempo)
    10a2:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <newtempo>
    10a6:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <newtempo+0x1>
    10aa:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <tempo>
    10ae:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <tempo+0x1>
    10b2:	28 17       	cp	r18, r24
    10b4:	39 07       	cpc	r19, r25
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <read_switches+0x3e>
    change_tempo(newtempo);
    10b8:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <newtempo>
    10bc:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <newtempo+0x1>
    10c0:	0e 94 5d 05 	call	0xaba	; 0xaba <change_tempo>
    pressed_switches[i] = 0;
    10c4:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <pressed_switches>
    released_switches[i] = 0;
    10c8:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <released_switches>
    pressed_switches[i] = 0;
    10cc:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <pressed_switches+0x1>
    released_switches[i] = 0;
    10d0:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <released_switches+0x1>
    pressed_switches[i] = 0;
    10d4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <pressed_switches+0x2>
    released_switches[i] = 0;
    10d8:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <released_switches+0x2>
  if (debounce_timer < 20) // timer is in 1ms incr
    10dc:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <debounce_timer>
    10e0:	84 31       	cpi	r24, 0x14	; 20
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <read_switches+0x60>
    10e4:	8d c0       	rjmp	.+282    	; 0x1200 <read_switches+0x17a>
  debounce_timer = 0; // reset the timer
    10e6:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <debounce_timer>
  select_bank_read(); // wait a bit then call read_bank
    10ea:	0e 94 1e 08 	call	0x103c	; 0x103c <select_bank_read>
  read_keypad(temp_switches);
    10ee:	ce 01       	movw	r24, r28
    10f0:	04 96       	adiw	r24, 0x04	; 4
    10f2:	0e 94 0b 08 	call	0x1016	; 0x1016 <read_keypad>
  keypress_switches[0] = switches[0];
    10f6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <switches>
    10fa:	89 83       	std	Y+1, r24	; 0x01
  keypress_switches[1] = switches[1];
    10fc:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <switches+0x1>
    1100:	8a 83       	std	Y+2, r24	; 0x02
  keypress_switches[2] = switches[2];
    1102:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <switches+0x2>
    1106:	8b 83       	std	Y+3, r24	; 0x03
  for (i = 0; i < 24; i++) {
    1108:	90 e0       	ldi	r25, 0x00	; 0
    s = (switches[i / 8] & (1 << (i % 8)));
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	29 2f       	mov	r18, r25
    1110:	26 95       	lsr	r18
    1112:	26 95       	lsr	r18
    1114:	26 95       	lsr	r18
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	f9 01       	movw	r30, r18
    111a:	ee 53       	subi	r30, 0x3E	; 62
    111c:	fd 4f       	sbci	r31, 0xFD	; 253
    111e:	f0 80       	ld	r15, Z
    1120:	89 2f       	mov	r24, r25
    1122:	87 70       	andi	r24, 0x07	; 7
    1124:	ba 01       	movw	r22, r20
    1126:	01 c0       	rjmp	.+2      	; 0x112a <read_switches+0xa4>
    1128:	66 0f       	add	r22, r22
    112a:	8a 95       	dec	r24
    112c:	ea f7       	brpl	.-6      	; 0x1128 <read_switches+0xa2>
    l = (last_switches[i / 8] & (1 << (i % 8)));
    112e:	89 01       	movw	r16, r18
    1130:	07 53       	subi	r16, 0x37	; 55
    1132:	1d 4f       	sbci	r17, 0xFD	; 253
    1134:	d8 01       	movw	r26, r16
    1136:	8c 91       	ld	r24, X
    t = (temp_switches[i / 8] & (1 << (i % 8)));
    1138:	a4 e0       	ldi	r26, 0x04	; 4
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	ac 0f       	add	r26, r28
    113e:	bd 1f       	adc	r27, r29
    1140:	2a 0f       	add	r18, r26
    1142:	3b 1f       	adc	r19, r27
    1144:	d9 01       	movw	r26, r18
    1146:	3c 91       	ld	r19, X
    if (s != 0) {
    1148:	26 2f       	mov	r18, r22
    114a:	20 95       	com	r18
    114c:	2f 21       	and	r18, r15
    s = (switches[i / 8] & (1 << (i % 8)));
    114e:	af 2d       	mov	r26, r15
    1150:	a6 23       	and	r26, r22
    if (s != 0) {
    1152:	09 f4       	brne	.+2      	; 0x1156 <read_switches+0xd0>
    1154:	65 c0       	rjmp	.+202    	; 0x1220 <read_switches+0x19a>
      switches[i / 8] = (switches[i / 8] & ~(1 << (i % 8))) | (l | t);
    1156:	83 2b       	or	r24, r19
    1158:	86 23       	and	r24, r22
      switches[i / 8] = (switches[i / 8] & ~(1 << (i % 8))) | (l & t);
    115a:	82 2b       	or	r24, r18
    115c:	80 83       	st	Z, r24
  for (i = 0; i < 24; i++) {
    115e:	9f 5f       	subi	r25, 0xFF	; 255
    1160:	98 31       	cpi	r25, 0x18	; 24
    1162:	a9 f6       	brne	.-86     	; 0x110e <read_switches+0x88>
  i = read_bank();
    1164:	0e 94 22 08 	call	0x1044	; 0x1044 <read_bank>
  if ((i != bank) && (i == last_bank)) {
    1168:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <bank>
    116c:	98 17       	cp	r25, r24
    116e:	49 f0       	breq	.+18     	; 0x1182 <read_switches+0xfc>
    1170:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <last_bank>
    1174:	98 13       	cpse	r25, r24
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <read_switches+0xfc>
    bank = i;
    1178:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <bank>
    bank_switched = 1;
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <bank_switched>
  last_bank = i;
    1182:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <last_bank>
  select_func_read();
    1186:	0e 94 20 08 	call	0x1040	; 0x1040 <select_func_read>
  for (i = 0; i < 3; i++) {
    118a:	fe 01       	movw	r30, r28
    118c:	34 96       	adiw	r30, 0x04	; 4
    118e:	09 ec       	ldi	r16, 0xC9	; 201
    1190:	12 e0       	ldi	r17, 0x02	; 2
    1192:	be 01       	movw	r22, r28
    1194:	6f 5f       	subi	r22, 0xFF	; 255
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	42 ec       	ldi	r20, 0xC2	; 194
    119a:	52 e0       	ldi	r21, 0x02	; 2
    119c:	2e eb       	ldi	r18, 0xBE	; 190
    119e:	32 e0       	ldi	r19, 0x02	; 2
    11a0:	85 ec       	ldi	r24, 0xC5	; 197
    11a2:	a8 2e       	mov	r10, r24
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	b8 2e       	mov	r11, r24
    11a8:	7e 01       	movw	r14, r28
    11aa:	b7 e0       	ldi	r27, 0x07	; 7
    11ac:	eb 0e       	add	r14, r27
    11ae:	f1 1c       	adc	r15, r1
    last_switches[i] = temp_switches[i];
    11b0:	81 91       	ld	r24, Z+
    11b2:	d8 01       	movw	r26, r16
    11b4:	8d 93       	st	X+, r24
    11b6:	8d 01       	movw	r16, r26
    pressed_switches[i] = (keypress_switches[i] ^ switches[i]) & switches[i];
    11b8:	db 01       	movw	r26, r22
    11ba:	dd 90       	ld	r13, X+
    11bc:	bd 01       	movw	r22, r26
    11be:	da 01       	movw	r26, r20
    11c0:	8d 91       	ld	r24, X+
    11c2:	ad 01       	movw	r20, r26
    11c4:	9d 2d       	mov	r25, r13
    11c6:	90 95       	com	r25
    11c8:	98 23       	and	r25, r24
    11ca:	d9 01       	movw	r26, r18
    11cc:	9d 93       	st	X+, r25
    11ce:	9d 01       	movw	r18, r26
    released_switches[i] =
    11d0:	80 95       	com	r24
    11d2:	8d 21       	and	r24, r13
    11d4:	d5 01       	movw	r26, r10
    11d6:	8d 93       	st	X+, r24
    11d8:	5d 01       	movw	r10, r26
  for (i = 0; i < 3; i++) {
    11da:	ee 16       	cp	r14, r30
    11dc:	ff 06       	cpc	r15, r31
    11de:	41 f7       	brne	.-48     	; 0x11b0 <read_switches+0x12a>
  i = read_function();
    11e0:	0e 94 3e 08 	call	0x107c	; 0x107c <read_function>
  if ((i != function) && (i == last_func)) {
    11e4:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <function>
    11e8:	98 17       	cp	r25, r24
    11ea:	31 f0       	breq	.+12     	; 0x11f8 <read_switches+0x172>
    11ec:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <last_func>
    11f0:	98 13       	cpse	r25, r24
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <read_switches+0x172>
    function = i;
    11f4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <function>
  last_func = i;
    11f8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <last_func>
  clock_leds();
    11fc:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clock_leds>
}
    1200:	26 96       	adiw	r28, 0x06	; 6
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	bf 90       	pop	r11
    121c:	af 90       	pop	r10
    121e:	08 95       	ret
    l = (last_switches[i / 8] & (1 << (i % 8)));
    1220:	86 23       	and	r24, r22
      switches[i / 8] = (switches[i / 8] & ~(1 << (i % 8))) | (l & t);
    1222:	83 23       	and	r24, r19
    1224:	9a cf       	rjmp	.-204    	; 0x115a <read_switches+0xd4>

00001226 <is_pressed>:

// returns 1 if that key is pressed
uint8_t is_pressed(uint8_t key) {
    1226:	28 2f       	mov	r18, r24
  if (key >= 24)
    1228:	88 31       	cpi	r24, 0x18	; 24
    122a:	90 f4       	brcc	.+36     	; 0x1250 <is_pressed+0x2a>
    return 0;

  if ((switches[key / 8] & (1 << key % 8)) != 0)
    122c:	e8 2f       	mov	r30, r24
    122e:	e6 95       	lsr	r30
    1230:	e6 95       	lsr	r30
    1232:	e6 95       	lsr	r30
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	ee 53       	subi	r30, 0x3E	; 62
    1238:	fd 4f       	sbci	r31, 0xFD	; 253
    123a:	90 81       	ld	r25, Z
    123c:	89 2f       	mov	r24, r25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	27 70       	andi	r18, 0x07	; 7
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <is_pressed+0x22>
    1244:	95 95       	asr	r25
    1246:	87 95       	ror	r24
    1248:	2a 95       	dec	r18
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <is_pressed+0x1e>
    124c:	81 70       	andi	r24, 0x01	; 1
    124e:	08 95       	ret
    return 0;
    1250:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
  else
    return 0;
}
    1252:	08 95       	ret

00001254 <just_pressed>:

uint8_t just_pressed(uint8_t key) {
    1254:	28 2f       	mov	r18, r24
  if (key >= 24)
    1256:	88 31       	cpi	r24, 0x18	; 24
    1258:	90 f4       	brcc	.+36     	; 0x127e <just_pressed+0x2a>
    return 0;

  if ((pressed_switches[key / 8] & (1 << key % 8)) != 0)
    125a:	e8 2f       	mov	r30, r24
    125c:	e6 95       	lsr	r30
    125e:	e6 95       	lsr	r30
    1260:	e6 95       	lsr	r30
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	e2 54       	subi	r30, 0x42	; 66
    1266:	fd 4f       	sbci	r31, 0xFD	; 253
    1268:	90 81       	ld	r25, Z
    126a:	89 2f       	mov	r24, r25
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	27 70       	andi	r18, 0x07	; 7
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <just_pressed+0x22>
    1272:	95 95       	asr	r25
    1274:	87 95       	ror	r24
    1276:	2a 95       	dec	r18
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <just_pressed+0x1e>
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	08 95       	ret
    return 0;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
  else
    return 0;
}
    1280:	08 95       	ret

00001282 <just_released>:

uint8_t just_released(uint8_t key) {
    1282:	28 2f       	mov	r18, r24
  if (key >= 24)
    1284:	88 31       	cpi	r24, 0x18	; 24
    1286:	90 f4       	brcc	.+36     	; 0x12ac <just_released+0x2a>
    return 0;

  if ((released_switches[key / 8] & (1 << key % 8)) != 0)
    1288:	e8 2f       	mov	r30, r24
    128a:	e6 95       	lsr	r30
    128c:	e6 95       	lsr	r30
    128e:	e6 95       	lsr	r30
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	eb 53       	subi	r30, 0x3B	; 59
    1294:	fd 4f       	sbci	r31, 0xFD	; 253
    1296:	90 81       	ld	r25, Z
    1298:	89 2f       	mov	r24, r25
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	27 70       	andi	r18, 0x07	; 7
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <just_released+0x22>
    12a0:	95 95       	asr	r25
    12a2:	87 95       	ror	r24
    12a4:	2a 95       	dec	r18
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <just_released+0x1e>
    12a8:	81 70       	andi	r24, 0x01	; 1
    12aa:	08 95       	ret
    return 0;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
  else
    return 0;
}
    12ae:	08 95       	ret

000012b0 <no_keys_pressed>:

uint8_t no_keys_pressed(void) {
  if ((switches[0] == 0) && (switches[1] == 0) && (switches[2] == 0))
    12b0:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <switches>
    12b4:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <switches+0x1>
    12b8:	98 2b       	or	r25, r24
    12ba:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <switches+0x2>
    12be:	98 2b       	or	r25, r24
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <no_keys_pressed+0x16>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    return 1;
  return 0;
}
    12c6:	08 95       	ret

000012c8 <get_lowest_notekey_pressed>:

int8_t get_lowest_notekey_pressed(void) {
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
  int8_t i;
  for (i = 0; i < 13; i++) {
    12ce:	0c e0       	ldi	r16, 0x0C	; 12
    12d0:	11 e0       	ldi	r17, 0x01	; 1
    12d2:	c0 e0       	ldi	r28, 0x00	; 0
    if (is_pressed(notekey_tab[i]))
    12d4:	f8 01       	movw	r30, r16
    12d6:	81 91       	ld	r24, Z+
    12d8:	8f 01       	movw	r16, r30
    12da:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    12de:	81 11       	cpse	r24, r1
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <get_lowest_notekey_pressed+0x22>
    12e2:	cf 5f       	subi	r28, 0xFF	; 255
  for (i = 0; i < 13; i++) {
    12e4:	cd 30       	cpi	r28, 0x0D	; 13
    12e6:	b1 f7       	brne	.-20     	; 0x12d4 <get_lowest_notekey_pressed+0xc>
      return i;
  }
  return -1;
    12e8:	cf ef       	ldi	r28, 0xFF	; 255
}
    12ea:	8c 2f       	mov	r24, r28
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <get_lowest_numkey_pressed>:

uint8_t get_lowest_numkey_pressed(void) {
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
  uint8_t i;
  for (i = 0; i < 8; i++) {
    12fa:	04 e0       	ldi	r16, 0x04	; 4
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	c0 e0       	ldi	r28, 0x00	; 0
    if (is_pressed(numkey_tab[i]))
    1300:	f8 01       	movw	r30, r16
    1302:	81 91       	ld	r24, Z+
    1304:	8f 01       	movw	r16, r30
    1306:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    130a:	cf 5f       	subi	r28, 0xFF	; 255
    130c:	81 11       	cpse	r24, r1
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <get_lowest_numkey_pressed+0x22>
  for (i = 0; i < 8; i++) {
    1310:	c8 30       	cpi	r28, 0x08	; 8
    1312:	b1 f7       	brne	.-20     	; 0x1300 <get_lowest_numkey_pressed+0xc>
      return i + 1;
  }
  return 0;
    1314:	c0 e0       	ldi	r28, 0x00	; 0
}
    1316:	8c 2f       	mov	r24, r28
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <get_lowest_numkey_just_pressed>:

uint8_t get_lowest_numkey_just_pressed(void) {
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
  uint8_t i;
  for (i = 0; i < 8; i++) {
    1326:	04 e0       	ldi	r16, 0x04	; 4
    1328:	11 e0       	ldi	r17, 0x01	; 1
    132a:	c0 e0       	ldi	r28, 0x00	; 0
    if (just_pressed(numkey_tab[i]))
    132c:	f8 01       	movw	r30, r16
    132e:	81 91       	ld	r24, Z+
    1330:	8f 01       	movw	r16, r30
    1332:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    1336:	cf 5f       	subi	r28, 0xFF	; 255
    1338:	81 11       	cpse	r24, r1
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <get_lowest_numkey_just_pressed+0x22>
  for (i = 0; i < 8; i++) {
    133c:	c8 30       	cpi	r28, 0x08	; 8
    133e:	b1 f7       	brne	.-20     	; 0x132c <get_lowest_numkey_just_pressed+0xc>
      return i + 1;
  }
  return 0;
    1340:	c0 e0       	ldi	r28, 0x00	; 0
}
    1342:	8c 2f       	mov	r24, r28
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <has_bank_knob_changed>:

uint8_t has_bank_knob_changed(void) {
  uint8_t temp = bank_switched;
    134c:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <bank_switched>
  bank_switched = 0;
    1350:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <bank_switched>
  return temp;
}
    1354:	08 95       	ret

00001356 <clear_led.part.0>:
}

void clear_led(uint8_t ledno) {
  if (ledno >= MAX_LED)
    return;
  leds[ledno / 8] &= ~(1 << (ledno % 8));
    1356:	e8 2f       	mov	r30, r24
    1358:	e6 95       	lsr	r30
    135a:	e6 95       	lsr	r30
    135c:	e6 95       	lsr	r30
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	e4 58       	subi	r30, 0x84	; 132
    1362:	fd 4f       	sbci	r31, 0xFD	; 253
    1364:	28 2f       	mov	r18, r24
    1366:	27 70       	andi	r18, 0x07	; 7
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <clear_led.part.0+0x1a>
    136e:	88 0f       	add	r24, r24
    1370:	2a 95       	dec	r18
    1372:	ea f7       	brpl	.-6      	; 0x136e <clear_led.part.0+0x18>
    1374:	80 95       	com	r24
    1376:	90 81       	ld	r25, Z
    1378:	89 23       	and	r24, r25
    137a:	80 83       	st	Z, r24
}
    137c:	08 95       	ret

0000137e <set_led>:
  if (ledno >= MAX_LED)
    137e:	88 32       	cpi	r24, 0x28	; 40
    1380:	88 f4       	brcc	.+34     	; 0x13a4 <set_led+0x26>
  leds[ledno / 8] |= 1 << (ledno % 8);
    1382:	e8 2f       	mov	r30, r24
    1384:	e6 95       	lsr	r30
    1386:	e6 95       	lsr	r30
    1388:	e6 95       	lsr	r30
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	e4 58       	subi	r30, 0x84	; 132
    138e:	fd 4f       	sbci	r31, 0xFD	; 253
    1390:	87 70       	andi	r24, 0x07	; 7
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	01 c0       	rjmp	.+2      	; 0x139a <set_led+0x1c>
    1398:	22 0f       	add	r18, r18
    139a:	8a 95       	dec	r24
    139c:	ea f7       	brpl	.-6      	; 0x1398 <set_led+0x1a>
    139e:	80 81       	ld	r24, Z
    13a0:	82 2b       	or	r24, r18
    13a2:	80 83       	st	Z, r24
}
    13a4:	08 95       	ret

000013a6 <set_led_blink>:
  if (ledno >= MAX_LED)
    13a6:	88 32       	cpi	r24, 0x28	; 40
    13a8:	88 f4       	brcc	.+34     	; 0x13cc <set_led_blink+0x26>
  blinkleds[ledno / 8] |= 1 << (ledno % 8);
    13aa:	e8 2f       	mov	r30, r24
    13ac:	e6 95       	lsr	r30
    13ae:	e6 95       	lsr	r30
    13b0:	e6 95       	lsr	r30
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	e9 58       	subi	r30, 0x89	; 137
    13b6:	fd 4f       	sbci	r31, 0xFD	; 253
    13b8:	87 70       	andi	r24, 0x07	; 7
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <set_led_blink+0x1c>
    13c0:	22 0f       	add	r18, r18
    13c2:	8a 95       	dec	r24
    13c4:	ea f7       	brpl	.-6      	; 0x13c0 <set_led_blink+0x1a>
    13c6:	80 81       	ld	r24, Z
    13c8:	82 2b       	or	r24, r18
    13ca:	80 83       	st	Z, r24
}
    13cc:	08 95       	ret

000013ce <clear_led_blink>:
  if (ledno >= MAX_LED)
    13ce:	88 32       	cpi	r24, 0x28	; 40
    13d0:	98 f4       	brcc	.+38     	; 0x13f8 <clear_led_blink+0x2a>
  blinkleds[ledno / 8] &= ~_BV(ledno % 8);
    13d2:	e8 2f       	mov	r30, r24
    13d4:	e6 95       	lsr	r30
    13d6:	e6 95       	lsr	r30
    13d8:	e6 95       	lsr	r30
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	e9 58       	subi	r30, 0x89	; 137
    13de:	fd 4f       	sbci	r31, 0xFD	; 253
    13e0:	28 2f       	mov	r18, r24
    13e2:	27 70       	andi	r18, 0x07	; 7
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <clear_led_blink+0x1e>
    13ea:	88 0f       	add	r24, r24
    13ec:	2a 95       	dec	r18
    13ee:	ea f7       	brpl	.-6      	; 0x13ea <clear_led_blink+0x1c>
    13f0:	80 95       	com	r24
    13f2:	90 81       	ld	r25, Z
    13f4:	89 23       	and	r24, r25
    13f6:	80 83       	st	Z, r24
}
    13f8:	08 95       	ret

000013fa <is_led_blink>:
  if (ledno >= MAX_LED)
    13fa:	88 32       	cpi	r24, 0x28	; 40
    13fc:	88 f4       	brcc	.+34     	; 0x1420 <is_led_blink+0x26>
  return blinkleds[ledno / 8] & _BV(ledno % 8);
    13fe:	e8 2f       	mov	r30, r24
    1400:	e6 95       	lsr	r30
    1402:	e6 95       	lsr	r30
    1404:	e6 95       	lsr	r30
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	e9 58       	subi	r30, 0x89	; 137
    140a:	fd 4f       	sbci	r31, 0xFD	; 253
    140c:	87 70       	andi	r24, 0x07	; 7
    140e:	21 e0       	ldi	r18, 0x01	; 1
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <is_led_blink+0x1c>
    1414:	22 0f       	add	r18, r18
    1416:	8a 95       	dec	r24
    1418:	ea f7       	brpl	.-6      	; 0x1414 <is_led_blink+0x1a>
    141a:	80 81       	ld	r24, Z
    141c:	82 23       	and	r24, r18
    141e:	08 95       	ret
    return 0;
    1420:	80 e0       	ldi	r24, 0x00	; 0
}
    1422:	08 95       	ret

00001424 <clear_led>:
  if (ledno >= MAX_LED)
    1424:	88 32       	cpi	r24, 0x28	; 40
    1426:	10 f4       	brcc	.+4      	; 0x142c <clear_led+0x8>
    1428:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <clear_led.part.0>
}
    142c:	08 95       	ret

0000142e <is_led_set>:

int is_led_set(uint8_t ledno) { return (leds[ledno / 8] >> (ledno % 8)) & 0x1; }
    142e:	e8 2f       	mov	r30, r24
    1430:	e6 95       	lsr	r30
    1432:	e6 95       	lsr	r30
    1434:	e6 95       	lsr	r30
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	e4 58       	subi	r30, 0x84	; 132
    143a:	fd 4f       	sbci	r31, 0xFD	; 253
    143c:	20 81       	ld	r18, Z
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	87 70       	andi	r24, 0x07	; 7
    1442:	a9 01       	movw	r20, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <is_led_set+0x1c>
    1446:	55 95       	asr	r21
    1448:	47 95       	ror	r20
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <is_led_set+0x18>
    144e:	ca 01       	movw	r24, r20
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	99 27       	eor	r25, r25
    1454:	08 95       	ret

00001456 <clear_all_leds>:

void clear_all_leds(void) {
  leds[0] = leds[1] = leds[2] = leds[3] = leds[4] = 0;
    1456:	ec e7       	ldi	r30, 0x7C	; 124
    1458:	f2 e0       	ldi	r31, 0x02	; 2
    145a:	14 82       	std	Z+4, r1	; 0x04
    145c:	13 82       	std	Z+3, r1	; 0x03
    145e:	12 82       	std	Z+2, r1	; 0x02
    1460:	11 82       	std	Z+1, r1	; 0x01
    1462:	10 82       	st	Z, r1
  blinkleds[0] = blinkleds[1] = blinkleds[2] = blinkleds[3] = blinkleds[4] = 0;
    1464:	e7 e7       	ldi	r30, 0x77	; 119
    1466:	f2 e0       	ldi	r31, 0x02	; 2
    1468:	14 82       	std	Z+4, r1	; 0x04
    146a:	13 82       	std	Z+3, r1	; 0x03
    146c:	12 82       	std	Z+2, r1	; 0x02
    146e:	11 82       	std	Z+1, r1	; 0x01
    1470:	10 82       	st	Z, r1
}
    1472:	08 95       	ret

00001474 <clear_bank_leds>:

// bank leds (strip of 16 above keys)

void clear_bank_leds(void) {
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < 16; i++) {
    1478:	c6 e4       	ldi	r28, 0x46	; 70
    147a:	d1 e0       	ldi	r29, 0x01	; 1
    clear_led(bank_led_tab[i]);
    147c:	89 91       	ld	r24, Y+
    147e:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  for (i = 0; i < 16; i++) {
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	c6 35       	cpi	r28, 0x56	; 86
    1486:	d8 07       	cpc	r29, r24
    1488:	c9 f7       	brne	.-14     	; 0x147c <clear_bank_leds+0x8>
  }
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <set_bank_led>:

void set_bank_led(uint8_t num) {
  if (num >= 16)
    1490:	80 31       	cpi	r24, 0x10	; 16
    1492:	38 f4       	brcc	.+14     	; 0x14a2 <set_bank_led+0x12>
    return;
  set_led(bank_led_tab[num]);
    1494:	e8 2f       	mov	r30, r24
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	ea 5b       	subi	r30, 0xBA	; 186
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	80 81       	ld	r24, Z
    149e:	0c 94 bf 09 	jmp	0x137e	; 0x137e <set_led>
}
    14a2:	08 95       	ret

000014a4 <set_bank_led_blink>:
      clear_led(bank_led_tab[num]);
}
*/

void set_bank_led_blink(uint8_t num) {
  if (num >= 16)
    14a4:	80 31       	cpi	r24, 0x10	; 16
    14a6:	38 f4       	brcc	.+14     	; 0x14b6 <set_bank_led_blink+0x12>
    return;
  set_led_blink(bank_led_tab[num]);
    14a8:	e8 2f       	mov	r30, r24
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	ea 5b       	subi	r30, 0xBA	; 186
    14ae:	fe 4f       	sbci	r31, 0xFE	; 254
    14b0:	80 81       	ld	r24, Z
    14b2:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <set_led_blink>
}
    14b6:	08 95       	ret

000014b8 <is_bank_led_set>:

uint8_t is_bank_led_set(uint8_t num) {
  if (num >= 16)
    14b8:	80 31       	cpi	r24, 0x10	; 16
    14ba:	40 f4       	brcc	.+16     	; 0x14cc <is_bank_led_set+0x14>
    return 0;
  return is_led_set(bank_led_tab[num]);
    14bc:	e8 2f       	mov	r30, r24
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ea 5b       	subi	r30, 0xBA	; 186
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	80 81       	ld	r24, Z
    14c6:	0e 94 17 0a 	call	0x142e	; 0x142e <is_led_set>
    14ca:	08 95       	ret
    return 0;
    14cc:	80 e0       	ldi	r24, 0x00	; 0
}
    14ce:	08 95       	ret

000014d0 <is_bank_led_blink>:

uint8_t is_bank_led_blink(uint8_t num) {
  if (num >= 16)
    14d0:	80 31       	cpi	r24, 0x10	; 16
    14d2:	38 f4       	brcc	.+14     	; 0x14e2 <is_bank_led_blink+0x12>
    return 0;
  return is_led_blink(bank_led_tab[num]);
    14d4:	e8 2f       	mov	r30, r24
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	ea 5b       	subi	r30, 0xBA	; 186
    14da:	fe 4f       	sbci	r31, 0xFE	; 254
    14dc:	80 81       	ld	r24, Z
    14de:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <is_led_blink>
}
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <set_key_led>:

// key leds (all but tempo/bank)
void set_key_led(uint8_t num) {
  if (num >= 24)
    14e6:	88 31       	cpi	r24, 0x18	; 24
    14e8:	38 f4       	brcc	.+14     	; 0x14f8 <set_key_led+0x12>
    return;
  set_led(key_led_tab[num]);
    14ea:	e8 2f       	mov	r30, r24
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	e2 5d       	subi	r30, 0xD2	; 210
    14f0:	fe 4f       	sbci	r31, 0xFE	; 254
    14f2:	80 81       	ld	r24, Z
    14f4:	0c 94 bf 09 	jmp	0x137e	; 0x137e <set_led>
}
    14f8:	08 95       	ret

000014fa <set_key_led_blink>:

void set_key_led_blink(uint8_t num) {
  if (num >= 24)
    14fa:	88 31       	cpi	r24, 0x18	; 24
    14fc:	38 f4       	brcc	.+14     	; 0x150c <set_key_led_blink+0x12>
    return;
  set_led_blink(key_led_tab[num]);
    14fe:	e8 2f       	mov	r30, r24
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	e2 5d       	subi	r30, 0xD2	; 210
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	80 81       	ld	r24, Z
    1508:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <set_led_blink>
}
    150c:	08 95       	ret

0000150e <clear_key_led>:

void clear_key_led(uint8_t num) {
  if (num >= 24)
    150e:	88 31       	cpi	r24, 0x18	; 24
    1510:	38 f4       	brcc	.+14     	; 0x1520 <clear_key_led+0x12>
    return;
  clear_led(key_led_tab[num]);
    1512:	e8 2f       	mov	r30, r24
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	e2 5d       	subi	r30, 0xD2	; 210
    1518:	fe 4f       	sbci	r31, 0xFE	; 254
    151a:	80 81       	ld	r24, Z
    151c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <clear_led>
}
    1520:	08 95       	ret

00001522 <clear_key_leds>:

void clear_key_leds(void) {
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < 24; i++) {
    1526:	ce e2       	ldi	r28, 0x2E	; 46
    1528:	d1 e0       	ldi	r29, 0x01	; 1
    clear_led(key_led_tab[i]);
    152a:	89 91       	ld	r24, Y+
    152c:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  for (i = 0; i < 24; i++) {
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	c6 34       	cpi	r28, 0x46	; 70
    1534:	d8 07       	cpc	r29, r24
    1536:	c9 f7       	brne	.-14     	; 0x152a <clear_key_leds+0x8>
  }
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <set_numkey_led>:

// numbered keys (bottom row 1 thru 8)

void set_numkey_led(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    153e:	9f ef       	ldi	r25, 0xFF	; 255
    1540:	98 0f       	add	r25, r24
    1542:	98 30       	cpi	r25, 0x08	; 8
    1544:	38 f4       	brcc	.+14     	; 0x1554 <set_numkey_led+0x16>
    set_led(numkey_led_tab[num - 1]); // num is 1 thru 8
    1546:	e8 2f       	mov	r30, r24
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	e8 5e       	subi	r30, 0xE8	; 232
    154c:	fe 4f       	sbci	r31, 0xFE	; 254
    154e:	80 81       	ld	r24, Z
    1550:	0c 94 bf 09 	jmp	0x137e	; 0x137e <set_led>
}
    1554:	08 95       	ret

00001556 <set_single_numkey_led>:

void set_single_numkey_led(uint8_t num) {
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	d8 2f       	mov	r29, r24
  uint8_t i;
  for (i = 1; i <= 8; i++)
    1560:	09 e1       	ldi	r16, 0x19	; 25
    1562:	11 e0       	ldi	r17, 0x01	; 1
    1564:	c1 e0       	ldi	r28, 0x01	; 1
    if (i == num)
    1566:	f8 01       	movw	r30, r16
    1568:	81 91       	ld	r24, Z+
    156a:	8f 01       	movw	r16, r30
    156c:	dc 13       	cpse	r29, r28
    156e:	0a c0       	rjmp	.+20     	; 0x1584 <set_single_numkey_led+0x2e>
      set_led(numkey_led_tab[i - 1]);
    1570:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
  for (i = 1; i <= 8; i++)
    1574:	cf 5f       	subi	r28, 0xFF	; 255
    1576:	c9 30       	cpi	r28, 0x09	; 9
    1578:	b1 f7       	brne	.-20     	; 0x1566 <set_single_numkey_led+0x10>
    else
      clear_led(numkey_led_tab[i - 1]);
}
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret
      clear_led(numkey_led_tab[i - 1]);
    1584:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    1588:	f5 cf       	rjmp	.-22     	; 0x1574 <set_single_numkey_led+0x1e>

0000158a <clear_numkey_led>:

void clear_numkey_led(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    158a:	9f ef       	ldi	r25, 0xFF	; 255
    158c:	98 0f       	add	r25, r24
    158e:	98 30       	cpi	r25, 0x08	; 8
    1590:	38 f4       	brcc	.+14     	; 0x15a0 <clear_numkey_led+0x16>
    clear_led(numkey_led_tab[num - 1]); // num is 1 thru 8
    1592:	e8 2f       	mov	r30, r24
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	e8 5e       	subi	r30, 0xE8	; 232
    1598:	fe 4f       	sbci	r31, 0xFE	; 254
    159a:	80 81       	ld	r24, Z
    159c:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <clear_led>
}
    15a0:	08 95       	ret

000015a2 <set_numkey_led_blink>:

void set_numkey_led_blink(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    15a2:	9f ef       	ldi	r25, 0xFF	; 255
    15a4:	98 0f       	add	r25, r24
    15a6:	98 30       	cpi	r25, 0x08	; 8
    15a8:	38 f4       	brcc	.+14     	; 0x15b8 <set_numkey_led_blink+0x16>
    set_led_blink(numkey_led_tab[num - 1]);
    15aa:	e8 2f       	mov	r30, r24
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	e8 5e       	subi	r30, 0xE8	; 232
    15b0:	fe 4f       	sbci	r31, 0xFE	; 254
    15b2:	80 81       	ld	r24, Z
    15b4:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <set_led_blink>
}
    15b8:	08 95       	ret

000015ba <is_numkey_led_blink>:

uint8_t is_numkey_led_blink(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	98 0f       	add	r25, r24
    15be:	98 30       	cpi	r25, 0x08	; 8
    15c0:	38 f4       	brcc	.+14     	; 0x15d0 <is_numkey_led_blink+0x16>
    return is_led_blink(numkey_led_tab[num - 1]);
    15c2:	e8 2f       	mov	r30, r24
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	e8 5e       	subi	r30, 0xE8	; 232
    15c8:	fe 4f       	sbci	r31, 0xFE	; 254
    15ca:	80 81       	ld	r24, Z
    15cc:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <is_led_blink>
  return 0;
}
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	08 95       	ret

000015d4 <is_numkey_led_set>:

uint8_t is_numkey_led_set(uint8_t num) {
  if ((num >= 1) && (num <= 8))
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	98 0f       	add	r25, r24
    15d8:	98 30       	cpi	r25, 0x08	; 8
    15da:	40 f4       	brcc	.+16     	; 0x15ec <is_numkey_led_set+0x18>
    return is_led_set(numkey_led_tab[num - 1]);
    15dc:	e8 2f       	mov	r30, r24
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	e8 5e       	subi	r30, 0xE8	; 232
    15e2:	fe 4f       	sbci	r31, 0xFE	; 254
    15e4:	80 81       	ld	r24, Z
    15e6:	0e 94 17 0a 	call	0x142e	; 0x142e <is_led_set>
    15ea:	08 95       	ret
  return 0;
    15ec:	80 e0       	ldi	r24, 0x00	; 0
}
    15ee:	08 95       	ret

000015f0 <clear_numkey_leds>:

void clear_numkey_leds(void) {
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < 8; i++) {
    15f4:	c9 e1       	ldi	r28, 0x19	; 25
    15f6:	d1 e0       	ldi	r29, 0x01	; 1
    clear_led(numkey_led_tab[i]);
    15f8:	89 91       	ld	r24, Y+
    15fa:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  for (i = 0; i < 8; i++) {
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	c1 32       	cpi	r28, 0x21	; 33
    1602:	d8 07       	cpc	r29, r24
    1604:	c9 f7       	brne	.-14     	; 0x15f8 <clear_numkey_leds+0x8>
  }
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	08 95       	ret

0000160c <set_notekey_led>:

// note keys (C thru C')

void set_notekey_led(uint8_t num) {
  if (num <= 12)
    160c:	8d 30       	cpi	r24, 0x0D	; 13
    160e:	38 f4       	brcc	.+14     	; 0x161e <set_notekey_led+0x12>
    set_led(notekey_led_tab[num]);
    1610:	e8 2f       	mov	r30, r24
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	ef 5d       	subi	r30, 0xDF	; 223
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	80 81       	ld	r24, Z
    161a:	0c 94 bf 09 	jmp	0x137e	; 0x137e <set_led>
}
    161e:	08 95       	ret

00001620 <clear_notekey_led>:

void clear_notekey_led(uint8_t num) {
  if (num <= 12)
    1620:	8d 30       	cpi	r24, 0x0D	; 13
    1622:	38 f4       	brcc	.+14     	; 0x1632 <clear_notekey_led+0x12>
    clear_led(notekey_led_tab[num]);
    1624:	e8 2f       	mov	r30, r24
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	ef 5d       	subi	r30, 0xDF	; 223
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	80 81       	ld	r24, Z
    162e:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <clear_led>
}
    1632:	08 95       	ret

00001634 <set_notekey_led_blink>:

void set_notekey_led_blink(uint8_t num) {
  if (num <= 12)
    1634:	8d 30       	cpi	r24, 0x0D	; 13
    1636:	38 f4       	brcc	.+14     	; 0x1646 <set_notekey_led_blink+0x12>
    set_led_blink(notekey_led_tab[num]);
    1638:	e8 2f       	mov	r30, r24
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	ef 5d       	subi	r30, 0xDF	; 223
    163e:	fe 4f       	sbci	r31, 0xFE	; 254
    1640:	80 81       	ld	r24, Z
    1642:	0c 94 d3 09 	jmp	0x13a6	; 0x13a6 <set_led_blink>
}
    1646:	08 95       	ret

00001648 <is_notekey_led_blink>:

uint8_t is_notekey_led_blink(uint8_t num) {
  return is_led_blink(notekey_led_tab[num]);
    1648:	e8 2f       	mov	r30, r24
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	ef 5d       	subi	r30, 0xDF	; 223
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	80 81       	ld	r24, Z
    1652:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <is_led_blink>

00001656 <clear_notekey_leds>:
}

void clear_notekey_leds(void) {
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < 13; i++) {
    165a:	c1 e2       	ldi	r28, 0x21	; 33
    165c:	d1 e0       	ldi	r29, 0x01	; 1
    clear_led(notekey_led_tab[i]);
    165e:	89 91       	ld	r24, Y+
    1660:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  for (i = 0; i < 13; i++) {
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	ce 32       	cpi	r28, 0x2E	; 46
    1668:	d8 07       	cpc	r29, r24
    166a:	c9 f7       	brne	.-14     	; 0x165e <clear_notekey_leds+0x8>
  }
}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <clear_note_leds>:

// note leds (notes, U, D, RAS)
void clear_note_leds(void) {
  clear_notekey_leds();
    1672:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
  if (ledno >= MAX_LED)
    1676:	84 e0       	ldi	r24, 0x04	; 4
    1678:	0e 94 ab 09 	call	0x1356	; 0x1356 <clear_led.part.0>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	0e 94 ab 09 	call	0x1356	; 0x1356 <clear_led.part.0>
    1682:	88 e0       	ldi	r24, 0x08	; 8
    1684:	0e 94 ab 09 	call	0x1356	; 0x1356 <clear_led.part.0>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 ab 09 	call	0x1356	; 0x1356 <clear_led.part.0>
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <clear_led.part.0>

00001694 <clock_leds>:
}

void clock_leds(void) {
  int i;

  cli();
    1694:	f8 94       	cli
  cbi(LED_LATCH_PORT, LED_LATCH_PIN);
    1696:	df 98       	cbi	0x1b, 7	; 27
  for (i = 0; i < 5; i++) {
    1698:	ec e7       	ldi	r30, 0x7C	; 124
    169a:	f2 e0       	ldi	r31, 0x02	; 2
    SPDR = leds[i];
    169c:	81 91       	ld	r24, Z+
    169e:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & (1 << SPIF)))
    16a0:	77 9b       	sbis	0x0e, 7	; 14
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <clock_leds+0xc>
  for (i = 0; i < 5; i++) {
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	e1 38       	cpi	r30, 0x81	; 129
    16a8:	f8 07       	cpc	r31, r24
    16aa:	c1 f7       	brne	.-16     	; 0x169c <clock_leds+0x8>
      ;
  }
  sbi(LED_LATCH_PORT, LED_LATCH_PIN);
    16ac:	df 9a       	sbi	0x1b, 7	; 27
  sei();
    16ae:	78 94       	sei
}
    16b0:	08 95       	ret

000016b2 <blink_leds_on>:

void blink_leds_on(void) {
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
  uint8_t i;

  for (i = 0; i < 5; i++)
    16b6:	ec e7       	ldi	r30, 0x7C	; 124
    16b8:	f2 e0       	ldi	r31, 0x02	; 2
    16ba:	a7 e7       	ldi	r26, 0x77	; 119
    16bc:	b2 e0       	ldi	r27, 0x02	; 2
    leds[i] |= blinkleds[i];
    16be:	81 91       	ld	r24, Z+
    16c0:	9d 91       	ld	r25, X+
    16c2:	ef 01       	movw	r28, r30
    16c4:	21 97       	sbiw	r28, 0x01	; 1
    16c6:	89 2b       	or	r24, r25
    16c8:	88 83       	st	Y, r24
  for (i = 0; i < 5; i++)
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	e1 38       	cpi	r30, 0x81	; 129
    16ce:	f8 07       	cpc	r31, r24
    16d0:	b1 f7       	brne	.-20     	; 0x16be <blink_leds_on+0xc>
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <blink_leds_off>:

void blink_leds_off(void) {
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
  uint8_t i;

  for (i = 0; i < 5; i++)
    16dc:	ec e7       	ldi	r30, 0x7C	; 124
    16de:	f2 e0       	ldi	r31, 0x02	; 2
    16e0:	a7 e7       	ldi	r26, 0x77	; 119
    16e2:	b2 e0       	ldi	r27, 0x02	; 2
    leds[i] &= ~blinkleds[i];
    16e4:	91 91       	ld	r25, Z+
    16e6:	8d 91       	ld	r24, X+
    16e8:	ef 01       	movw	r28, r30
    16ea:	21 97       	sbiw	r28, 0x01	; 1
    16ec:	80 95       	com	r24
    16ee:	89 23       	and	r24, r25
    16f0:	88 83       	st	Y, r24
  for (i = 0; i < 5; i++)
    16f2:	82 e0       	ldi	r24, 0x02	; 2
    16f4:	e1 38       	cpi	r30, 0x81	; 129
    16f6:	f8 07       	cpc	r31, r24
    16f8:	a9 f7       	brne	.-22     	; 0x16e4 <blink_leds_off+0xc>
}
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	08 95       	ret

00001700 <clear_blinking_leds>:

void clear_blinking_leds(void) {
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
  uint8_t i;

  for (i = 0; i < 5; i++) {
    1704:	ec e7       	ldi	r30, 0x7C	; 124
    1706:	f2 e0       	ldi	r31, 0x02	; 2
    1708:	a7 e7       	ldi	r26, 0x77	; 119
    170a:	b2 e0       	ldi	r27, 0x02	; 2
    if (leds[i] & blinkleds[i])
    170c:	91 91       	ld	r25, Z+
    170e:	8d 91       	ld	r24, X+
    1710:	29 2f       	mov	r18, r25
    1712:	28 23       	and	r18, r24
    1714:	29 f0       	breq	.+10     	; 0x1720 <clear_blinking_leds+0x20>
      leds[i] &= ~blinkleds[i];
    1716:	ef 01       	movw	r28, r30
    1718:	21 97       	sbiw	r28, 0x01	; 1
    171a:	80 95       	com	r24
    171c:	89 23       	and	r24, r25
    171e:	88 83       	st	Y, r24
    blinkleds[i] = 0;
    1720:	ed 01       	movw	r28, r26
    1722:	21 97       	sbiw	r28, 0x01	; 1
    1724:	18 82       	st	Y, r1
  for (i = 0; i < 5; i++) {
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	e1 38       	cpi	r30, 0x81	; 129
    172a:	f8 07       	cpc	r31, r24
    172c:	79 f7       	brne	.-34     	; 0x170c <clear_blinking_leds+0xc>
  }
}
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	08 95       	ret

00001734 <display_octave_shift>:

void display_octave_shift(int8_t shift) {
    1734:	cf 93       	push	r28
    1736:	c8 2f       	mov	r28, r24
  if (ledno >= MAX_LED)
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	0e 94 ab 09 	call	0x1356	; 0x1356 <clear_led.part.0>
  clear_led(LED_DOWN);
  if (shift == 2) {
    173e:	c2 30       	cpi	r28, 0x02	; 2
    1740:	39 f4       	brne	.+14     	; 0x1750 <display_octave_shift+0x1c>
  blinkleds[ledno / 8] |= 1 << (ledno % 8);
    1742:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <blinkleds>
    1746:	88 60       	ori	r24, 0x08	; 8
    1748:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <blinkleds>
    if (shift == 1)
      set_led(LED_UP);
    else if (shift == -1)
      set_led(LED_DOWN);
  }
}
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret
  if (ledno >= MAX_LED)
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	0e 94 ab 09 	call	0x1356	; 0x1356 <clear_led.part.0>
  blinkleds[ledno / 8] &= ~_BV(ledno % 8);
    1756:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <blinkleds>
    175a:	87 7f       	andi	r24, 0xF7	; 247
    175c:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <blinkleds>
  leds[ledno / 8] |= 1 << (ledno % 8);
    1760:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <leds>
    1764:	88 60       	ori	r24, 0x08	; 8
    if (shift == 1)
    1766:	c1 30       	cpi	r28, 0x01	; 1
    1768:	29 f0       	breq	.+10     	; 0x1774 <display_octave_shift+0x40>
    else if (shift == -1)
    176a:	cf 3f       	cpi	r28, 0xFF	; 255
    176c:	79 f7       	brne	.-34     	; 0x174c <display_octave_shift+0x18>
  leds[ledno / 8] |= 1 << (ledno % 8);
    176e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <leds>
    1772:	80 61       	ori	r24, 0x10	; 16
    1774:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <leds>
}
    1778:	e9 cf       	rjmp	.-46     	; 0x174c <display_octave_shift+0x18>

0000177a <set_note_led>:
void set_note_led(uint8_t note) {
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	c8 2f       	mov	r28, r24
    set_key_led(KEY_SLIDE);
    1788:	86 e1       	ldi	r24, 0x16	; 22
  if (note >> 7)
    178a:	c7 ff       	sbrs	r28, 7
    178c:	11 c0       	rjmp	.+34     	; 0x17b0 <set_note_led+0x36>
    set_key_led(KEY_SLIDE);
    178e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <set_key_led>
    set_key_led(KEY_ACCENT);
    1792:	85 e1       	ldi	r24, 0x15	; 21
  if ((note >> 6) & 0x1)
    1794:	c6 ff       	sbrs	r28, 6
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <set_note_led+0x3c>
    set_key_led(KEY_ACCENT);
    1798:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <set_key_led>
  note &= 0x3F;
    179c:	cf 73       	andi	r28, 0x3F	; 63
  if (note == 0) {
    179e:	31 f0       	breq	.+12     	; 0x17ac <set_note_led+0x32>
    shift = -1;
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
  } else if (note < C2) {
    17a2:	c7 31       	cpi	r28, 0x17	; 23
    17a4:	78 f0       	brcs	.+30     	; 0x17c4 <set_note_led+0x4a>
  } else if (note <= C3) {
    17a6:	c4 32       	cpi	r28, 0x24	; 36
    17a8:	48 f4       	brcc	.+18     	; 0x17bc <set_note_led+0x42>
    note -= OCTAVE;
    17aa:	cc 50       	subi	r28, 0x0C	; 12
    shift = 0;
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <set_note_led+0x4a>
    clear_key_led(KEY_SLIDE);
    17b0:	0e 94 87 0a 	call	0x150e	; 0x150e <clear_key_led>
    17b4:	ee cf       	rjmp	.-36     	; 0x1792 <set_note_led+0x18>
    clear_key_led(KEY_ACCENT);
    17b6:	0e 94 87 0a 	call	0x150e	; 0x150e <clear_key_led>
    17ba:	f0 cf       	rjmp	.-32     	; 0x179c <set_note_led+0x22>
  } else if (note <= C4) {
    17bc:	c0 33       	cpi	r28, 0x30	; 48
    17be:	88 f4       	brcc	.+34     	; 0x17e2 <set_note_led+0x68>
    note -= 2 * OCTAVE;
    17c0:	c8 51       	subi	r28, 0x18	; 24
    shift = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
  display_octave_shift(shift);
    17c4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <display_octave_shift>
  if (note == REST) {
    17c8:	c1 11       	cpse	r28, r1
    17ca:	13 c0       	rjmp	.+38     	; 0x17f2 <set_note_led+0x78>
    clear_notekey_leds();
    17cc:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
    set_key_led(KEY_REST);
    17d0:	84 e1       	ldi	r24, 0x14	; 20
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	1f 91       	pop	r17
    17d8:	0f 91       	pop	r16
    17da:	ff 90       	pop	r15
    17dc:	ef 90       	pop	r14
    set_key_led(KEY_REST);
    17de:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <set_key_led>
  } else if (note <= C5) {
    17e2:	cc 33       	cpi	r28, 0x3C	; 60
    17e4:	18 f4       	brcc	.+6      	; 0x17ec <set_note_led+0x72>
    note -= 3 * OCTAVE;
    17e6:	c4 52       	subi	r28, 0x24	; 36
    shift = 2;
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	ec cf       	rjmp	.-40     	; 0x17c4 <set_note_led+0x4a>
    note -= 4 * OCTAVE;
    17ec:	c0 53       	subi	r28, 0x30	; 48
    shift = 3;
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	e9 cf       	rjmp	.-46     	; 0x17c4 <set_note_led+0x4a>
    clear_key_led(KEY_REST);
    17f2:	84 e1       	ldi	r24, 0x14	; 20
    17f4:	0e 94 87 0a 	call	0x150e	; 0x150e <clear_key_led>
    for (shift = C1; shift <= C2; shift++) {
    17f8:	81 e2       	ldi	r24, 0x21	; 33
    17fa:	e8 2e       	mov	r14, r24
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	f8 2e       	mov	r15, r24
    clear_key_led(KEY_REST);
    1800:	0b e0       	ldi	r16, 0x0B	; 11
    1802:	10 e0       	ldi	r17, 0x00	; 0
      if (shift != note)
    1804:	d0 e0       	ldi	r29, 0x00	; 0
    1806:	c0 17       	cp	r28, r16
    1808:	d1 07       	cpc	r29, r17
    180a:	21 f0       	breq	.+8      	; 0x1814 <set_note_led+0x9a>
        clear_led(notekey_led_tab[shift - C1]);
    180c:	f7 01       	movw	r30, r14
    180e:	80 81       	ld	r24, Z
    1810:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    1814:	0f 5f       	subi	r16, 0xFF	; 255
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	ff ef       	ldi	r31, 0xFF	; 255
    181a:	ef 1a       	sub	r14, r31
    181c:	ff 0a       	sbc	r15, r31
    for (shift = C1; shift <= C2; shift++) {
    181e:	08 31       	cpi	r16, 0x18	; 24
    1820:	11 05       	cpc	r17, r1
    1822:	89 f7       	brne	.-30     	; 0x1806 <set_note_led+0x8c>
    set_led(notekey_led_tab[note - C1]);
    1824:	ca 5e       	subi	r28, 0xEA	; 234
    1826:	de 4f       	sbci	r29, 0xFE	; 254
    1828:	88 81       	ld	r24, Y
}
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    set_led(notekey_led_tab[note - C1]);
    1836:	0c 94 bf 09 	jmp	0x137e	; 0x137e <set_led>

0000183a <send_msg>:
      }
    }
  }
}

void send_msg(uint8_t *buff, uint16_t len) {
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
  uint16_t i;
  for (i = 0; i < len; i++) {
    1842:	ec 01       	movw	r28, r24
    1844:	8c 01       	movw	r16, r24
    1846:	06 0f       	add	r16, r22
    1848:	17 1f       	adc	r17, r23
    184a:	c0 17       	cp	r28, r16
    184c:	d1 07       	cpc	r29, r17
    184e:	29 f4       	brne	.+10     	; 0x185a <send_msg+0x20>
    uart_putchar(buff[i]);
  }
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	08 95       	ret
    uart_putchar(buff[i]);
    185a:	89 91       	ld	r24, Y+
    185c:	0e 94 b9 04 	call	0x972	; 0x972 <uart_putchar>
    1860:	f4 cf       	rjmp	.-24     	; 0x184a <send_msg+0x10>

00001862 <do_computer_control>:
}

void do_computer_control(void) {

  while (1) {
    read_switches();
    1862:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    if (function_changed) {
    1866:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    186a:	8e 30       	cpi	r24, 0x0E	; 14
    186c:	d1 f3       	breq	.-12     	; 0x1862 <do_computer_control>
      // oops i guess they want something else, return!
      clear_all_leds();
    186e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
      clock_leds();
    1872:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <clock_leds>

00001876 <calc_CRC8>:
 * the check sum.  Assumes the CRC is the last byte of the packet header.  Also
 * takes care to look in code space (instead of xdata space) when dealing with a
 * PFrag.
 */

uint8_t calc_CRC8(uint8_t *buff, uint16_t size) {
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	dc 01       	movw	r26, r24
    187c:	ab 01       	movw	r20, r22
  uint8_t i;
  uint8_t crc = 0;
    187e:	80 e0       	ldi	r24, 0x00	; 0

  /*
   * Add the message header to the CRC.  Don't include the CRC itself
   * when calculating the CRC.
   */
  for (i = 0; i < size; i++) {
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	29 2f       	mov	r18, r25
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	24 17       	cp	r18, r20
    1888:	35 07       	cpc	r19, r21
    188a:	18 f0       	brcs	.+6      	; 0x1892 <calc_CRC8+0x1c>
    crc = CRC8Table[crc ^ *(buff + i)];
  }

  return crc;
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret
    crc = CRC8Table[crc ^ *(buff + i)];
    1892:	2a 0f       	add	r18, r26
    1894:	3b 1f       	adc	r19, r27
    1896:	e9 01       	movw	r28, r18
    1898:	e8 81       	ld	r30, Y
    189a:	8e 27       	eor	r24, r30
    189c:	e8 2f       	mov	r30, r24
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	ea 5a       	subi	r30, 0xAA	; 170
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	80 81       	ld	r24, Z
  for (i = 0; i < size; i++) {
    18a6:	9f 5f       	subi	r25, 0xFF	; 255
    18a8:	ec cf       	rjmp	.-40     	; 0x1882 <calc_CRC8+0xc>

000018aa <send_status>:
void send_status(uint8_t stat) {
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
  tx_msg_buff[0] = STATUS_MSG;
    18ae:	cc ec       	ldi	r28, 0xCC	; 204
    18b0:	d2 e0       	ldi	r29, 0x02	; 2
    18b2:	90 e8       	ldi	r25, 0x80	; 128
    18b4:	98 83       	st	Y, r25
  tx_msg_buff[1] = 0;
    18b6:	19 82       	std	Y+1, r1	; 0x01
  tx_msg_buff[2] = 1;
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	9a 83       	std	Y+2, r25	; 0x02
  tx_msg_buff[3] = stat;
    18bc:	8b 83       	std	Y+3, r24	; 0x03
  tx_msg_buff[4] = calc_CRC8(tx_msg_buff, 4);
    18be:	64 e0       	ldi	r22, 0x04	; 4
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	ce 01       	movw	r24, r28
    18c4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <calc_CRC8>
    18c8:	8c 83       	std	Y+4, r24	; 0x04
  send_msg(tx_msg_buff, 5);
    18ca:	65 e0       	ldi	r22, 0x05	; 5
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	ce 01       	movw	r24, r28
}
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
  send_msg(tx_msg_buff, 5);
    18d4:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <send_msg>

000018d8 <send_tempo>:
void send_tempo(uint16_t t) {
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
  tx_msg_buff[0] = TEMPO_MSG;
    18dc:	cc ec       	ldi	r28, 0xCC	; 204
    18de:	d2 e0       	ldi	r29, 0x02	; 2
    18e0:	22 e4       	ldi	r18, 0x42	; 66
    18e2:	28 83       	st	Y, r18
  tx_msg_buff[1] = 0;
    18e4:	19 82       	std	Y+1, r1	; 0x01
  tx_msg_buff[2] = TEMPO_MSG_LEN;
    18e6:	22 e0       	ldi	r18, 0x02	; 2
    18e8:	2a 83       	std	Y+2, r18	; 0x02
  tx_msg_buff[3] = t >> 8;
    18ea:	98 27       	eor	r25, r24
    18ec:	89 27       	eor	r24, r25
    18ee:	98 27       	eor	r25, r24
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03
  tx_msg_buff[5] = calc_CRC8(tx_msg_buff, 5);
    18f4:	65 e0       	ldi	r22, 0x05	; 5
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	ce 01       	movw	r24, r28
    18fa:	0e 94 3b 0c 	call	0x1876	; 0x1876 <calc_CRC8>
    18fe:	8d 83       	std	Y+5, r24	; 0x05
  send_msg(tx_msg_buff, TEMPO_MSG_LEN + 4);
    1900:	66 e0       	ldi	r22, 0x06	; 6
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	ce 01       	movw	r24, r28
}
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
  send_msg(tx_msg_buff, TEMPO_MSG_LEN + 4);
    190a:	0c 94 1d 0c 	jmp	0x183a	; 0x183a <send_msg>

0000190e <__vector_20>:
SIGNAL(SIG_USART1_RECV) {
    190e:	1f 92       	push	r1
    1910:	0f 92       	push	r0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	ef 92       	push	r14
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ef 93       	push	r30
    193a:	ff 93       	push	r31
  char c = UDR1;
    193c:	c3 b1       	in	r28, 0x03	; 3
  if (CTS) {
    193e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <CTS>
    1942:	88 23       	and	r24, r24
    1944:	09 f4       	brne	.+2      	; 0x1948 <__vector_20+0x3a>
    1946:	43 c0       	rjmp	.+134    	; 0x19ce <__vector_20+0xc0>
    if (uart_timeout > 1000) {
    1948:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <uart_timeout>
    194c:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <uart_timeout+0x1>
    1950:	89 3e       	cpi	r24, 0xE9	; 233
    1952:	93 40       	sbci	r25, 0x03	; 3
    1954:	30 f0       	brcs	.+12     	; 0x1962 <__vector_20+0x54>
      clear_bank_leds();
    1956:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
      clock_leds();
    195a:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clock_leds>
      recv_msg_i = 0; // start over... but don't send status!
    195e:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <recv_msg_i>
    if (recv_msg_i < UART_BUFF_SIZE) {
    1962:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <recv_msg_i>
    1966:	80 34       	cpi	r24, 0x40	; 64
    1968:	08 f0       	brcs	.+2      	; 0x196c <__vector_20+0x5e>
    196a:	48 c0       	rjmp	.+144    	; 0x19fc <__vector_20+0xee>
      recv_msg_buff[recv_msg_i++] = c; // place at end of q
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	98 0f       	add	r25, r24
    1970:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <recv_msg_i>
    1974:	e8 2f       	mov	r30, r24
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	e4 5f       	subi	r30, 0xF4	; 244
    197a:	fc 4f       	sbci	r31, 0xFC	; 252
    197c:	c0 83       	st	Z, r28
    uart_timeout = 0;
    197e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <uart_timeout+0x1>
    1982:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <uart_timeout>
    if (recv_msg_i >= 3) {
    1986:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <recv_msg_i>
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	00 f1       	brcs	.+64     	; 0x19ce <__vector_20+0xc0>
      size |= recv_msg_buff[2];
    198e:	c0 91 0d 03 	lds	r28, 0x030D	; 0x80030d <recv_msg_buff+0x1>
    1992:	d0 91 0e 03 	lds	r29, 0x030E	; 0x80030e <recv_msg_buff+0x2>
    1996:	dc 27       	eor	r29, r28
    1998:	cd 27       	eor	r28, r29
    199a:	dc 27       	eor	r29, r28
      if (recv_msg_i >= 4 + size) {    // header+foot is 4 bytes long
    199c:	9e 01       	movw	r18, r28
    199e:	2c 5f       	subi	r18, 0xFC	; 252
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	82 17       	cp	r24, r18
    19a4:	13 06       	cpc	r1, r19
    19a6:	98 f0       	brcs	.+38     	; 0x19ce <__vector_20+0xc0>
        crc = recv_msg_buff[3 + size]; // CRC is the last byte of the packet
    19a8:	23 96       	adiw	r28, 0x03	; 3
        if (crc != calc_CRC8(recv_msg_buff, size + 3)) {
    19aa:	be 01       	movw	r22, r28
    19ac:	8c e0       	ldi	r24, 0x0C	; 12
    19ae:	93 e0       	ldi	r25, 0x03	; 3
    19b0:	0e 94 3b 0c 	call	0x1876	; 0x1876 <calc_CRC8>
        crc = recv_msg_buff[3 + size]; // CRC is the last byte of the packet
    19b4:	c4 5f       	subi	r28, 0xF4	; 244
    19b6:	dc 4f       	sbci	r29, 0xFC	; 252
        if (crc != calc_CRC8(recv_msg_buff, size + 3)) {
    19b8:	98 81       	ld	r25, Y
    19ba:	89 17       	cp	r24, r25
    19bc:	21 f1       	breq	.+72     	; 0x1a06 <__vector_20+0xf8>
          putnum_uh(calc_CRC8(recv_msg_buff, size + 3));
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 1b 05 	call	0xa36	; 0xa36 <putnum_uh>
          recv_msg_i = 0;
    19c4:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <recv_msg_i>
          send_status(0);
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	0e 94 55 0c 	call	0x18aa	; 0x18aa <send_status>
}
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	0f 90       	pop	r0
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	0f 90       	pop	r0
    19f8:	1f 90       	pop	r1
    19fa:	18 95       	reti
      send_status(recv_msg_i);
    19fc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <send_status>
      recv_msg_i = 0;
    1a00:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <recv_msg_i>
    1a04:	bc cf       	rjmp	.-136    	; 0x197e <__vector_20+0x70>
      cmd = recv_msg_buff[0];
    1a06:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <recv_msg_buff>
      size |= recv_msg_buff[2];
    1a0a:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <recv_msg_buff+0x2>
        switch (cmd) {
    1a0e:	81 31       	cpi	r24, 0x11	; 17
    1a10:	21 f1       	breq	.+72     	; 0x1a5a <__vector_20+0x14c>
    1a12:	40 f4       	brcc	.+16     	; 0x1a24 <__vector_20+0x116>
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <__vector_20+0x10c>
    1a18:	82 c0       	rjmp	.+260    	; 0x1b1e <__vector_20+0x210>
    1a1a:	80 31       	cpi	r24, 0x10	; 16
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <__vector_20+0x112>
    1a1e:	59 c0       	rjmp	.+178    	; 0x1ad2 <__vector_20+0x1c4>
          send_status(0);
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	7e c0       	rjmp	.+252    	; 0x1b20 <__vector_20+0x212>
        switch (cmd) {
    1a24:	80 34       	cpi	r24, 0x40	; 64
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <__vector_20+0x13a>
    1a28:	81 34       	cpi	r24, 0x41	; 65
    1a2a:	d1 f7       	brne	.-12     	; 0x1a20 <__vector_20+0x112>
          if (recv_msg_buff[2] != TEMPO_MSG_LEN) {
    1a2c:	92 30       	cpi	r25, 0x02	; 2
    1a2e:	c1 f7       	brne	.-16     	; 0x1a20 <__vector_20+0x112>
          t = recv_msg_buff[3];
    1a30:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <recv_msg_buff+0x3>
    1a34:	90 e0       	ldi	r25, 0x00	; 0
          t <<= 8;
    1a36:	98 2f       	mov	r25, r24
    1a38:	88 27       	eor	r24, r24
          t += recv_msg_buff[4];
    1a3a:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <recv_msg_buff+0x4>
          change_tempo(t);
    1a3e:	82 0f       	add	r24, r18
    1a40:	91 1d       	adc	r25, r1
    1a42:	0e 94 5d 05 	call	0xaba	; 0xaba <change_tempo>
          break;
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <__vector_20+0x146>
          send_tempo(tempo);
    1a48:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <tempo>
    1a4c:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <tempo+0x1>
    1a50:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <send_tempo>
        recv_msg_i = 0; // start over!
    1a54:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <recv_msg_i>
    1a58:	ba cf       	rjmp	.-140    	; 0x19ce <__vector_20+0xc0>
          if (recv_msg_buff[2] != RD_PATT_MSG_LEN) {
    1a5a:	92 30       	cpi	r25, 0x02	; 2
    1a5c:	09 f7       	brne	.-62     	; 0x1a20 <__vector_20+0x112>
          addr = PATTERN_MEM + bank * BANK_SIZE + patt * PATT_SIZE;
    1a5e:	c0 91 0f 03 	lds	r28, 0x030F	; 0x80030f <recv_msg_buff+0x3>
    1a62:	e8 e0       	ldi	r30, 0x08	; 8
    1a64:	ce 9f       	mul	r28, r30
    1a66:	c0 01       	movw	r24, r0
    1a68:	11 24       	eor	r1, r1
    1a6a:	c0 91 10 03 	lds	r28, 0x0310	; 0x800310 <recv_msg_buff+0x4>
    1a6e:	c8 0f       	add	r28, r24
    1a70:	d9 2f       	mov	r29, r25
    1a72:	d1 1d       	adc	r29, r1
    1a74:	24 e0       	ldi	r18, 0x04	; 4
    1a76:	cc 0f       	add	r28, r28
    1a78:	dd 1f       	adc	r29, r29
    1a7a:	2a 95       	dec	r18
    1a7c:	e1 f7       	brne	.-8      	; 0x1a76 <__vector_20+0x168>
          tx_msg_buff[0] = PATT_MSG;
    1a7e:	89 e1       	ldi	r24, 0x19	; 25
    1a80:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <tx_msg_buff>
          tx_msg_buff[1] = 0;
    1a84:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <tx_msg_buff+0x1>
          tx_msg_buff[2] = PATT_MSG_LEN;
    1a88:	80 e1       	ldi	r24, 0x10	; 16
    1a8a:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tx_msg_buff+0x2>
          for (i = 0; i < PATT_SIZE; i++) {
    1a8e:	3f ec       	ldi	r19, 0xCF	; 207
    1a90:	e3 2e       	mov	r14, r19
    1a92:	32 e0       	ldi	r19, 0x02	; 2
    1a94:	f3 2e       	mov	r15, r19
          tx_msg_buff[2] = PATT_MSG_LEN;
    1a96:	10 e0       	ldi	r17, 0x00	; 0
    1a98:	00 e0       	ldi	r16, 0x00	; 0
            tx_msg_buff[3 + i] = spieeprom_read(addr + i);
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	80 0f       	add	r24, r16
    1a9e:	91 1f       	adc	r25, r17
    1aa0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <spieeprom_read>
    1aa4:	f7 01       	movw	r30, r14
    1aa6:	81 93       	st	Z+, r24
    1aa8:	7f 01       	movw	r14, r30
    1aaa:	0f 5f       	subi	r16, 0xFF	; 255
    1aac:	1f 4f       	sbci	r17, 0xFF	; 255
          for (i = 0; i < PATT_SIZE; i++) {
    1aae:	00 31       	cpi	r16, 0x10	; 16
    1ab0:	11 05       	cpc	r17, r1
    1ab2:	99 f7       	brne	.-26     	; 0x1a9a <__vector_20+0x18c>
          tx_msg_buff[3 + PATT_SIZE] = calc_CRC8(tx_msg_buff, 3 + PATT_SIZE);
    1ab4:	63 e1       	ldi	r22, 0x13	; 19
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	8c ec       	ldi	r24, 0xCC	; 204
    1aba:	92 e0       	ldi	r25, 0x02	; 2
    1abc:	0e 94 3b 0c 	call	0x1876	; 0x1876 <calc_CRC8>
    1ac0:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <tx_msg_buff+0x13>
          send_msg(tx_msg_buff, 4 + PATT_SIZE);
    1ac4:	64 e1       	ldi	r22, 0x14	; 20
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	8c ec       	ldi	r24, 0xCC	; 204
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	0e 94 1d 0c 	call	0x183a	; 0x183a <send_msg>
          break;
    1ad0:	c1 cf       	rjmp	.-126    	; 0x1a54 <__vector_20+0x146>
          if (recv_msg_buff[2] != WR_PATT_MSG_LEN) {
    1ad2:	92 31       	cpi	r25, 0x12	; 18
    1ad4:	09 f0       	breq	.+2      	; 0x1ad8 <__vector_20+0x1ca>
    1ad6:	a4 cf       	rjmp	.-184    	; 0x1a20 <__vector_20+0x112>
          addr = PATTERN_MEM + bank * BANK_SIZE + patt * PATT_SIZE;
    1ad8:	c0 91 0f 03 	lds	r28, 0x030F	; 0x80030f <recv_msg_buff+0x3>
    1adc:	f8 e0       	ldi	r31, 0x08	; 8
    1ade:	cf 9f       	mul	r28, r31
    1ae0:	c0 01       	movw	r24, r0
    1ae2:	11 24       	eor	r1, r1
    1ae4:	c0 91 10 03 	lds	r28, 0x0310	; 0x800310 <recv_msg_buff+0x4>
    1ae8:	c8 0f       	add	r28, r24
    1aea:	d9 2f       	mov	r29, r25
    1aec:	d1 1d       	adc	r29, r1
    1aee:	84 e0       	ldi	r24, 0x04	; 4
    1af0:	cc 0f       	add	r28, r28
    1af2:	dd 1f       	adc	r29, r29
    1af4:	8a 95       	dec	r24
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <__vector_20+0x1e2>
          for (i = 0; i < PATT_SIZE; i++) {
    1af8:	91 e1       	ldi	r25, 0x11	; 17
    1afa:	e9 2e       	mov	r14, r25
    1afc:	93 e0       	ldi	r25, 0x03	; 3
    1afe:	f9 2e       	mov	r15, r25
          addr = PATTERN_MEM + bank * BANK_SIZE + patt * PATT_SIZE;
    1b00:	10 e0       	ldi	r17, 0x00	; 0
    1b02:	00 e0       	ldi	r16, 0x00	; 0
            spieeprom_write(recv_msg_buff[5 + i], addr + i);
    1b04:	be 01       	movw	r22, r28
    1b06:	60 0f       	add	r22, r16
    1b08:	71 1f       	adc	r23, r17
    1b0a:	f7 01       	movw	r30, r14
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	7f 01       	movw	r14, r30
    1b10:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <spieeprom_write>
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
          for (i = 0; i < PATT_SIZE; i++) {
    1b18:	00 31       	cpi	r16, 0x10	; 16
    1b1a:	11 05       	cpc	r17, r1
    1b1c:	99 f7       	brne	.-26     	; 0x1b04 <__vector_20+0x1f6>
          send_status(1);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
          send_status(0);
    1b20:	0e 94 55 0c 	call	0x18aa	; 0x18aa <send_status>
          break;
    1b24:	97 cf       	rjmp	.-210    	; 0x1a54 <__vector_20+0x146>

00001b26 <note_on>:
 * this function can affect how the synth sounds.
 * Note that accent is active low.
 */
void note_on(uint8_t note, uint8_t slide, uint8_t accent) {
  uint8_t i = 0;
  cbi(NOTELATCH_PORT, NOTELATCH_PIN);
    1b26:	3a 98       	cbi	0x07, 2	; 7
  // Do not allow the note to go higher than the highest note (0x3F)
  if (note > 0x3F)
    note = 0x3F;

  // Basically turn slide and accent flags into bit flags for the note port
  if (slide != 0)
    1b28:	61 11       	cpse	r22, r1
    slide = 0x40;
    1b2a:	60 e4       	ldi	r22, 0x40	; 64

  if (accent == 0)
    accent = 0x80;
  else
    accent = 0;
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
  if (accent == 0)
    1b2e:	41 11       	cpse	r20, r1
    1b30:	01 c0       	rjmp	.+2      	; 0x1b34 <note_on+0xe>
    accent = 0x80;
    1b32:	90 e8       	ldi	r25, 0x80	; 128

  // output the note, set the latch, and strike the gate
  if (note != REST) {
    1b34:	88 23       	and	r24, r24
    1b36:	49 f0       	breq	.+18     	; 0x1b4a <note_on+0x24>
    NOTE_PORT = note | slide | accent;
    1b38:	80 34       	cpi	r24, 0x40	; 64
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <note_on+0x18>
    1b3c:	8f e3       	ldi	r24, 0x3F	; 63
    1b3e:	86 2b       	or	r24, r22
    1b40:	89 2b       	or	r24, r25
    1b42:	85 bb       	out	0x15, r24	; 21
    // 30ns setup time?
    sbi(NOTELATCH_PORT, NOTELATCH_PIN);
    1b44:	3a 9a       	sbi	0x07, 2	; 7
    // 10 uS
    while (i < 40) {
      i++;
    }
    sbi(GATE_PORT, GATE_PIN);
    1b46:	39 9a       	sbi	0x07, 1	; 7
    1b48:	08 95       	ret
  } else {
    // gate is not restruck during rest, and note is not latched, but one can
    // slide to/from a rest and rests can have accent (tip to memology)
    NOTE_PORT = slide | accent;
    1b4a:	86 2f       	mov	r24, r22
    1b4c:	89 2b       	or	r24, r25
    1b4e:	85 bb       	out	0x15, r24	; 21
    if (slide) {
     putstring(" w/slide ");
     }
     putstring("\n\r");
  */
}
    1b50:	08 95       	ret

00001b52 <note_off>:
void note_off(uint8_t slide) {
  /*
  putstring("Note off\n\r");
  */

  if (slide) {
    1b52:	88 23       	and	r24, r24
    1b54:	19 f0       	breq	.+6      	; 0x1b5c <note_off+0xa>
    sbi(NOTE_PORT, 6);
    1b56:	ae 9a       	sbi	0x15, 6	; 21
  } else {
    cbi(GATE_PORT, GATE_PIN);
  }

  cbi(NOTELATCH_PORT, NOTELATCH_PIN);
    1b58:	3a 98       	cbi	0x07, 2	; 7
}
    1b5a:	08 95       	ret
    cbi(GATE_PORT, GATE_PIN);
    1b5c:	39 98       	cbi	0x07, 1	; 7
    1b5e:	fc cf       	rjmp	.-8      	; 0x1b58 <note_off+0x6>

00001b60 <do_keyboard_mode>:
                                        KEY_F,  KEY_FS, KEY_G, KEY_GS, KEY_A,
                                        KEY_AS, KEY_B,  KEY_C2};

extern uint8_t midi_out_addr; // the midi address for outgoing stuff

void do_keyboard_mode(void) {
    1b60:	9f 92       	push	r9
    1b62:	af 92       	push	r10
    1b64:	bf 92       	push	r11
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
  signed int shift = 0;
  uint8_t accent = 0, slide = 0;
  uint8_t i, last_bank;

  // turn tempo off!
  turn_off_tempo();
    1b76:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>

  clear_bank_leds();
    1b7a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>

  read_switches();
    1b7e:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
  last_bank = bank;
  has_bank_knob_changed(); // ignore startup change
    1b82:	0e 94 a6 09 	call	0x134c	; 0x134c <has_bank_knob_changed>
  uint8_t accent = 0, slide = 0;
    1b86:	e1 2c       	mov	r14, r1
    1b88:	00 e0       	ldi	r16, 0x00	; 0
  signed int shift = 0;
    1b8a:	d0 e0       	ldi	r29, 0x00	; 0
    1b8c:	c0 e0       	ldi	r28, 0x00	; 0
    display_octave_shift(shift);

    for (i = 0; i < 13; i++) {
      // check if any notes were just pressed
      if (just_pressed(notekey_tab[i])) {
        note_on((C2 + i) + shift * OCTAVE, slide, accent);
    1b8e:	2c e0       	ldi	r18, 0x0C	; 12
    1b90:	92 2e       	mov	r9, r18
    read_switches();
    1b92:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    if (function_changed) {
    1b96:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	69 f0       	breq	.+26     	; 0x1bb8 <do_keyboard_mode+0x58>
      note_off(0);
      slide = FALSE;
      clear_notekey_leds();
    }
  }
}
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	bf 90       	pop	r11
    1bb0:	af 90       	pop	r10
    1bb2:	9f 90       	pop	r9
      midi_notesoff(); // turn all notes off
    1bb4:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <midi_notesoff>
    if (!is_bank_led_set(midi_out_addr)) {
    1bb8:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <midi_out_addr>
    1bbc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <is_bank_led_set>
    1bc0:	81 11       	cpse	r24, r1
    1bc2:	06 c0       	rjmp	.+12     	; 0x1bd0 <do_keyboard_mode+0x70>
      clear_bank_leds();
    1bc4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
      set_bank_led(midi_out_addr);
    1bc8:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <midi_out_addr>
    1bcc:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
    if (has_bank_knob_changed()) {
    1bd0:	0e 94 a6 09 	call	0x134c	; 0x134c <has_bank_knob_changed>
    1bd4:	88 23       	and	r24, r24
    1bd6:	41 f0       	breq	.+16     	; 0x1be8 <do_keyboard_mode+0x88>
      midi_out_addr = bank;
    1bd8:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <bank>
    1bdc:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <midi_out_addr>
      internal_eeprom_write8(MIDIOUT_ADDR_EEADDR, midi_out_addr);
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <internal_eeprom_write8>
    display_octave_shift(shift);
    1be8:	8c 2f       	mov	r24, r28
    1bea:	0e 94 9a 0b 	call	0x1734	; 0x1734 <display_octave_shift>
        note_on((C2 + i) + shift * OCTAVE, slide, accent);
    1bee:	c9 9d       	mul	r28, r9
    1bf0:	10 2d       	mov	r17, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	19 5e       	subi	r17, 0xE9	; 233
        midi_send_note_on(((C2 + i) + shift * OCTAVE) | (accent << 6));
    1bf6:	b0 2e       	mov	r11, r16
    1bf8:	b2 94       	swap	r11
    1bfa:	bb 0c       	add	r11, r11
    1bfc:	bb 0c       	add	r11, r11
    1bfe:	80 ec       	ldi	r24, 0xC0	; 192
    1c00:	b8 22       	and	r11, r24
    1c02:	96 e5       	ldi	r25, 0x56	; 86
    1c04:	c9 2e       	mov	r12, r25
    1c06:	92 e0       	ldi	r25, 0x02	; 2
    1c08:	d9 2e       	mov	r13, r25
    for (i = 0; i < 13; i++) {
    1c0a:	f1 2c       	mov	r15, r1
      if (just_pressed(notekey_tab[i])) {
    1c0c:	f6 01       	movw	r30, r12
    1c0e:	a1 90       	ld	r10, Z+
    1c10:	6f 01       	movw	r12, r30
    1c12:	8a 2d       	mov	r24, r10
    1c14:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    1c18:	88 23       	and	r24, r24
    1c1a:	71 f0       	breq	.+28     	; 0x1c38 <do_keyboard_mode+0xd8>
        note_on((C2 + i) + shift * OCTAVE, slide, accent);
    1c1c:	40 2f       	mov	r20, r16
    1c1e:	6e 2d       	mov	r22, r14
    1c20:	81 2f       	mov	r24, r17
    1c22:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
        midi_send_note_on(((C2 + i) + shift * OCTAVE) | (accent << 6));
    1c26:	81 2f       	mov	r24, r17
    1c28:	8b 29       	or	r24, r11
    1c2a:	0e 94 c3 06 	call	0xd86	; 0xd86 <midi_send_note_on>
        set_notekey_led(i);
    1c2e:	8f 2d       	mov	r24, r15
    1c30:	0e 94 06 0b 	call	0x160c	; 0x160c <set_notekey_led>
        slide = TRUE;
    1c34:	ee 24       	eor	r14, r14
    1c36:	e3 94       	inc	r14
      if (just_released(notekey_tab[i])) {
    1c38:	8a 2d       	mov	r24, r10
    1c3a:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    1c3e:	88 23       	and	r24, r24
    1c40:	39 f0       	breq	.+14     	; 0x1c50 <do_keyboard_mode+0xf0>
        midi_send_note_off(((C2 + i) + shift * OCTAVE) | (accent << 6));
    1c42:	81 2f       	mov	r24, r17
    1c44:	8b 29       	or	r24, r11
    1c46:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <midi_send_note_off>
        clear_notekey_led(i);
    1c4a:	8f 2d       	mov	r24, r15
    1c4c:	0e 94 10 0b 	call	0x1620	; 0x1620 <clear_notekey_led>
    for (i = 0; i < 13; i++) {
    1c50:	f3 94       	inc	r15
    1c52:	1f 5f       	subi	r17, 0xFF	; 255
    1c54:	fd e0       	ldi	r31, 0x0D	; 13
    1c56:	ff 12       	cpse	r15, r31
    1c58:	d9 cf       	rjmp	.-78     	; 0x1c0c <do_keyboard_mode+0xac>
    if (just_pressed(KEY_UP)) {
    1c5a:	8f e0       	ldi	r24, 0x0F	; 15
    1c5c:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    1c60:	88 23       	and	r24, r24
    1c62:	f9 f0       	breq	.+62     	; 0x1ca2 <do_keyboard_mode+0x142>
      if (shift < 2)
    1c64:	c2 30       	cpi	r28, 0x02	; 2
    1c66:	d1 05       	cpc	r29, r1
    1c68:	0c f4       	brge	.+2      	; 0x1c6c <do_keyboard_mode+0x10c>
        shift++;
    1c6a:	21 96       	adiw	r28, 0x01	; 1
    if (just_pressed(KEY_ACCENT)) {
    1c6c:	85 e1       	ldi	r24, 0x15	; 21
    1c6e:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    1c72:	88 23       	and	r24, r24
    1c74:	31 f0       	breq	.+12     	; 0x1c82 <do_keyboard_mode+0x122>
        set_led(LED_ACCENT);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
      if (accent)
    1c78:	01 11       	cpse	r16, r1
    1c7a:	1d c0       	rjmp	.+58     	; 0x1cb6 <do_keyboard_mode+0x156>
        set_led(LED_ACCENT);
    1c7c:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
      accent = !accent;
    1c80:	01 e0       	ldi	r16, 0x01	; 1
    if ((NOTE_PIN & 0x3F) && no_keys_pressed()) {
    1c82:	83 b3       	in	r24, 0x13	; 19
    1c84:	8f 73       	andi	r24, 0x3F	; 63
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <do_keyboard_mode+0x12a>
    1c88:	84 cf       	rjmp	.-248    	; 0x1b92 <do_keyboard_mode+0x32>
    1c8a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <no_keys_pressed>
    1c8e:	88 23       	and	r24, r24
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <do_keyboard_mode+0x134>
    1c92:	7f cf       	rjmp	.-258    	; 0x1b92 <do_keyboard_mode+0x32>
      note_off(0);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      clear_notekey_leds();
    1c9a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
      slide = FALSE;
    1c9e:	e1 2c       	mov	r14, r1
    1ca0:	78 cf       	rjmp	.-272    	; 0x1b92 <do_keyboard_mode+0x32>
    } else if (just_pressed(KEY_DOWN)) {
    1ca2:	8e e0       	ldi	r24, 0x0E	; 14
    1ca4:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    1ca8:	88 23       	and	r24, r24
    1caa:	01 f3       	breq	.-64     	; 0x1c6c <do_keyboard_mode+0x10c>
      if (shift > -1)
    1cac:	cf 3f       	cpi	r28, 0xFF	; 255
    1cae:	dc 07       	cpc	r29, r28
    1cb0:	e9 f2       	breq	.-70     	; 0x1c6c <do_keyboard_mode+0x10c>
        shift--;
    1cb2:	21 97       	sbiw	r28, 0x01	; 1
    1cb4:	db cf       	rjmp	.-74     	; 0x1c6c <do_keyboard_mode+0x10c>
        clear_led(LED_ACCENT);
    1cb6:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
      accent = !accent;
    1cba:	00 e0       	ldi	r16, 0x00	; 0
    1cbc:	e2 cf       	rjmp	.-60     	; 0x1c82 <do_keyboard_mode+0x122>

00001cbe <spieeprom_write>:
void spieeprom_write(uint8_t data, uint16_t addr) {
  uint8_t status;

  // printf("writing %x to 0x%x\n\r", data, addr);
  /* check if there is a write in progress, wait */
  cli();
    1cbe:	f8 94       	cli
    NOP;
    NOP;
    NOP;
    NOP;

    SPDR = SPI_EEPROM_RDSR;
    1cc0:	25 e0       	ldi	r18, 0x05	; 5
    cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1cc2:	c0 98       	cbi	0x18, 0	; 24
	...
    SPDR = SPI_EEPROM_RDSR;
    1ccc:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & (1 << SPIF)))
    1cce:	77 9b       	sbis	0x0e, 7	; 14
    1cd0:	fe cf       	rjmp	.-4      	; 0x1cce <spieeprom_write+0x10>
	...
      ;
    NOP;
    NOP;
    NOP;
    NOP;
    SPDR = 0;
    1cda:	1f b8       	out	0x0f, r1	; 15
    while (!(SPSR & (1 << SPIF)))
    1cdc:	77 9b       	sbis	0x0e, 7	; 14
    1cde:	fe cf       	rjmp	.-4      	; 0x1cdc <spieeprom_write+0x1e>
      ;
    status = SPDR;
    1ce0:	9f b1       	in	r25, 0x0f	; 15
    sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS high
    1ce2:	c0 9a       	sbi	0x18, 0	; 24
	...
    NOP;
    NOP;
    NOP;
    NOP;

  } while ((status & 0x1) != 0);
    1cec:	90 fd       	sbrc	r25, 0
    1cee:	e9 cf       	rjmp	.-46     	; 0x1cc2 <spieeprom_write+0x4>
  /* set the spi write enable latch */

  cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1cf0:	c0 98       	cbi	0x18, 0	; 24
  NOP;
    1cf2:	00 00       	nop
  NOP;
    1cf4:	00 00       	nop

  SPDR = SPI_EEPROM_WREN; // send command
    1cf6:	96 e0       	ldi	r25, 0x06	; 6
    1cf8:	9f b9       	out	0x0f, r25	; 15
  while (!(SPSR & (1 << SPIF)))
    1cfa:	77 9b       	sbis	0x0e, 7	; 14
    1cfc:	fe cf       	rjmp	.-4      	; 0x1cfa <spieeprom_write+0x3c>
    ;
  NOP;
    1cfe:	00 00       	nop
  NOP;
    1d00:	00 00       	nop
  sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1d02:	c0 9a       	sbi	0x18, 0	; 24
	...
  NOP;
  NOP;
  NOP;
  NOP; // wait for write enable latch

  cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1d0c:	c0 98       	cbi	0x18, 0	; 24
  NOP;
    1d0e:	00 00       	nop
  NOP;
    1d10:	00 00       	nop

  SPDR = SPI_EEPROM_WRITE; // send command
    1d12:	92 e0       	ldi	r25, 0x02	; 2
    1d14:	9f b9       	out	0x0f, r25	; 15
  while (!(SPSR & (1 << SPIF)))
    1d16:	77 9b       	sbis	0x0e, 7	; 14
    1d18:	fe cf       	rjmp	.-4      	; 0x1d16 <spieeprom_write+0x58>
    ;

  SPDR = addr >> 8; // send high addr
    1d1a:	7f b9       	out	0x0f, r23	; 15
  while (!(SPSR & (1 << SPIF)))
    1d1c:	77 9b       	sbis	0x0e, 7	; 14
    1d1e:	fe cf       	rjmp	.-4      	; 0x1d1c <spieeprom_write+0x5e>
    ;

  SPDR = addr & 0xFF; // send low addr
    1d20:	6f b9       	out	0x0f, r22	; 15
  while (!(SPSR & (1 << SPIF)))
    1d22:	77 9b       	sbis	0x0e, 7	; 14
    1d24:	fe cf       	rjmp	.-4      	; 0x1d22 <spieeprom_write+0x64>
    ;

  SPDR = data; // send data
    1d26:	8f b9       	out	0x0f, r24	; 15
  while (!(SPSR & (1 << SPIF)))
    1d28:	77 9b       	sbis	0x0e, 7	; 14
    1d2a:	fe cf       	rjmp	.-4      	; 0x1d28 <spieeprom_write+0x6a>
    ;

  NOP;
    1d2c:	00 00       	nop
  NOP;
    1d2e:	00 00       	nop

  sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1d30:	c0 9a       	sbi	0x18, 0	; 24
  sei();
    1d32:	78 94       	sei
}
    1d34:	08 95       	ret

00001d36 <spieeprom_read>:

uint8_t spieeprom_read(uint16_t addr) {
  uint8_t data;

  cli();
    1d36:	f8 94       	cli

  cbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS low
    1d38:	c0 98       	cbi	0x18, 0	; 24
  NOP;
    1d3a:	00 00       	nop
  NOP;
    1d3c:	00 00       	nop

  SPDR = SPI_EEPROM_READ; // send command
    1d3e:	23 e0       	ldi	r18, 0x03	; 3
    1d40:	2f b9       	out	0x0f, r18	; 15
  while (!(SPSR & (1 << SPIF)))
    1d42:	77 9b       	sbis	0x0e, 7	; 14
    1d44:	fe cf       	rjmp	.-4      	; 0x1d42 <spieeprom_read+0xc>
    ;

  SPDR = addr >> 8; // send high addr
    1d46:	9f b9       	out	0x0f, r25	; 15
  while (!(SPSR & (1 << SPIF)))
    1d48:	77 9b       	sbis	0x0e, 7	; 14
    1d4a:	fe cf       	rjmp	.-4      	; 0x1d48 <spieeprom_read+0x12>
    ;

  SPDR = addr & 0xFF; // send low addr
    1d4c:	8f b9       	out	0x0f, r24	; 15
  while (!(SPSR & (1 << SPIF)))
    1d4e:	77 9b       	sbis	0x0e, 7	; 14
    1d50:	fe cf       	rjmp	.-4      	; 0x1d4e <spieeprom_read+0x18>
    ;
  NOP;
    1d52:	00 00       	nop
  NOP;
    1d54:	00 00       	nop

  SPDR = 0;
    1d56:	1f b8       	out	0x0f, r1	; 15
  while (!(SPSR & (1 << SPIF)))
    1d58:	77 9b       	sbis	0x0e, 7	; 14
    1d5a:	fe cf       	rjmp	.-4      	; 0x1d58 <spieeprom_read+0x22>
    ;
  data = SPDR;
    1d5c:	8f b1       	in	r24, 0x0f	; 15
  // printf("got %x\n\r", data);

  sbi(SPIEE_CS_PORT, SPIEE_CS_PIN); // pull CS high
    1d5e:	c0 9a       	sbi	0x18, 0	; 24
  sei();
    1d60:	78 94       	sei
  return data;
}
    1d62:	08 95       	ret

00001d64 <get_pitchshift_from_patt>:
}

int8_t get_pitchshift_from_patt(uint16_t patt) {
  int8_t shift;

  shift = (patt >> 8) & 0x1F;
    1d64:	89 2f       	mov	r24, r25
    1d66:	8f 71       	andi	r24, 0x1F	; 31
  if (shift & 0x10)
    1d68:	94 fd       	sbrc	r25, 4
    shift |= 0xE0; // extend signed 5-bit int
    1d6a:	80 6e       	ori	r24, 0xE0	; 224

  return shift;
}
    1d6c:	08 95       	ret

00001d6e <display_curr_pitch_shift_ud>:
void display_curr_pitch_shift_ud(void) {
  if (curr_pitch_shift == 0) {
    1d6e:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curr_pitch_shift>
    1d72:	81 11       	cpse	r24, r1
    1d74:	06 c0       	rjmp	.+12     	; 0x1d82 <display_curr_pitch_shift_ud+0x14>
    clear_led(LED_UP);
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  } else if (curr_pitch_shift < 0) {
    clear_led(LED_UP);
    set_led(LED_DOWN);
  } else {
    set_led(LED_UP);
    clear_led(LED_DOWN);
    1d7c:	84 e0       	ldi	r24, 0x04	; 4
    1d7e:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <clear_led>
  } else if (curr_pitch_shift < 0) {
    1d82:	87 ff       	sbrs	r24, 7
    1d84:	06 c0       	rjmp	.+12     	; 0x1d92 <display_curr_pitch_shift_ud+0x24>
    clear_led(LED_UP);
    1d86:	83 e0       	ldi	r24, 0x03	; 3
    1d88:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    set_led(LED_DOWN);
    1d8c:	84 e0       	ldi	r24, 0x04	; 4
    1d8e:	0c 94 bf 09 	jmp	0x137e	; 0x137e <set_led>
    set_led(LED_UP);
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    1d98:	f1 cf       	rjmp	.-30     	; 0x1d7c <display_curr_pitch_shift_ud+0xe>

00001d9a <start_track_stepwrite_mode>:
  }
}

void start_track_stepwrite_mode(void) {
  in_stepwrite_mode = TRUE;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <in_stepwrite_mode>
  set_led(LED_NEXT);
    1da0:	84 e2       	ldi	r24, 0x24	; 36
    1da2:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
  clear_bank_leds();
    1da6:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <clear_bank_leds>

00001daa <stop_track_stepwrite_mode>:
}

void stop_track_stepwrite_mode(void) {
  in_stepwrite_mode = FALSE;
    1daa:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <in_stepwrite_mode>
  clear_led(LED_NEXT);
    1dae:	84 e2       	ldi	r24, 0x24	; 36
    1db0:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  clear_all_leds();
    1db4:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
  clear_blinking_leds();
    1db8:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
  play_loaded_pattern = FALSE;
    1dbc:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
  note_off(0);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <note_off>

00001dc6 <load_curr_patt>:

// a shortcut function...this code is duplicated a bunch of places.
// this just saves codespace
uint8_t load_curr_patt(void) {
  // load the pattern from EEPROM
  load_pattern((curr_patt >> 3) & 0xF, curr_patt & 0x7);
    1dc6:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    1dca:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    1dce:	68 2f       	mov	r22, r24
    1dd0:	67 70       	andi	r22, 0x07	; 7
    1dd2:	23 e0       	ldi	r18, 0x03	; 3
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	2a 95       	dec	r18
    1dda:	e1 f7       	brne	.-8      	; 0x1dd4 <load_curr_patt+0xe>
    1ddc:	8f 70       	andi	r24, 0x0F	; 15
    1dde:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>

  // get the pattern's RAS & pitch shift
  all_rest = (curr_patt & TRACK_REST_FLAG) >> 8;
    1de2:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    1de6:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    1dea:	ac 01       	movw	r20, r24
    1dec:	25 2f       	mov	r18, r21
    1dee:	20 78       	andi	r18, 0x80	; 128
    1df0:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <all_rest>
  all_accent = (curr_patt & TRACK_ACCENT_FLAG) >> 8;
    1df4:	25 2f       	mov	r18, r21
    1df6:	20 74       	andi	r18, 0x40	; 64
    1df8:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <all_accent>
  all_slide = (curr_patt & TRACK_SLIDE_FLAG) >> 8;
    1dfc:	25 2f       	mov	r18, r21
    1dfe:	20 72       	andi	r18, 0x20	; 32
    1e00:	20 93 8d 02 	sts	0x028D, r18	; 0x80028d <all_slide>
  curr_pattern_index = 0;
    1e04:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>

  return get_pitchshift_from_patt(curr_patt);
    1e08:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <get_pitchshift_from_patt>

00001e0c <start_track_run_mode>:
  in_run_mode = TRUE;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <in_run_mode>
  set_led(LED_RS);
    1e12:	81 e2       	ldi	r24, 0x21	; 33
    1e14:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
  all_rest = all_slide = all_accent = FALSE;
    1e18:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <all_accent>
    1e1c:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <all_slide>
    1e20:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <all_rest>
  play_loaded_pattern = play_loaded_track = FALSE;
    1e24:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <play_loaded_track>
    1e28:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
  curr_patt = track_buff[0];
    1e2c:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <track_buff>
    1e30:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <track_buff+0x1>
    1e34:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    1e38:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
  if (curr_patt != END_OF_TRACK) { // clearly, dont play the track if there aint
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	89 f0       	breq	.+34     	; 0x1e62 <start_track_run_mode+0x56>
    curr_track_index = 0;
    1e40:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
    curr_pattern_index = 0;
    1e44:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
    curr_note = REST; // make it a rest just to avoid sliding
    1e48:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <curr_note>
    curr_pitch_shift = load_curr_patt();
    1e4c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <load_curr_patt>
    1e50:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
    while (note_counter & 0x1)
    1e54:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
    1e58:	80 fd       	sbrc	r24, 0
    1e5a:	fc cf       	rjmp	.-8      	; 0x1e54 <start_track_run_mode+0x48>
    play_loaded_track = TRUE;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <play_loaded_track>
  clear_bank_leds();
    1e62:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <clear_bank_leds>

00001e66 <stop_track_run_mode>:
}

void stop_track_run_mode(void) {
  in_run_mode = FALSE;
    1e66:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <in_run_mode>
  play_loaded_pattern = FALSE;
    1e6a:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
  play_loaded_track = FALSE;
    1e6e:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <play_loaded_track>
  note_off(0);
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
  clear_all_leds();
    1e78:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
  clear_blinking_leds();
    1e7c:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
  has_bank_knob_changed();
    1e80:	0c 94 a6 09 	jmp	0x134c	; 0x134c <has_bank_knob_changed>

00001e84 <load_track>:
}

void load_track(uint8_t bank, uint8_t track_loc) {
    1e84:	ef 92       	push	r14
    1e86:	ff 92       	push	r15
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
  uint8_t i;
  uint16_t track_addr;

  track_addr = TRACK_MEM + (bank * BANK_SIZE + track_loc * TRACK_SIZE) * 2;
    1e90:	98 e0       	ldi	r25, 0x08	; 8
    1e92:	89 9f       	mul	r24, r25
    1e94:	e0 01       	movw	r28, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	c6 0f       	add	r28, r22
    1e9a:	d1 1d       	adc	r29, r1
    1e9c:	45 e0       	ldi	r20, 0x05	; 5
    1e9e:	cc 0f       	add	r28, r28
    1ea0:	dd 1f       	adc	r29, r29
    1ea2:	4a 95       	dec	r20
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <load_track+0x1a>
    1ea6:	d8 5f       	subi	r29, 0xF8	; 248
    1ea8:	f1 2c       	mov	r15, r1
    1eaa:	e1 2c       	mov	r14, r1
  putnum_uh(track_addr);
  putstring("\n\r");
  */

  for (i = 0; i < TRACK_SIZE; i++) {
    track_buff[i] = spieeprom_read(track_addr + 2 * i) << 8;
    1eac:	ce 01       	movw	r24, r28
    1eae:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <spieeprom_read>
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	88 27       	eor	r24, r24
    1eb8:	87 01       	movw	r16, r14
    1eba:	00 0f       	add	r16, r16
    1ebc:	11 1f       	adc	r17, r17
    1ebe:	04 5b       	subi	r16, 0xB4	; 180
    1ec0:	1c 4f       	sbci	r17, 0xFC	; 252
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    track_buff[i] |= spieeprom_read(track_addr + 2 * i + 1);
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <spieeprom_read>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	20 81       	ld	r18, Z
    1ed4:	31 81       	ldd	r19, Z+1	; 0x01
    1ed6:	28 2b       	or	r18, r24
    1ed8:	31 83       	std	Z+1, r19	; 0x01
    1eda:	20 83       	st	Z, r18
    1edc:	ff ef       	ldi	r31, 0xFF	; 255
    1ede:	ef 1a       	sub	r14, r31
    1ee0:	ff 0a       	sbc	r15, r31
    1ee2:	22 96       	adiw	r28, 0x02	; 2
  for (i = 0; i < TRACK_SIZE; i++) {
    1ee4:	80 e1       	ldi	r24, 0x10	; 16
    1ee6:	e8 16       	cp	r14, r24
    1ee8:	f1 04       	cpc	r15, r1
    1eea:	01 f7       	brne	.-64     	; 0x1eac <load_track+0x28>
  }
}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	08 95       	ret

00001efa <write_track>:

void write_track(uint8_t bank, uint8_t track_loc) {
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
  uint8_t i;
  uint16_t track_addr;

  track_addr = TRACK_MEM + (bank * BANK_SIZE + track_loc * TRACK_SIZE) * 2;
    1f06:	28 e0       	ldi	r18, 0x08	; 8
    1f08:	82 9f       	mul	r24, r18
    1f0a:	e0 01       	movw	r28, r0
    1f0c:	11 24       	eor	r1, r1
    1f0e:	c6 0f       	add	r28, r22
    1f10:	d1 1d       	adc	r29, r1
    1f12:	35 e0       	ldi	r19, 0x05	; 5
    1f14:	cc 0f       	add	r28, r28
    1f16:	dd 1f       	adc	r29, r29
    1f18:	3a 95       	dec	r19
    1f1a:	e1 f7       	brne	.-8      	; 0x1f14 <write_track+0x1a>
    1f1c:	d8 5f       	subi	r29, 0xF8	; 248
    1f1e:	10 e0       	ldi	r17, 0x00	; 0
    1f20:	00 e0       	ldi	r16, 0x00	; 0
  putnum_uh(track_addr);
  putstring("\n\r");
  */

  for (i = 0; i < TRACK_SIZE; i++) {
    spieeprom_write(track_buff[i] >> 8, track_addr + 2 * i);
    1f22:	c8 01       	movw	r24, r16
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	fc 01       	movw	r30, r24
    1f2a:	e4 5b       	subi	r30, 0xB4	; 180
    1f2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f2e:	7f 01       	movw	r14, r30
    1f30:	80 81       	ld	r24, Z
    1f32:	91 81       	ldd	r25, Z+1	; 0x01
    1f34:	be 01       	movw	r22, r28
    1f36:	89 2f       	mov	r24, r25
    1f38:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <spieeprom_write>
    spieeprom_write(track_buff[i] & 0xFF, track_addr + 2 * i + 1);
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	80 81       	ld	r24, Z
    1f40:	91 81       	ldd	r25, Z+1	; 0x01
    1f42:	be 01       	movw	r22, r28
    1f44:	6f 5f       	subi	r22, 0xFF	; 255
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <spieeprom_write>
    1f4c:	0f 5f       	subi	r16, 0xFF	; 255
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	22 96       	adiw	r28, 0x02	; 2
  for (i = 0; i < TRACK_SIZE; i++) {
    1f52:	00 31       	cpi	r16, 0x10	; 16
    1f54:	11 05       	cpc	r17, r1
    1f56:	29 f7       	brne	.-54     	; 0x1f22 <write_track+0x28>
  }
}
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	08 95       	ret

00001f66 <do_track_edit>:
void do_track_edit(void) {
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
  turn_on_tempo();
    1f72:	0e 94 a8 00 	call	0x150	; 0x150 <turn_on_tempo>
  track_bank = bank % 8;
    1f76:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    1f7a:	87 70       	andi	r24, 0x07	; 7
    1f7c:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <track_bank>
  track_location = 0;
    1f80:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <track_location>
  in_stepwrite_mode = FALSE;
    1f84:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <in_stepwrite_mode>
  in_run_mode = FALSE;
    1f88:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <in_run_mode>
  play_loaded_track = FALSE;
    1f8c:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <play_loaded_track>
  play_loaded_pattern = FALSE;
    1f90:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
  curr_track_index = 0;
    1f94:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
  curr_patt = END_OF_TRACK;
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	9f ef       	ldi	r25, 0xFF	; 255
    1f9c:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    1fa0:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
  sync = INTERNAL_SYNC;
    1fa4:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
  clear_bank_leds();
    1fa8:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
  clear_blinking_leds();
    1fac:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
        curr_patt = END_OF_TRACK; // cleans up LEDs
    1fb0:	0f ef       	ldi	r16, 0xFF	; 255
    1fb2:	1f ef       	ldi	r17, 0xFF	; 255
    1fb4:	ee 24       	eor	r14, r14
    1fb6:	ea 94       	dec	r14
    1fb8:	fe 2c       	mov	r15, r14
    read_switches();
    1fba:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    if (function != EDIT_TRACK_FUNC) {
    1fbe:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	99 f0       	breq	.+38     	; 0x1fec <do_track_edit+0x86>
      turn_off_tempo();
    1fc6:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>
      play_loaded_track = play_loaded_pattern = 0;
    1fca:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
    1fce:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <play_loaded_track>
      note_off(0);
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      clear_all_leds();
    1fd8:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
}
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
      clock_leds();
    1fe8:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <clock_leds>
    if (!in_stepwrite_mode && !in_run_mode) {
    1fec:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    1ff0:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <in_run_mode>
    1ff4:	89 2b       	or	r24, r25
    1ff6:	39 f5       	brne	.+78     	; 0x2046 <do_track_edit+0xe0>
      if (has_bank_knob_changed()) {
    1ff8:	0e 94 a6 09 	call	0x134c	; 0x134c <has_bank_knob_changed>
    1ffc:	88 23       	and	r24, r24
    1ffe:	59 f0       	breq	.+22     	; 0x2016 <do_track_edit+0xb0>
        track_bank = bank % 8;
    2000:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2004:	87 70       	andi	r24, 0x07	; 7
    2006:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <track_bank>
        load_track(track_bank, track_location);
    200a:	60 91 72 03 	lds	r22, 0x0372	; 0x800372 <track_location>
    200e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <load_track>
        clear_bank_leds(); // track changed, clear the prev indicator
    2012:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
      set_bank_led(track_bank); // show the track being edited
    2016:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <track_bank>
    201a:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
      i = get_lowest_numkey_pressed();
    201e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <get_lowest_numkey_pressed>
    2022:	c8 2f       	mov	r28, r24
      if (i != 0) {
    2024:	88 23       	and	r24, r24
    2026:	51 f0       	breq	.+20     	; 0x203c <do_track_edit+0xd6>
        clear_notekey_leds();
    2028:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
        track_location = i - 1;
    202c:	6f ef       	ldi	r22, 0xFF	; 255
    202e:	6c 0f       	add	r22, r28
    2030:	60 93 72 03 	sts	0x0372, r22	; 0x800372 <track_location>
        load_track(track_bank, track_location);
    2034:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <track_bank>
    2038:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <load_track>
      set_numkey_led(track_location + 1);
    203c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <track_location>
    2040:	8f 5f       	subi	r24, 0xFF	; 255
    2042:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
    if (just_pressed(KEY_RS)) {
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    204c:	88 23       	and	r24, r24
    204e:	39 f0       	breq	.+14     	; 0x205e <do_track_edit+0xf8>
      if (in_run_mode) {
    2050:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <in_run_mode>
    2054:	88 23       	and	r24, r24
    2056:	09 f4       	brne	.+2      	; 0x205a <do_track_edit+0xf4>
    2058:	4a c0       	rjmp	.+148    	; 0x20ee <do_track_edit+0x188>
        stop_track_run_mode(); // stop run mode
    205a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <stop_track_run_mode>
    if (in_run_mode || in_stepwrite_mode) {
    205e:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <in_run_mode>
    2062:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <in_stepwrite_mode>
    2066:	89 2b       	or	r24, r25
    2068:	b9 f0       	breq	.+46     	; 0x2098 <do_track_edit+0x132>
      if (!is_bank_led_blink(curr_track_index))
    206a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    206e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <is_bank_led_blink>
    2072:	81 11       	cpse	r24, r1
    2074:	02 c0       	rjmp	.+4      	; 0x207a <do_track_edit+0x114>
        clear_blinking_leds();
    2076:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
      set_bank_led_blink(curr_track_index);
    207a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    207e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <set_bank_led_blink>
      if (curr_patt == END_OF_TRACK) {
    2082:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2086:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	c1 f5       	brne	.+112    	; 0x20fe <do_track_edit+0x198>
        clear_note_leds();
    208e:	0e 94 39 0b 	call	0x1672	; 0x1672 <clear_note_leds>
        set_led(LED_DONE);
    2092:	80 e0       	ldi	r24, 0x00	; 0
          set_led(LED_SLIDE);
    2094:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    if ((just_pressed(KEY_NEXT) || just_pressed(KEY_PREV)) && !in_run_mode) {
    2098:	88 e0       	ldi	r24, 0x08	; 8
    209a:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    209e:	88 23       	and	r24, r24
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <do_track_edit+0x13e>
    20a2:	62 c0       	rjmp	.+196    	; 0x2168 <do_track_edit+0x202>
    20a4:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <in_run_mode>
    20a8:	81 11       	cpse	r24, r1
    20aa:	63 c0       	rjmp	.+198    	; 0x2172 <do_track_edit+0x20c>
      note_off(0); // if something -was- playing, kill it
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      if (in_stepwrite_mode) {
    20b2:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    20b6:	88 23       	and	r24, r24
    20b8:	09 f4       	brne	.+2      	; 0x20bc <do_track_edit+0x156>
    20ba:	82 c1       	rjmp	.+772    	; 0x23c0 <do_track_edit+0x45a>
        if (just_pressed(KEY_NEXT)) {
    20bc:	88 e0       	ldi	r24, 0x08	; 8
    20be:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    20c2:	88 23       	and	r24, r24
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <do_track_edit+0x162>
    20c6:	3f c1       	rjmp	.+638    	; 0x2346 <do_track_edit+0x3e0>
          if (((curr_track_index + 1) >= TRACK_SIZE) ||
    20c8:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    20cc:	8f 30       	cpi	r24, 0x0F	; 15
    20ce:	60 f4       	brcc	.+24     	; 0x20e8 <do_track_edit+0x182>
              (track_buff[curr_track_index] == END_OF_TRACK))
    20d0:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	e4 5b       	subi	r30, 0xB4	; 180
    20dc:	fc 4f       	sbci	r31, 0xFC	; 252
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
          if (((curr_track_index + 1) >= TRACK_SIZE) ||
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	09 f0       	breq	.+2      	; 0x20e8 <do_track_edit+0x182>
    20e6:	29 c1       	rjmp	.+594    	; 0x233a <do_track_edit+0x3d4>
        curr_track_index = 0;
    20e8:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
    20ec:	3f c1       	rjmp	.+638    	; 0x236c <do_track_edit+0x406>
        if (in_stepwrite_mode) {
    20ee:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    20f2:	81 11       	cpse	r24, r1
          stop_track_stepwrite_mode();
    20f4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <stop_track_stepwrite_mode>
        start_track_run_mode();
    20f8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <start_track_run_mode>
    20fc:	b0 cf       	rjmp	.-160    	; 0x205e <do_track_edit+0xf8>
        clear_led(LED_DONE); // make sure DONE isn't on anymore
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
        set_bank_led((curr_patt >> 3) &
    2104:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2108:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    210c:	23 e0       	ldi	r18, 0x03	; 3
    210e:	96 95       	lsr	r25
    2110:	87 95       	ror	r24
    2112:	2a 95       	dec	r18
    2114:	e1 f7       	brne	.-8      	; 0x210e <do_track_edit+0x1a8>
    2116:	8f 70       	andi	r24, 0x0F	; 15
    2118:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
        if (curr_patt & TRACK_REST_FLAG)
    211c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2120:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    2124:	97 ff       	sbrs	r25, 7
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <do_track_edit+0x1ea>
          set_led(LED_REST);
    2128:	88 e0       	ldi	r24, 0x08	; 8
    212a:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
        if (curr_patt & TRACK_ACCENT_FLAG)
    212e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2132:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    2136:	96 ff       	sbrs	r25, 6
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <do_track_edit+0x1f2>
          set_led(LED_ACCENT);
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
        if (curr_patt & TRACK_SLIDE_FLAG)
    2140:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2144:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    2148:	95 ff       	sbrs	r25, 5
    214a:	0a c0       	rjmp	.+20     	; 0x2160 <do_track_edit+0x1fa>
          set_led(LED_SLIDE);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	a2 cf       	rjmp	.-188    	; 0x2094 <do_track_edit+0x12e>
          clear_led(LED_REST);
    2150:	88 e0       	ldi	r24, 0x08	; 8
    2152:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    2156:	eb cf       	rjmp	.-42     	; 0x212e <do_track_edit+0x1c8>
          clear_led(LED_ACCENT);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    215e:	f0 cf       	rjmp	.-32     	; 0x2140 <do_track_edit+0x1da>
          clear_led(LED_SLIDE);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    2166:	98 cf       	rjmp	.-208    	; 0x2098 <do_track_edit+0x132>
    if ((just_pressed(KEY_NEXT) || just_pressed(KEY_PREV)) && !in_run_mode) {
    2168:	83 e0       	ldi	r24, 0x03	; 3
    216a:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    216e:	81 11       	cpse	r24, r1
    2170:	99 cf       	rjmp	.-206    	; 0x20a4 <do_track_edit+0x13e>
    if (just_pressed(KEY_DONE)) {
    2172:	87 e1       	ldi	r24, 0x17	; 23
    2174:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2178:	88 23       	and	r24, r24
    217a:	01 f1       	breq	.+64     	; 0x21bc <do_track_edit+0x256>
      if (in_stepwrite_mode) {
    217c:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2180:	88 23       	and	r24, r24
    2182:	b1 f0       	breq	.+44     	; 0x21b0 <do_track_edit+0x24a>
        if (curr_track_index + 1 < TRACK_SIZE) {
    2184:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    2188:	8f 30       	cpi	r24, 0x0F	; 15
    218a:	48 f4       	brcc	.+18     	; 0x219e <do_track_edit+0x238>
          track_buff[curr_track_index + 1] = END_OF_TRACK;
    218c:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	e2 5b       	subi	r30, 0xB2	; 178
    2198:	fc 4f       	sbci	r31, 0xFC	; 252
    219a:	11 83       	std	Z+1, r17	; 0x01
    219c:	00 83       	st	Z, r16
        curr_patt = END_OF_TRACK; // cleans up LEDs
    219e:	f0 92 6f 03 	sts	0x036F, r15	; 0x80036f <curr_patt+0x1>
    21a2:	e0 92 6e 03 	sts	0x036E, r14	; 0x80036e <curr_patt>
        stop_track_stepwrite_mode();
    21a6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <stop_track_stepwrite_mode>
        clear_led(LED_DONE);
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
      write_track(track_bank, track_location);
    21b0:	60 91 72 03 	lds	r22, 0x0372	; 0x800372 <track_location>
    21b4:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <track_bank>
    21b8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <write_track>
    if (in_stepwrite_mode) {
    21bc:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    21c0:	88 23       	and	r24, r24
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <do_track_edit+0x260>
    21c4:	5e c1       	rjmp	.+700    	; 0x2482 <do_track_edit+0x51c>
      if (curr_patt != END_OF_TRACK) {
    21c6:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    21ca:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <do_track_edit+0x26e>
    21d2:	9a c0       	rjmp	.+308    	; 0x2308 <do_track_edit+0x3a2>
        if (just_pressed(KEY_REST)) {
    21d4:	84 e1       	ldi	r24, 0x14	; 20
    21d6:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    21da:	88 23       	and	r24, r24
    21dc:	a1 f0       	breq	.+40     	; 0x2206 <do_track_edit+0x2a0>
          curr_patt = (track_buff[curr_track_index] ^= TRACK_REST_FLAG);
    21de:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	e4 5b       	subi	r30, 0xB4	; 180
    21ea:	fc 4f       	sbci	r31, 0xFC	; 252
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	90 58       	subi	r25, 0x80	; 128
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    21fa:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
          all_rest = (curr_patt & TRACK_REST_FLAG) >> 8;
    21fe:	89 2f       	mov	r24, r25
    2200:	80 78       	andi	r24, 0x80	; 128
    2202:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <all_rest>
        if (just_pressed(KEY_ACCENT)) {
    2206:	85 e1       	ldi	r24, 0x15	; 21
    2208:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    220c:	88 23       	and	r24, r24
    220e:	a9 f0       	breq	.+42     	; 0x223a <do_track_edit+0x2d4>
          curr_patt = (track_buff[curr_track_index] ^= TRACK_ACCENT_FLAG);
    2210:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	e4 5b       	subi	r30, 0xB4	; 180
    221c:	fc 4f       	sbci	r31, 0xFC	; 252
    221e:	80 81       	ld	r24, Z
    2220:	91 81       	ldd	r25, Z+1	; 0x01
    2222:	20 e4       	ldi	r18, 0x40	; 64
    2224:	92 27       	eor	r25, r18
    2226:	91 83       	std	Z+1, r25	; 0x01
    2228:	80 83       	st	Z, r24
    222a:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    222e:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
          all_accent = (curr_patt & TRACK_ACCENT_FLAG) >> 8;
    2232:	89 2f       	mov	r24, r25
    2234:	80 74       	andi	r24, 0x40	; 64
    2236:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <all_accent>
        if (just_pressed(KEY_SLIDE)) {
    223a:	86 e1       	ldi	r24, 0x16	; 22
    223c:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2240:	88 23       	and	r24, r24
    2242:	a9 f0       	breq	.+42     	; 0x226e <do_track_edit+0x308>
          curr_patt = (track_buff[curr_track_index] ^= TRACK_SLIDE_FLAG);
    2244:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	e4 5b       	subi	r30, 0xB4	; 180
    2250:	fc 4f       	sbci	r31, 0xFC	; 252
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	20 e2       	ldi	r18, 0x20	; 32
    2258:	92 27       	eor	r25, r18
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    2262:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
          all_slide = (curr_patt & TRACK_SLIDE_FLAG) >> 8;
    2266:	89 2f       	mov	r24, r25
    2268:	80 72       	andi	r24, 0x20	; 32
    226a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <all_slide>
        if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    226e:	8f e0       	ldi	r24, 0x0F	; 15
    2270:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    2274:	88 23       	and	r24, r24
    2276:	09 f4       	brne	.+2      	; 0x227a <do_track_edit+0x314>
    2278:	ab c0       	rjmp	.+342    	; 0x23d0 <do_track_edit+0x46a>
          uint16_t notekey = get_lowest_notekey_pressed();
    227a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <get_lowest_notekey_pressed>
    227e:	c8 2f       	mov	r28, r24
    2280:	88 0f       	add	r24, r24
    2282:	dd 0b       	sbc	r29, r29
          if (just_pressed(KEY_UP) || just_pressed(KEY_DOWN)) {
    2284:	8f e0       	ldi	r24, 0x0F	; 15
    2286:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    228a:	81 11       	cpse	r24, r1
    228c:	05 c0       	rjmp	.+10     	; 0x2298 <do_track_edit+0x332>
    228e:	8e e0       	ldi	r24, 0x0E	; 14
    2290:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2294:	88 23       	and	r24, r24
    2296:	51 f0       	breq	.+20     	; 0x22ac <do_track_edit+0x346>
            clear_blinking_leds();
    2298:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
            clear_notekey_leds();
    229c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
            clear_led(LED_UP);
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
            clear_led(LED_DOWN);
    22a6:	84 e0       	ldi	r24, 0x04	; 4
    22a8:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
          if (is_pressed(KEY_UP)) {
    22ac:	8f e0       	ldi	r24, 0x0F	; 15
    22ae:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    22b2:	88 23       	and	r24, r24
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <do_track_edit+0x352>
    22b6:	9f c0       	rjmp	.+318    	; 0x23f6 <do_track_edit+0x490>
            set_led(LED_UP);
    22b8:	83 e0       	ldi	r24, 0x03	; 3
    22ba:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
            if (notekey != -1) {
    22be:	cf 3f       	cpi	r28, 0xFF	; 255
    22c0:	dc 07       	cpc	r29, r28
    22c2:	c1 f0       	breq	.+48     	; 0x22f4 <do_track_edit+0x38e>
              clear_blinking_leds();
    22c4:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
              curr_patt = (curr_patt & 0xE0FF) | (notekey << 8);
    22c8:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <curr_patt>
    22cc:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <curr_patt+0x1>
    22d0:	30 7e       	andi	r19, 0xE0	; 224
    22d2:	dc 2f       	mov	r29, r28
    22d4:	cc 27       	eor	r28, r28
    22d6:	c2 2b       	or	r28, r18
    22d8:	d3 2b       	or	r29, r19
    22da:	d0 93 6f 03 	sts	0x036F, r29	; 0x80036f <curr_patt+0x1>
    22de:	c0 93 6e 03 	sts	0x036E, r28	; 0x80036e <curr_patt>
              track_buff[curr_track_index] = curr_patt;
    22e2:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	e4 5b       	subi	r30, 0xB4	; 180
    22ee:	fc 4f       	sbci	r31, 0xFC	; 252
    22f0:	d1 83       	std	Z+1, r29	; 0x01
    22f2:	c0 83       	st	Z, r28
            curr_pitch_shift = get_pitchshift_from_patt(curr_patt);
    22f4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    22f8:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    22fc:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <get_pitchshift_from_patt>
    2300:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
            set_notekey_led_blink(OCTAVE + curr_pitch_shift);
    2304:	0e 94 1a 0b 	call	0x1634	; 0x1634 <set_notekey_led_blink>
      if (!(is_pressed(KEY_UP) || is_pressed(KEY_DOWN))) {
    2308:	8f e0       	ldi	r24, 0x0F	; 15
    230a:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    230e:	81 11       	cpse	r24, r1
    2310:	b8 c0       	rjmp	.+368    	; 0x2482 <do_track_edit+0x51c>
    2312:	8e e0       	ldi	r24, 0x0E	; 14
    2314:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    2318:	81 11       	cpse	r24, r1
    231a:	b3 c0       	rjmp	.+358    	; 0x2482 <do_track_edit+0x51c>
        i = get_lowest_numkey_just_pressed();
    231c:	0e 94 90 09 	call	0x1320	; 0x1320 <get_lowest_numkey_just_pressed>
    2320:	c8 2f       	mov	r28, r24
        if ((i != 0) || has_bank_knob_changed()) {
    2322:	88 23       	and	r24, r24
    2324:	09 f4       	brne	.+2      	; 0x2328 <do_track_edit+0x3c2>
    2326:	9e c0       	rjmp	.+316    	; 0x2464 <do_track_edit+0x4fe>
          clear_numkey_leds();
    2328:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <clear_numkey_leds>
          clear_bank_leds();
    232c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
          if (i == 0) {
    2330:	cc 23       	and	r28, r28
    2332:	09 f4       	brne	.+2      	; 0x2336 <do_track_edit+0x3d0>
    2334:	b7 c0       	rjmp	.+366    	; 0x24a4 <do_track_edit+0x53e>
            i--;
    2336:	c1 50       	subi	r28, 0x01	; 1
    2338:	be c0       	rjmp	.+380    	; 0x24b6 <do_track_edit+0x550>
            curr_track_index++;
    233a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    233e:	8f 5f       	subi	r24, 0xFF	; 255
            curr_track_index--;
    2340:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <curr_track_index>
    2344:	13 c0       	rjmp	.+38     	; 0x236c <do_track_edit+0x406>
          if (curr_track_index == 0) {
    2346:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    234a:	81 11       	cpse	r24, r1
    234c:	35 c0       	rjmp	.+106    	; 0x23b8 <do_track_edit+0x452>
            while ((curr_track_index + 1 < TRACK_SIZE) &&
    234e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    2352:	8f 30       	cpi	r24, 0x0F	; 15
    2354:	58 f4       	brcc	.+22     	; 0x236c <do_track_edit+0x406>
                   (track_buff[curr_track_index] != END_OF_TRACK))
    2356:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	e4 5b       	subi	r30, 0xB4	; 180
    2362:	fc 4f       	sbci	r31, 0xFC	; 252
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
            while ((curr_track_index + 1 < TRACK_SIZE) &&
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	01 f5       	brne	.+64     	; 0x23ac <do_track_edit+0x446>
      curr_patt = track_buff[curr_track_index];
    236c:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	e4 5b       	subi	r30, 0xB4	; 180
    2378:	fc 4f       	sbci	r31, 0xFC	; 252
    237a:	80 81       	ld	r24, Z
    237c:	91 81       	ldd	r25, Z+1	; 0x01
    237e:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    2382:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
      play_loaded_pattern = FALSE;
    2386:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
      if (curr_patt != END_OF_TRACK) {
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	09 f4       	brne	.+2      	; 0x2390 <do_track_edit+0x42a>
    238e:	f1 ce       	rjmp	.-542    	; 0x2172 <do_track_edit+0x20c>
        curr_pitch_shift = load_curr_patt();
    2390:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <load_curr_patt>
    2394:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
        curr_pattern_index = 0;
    2398:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
        while (note_counter & 0x1)
    239c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
    23a0:	80 fd       	sbrc	r24, 0
    23a2:	fc cf       	rjmp	.-8      	; 0x239c <do_track_edit+0x436>
        play_loaded_pattern = TRUE;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <play_loaded_pattern>
    23aa:	e3 ce       	rjmp	.-570    	; 0x2172 <do_track_edit+0x20c>
              curr_track_index++;
    23ac:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    23b0:	8f 5f       	subi	r24, 0xFF	; 255
    23b2:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <curr_track_index>
    23b6:	cb cf       	rjmp	.-106    	; 0x234e <do_track_edit+0x3e8>
            curr_track_index--;
    23b8:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <curr_track_index>
    23bc:	81 50       	subi	r24, 0x01	; 1
    23be:	c0 cf       	rjmp	.-128    	; 0x2340 <do_track_edit+0x3da>
      } else if (just_pressed(KEY_NEXT)) {
    23c0:	88 e0       	ldi	r24, 0x08	; 8
    23c2:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    23c6:	88 23       	and	r24, r24
    23c8:	89 f2       	breq	.-94     	; 0x236c <do_track_edit+0x406>
        start_track_stepwrite_mode();
    23ca:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <start_track_stepwrite_mode>
    23ce:	8c ce       	rjmp	.-744    	; 0x20e8 <do_track_edit+0x182>
        if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    23d0:	8e e0       	ldi	r24, 0x0E	; 14
    23d2:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    23d6:	81 11       	cpse	r24, r1
    23d8:	50 cf       	rjmp	.-352    	; 0x227a <do_track_edit+0x314>
          if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    23da:	8f e0       	ldi	r24, 0x0F	; 15
    23dc:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    23e0:	88 23       	and	r24, r24
    23e2:	d1 f1       	breq	.+116    	; 0x2458 <do_track_edit+0x4f2>
            clear_led(LED_UP);
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
            clear_led(LED_DOWN);
    23ea:	84 e0       	ldi	r24, 0x04	; 4
    23ec:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
            clear_blinking_leds();
    23f0:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
    23f4:	89 cf       	rjmp	.-238    	; 0x2308 <do_track_edit+0x3a2>
          } else if (is_pressed(KEY_DOWN)) {
    23f6:	8e e0       	ldi	r24, 0x0E	; 14
    23f8:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    23fc:	88 23       	and	r24, r24
    23fe:	09 f4       	brne	.+2      	; 0x2402 <do_track_edit+0x49c>
    2400:	83 cf       	rjmp	.-250    	; 0x2308 <do_track_edit+0x3a2>
            set_led(LED_DOWN);
    2402:	84 e0       	ldi	r24, 0x04	; 4
    2404:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
            if (notekey != -1) {
    2408:	cf 3f       	cpi	r28, 0xFF	; 255
    240a:	dc 07       	cpc	r29, r28
    240c:	d9 f0       	breq	.+54     	; 0x2444 <do_track_edit+0x4de>
              clear_blinking_leds();
    240e:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
                  (curr_patt & 0xE0FF) | (((notekey - OCTAVE) & 0x1F) << 8);
    2412:	2c 97       	sbiw	r28, 0x0c	; 12
    2414:	dc 2f       	mov	r29, r28
    2416:	cc 27       	eor	r28, r28
    2418:	cc 27       	eor	r28, r28
    241a:	df 71       	andi	r29, 0x1F	; 31
    241c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2420:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    2424:	90 7e       	andi	r25, 0xE0	; 224
    2426:	c8 2b       	or	r28, r24
    2428:	d9 2b       	or	r29, r25
              curr_patt =
    242a:	d0 93 6f 03 	sts	0x036F, r29	; 0x80036f <curr_patt+0x1>
    242e:	c0 93 6e 03 	sts	0x036E, r28	; 0x80036e <curr_patt>
              track_buff[curr_track_index] = curr_patt;
    2432:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ee 0f       	add	r30, r30
    243a:	ff 1f       	adc	r31, r31
    243c:	e4 5b       	subi	r30, 0xB4	; 180
    243e:	fc 4f       	sbci	r31, 0xFC	; 252
    2440:	d1 83       	std	Z+1, r29	; 0x01
    2442:	c0 83       	st	Z, r28
            curr_pitch_shift = get_pitchshift_from_patt(curr_patt);
    2444:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2448:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    244c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <get_pitchshift_from_patt>
    2450:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
            set_notekey_led_blink(OCTAVE + curr_pitch_shift);
    2454:	84 5f       	subi	r24, 0xF4	; 244
    2456:	56 cf       	rjmp	.-340    	; 0x2304 <do_track_edit+0x39e>
          if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    2458:	8e e0       	ldi	r24, 0x0E	; 14
    245a:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    245e:	81 11       	cpse	r24, r1
    2460:	c1 cf       	rjmp	.-126    	; 0x23e4 <do_track_edit+0x47e>
    2462:	52 cf       	rjmp	.-348    	; 0x2308 <do_track_edit+0x3a2>
        if ((i != 0) || has_bank_knob_changed()) {
    2464:	0e 94 a6 09 	call	0x134c	; 0x134c <has_bank_knob_changed>
    2468:	81 11       	cpse	r24, r1
    246a:	5e cf       	rjmp	.-324    	; 0x2328 <do_track_edit+0x3c2>
        display_curr_pitch_shift_ud();
    246c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <display_curr_pitch_shift_ud>
        set_single_numkey_led((curr_patt & 0x7) + 1);
    2470:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2474:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    2478:	87 70       	andi	r24, 0x07	; 7
    247a:	99 27       	eor	r25, r25
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <set_single_numkey_led>
    if (in_run_mode) {
    2482:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <in_run_mode>
    2486:	88 23       	and	r24, r24
    2488:	09 f4       	brne	.+2      	; 0x248c <do_track_edit+0x526>
    248a:	97 cd       	rjmp	.-1234   	; 0x1fba <do_track_edit+0x54>
      display_curr_pitch_shift_ud();
    248c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <display_curr_pitch_shift_ud>
      set_single_numkey_led((curr_patt & 0x7) + 1);
    2490:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    2494:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    2498:	87 70       	andi	r24, 0x07	; 7
    249a:	99 27       	eor	r25, r25
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <set_single_numkey_led>
    24a2:	8b cd       	rjmp	.-1258   	; 0x1fba <do_track_edit+0x54>
            if (curr_patt == END_OF_TRACK)
    24a4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <curr_patt>
    24a8:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <curr_patt+0x1>
    24ac:	8f 3f       	cpi	r24, 0xFF	; 255
    24ae:	98 07       	cpc	r25, r24
    24b0:	11 f0       	breq	.+4      	; 0x24b6 <do_track_edit+0x550>
              i = curr_patt & 0x7;
    24b2:	c8 2f       	mov	r28, r24
    24b4:	c7 70       	andi	r28, 0x07	; 7
          play_loaded_pattern = FALSE;
    24b6:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
          note_off(0);
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
          curr_patt = (bank << 3) | i;
    24c0:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    24c4:	98 e0       	ldi	r25, 0x08	; 8
    24c6:	89 9f       	mul	r24, r25
    24c8:	90 01       	movw	r18, r0
    24ca:	11 24       	eor	r1, r1
    24cc:	2c 2b       	or	r18, r28
    24ce:	30 93 6f 03 	sts	0x036F, r19	; 0x80036f <curr_patt+0x1>
    24d2:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <curr_patt>
          track_buff[curr_track_index] = curr_patt;
    24d6:	e0 91 73 03 	lds	r30, 0x0373	; 0x800373 <curr_track_index>
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	ee 0f       	add	r30, r30
    24de:	ff 1f       	adc	r31, r31
    24e0:	e4 5b       	subi	r30, 0xB4	; 180
    24e2:	fc 4f       	sbci	r31, 0xFC	; 252
    24e4:	31 83       	std	Z+1, r19	; 0x01
    24e6:	20 83       	st	Z, r18
          load_pattern(bank, i);
    24e8:	6c 2f       	mov	r22, r28
    24ea:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
          curr_pattern_index = 0;
    24ee:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
          all_rest = all_accent = all_slide = FALSE;
    24f2:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <all_slide>
    24f6:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <all_accent>
    24fa:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <all_rest>
          curr_pitch_shift = 0;
    24fe:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <curr_pitch_shift>
          play_loaded_pattern = TRUE;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <play_loaded_pattern>
    2508:	b1 cf       	rjmp	.-158    	; 0x246c <do_track_edit+0x506>

0000250a <load_pattern>:
    }

  } // while loop
}

void load_pattern(uint8_t bank, uint8_t patt_location) {
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	d8 2f       	mov	r29, r24
    2514:	c6 2f       	mov	r28, r22
  uint16_t pattern_addr;
  uint8_t i;

  clock_leds();
    2516:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clock_leds>

  pattern_addr = PATTERN_MEM + bank * BANK_SIZE + patt_location * PATT_SIZE;
    251a:	28 e0       	ldi	r18, 0x08	; 8
    251c:	d2 9f       	mul	r29, r18
    251e:	c0 01       	movw	r24, r0
    2520:	11 24       	eor	r1, r1
    2522:	c8 0f       	add	r28, r24
    2524:	d9 2f       	mov	r29, r25
    2526:	d1 1d       	adc	r29, r1
    2528:	84 e0       	ldi	r24, 0x04	; 4
    252a:	cc 0f       	add	r28, r28
    252c:	dd 1f       	adc	r29, r29
    252e:	8a 95       	dec	r24
    2530:	e1 f7       	brne	.-8      	; 0x252a <load_pattern+0x20>
    2532:	10 e0       	ldi	r17, 0x00	; 0
    2534:	00 e0       	ldi	r16, 0x00	; 0
  putnum_uh(pattern_addr);
  putstring("\n\r");
  */

  for (i = 0; i < PATT_SIZE; i++) {
    pattern_buff[i] = spieeprom_read(pattern_addr + i);
    2536:	ce 01       	movw	r24, r28
    2538:	80 0f       	add	r24, r16
    253a:	91 1f       	adc	r25, r17
    253c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <spieeprom_read>
    2540:	f8 01       	movw	r30, r16
    2542:	e7 58       	subi	r30, 0x87	; 135
    2544:	fc 4f       	sbci	r31, 0xFC	; 252
    2546:	80 83       	st	Z, r24
    2548:	0f 5f       	subi	r16, 0xFF	; 255
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
  for (i = 0; i < PATT_SIZE; i++) {
    254c:	00 31       	cpi	r16, 0x10	; 16
    254e:	11 05       	cpc	r17, r1
    2550:	91 f7       	brne	.-28     	; 0x2536 <load_pattern+0x2c>
    // putstring(" 0x"); putnum_uh(pattern_buff[i]);
  }
  // putstring("\n\r");

  dirtyflag = 0;
    2552:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <dirtyflag>
  clear_led_blink(LED_DONE);
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	0e 94 e7 09 	call	0x13ce	; 0x13ce <clear_led_blink>
  clock_leds();
}
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
  clock_leds();
    2564:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <clock_leds>

00002568 <write_pattern>:

void write_pattern(uint8_t bank, uint8_t patt_location) {
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	d8 2f       	mov	r29, r24
    2572:	c6 2f       	mov	r28, r22
  uint16_t pattern_addr;
  uint8_t i;

  clock_leds();
    2574:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clock_leds>

  pattern_addr = PATTERN_MEM + bank * BANK_SIZE + patt_location * PATT_SIZE;
    2578:	28 e0       	ldi	r18, 0x08	; 8
    257a:	d2 9f       	mul	r29, r18
    257c:	c0 01       	movw	r24, r0
    257e:	11 24       	eor	r1, r1
    2580:	c8 0f       	add	r28, r24
    2582:	d9 2f       	mov	r29, r25
    2584:	d1 1d       	adc	r29, r1
    2586:	84 e0       	ldi	r24, 0x04	; 4
    2588:	cc 0f       	add	r28, r28
    258a:	dd 1f       	adc	r29, r29
    258c:	8a 95       	dec	r24
    258e:	e1 f7       	brne	.-8      	; 0x2588 <write_pattern+0x20>
    2590:	10 e0       	ldi	r17, 0x00	; 0
    2592:	00 e0       	ldi	r16, 0x00	; 0
  putstring("\n\r");
  */

  // modify the buffer with new data
  for (i = 0; i < PATT_SIZE; i++) {
    spieeprom_write(pattern_buff[i], pattern_addr + i);
    2594:	f8 01       	movw	r30, r16
    2596:	e7 58       	subi	r30, 0x87	; 135
    2598:	fc 4f       	sbci	r31, 0xFC	; 252
    259a:	80 81       	ld	r24, Z
    259c:	be 01       	movw	r22, r28
    259e:	60 0f       	add	r22, r16
    25a0:	71 1f       	adc	r23, r17
    25a2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <spieeprom_write>
    25a6:	0f 5f       	subi	r16, 0xFF	; 255
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
  for (i = 0; i < PATT_SIZE; i++) {
    25aa:	00 31       	cpi	r16, 0x10	; 16
    25ac:	11 05       	cpc	r17, r1
    25ae:	91 f7       	brne	.-28     	; 0x2594 <write_pattern+0x2c>
  }
  putstring("\n\r");
  */

  clock_leds();
}
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	0f 91       	pop	r16
  clock_leds();
    25b8:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <clock_leds>

000025bc <start_runwrite_mode>:

void start_runwrite_mode() {
  // putstring("start runwrite\n\r");
  curr_pattern_index = 0;
    25bc:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
  in_runwrite_mode = 1;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <in_runwrite_mode>
  set_led(LED_RS);
    25c6:	81 e2       	ldi	r24, 0x21	; 33
    25c8:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
  note_off(0);
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
  if (sync == INTERNAL_SYNC)
    25d2:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    25d6:	81 11       	cpse	r24, r1
    25d8:	04 c0       	rjmp	.+8      	; 0x25e2 <start_runwrite_mode+0x26>
    while (note_counter & 0x1)
    25da:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <note_counter>
    25de:	80 fd       	sbrc	r24, 0
    25e0:	fc cf       	rjmp	.-8      	; 0x25da <start_runwrite_mode+0x1e>
      ; // wait for the tempo interrupt to be ready for a note-on
  play_loaded_pattern = 1;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <play_loaded_pattern>
  playing = TRUE;
    25e8:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <playing>
  midi_putchar(MIDI_START);
    25ec:	8a ef       	ldi	r24, 0xFA	; 250
    25ee:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <midi_putchar>

000025f2 <stop_runwrite_mode>:
}

void stop_runwrite_mode() {
  // putstring("stop runwrite\n\r");
  play_loaded_pattern = 0;
    25f2:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
  clear_key_leds();
    25f6:	0e 94 91 0a 	call	0x1522	; 0x1522 <clear_key_leds>
  clear_bank_leds();
    25fa:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
  clear_blinking_leds();
    25fe:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
  set_bank_led(bank);
    2602:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2606:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
  in_runwrite_mode = 0;
    260a:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <in_runwrite_mode>
  clear_led(LED_RS);
    260e:	81 e2       	ldi	r24, 0x21	; 33
    2610:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  note_off(0);
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
  playing = FALSE;
    261a:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <playing>
  midi_putchar(MIDI_STOP);
    261e:	8c ef       	ldi	r24, 0xFC	; 252
    2620:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <midi_putchar>

00002624 <start_stepwrite_mode>:
}

void start_stepwrite_mode() {
  // putstring("start stepwrite\n\r");
  in_stepwrite_mode = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <in_stepwrite_mode>
  set_led(LED_NEXT);
    262a:	84 e2       	ldi	r24, 0x24	; 36
    262c:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
  clear_bank_leds();
    2630:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
  set_bank_led(0);
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
  note_off(0);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <note_off>

00002640 <stop_stepwrite_mode>:
}

void stop_stepwrite_mode() {
  // putstring("stop stepwrite\n\r");
  in_stepwrite_mode = 0;
    2640:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <in_stepwrite_mode>
  clear_led(LED_NEXT);
    2644:	84 e2       	ldi	r24, 0x24	; 36
    2646:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  dirtyflag = 0;
    264a:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <dirtyflag>
  clear_led(LED_DONE);
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
  clear_blinking_leds();
    2654:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
  clear_key_leds();
    2658:	0e 94 91 0a 	call	0x1522	; 0x1522 <clear_key_leds>
  clear_bank_leds();
    265c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
  set_bank_led(bank);
    2660:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2664:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
  note_off(0);
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <note_off>

0000266e <do_pattern_edit>:
void do_pattern_edit(void) {
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
  curr_function = function;
    2680:	e0 90 c1 02 	lds	r14, 0x02C1	; 0x8002c1 <function>
  patt_location = 0;
    2684:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <patt_location>
  in_stepwrite_mode = 0;
    2688:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <in_stepwrite_mode>
  in_runwrite_mode = 0;
    268c:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <in_runwrite_mode>
  play_loaded_pattern = 0;
    2690:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
  curr_pattern_index = 0;
    2694:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
  curr_note = 0;
    2698:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <curr_note>
  if (sync == INTERNAL_SYNC)
    269c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    26a0:	81 11       	cpse	r24, r1
    26a2:	36 c0       	rjmp	.+108    	; 0x2710 <do_pattern_edit+0xa2>
    turn_on_tempo();
    26a4:	0e 94 a8 00 	call	0x150	; 0x150 <turn_on_tempo>
  read_switches();
    26a8:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
  patt_bank = bank;
    26ac:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    26b0:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <patt_bank>
  load_pattern(patt_bank, patt_location);
    26b4:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <patt_location>
    26b8:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
  clear_all_leds();
    26bc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
  set_bank_led(bank);
    26c0:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    26c4:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
      dirtyflag = 1; // clearly, changed
    26c8:	ff 24       	eor	r15, r15
    26ca:	f3 94       	inc	r15
          pattern_buff[curr_pattern_index + 1] = 0xff;
    26cc:	dd 24       	eor	r13, r13
    26ce:	da 94       	dec	r13
        pattern_buff[index] ^= 1 << 6;
    26d0:	80 e4       	ldi	r24, 0x40	; 64
    26d2:	c8 2e       	mov	r12, r24
    read_switches();
    26d4:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    if (function != curr_function) {
    26d8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    26dc:	8e 15       	cp	r24, r14
    26de:	e9 f0       	breq	.+58     	; 0x271a <do_pattern_edit+0xac>
      turn_off_tempo();
    26e0:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>
      play_loaded_pattern = FALSE;
    26e4:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <play_loaded_pattern>
      note_off(0);
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      dinsync_stop();
    26ee:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <dinsync_stop>
      midi_stop();
    26f2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <midi_stop>
      clear_all_leds();
    26f6:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
      clock_leds();
    270c:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <clock_leds>
    turn_off_tempo();
    2710:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>
    dinsync_set_out();
    2714:	0e 94 fd 07 	call	0xffa	; 0xffa <dinsync_set_out>
    2718:	c7 cf       	rjmp	.-114    	; 0x26a8 <do_pattern_edit+0x3a>
    if (patt_bank != bank) {
    271a:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <patt_bank>
    271e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2722:	98 17       	cp	r25, r24
    2724:	c1 f0       	breq	.+48     	; 0x2756 <do_pattern_edit+0xe8>
      if (in_runwrite_mode)
    2726:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    272a:	81 11       	cpse	r24, r1
        stop_runwrite_mode();
    272c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <stop_runwrite_mode>
      if (in_stepwrite_mode)
    2730:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2734:	81 11       	cpse	r24, r1
        stop_stepwrite_mode();
    2736:	0e 94 20 13 	call	0x2640	; 0x2640 <stop_stepwrite_mode>
      patt_bank = bank;
    273a:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    273e:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <patt_bank>
      load_pattern(patt_bank, patt_location);
    2742:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <patt_location>
    2746:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
      clear_bank_leds();
    274a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
      set_bank_led(bank);
    274e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2752:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
    if (!(in_runwrite_mode || in_stepwrite_mode)) {
    2756:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    275a:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <in_stepwrite_mode>
    275e:	89 2b       	or	r24, r25
    2760:	b9 f4       	brne	.+46     	; 0x2790 <do_pattern_edit+0x122>
      set_numkey_led(patt_location + 1);
    2762:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <patt_location>
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
      i = get_lowest_numkey_pressed();
    276c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <get_lowest_numkey_pressed>
    2770:	c8 2f       	mov	r28, r24
      if (i != 0) {
    2772:	88 23       	and	r24, r24
    2774:	69 f0       	breq	.+26     	; 0x2790 <do_pattern_edit+0x122>
        clear_notekey_leds();
    2776:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
        set_numkey_led(i);
    277a:	8c 2f       	mov	r24, r28
    277c:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
        patt_location = i - 1;
    2780:	6f ef       	ldi	r22, 0xFF	; 255
    2782:	6c 0f       	add	r22, r28
    2784:	60 93 76 03 	sts	0x0376, r22	; 0x800376 <patt_location>
        load_pattern(patt_bank, patt_location);
    2788:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <patt_bank>
    278c:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
    if (just_pressed(KEY_CHAIN) && in_runwrite_mode) {
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2796:	88 23       	and	r24, r24
    2798:	89 f1       	breq	.+98     	; 0x27fc <do_pattern_edit+0x18e>
    279a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    279e:	88 23       	and	r24, r24
    27a0:	69 f1       	breq	.+90     	; 0x27fc <do_pattern_edit+0x18e>
      set_led(LED_CHAIN);
    27a2:	82 e2       	ldi	r24, 0x22	; 34
    27a4:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    27a8:	10 e0       	ldi	r17, 0x00	; 0
    27aa:	00 e0       	ldi	r16, 0x00	; 0
        pattern_buff[i] = random();
    27ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <random>
    27b0:	f8 01       	movw	r30, r16
    27b2:	e7 58       	subi	r30, 0x87	; 135
    27b4:	fc 4f       	sbci	r31, 0xFC	; 252
    27b6:	80 83       	st	Z, r24
    27b8:	0f 5f       	subi	r16, 0xFF	; 255
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
      for (i = 0; i < PATT_SIZE; i++) {
    27bc:	00 31       	cpi	r16, 0x10	; 16
    27be:	11 05       	cpc	r17, r1
    27c0:	a9 f7       	brne	.-22     	; 0x27ac <do_pattern_edit+0x13e>
      dirtyflag = 1; // clearly, changed
    27c2:	f0 92 87 02 	sts	0x0287, r15	; 0x800287 <dirtyflag>
    if (playing && (sync == MIDI_SYNC) && (midisync_clocked > 0)) {
    27c6:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <playing>
    27ca:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    27ce:	99 23       	and	r25, r25
    27d0:	11 f1       	breq	.+68     	; 0x2816 <do_pattern_edit+0x1a8>
    27d2:	82 30       	cpi	r24, 0x02	; 2
    27d4:	51 f5       	brne	.+84     	; 0x282a <do_pattern_edit+0x1bc>
    27d6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <midisync_clocked>
    27da:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <midisync_clocked+0x1>
    27de:	18 16       	cp	r1, r24
    27e0:	19 06       	cpc	r1, r25
    27e2:	dc f4       	brge	.+54     	; 0x281a <do_pattern_edit+0x1ac>
      midisync_clocked -= MIDISYNC_PPQ / 8;
    27e4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <midisync_clocked>
    27e8:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <midisync_clocked+0x1>
    27ec:	03 97       	sbiw	r24, 0x03	; 3
    27ee:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <midisync_clocked+0x1>
    27f2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <midisync_clocked>
      do_tempo();
    27f6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <do_tempo>
      continue;
    27fa:	6c cf       	rjmp	.-296    	; 0x26d4 <do_pattern_edit+0x66>
    } else if (just_released(KEY_CHAIN) && in_runwrite_mode) {
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    2802:	88 23       	and	r24, r24
    2804:	01 f3       	breq	.-64     	; 0x27c6 <do_pattern_edit+0x158>
    2806:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    280a:	88 23       	and	r24, r24
    280c:	e1 f2       	breq	.-72     	; 0x27c6 <do_pattern_edit+0x158>
      clear_led(LED_CHAIN);
    280e:	82 e2       	ldi	r24, 0x22	; 34
    2810:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    2814:	d8 cf       	rjmp	.-80     	; 0x27c6 <do_pattern_edit+0x158>
    if (sync == MIDI_SYNC) {
    2816:	82 30       	cpi	r24, 0x02	; 2
    2818:	41 f4       	brne	.+16     	; 0x282a <do_pattern_edit+0x1bc>
      midi_cmd = midi_recv_cmd(); // returns 0 if no midi commands waiting
    281a:	0e 94 10 07 	call	0xe20	; 0xe20 <midi_recv_cmd>
    281e:	b8 2e       	mov	r11, r24
      if (midi_cmd != 0)
    2820:	88 23       	and	r24, r24
    2822:	19 f0       	breq	.+6      	; 0x282a <do_pattern_edit+0x1bc>
        putnum_uh(midi_cmd);
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 1b 05 	call	0xa36	; 0xa36 <putnum_uh>
    if (in_runwrite_mode &&
    282a:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    282e:	88 23       	and	r24, r24
    2830:	09 f4       	brne	.+2      	; 0x2834 <do_pattern_edit+0x1c6>
    2832:	44 c1       	rjmp	.+648    	; 0x2abc <do_pattern_edit+0x44e>
    2834:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2838:	88 23       	and	r24, r24
    283a:	69 f0       	breq	.+26     	; 0x2856 <do_pattern_edit+0x1e8>
        (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    283c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2840:	82 30       	cpi	r24, 0x02	; 2
    2842:	09 f0       	breq	.+2      	; 0x2846 <do_pattern_edit+0x1d8>
    2844:	3b c1       	rjmp	.+630    	; 0x2abc <do_pattern_edit+0x44e>
         ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)))) {
    2846:	8c ef       	ldi	r24, 0xFC	; 252
    2848:	b8 16       	cp	r11, r24
    284a:	51 f0       	breq	.+20     	; 0x2860 <do_pattern_edit+0x1f2>
                ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE)))) {
    284c:	86 e0       	ldi	r24, 0x06	; 6
    284e:	8b 0d       	add	r24, r11
               ((sync == MIDI_SYNC) &&
    2850:	82 30       	cpi	r24, 0x02	; 2
    2852:	40 f4       	brcc	.+16     	; 0x2864 <do_pattern_edit+0x1f6>
    2854:	3c c1       	rjmp	.+632    	; 0x2ace <do_pattern_edit+0x460>
        (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    285c:	88 23       	and	r24, r24
    285e:	71 f3       	breq	.-36     	; 0x283c <do_pattern_edit+0x1ce>
      stop_runwrite_mode();
    2860:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <stop_runwrite_mode>
    if (in_runwrite_mode || in_stepwrite_mode) {
    2864:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    2868:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <in_stepwrite_mode>
    286c:	89 2b       	or	r24, r25
    286e:	09 f4       	brne	.+2      	; 0x2872 <do_pattern_edit+0x204>
    2870:	f7 c0       	rjmp	.+494    	; 0x2a60 <do_pattern_edit+0x3f2>
      index = curr_pattern_index;
    2872:	00 91 74 03 	lds	r16, 0x0374	; 0x800374 <curr_pattern_index>
      curr_note = pattern_buff[index] & 0x3F;
    2876:	10 e0       	ldi	r17, 0x00	; 0
    2878:	07 58       	subi	r16, 0x87	; 135
    287a:	1c 4f       	sbci	r17, 0xFC	; 252
    287c:	f8 01       	movw	r30, r16
    287e:	c0 81       	ld	r28, Z
    2880:	cf 73       	andi	r28, 0x3F	; 63
      if (just_pressed(KEY_ACCENT) && (curr_note != 0x3F)) {
    2882:	85 e1       	ldi	r24, 0x15	; 21
    2884:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2888:	88 23       	and	r24, r24
    288a:	41 f0       	breq	.+16     	; 0x289c <do_pattern_edit+0x22e>
    288c:	cf 33       	cpi	r28, 0x3F	; 63
    288e:	31 f0       	breq	.+12     	; 0x289c <do_pattern_edit+0x22e>
        pattern_buff[index] ^= 1 << 6;
    2890:	f8 01       	movw	r30, r16
    2892:	80 81       	ld	r24, Z
    2894:	8c 25       	eor	r24, r12
    2896:	80 83       	st	Z, r24
        dirtyflag = 1; // clearly, changed
    2898:	f0 92 87 02 	sts	0x0287, r15	; 0x800287 <dirtyflag>
      if (just_pressed(KEY_SLIDE) && (curr_note != 0x3F)) {
    289c:	86 e1       	ldi	r24, 0x16	; 22
    289e:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    28a2:	88 23       	and	r24, r24
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <do_pattern_edit+0x23a>
    28a6:	35 c1       	rjmp	.+618    	; 0x2b12 <do_pattern_edit+0x4a4>
    28a8:	cf 33       	cpi	r28, 0x3F	; 63
    28aa:	09 f0       	breq	.+2      	; 0x28ae <do_pattern_edit+0x240>
    28ac:	18 c1       	rjmp	.+560    	; 0x2ade <do_pattern_edit+0x470>
        shift = 0;
    28ae:	d0 e0       	ldi	r29, 0x00	; 0
      if (just_pressed(KEY_REST)) {
    28b0:	84 e1       	ldi	r24, 0x14	; 20
    28b2:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    28b6:	81 11       	cpse	r24, r1
        curr_note = 0;
    28b8:	c0 e0       	ldi	r28, 0x00	; 0
      if (just_pressed(KEY_UP) && (curr_note != 0x3F) && (curr_note != 0))
    28ba:	8f e0       	ldi	r24, 0x0F	; 15
    28bc:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    28c0:	88 23       	and	r24, r24
    28c2:	39 f0       	breq	.+14     	; 0x28d2 <do_pattern_edit+0x264>
    28c4:	cf 33       	cpi	r28, 0x3F	; 63
    28c6:	29 f0       	breq	.+10     	; 0x28d2 <do_pattern_edit+0x264>
    28c8:	cc 23       	and	r28, r28
    28ca:	19 f0       	breq	.+6      	; 0x28d2 <do_pattern_edit+0x264>
        if (shift < 2)
    28cc:	d2 30       	cpi	r29, 0x02	; 2
    28ce:	0c f4       	brge	.+2      	; 0x28d2 <do_pattern_edit+0x264>
          curr_note += OCTAVE;
    28d0:	c4 5f       	subi	r28, 0xF4	; 244
      if (just_pressed(KEY_DOWN) && (curr_note != 0x3F) && (curr_note != 0))
    28d2:	8e e0       	ldi	r24, 0x0E	; 14
    28d4:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    28d8:	88 23       	and	r24, r24
    28da:	39 f0       	breq	.+14     	; 0x28ea <do_pattern_edit+0x27c>
    28dc:	cf 33       	cpi	r28, 0x3F	; 63
    28de:	29 f0       	breq	.+10     	; 0x28ea <do_pattern_edit+0x27c>
    28e0:	cc 23       	and	r28, r28
    28e2:	19 f0       	breq	.+6      	; 0x28ea <do_pattern_edit+0x27c>
        if (shift > -1)
    28e4:	df 3f       	cpi	r29, 0xFF	; 255
    28e6:	09 f0       	breq	.+2      	; 0x28ea <do_pattern_edit+0x27c>
          curr_note -= OCTAVE;
    28e8:	cc 50       	subi	r28, 0x0C	; 12
      if (just_pressed(KEY_C))
    28ea:	84 e0       	ldi	r24, 0x04	; 4
    28ec:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    28f0:	88 23       	and	r24, r24
    28f2:	29 f0       	breq	.+10     	; 0x28fe <do_pattern_edit+0x290>
        curr_note = C2 + shift * OCTAVE;
    28f4:	cc e0       	ldi	r28, 0x0C	; 12
    28f6:	dc 9f       	mul	r29, r28
    28f8:	c0 2d       	mov	r28, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	c9 5e       	subi	r28, 0xE9	; 233
      if (just_pressed(KEY_CS))
    28fe:	89 e0       	ldi	r24, 0x09	; 9
    2900:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2904:	88 23       	and	r24, r24
    2906:	29 f0       	breq	.+10     	; 0x2912 <do_pattern_edit+0x2a4>
        curr_note = C2_SHARP + shift * OCTAVE;
    2908:	cc e0       	ldi	r28, 0x0C	; 12
    290a:	dc 9f       	mul	r29, r28
    290c:	c0 2d       	mov	r28, r0
    290e:	11 24       	eor	r1, r1
    2910:	c8 5e       	subi	r28, 0xE8	; 232
      if (just_pressed(KEY_D))
    2912:	85 e0       	ldi	r24, 0x05	; 5
    2914:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2918:	88 23       	and	r24, r24
    291a:	29 f0       	breq	.+10     	; 0x2926 <do_pattern_edit+0x2b8>
        curr_note = D2 + shift * OCTAVE;
    291c:	cc e0       	ldi	r28, 0x0C	; 12
    291e:	dc 9f       	mul	r29, r28
    2920:	c0 2d       	mov	r28, r0
    2922:	11 24       	eor	r1, r1
    2924:	c7 5e       	subi	r28, 0xE7	; 231
      if (just_pressed(KEY_DS))
    2926:	8a e0       	ldi	r24, 0x0A	; 10
    2928:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    292c:	88 23       	and	r24, r24
    292e:	29 f0       	breq	.+10     	; 0x293a <do_pattern_edit+0x2cc>
        curr_note = D2_SHARP + shift * OCTAVE;
    2930:	cc e0       	ldi	r28, 0x0C	; 12
    2932:	dc 9f       	mul	r29, r28
    2934:	c0 2d       	mov	r28, r0
    2936:	11 24       	eor	r1, r1
    2938:	c6 5e       	subi	r28, 0xE6	; 230
      if (shift < 3) {
    293a:	d3 30       	cpi	r29, 0x03	; 3
    293c:	09 f4       	brne	.+2      	; 0x2940 <do_pattern_edit+0x2d2>
    293e:	5a c0       	rjmp	.+180    	; 0x29f4 <do_pattern_edit+0x386>
        if (just_pressed(KEY_E))
    2940:	86 e0       	ldi	r24, 0x06	; 6
    2942:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2946:	88 23       	and	r24, r24
    2948:	29 f0       	breq	.+10     	; 0x2954 <do_pattern_edit+0x2e6>
          curr_note = E2 + shift * OCTAVE;
    294a:	cc e0       	ldi	r28, 0x0C	; 12
    294c:	dc 9f       	mul	r29, r28
    294e:	c0 2d       	mov	r28, r0
    2950:	11 24       	eor	r1, r1
    2952:	c5 5e       	subi	r28, 0xE5	; 229
        if (just_pressed(KEY_F))
    2954:	87 e0       	ldi	r24, 0x07	; 7
    2956:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    295a:	88 23       	and	r24, r24
    295c:	29 f0       	breq	.+10     	; 0x2968 <do_pattern_edit+0x2fa>
          curr_note = F2 + shift * OCTAVE;
    295e:	cc e0       	ldi	r28, 0x0C	; 12
    2960:	dc 9f       	mul	r29, r28
    2962:	c0 2d       	mov	r28, r0
    2964:	11 24       	eor	r1, r1
    2966:	c4 5e       	subi	r28, 0xE4	; 228
        if (just_pressed(KEY_FS))
    2968:	8b e0       	ldi	r24, 0x0B	; 11
    296a:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    296e:	88 23       	and	r24, r24
    2970:	29 f0       	breq	.+10     	; 0x297c <do_pattern_edit+0x30e>
          curr_note = F2_SHARP + shift * OCTAVE;
    2972:	cc e0       	ldi	r28, 0x0C	; 12
    2974:	dc 9f       	mul	r29, r28
    2976:	c0 2d       	mov	r28, r0
    2978:	11 24       	eor	r1, r1
    297a:	c3 5e       	subi	r28, 0xE3	; 227
        if (just_pressed(KEY_G))
    297c:	81 e1       	ldi	r24, 0x11	; 17
    297e:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2982:	88 23       	and	r24, r24
    2984:	29 f0       	breq	.+10     	; 0x2990 <do_pattern_edit+0x322>
          curr_note = G2 + shift * OCTAVE;
    2986:	cc e0       	ldi	r28, 0x0C	; 12
    2988:	dc 9f       	mul	r29, r28
    298a:	c0 2d       	mov	r28, r0
    298c:	11 24       	eor	r1, r1
    298e:	c2 5e       	subi	r28, 0xE2	; 226
        if (just_pressed(KEY_GS))
    2990:	8c e0       	ldi	r24, 0x0C	; 12
    2992:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2996:	88 23       	and	r24, r24
    2998:	29 f0       	breq	.+10     	; 0x29a4 <do_pattern_edit+0x336>
          curr_note = G2_SHARP + shift * OCTAVE;
    299a:	cc e0       	ldi	r28, 0x0C	; 12
    299c:	dc 9f       	mul	r29, r28
    299e:	c0 2d       	mov	r28, r0
    29a0:	11 24       	eor	r1, r1
    29a2:	c1 5e       	subi	r28, 0xE1	; 225
        if (just_pressed(KEY_A))
    29a4:	82 e1       	ldi	r24, 0x12	; 18
    29a6:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    29aa:	88 23       	and	r24, r24
    29ac:	29 f0       	breq	.+10     	; 0x29b8 <do_pattern_edit+0x34a>
          curr_note = A3 + shift * OCTAVE;
    29ae:	cc e0       	ldi	r28, 0x0C	; 12
    29b0:	dc 9f       	mul	r29, r28
    29b2:	c0 2d       	mov	r28, r0
    29b4:	11 24       	eor	r1, r1
    29b6:	c0 5e       	subi	r28, 0xE0	; 224
        if (just_pressed(KEY_AS))
    29b8:	8d e0       	ldi	r24, 0x0D	; 13
    29ba:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    29be:	88 23       	and	r24, r24
    29c0:	29 f0       	breq	.+10     	; 0x29cc <do_pattern_edit+0x35e>
          curr_note = A3_SHARP + shift * OCTAVE;
    29c2:	cc e0       	ldi	r28, 0x0C	; 12
    29c4:	dc 9f       	mul	r29, r28
    29c6:	c0 2d       	mov	r28, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	cf 5d       	subi	r28, 0xDF	; 223
        if (just_pressed(KEY_B))
    29cc:	80 e1       	ldi	r24, 0x10	; 16
    29ce:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    29d2:	88 23       	and	r24, r24
    29d4:	29 f0       	breq	.+10     	; 0x29e0 <do_pattern_edit+0x372>
          curr_note = B3 + shift * OCTAVE;
    29d6:	cc e0       	ldi	r28, 0x0C	; 12
    29d8:	dc 9f       	mul	r29, r28
    29da:	c0 2d       	mov	r28, r0
    29dc:	11 24       	eor	r1, r1
    29de:	ce 5d       	subi	r28, 0xDE	; 222
        if (just_pressed(KEY_C2)) {
    29e0:	83 e1       	ldi	r24, 0x13	; 19
    29e2:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    29e6:	88 23       	and	r24, r24
    29e8:	29 f0       	breq	.+10     	; 0x29f4 <do_pattern_edit+0x386>
          curr_note = C3 + shift * OCTAVE;
    29ea:	cc e0       	ldi	r28, 0x0C	; 12
    29ec:	dc 9f       	mul	r29, r28
    29ee:	c0 2d       	mov	r28, r0
    29f0:	11 24       	eor	r1, r1
    29f2:	cd 5d       	subi	r28, 0xDD	; 221
      if ((pattern_buff[index] != 0xFF) || (curr_note == 0x3F))
    29f4:	f8 01       	movw	r30, r16
    29f6:	80 81       	ld	r24, Z
    29f8:	8f 3f       	cpi	r24, 0xFF	; 255
    29fa:	11 f4       	brne	.+4      	; 0x2a00 <do_pattern_edit+0x392>
    29fc:	cf 33       	cpi	r28, 0x3F	; 63
    29fe:	21 f4       	brne	.+8      	; 0x2a08 <do_pattern_edit+0x39a>
        curr_note |= (pattern_buff[index] & 0xC0);
    2a00:	f8 01       	movw	r30, r16
    2a02:	80 81       	ld	r24, Z
    2a04:	80 7c       	andi	r24, 0xC0	; 192
    2a06:	c8 2b       	or	r28, r24
      if (curr_note != pattern_buff[index]) {
    2a08:	f8 01       	movw	r30, r16
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8c 17       	cp	r24, r28
    2a0e:	d1 f0       	breq	.+52     	; 0x2a44 <do_pattern_edit+0x3d6>
        if (in_stepwrite_mode) {
    2a10:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2a14:	88 23       	and	r24, r24
    2a16:	31 f0       	breq	.+12     	; 0x2a24 <do_pattern_edit+0x3b6>
          note_off(0);
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
          delay_ms(1);
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
        pattern_buff[index] = curr_note;
    2a24:	f8 01       	movw	r30, r16
    2a26:	c0 83       	st	Z, r28
        dirtyflag = 1; // clearly, changed
    2a28:	f0 92 87 02 	sts	0x0287, r15	; 0x800287 <dirtyflag>
        if (in_stepwrite_mode) // restrike note
    2a2c:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2a30:	88 23       	and	r24, r24
    2a32:	41 f0       	breq	.+16     	; 0x2a44 <do_pattern_edit+0x3d6>
          note_on(curr_note & 0x3F,
    2a34:	c6 fb       	bst	r28, 6
    2a36:	44 27       	eor	r20, r20
    2a38:	40 f9       	bld	r20, 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	8c 2f       	mov	r24, r28
    2a3e:	8f 73       	andi	r24, 0x3F	; 63
    2a40:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
      if (curr_note != 0xFF) {
    2a44:	cf 3f       	cpi	r28, 0xFF	; 255
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <do_pattern_edit+0x3dc>
    2a48:	6b c0       	rjmp	.+214    	; 0x2b20 <do_pattern_edit+0x4b2>
        set_note_led(curr_note);
    2a4a:	8c 2f       	mov	r24, r28
    2a4c:	0e 94 bd 0b 	call	0x177a	; 0x177a <set_note_led>
        if (dirtyflag)
    2a50:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <dirtyflag>
    2a54:	88 23       	and	r24, r24
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <do_pattern_edit+0x3ec>
    2a58:	5f c0       	rjmp	.+190    	; 0x2b18 <do_pattern_edit+0x4aa>
          set_led_blink(LED_DONE);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <set_led_blink>
    if (just_pressed(KEY_NEXT) || just_pressed(KEY_PREV)) {
    2a60:	88 e0       	ldi	r24, 0x08	; 8
    2a62:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2a66:	88 23       	and	r24, r24
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <do_pattern_edit+0x3fe>
    2a6a:	66 c0       	rjmp	.+204    	; 0x2b38 <do_pattern_edit+0x4ca>
      if (in_stepwrite_mode) {
    2a6c:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2a70:	81 11       	cpse	r24, r1
    2a72:	89 c0       	rjmp	.+274    	; 0x2b86 <do_pattern_edit+0x518>
      } else if (just_pressed(KEY_NEXT) && !in_runwrite_mode) {
    2a74:	88 e0       	ldi	r24, 0x08	; 8
    2a76:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2a7a:	88 23       	and	r24, r24
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <do_pattern_edit+0x412>
    2a7e:	61 c0       	rjmp	.+194    	; 0x2b42 <do_pattern_edit+0x4d4>
    2a80:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <in_runwrite_mode>
    2a84:	81 11       	cpse	r24, r1
    2a86:	5d c0       	rjmp	.+186    	; 0x2b42 <do_pattern_edit+0x4d4>
        start_stepwrite_mode();
    2a88:	0e 94 12 13 	call	0x2624	; 0x2624 <start_stepwrite_mode>
        curr_pattern_index = 0;
    2a8c:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
        curr_note = pattern_buff[curr_pattern_index];
    2a90:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	e7 58       	subi	r30, 0x87	; 135
    2a98:	fc 4f       	sbci	r31, 0xFC	; 252
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
        if (curr_note != 0xFF) {
    2aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <do_pattern_edit+0x438>
    2aa4:	4e c0       	rjmp	.+156    	; 0x2b42 <do_pattern_edit+0x4d4>
          note_on(curr_note & 0x3F,
    2aa6:	86 fb       	bst	r24, 6
    2aa8:	44 27       	eor	r20, r20
    2aaa:	40 f9       	bld	r20, 0
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	d6 c0       	rjmp	.+428    	; 0x2c5c <do_pattern_edit+0x5ee>
    } else if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS)) ||
    2ab0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <do_pattern_edit+0x44c>
    2ab8:	d5 ce       	rjmp	.-598    	; 0x2864 <do_pattern_edit+0x1f6>
    2aba:	c8 ce       	rjmp	.-624    	; 0x284c <do_pattern_edit+0x1de>
    2abc:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2ac0:	81 11       	cpse	r24, r1
    2ac2:	f6 cf       	rjmp	.-20     	; 0x2ab0 <do_pattern_edit+0x442>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2aca:	88 23       	and	r24, r24
    2acc:	89 f3       	breq	.-30     	; 0x2ab0 <do_pattern_edit+0x442>
      if (in_stepwrite_mode)
    2ace:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2ad2:	81 11       	cpse	r24, r1
        stop_stepwrite_mode();
    2ad4:	0e 94 20 13 	call	0x2640	; 0x2640 <stop_stepwrite_mode>
      start_runwrite_mode();
    2ad8:	0e 94 de 12 	call	0x25bc	; 0x25bc <start_runwrite_mode>
    2adc:	c3 ce       	rjmp	.-634    	; 0x2864 <do_pattern_edit+0x1f6>
        pattern_buff[index] ^= 1 << 7;
    2ade:	f8 01       	movw	r30, r16
    2ae0:	80 81       	ld	r24, Z
    2ae2:	80 58       	subi	r24, 0x80	; 128
    2ae4:	80 83       	st	Z, r24
        dirtyflag = 1; // clearly, changed
    2ae6:	f0 92 87 02 	sts	0x0287, r15	; 0x800287 <dirtyflag>
      if ((curr_note == 0x3F) || (curr_note == 0))
    2aea:	cc 23       	and	r28, r28
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <do_pattern_edit+0x482>
    2aee:	df ce       	rjmp	.-578    	; 0x28ae <do_pattern_edit+0x240>
        shift = -1;
    2af0:	df ef       	ldi	r29, 0xFF	; 255
      else if (curr_note < C2)
    2af2:	c7 31       	cpi	r28, 0x17	; 23
    2af4:	08 f4       	brcc	.+2      	; 0x2af8 <do_pattern_edit+0x48a>
    2af6:	dc ce       	rjmp	.-584    	; 0x28b0 <do_pattern_edit+0x242>
      else if (curr_note <= C3)
    2af8:	c4 32       	cpi	r28, 0x24	; 36
    2afa:	08 f4       	brcc	.+2      	; 0x2afe <do_pattern_edit+0x490>
    2afc:	d8 ce       	rjmp	.-592    	; 0x28ae <do_pattern_edit+0x240>
        shift = 1;
    2afe:	d1 e0       	ldi	r29, 0x01	; 1
      else if (curr_note <= C4)
    2b00:	c0 33       	cpi	r28, 0x30	; 48
    2b02:	08 f4       	brcc	.+2      	; 0x2b06 <do_pattern_edit+0x498>
    2b04:	d5 ce       	rjmp	.-598    	; 0x28b0 <do_pattern_edit+0x242>
        shift = 3;
    2b06:	d3 e0       	ldi	r29, 0x03	; 3
      else if (curr_note <= C5)
    2b08:	cc 33       	cpi	r28, 0x3C	; 60
    2b0a:	08 f0       	brcs	.+2      	; 0x2b0e <do_pattern_edit+0x4a0>
    2b0c:	d1 ce       	rjmp	.-606    	; 0x28b0 <do_pattern_edit+0x242>
        shift = 2;
    2b0e:	d2 e0       	ldi	r29, 0x02	; 2
    2b10:	cf ce       	rjmp	.-610    	; 0x28b0 <do_pattern_edit+0x242>
      if ((curr_note == 0x3F) || (curr_note == 0))
    2b12:	cf 33       	cpi	r28, 0x3F	; 63
    2b14:	51 f7       	brne	.-44     	; 0x2aea <do_pattern_edit+0x47c>
    2b16:	cb ce       	rjmp	.-618    	; 0x28ae <do_pattern_edit+0x240>
          clear_led(LED_DONE);
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    2b1e:	a0 cf       	rjmp	.-192    	; 0x2a60 <do_pattern_edit+0x3f2>
        clear_note_leds();
    2b20:	0e 94 39 0b 	call	0x1672	; 0x1672 <clear_note_leds>
        clear_led_blink(LED_DONE);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	0e 94 e7 09 	call	0x13ce	; 0x13ce <clear_led_blink>
        clear_led_blink(LED_UP);
    2b2a:	83 e0       	ldi	r24, 0x03	; 3
    2b2c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <clear_led_blink>
        set_led(LED_DONE);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    2b36:	94 cf       	rjmp	.-216    	; 0x2a60 <do_pattern_edit+0x3f2>
    if (just_pressed(KEY_NEXT) || just_pressed(KEY_PREV)) {
    2b38:	83 e0       	ldi	r24, 0x03	; 3
    2b3a:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2b3e:	81 11       	cpse	r24, r1
    2b40:	95 cf       	rjmp	.-214    	; 0x2a6c <do_pattern_edit+0x3fe>
    if (just_pressed(KEY_DONE)) {
    2b42:	87 e1       	ldi	r24, 0x17	; 23
    2b44:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2b48:	88 23       	and	r24, r24
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <do_pattern_edit+0x4e0>
    2b4c:	c3 cd       	rjmp	.-1146   	; 0x26d4 <do_pattern_edit+0x66>
      if (in_stepwrite_mode) {
    2b4e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <in_stepwrite_mode>
    2b52:	88 23       	and	r24, r24
    2b54:	61 f0       	breq	.+24     	; 0x2b6e <do_pattern_edit+0x500>
        if (curr_pattern_index + 1 < PATT_SIZE)
    2b56:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2b5a:	8f 30       	cpi	r24, 0x0F	; 15
    2b5c:	30 f4       	brcc	.+12     	; 0x2b6a <do_pattern_edit+0x4fc>
          pattern_buff[curr_pattern_index + 1] = 0xff;
    2b5e:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	e6 58       	subi	r30, 0x86	; 134
    2b66:	fc 4f       	sbci	r31, 0xFC	; 252
    2b68:	d0 82       	st	Z, r13
        stop_stepwrite_mode();
    2b6a:	0e 94 20 13 	call	0x2640	; 0x2640 <stop_stepwrite_mode>
      write_pattern(bank, patt_location);
    2b6e:	60 91 76 03 	lds	r22, 0x0376	; 0x800376 <patt_location>
    2b72:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2b76:	0e 94 b4 12 	call	0x2568	; 0x2568 <write_pattern>
      dirtyflag = 0; // not dirty anymore, saved!
    2b7a:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <dirtyflag>
      clear_led_blink(LED_DONE);
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	0e 94 e7 09 	call	0x13ce	; 0x13ce <clear_led_blink>
    2b84:	a7 cd       	rjmp	.-1202   	; 0x26d4 <do_pattern_edit+0x66>
        note_off((curr_note >> 7) & 0x1);
    2b86:	c0 91 91 02 	lds	r28, 0x0291	; 0x800291 <curr_note>
    2b8a:	cc 1f       	adc	r28, r28
    2b8c:	cc 27       	eor	r28, r28
    2b8e:	cc 1f       	adc	r28, r28
    2b90:	8c 2f       	mov	r24, r28
    2b92:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
        delay_ms(1);
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	0e 94 1f 06 	call	0xc3e	; 0xc3e <delay_ms>
        if (just_pressed(KEY_NEXT)) {
    2b9c:	88 e0       	ldi	r24, 0x08	; 8
    2b9e:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2ba2:	88 23       	and	r24, r24
    2ba4:	89 f1       	breq	.+98     	; 0x2c08 <do_pattern_edit+0x59a>
          if (((curr_pattern_index + 1) >= PATT_SIZE) ||
    2ba6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2baa:	8f 30       	cpi	r24, 0x0F	; 15
    2bac:	40 f4       	brcc	.+16     	; 0x2bbe <do_pattern_edit+0x550>
              (pattern_buff[curr_pattern_index] == END_OF_PATTERN))
    2bae:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	e7 58       	subi	r30, 0x87	; 135
    2bb6:	fc 4f       	sbci	r31, 0xFC	; 252
    2bb8:	80 81       	ld	r24, Z
          if (((curr_pattern_index + 1) >= PATT_SIZE) ||
    2bba:	8f 3f       	cpi	r24, 0xFF	; 255
    2bbc:	f9 f4       	brne	.+62     	; 0x2bfc <do_pattern_edit+0x58e>
            curr_pattern_index = 0;
    2bbe:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
        clear_bank_leds();
    2bc2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
        set_bank_led(curr_pattern_index);
    2bc6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2bca:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
        curr_note = pattern_buff[curr_pattern_index];
    2bce:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	e7 58       	subi	r30, 0x87	; 135
    2bd6:	fc 4f       	sbci	r31, 0xFC	; 252
    2bd8:	80 81       	ld	r24, Z
    2bda:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <curr_note>
        if (curr_note == 0xFF) {
    2bde:	8f 3f       	cpi	r24, 0xFF	; 255
    2be0:	69 f5       	brne	.+90     	; 0x2c3c <do_pattern_edit+0x5ce>
          clear_led(LED_ACCENT);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
          clear_led(LED_SLIDE);
    2be8:	82 e0       	ldi	r24, 0x02	; 2
    2bea:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
          set_led(LED_DONE);
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
          clear_led_blink(LED_DONE);
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <clear_led_blink>
    2bfa:	a3 cf       	rjmp	.-186    	; 0x2b42 <do_pattern_edit+0x4d4>
            curr_pattern_index++;
    2bfc:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2c00:	8f 5f       	subi	r24, 0xFF	; 255
            curr_pattern_index--;
    2c02:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <curr_pattern_index>
    2c06:	dd cf       	rjmp	.-70     	; 0x2bc2 <do_pattern_edit+0x554>
          if (curr_pattern_index == 0) {
    2c08:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2c0c:	81 11       	cpse	r24, r1
    2c0e:	12 c0       	rjmp	.+36     	; 0x2c34 <do_pattern_edit+0x5c6>
            while ((curr_pattern_index < PATT_SIZE - 1) &&
    2c10:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2c14:	8f 30       	cpi	r24, 0x0F	; 15
    2c16:	a8 f6       	brcc	.-86     	; 0x2bc2 <do_pattern_edit+0x554>
                   (pattern_buff[curr_pattern_index] != END_OF_PATTERN))
    2c18:	e0 91 74 03 	lds	r30, 0x0374	; 0x800374 <curr_pattern_index>
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	e7 58       	subi	r30, 0x87	; 135
    2c20:	fc 4f       	sbci	r31, 0xFC	; 252
    2c22:	80 81       	ld	r24, Z
            while ((curr_pattern_index < PATT_SIZE - 1) &&
    2c24:	8f 3f       	cpi	r24, 0xFF	; 255
    2c26:	69 f2       	breq	.-102    	; 0x2bc2 <do_pattern_edit+0x554>
              curr_pattern_index++;
    2c28:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2c2c:	8f 5f       	subi	r24, 0xFF	; 255
    2c2e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <curr_pattern_index>
    2c32:	ee cf       	rjmp	.-36     	; 0x2c10 <do_pattern_edit+0x5a2>
            curr_pattern_index--;
    2c34:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <curr_pattern_index>
    2c38:	81 50       	subi	r24, 0x01	; 1
    2c3a:	e3 cf       	rjmp	.-58     	; 0x2c02 <do_pattern_edit+0x594>
          clear_led(LED_DONE);
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
          if (dirtyflag)
    2c42:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <dirtyflag>
    2c46:	88 23       	and	r24, r24
    2c48:	19 f0       	breq	.+6      	; 0x2c50 <do_pattern_edit+0x5e2>
            set_led_blink(LED_DONE);
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <set_led_blink>
                  (curr_note >> 6) & 0x1); // accent
    2c50:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
          note_on(curr_note & 0x3F,
    2c54:	86 fb       	bst	r24, 6
    2c56:	44 27       	eor	r20, r20
    2c58:	40 f9       	bld	r20, 0
    2c5a:	6c 2f       	mov	r22, r28
          note_on(curr_note & 0x3F,
    2c5c:	8f 73       	andi	r24, 0x3F	; 63
    2c5e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <note_on>
          set_note_led(curr_note);
    2c62:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <curr_note>
    2c66:	0e 94 bd 0b 	call	0x177a	; 0x177a <set_note_led>
    2c6a:	6b cf       	rjmp	.-298    	; 0x2b42 <do_pattern_edit+0x4d4>

00002c6c <chains_equiv>:
        clear_led(LED_REST);
    }
  }
}

uint8_t chains_equiv(volatile uint8_t *chain1, volatile uint8_t *chain2) {
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	ab 01       	movw	r20, r22
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t i;

  for (i = 0; i < MAX_CHAIN; i++) {
    if (chain1[i] != chain2[i])
    2c74:	f9 01       	movw	r30, r18
    2c76:	e8 0f       	add	r30, r24
    2c78:	f9 1f       	adc	r31, r25
    2c7a:	70 81       	ld	r23, Z
    2c7c:	da 01       	movw	r26, r20
    2c7e:	a8 0f       	add	r26, r24
    2c80:	b9 1f       	adc	r27, r25
    2c82:	6c 91       	ld	r22, X
    2c84:	76 13       	cpse	r23, r22
    2c86:	09 c0       	rjmp	.+18     	; 0x2c9a <chains_equiv+0x2e>
      return FALSE;
    if (chain1[i] == 0xFF)
    2c88:	60 81       	ld	r22, Z
    2c8a:	6f 3f       	cpi	r22, 0xFF	; 255
    2c8c:	21 f0       	breq	.+8      	; 0x2c96 <chains_equiv+0x2a>
    2c8e:	01 96       	adiw	r24, 0x01	; 1
  for (i = 0; i < MAX_CHAIN; i++) {
    2c90:	80 32       	cpi	r24, 0x20	; 32
    2c92:	91 05       	cpc	r25, r1
    2c94:	79 f7       	brne	.-34     	; 0x2c74 <chains_equiv+0x8>
      return TRUE;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
  }
  return TRUE;
}
    2c98:	08 95       	ret
      return FALSE;
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	08 95       	ret

00002c9e <do_patterntrack_play>:
void do_patterntrack_play(void) {
    2c9e:	af 92       	push	r10
    2ca0:	bf 92       	push	r11
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
  curr_function = function;
    2cb2:	c0 90 c1 02 	lds	r12, 0x02C1	; 0x8002c1 <function>
  if (sync == INTERNAL_SYNC) {
    2cb6:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2cba:	81 11       	cpse	r24, r1
    2cbc:	67 c0       	rjmp	.+206    	; 0x2d8c <do_patterntrack_play+0xee>
    turn_on_tempo();
    2cbe:	0e 94 a8 00 	call	0x150	; 0x150 <turn_on_tempo>
  if (sync == DIN_SYNC) {
    2cc2:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <do_patterntrack_play+0x2e>
    2cca:	63 c0       	rjmp	.+198    	; 0x2d92 <do_patterntrack_play+0xf4>
    dinsync_set_in();
    2ccc:	0e 94 04 08 	call	0x1008	; 0x1008 <dinsync_set_in>
  clear_all_leds();
    2cd0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
  clear_blinking_leds();
    2cd4:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
  next_chain[0] = curr_chain[0] = 0;
    2cd8:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <curr_chain>
    2cdc:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <next_chain>
  next_chain[1] = curr_chain[1] = 0xFF;
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <curr_chain+0x1>
    2ce6:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <next_chain+0x1>
  set_numkey_led(1);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
  playing = FALSE;
    2cf0:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <playing>
  curr_track_index = 0;
    2cf4:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
  curr_pattern_index = 0;
    2cf8:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
  curr_patt = 0;
    2cfc:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <curr_patt+0x1>
    2d00:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <curr_patt>
  curr_chain_index = 0;
    2d04:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <curr_chain_index>
  curr_pitch_shift = next_pitch_shift = 0;
    2d08:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <next_pitch_shift>
    2d0c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <curr_pitch_shift>
  clear_bank_leds();
    2d10:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
  if (ANYPATTERNPLAYFUNC)
    2d14:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <function>
    2d18:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2d1c:	9b 30       	cpi	r25, 0x0B	; 11
    2d1e:	19 f0       	breq	.+6      	; 0x2d26 <do_patterntrack_play+0x88>
    2d20:	97 7f       	andi	r25, 0xF7	; 247
    2d22:	97 30       	cpi	r25, 0x07	; 7
    2d24:	c9 f5       	brne	.+114    	; 0x2d98 <do_patterntrack_play+0xfa>
    next_bank = curr_bank = bank % 8;
    2d26:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <curr_bank>
    2d2a:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <next_bank>
  set_bank_led(bank);
    2d2e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2d32:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
  uint8_t midi_cmd = 0;
    2d36:	c0 e0       	ldi	r28, 0x00	; 0
        tap_tempo_timer = 60000UL / tap_tempo_timer; // convert to BPM
    2d38:	00 e6       	ldi	r16, 0x60	; 96
    2d3a:	1a ee       	ldi	r17, 0xEA	; 234
          buff_chain[1] = next_chain[1] = 0xFF;
    2d3c:	dd 24       	eor	r13, r13
    2d3e:	da 94       	dec	r13
    read_switches();
    2d40:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    if (function_changed) {
    2d44:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    2d48:	8c 15       	cp	r24, r12
    2d4a:	41 f1       	breq	.+80     	; 0x2d9c <do_patterntrack_play+0xfe>
      playing = FALSE;
    2d4c:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <playing>
      dinsync_stop();
    2d50:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <dinsync_stop>
      midi_stop();
    2d54:	0e 94 a5 07 	call	0xf4a	; 0xf4a <midi_stop>
      curr_pitch_shift = next_pitch_shift = 0;
    2d58:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <next_pitch_shift>
    2d5c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <curr_pitch_shift>
      all_accent = all_rest = all_slide = 0;
    2d60:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <all_slide>
    2d64:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <all_rest>
    2d68:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <all_accent>
      clear_all_leds();
    2d6c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
      clear_blinking_leds();
    2d70:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
}
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	df 90       	pop	r13
    2d82:	cf 90       	pop	r12
    2d84:	bf 90       	pop	r11
    2d86:	af 90       	pop	r10
      clock_leds();
    2d88:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <clock_leds>
    turn_off_tempo();
    2d8c:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>
    2d90:	98 cf       	rjmp	.-208    	; 0x2cc2 <do_patterntrack_play+0x24>
    dinsync_set_out();
    2d92:	0e 94 fd 07 	call	0xffa	; 0xffa <dinsync_set_out>
    2d96:	9c cf       	rjmp	.-200    	; 0x2cd0 <do_patterntrack_play+0x32>
    next_bank = curr_bank = bank % 8;
    2d98:	87 70       	andi	r24, 0x07	; 7
    2d9a:	c5 cf       	rjmp	.-118    	; 0x2d26 <do_patterntrack_play+0x88>
    if (just_pressed(KEY_DONE)) {
    2d9c:	87 e1       	ldi	r24, 0x17	; 23
    2d9e:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2da2:	88 23       	and	r24, r24
    2da4:	19 f1       	breq	.+70     	; 0x2dec <do_patterntrack_play+0x14e>
      if ((tap_tempo_timer < 3334)    //  more than 3s between taps = 20BPM
    2da6:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <tap_tempo_timer>
    2daa:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <tap_tempo_timer+0x1>
    2dae:	86 30       	cpi	r24, 0x06	; 6
    2db0:	9d 40       	sbci	r25, 0x0D	; 13
    2db2:	c0 f4       	brcc	.+48     	; 0x2de4 <do_patterntrack_play+0x146>
          && (tap_tempo_timer > 333)) // less than .3ms between taps = 200BPM
    2db4:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <tap_tempo_timer>
    2db8:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <tap_tempo_timer+0x1>
    2dbc:	8e 34       	cpi	r24, 0x4E	; 78
    2dbe:	91 40       	sbci	r25, 0x01	; 1
    2dc0:	88 f0       	brcs	.+34     	; 0x2de4 <do_patterntrack_play+0x146>
        tap_tempo_timer = 60000UL / tap_tempo_timer; // convert to BPM
    2dc2:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <tap_tempo_timer>
    2dc6:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <tap_tempo_timer+0x1>
    2dca:	c8 01       	movw	r24, r16
    2dcc:	0e 94 49 1a 	call	0x3492	; 0x3492 <__udivmodhi4>
    2dd0:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <tap_tempo_timer+0x1>
    2dd4:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <tap_tempo_timer>
        change_tempo(tap_tempo_timer);
    2dd8:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <tap_tempo_timer>
    2ddc:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <tap_tempo_timer+0x1>
    2de0:	0e 94 5d 05 	call	0xaba	; 0xaba <change_tempo>
      tap_tempo_timer = 0;
    2de4:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <tap_tempo_timer+0x1>
    2de8:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <tap_tempo_timer>
    if (just_pressed(KEY_CHAIN)) {
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2df2:	88 23       	and	r24, r24
    2df4:	49 f0       	breq	.+18     	; 0x2e08 <do_patterntrack_play+0x16a>
      clear_notekey_leds();
    2df6:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
      clear_blinking_leds();
    2dfa:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
      set_led(LED_CHAIN);
    2dfe:	82 e2       	ldi	r24, 0x22	; 34
    2e00:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
      buff_chain_len = 0; // 'start' to write a new chain
    2e04:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <buff_chain_len>
    if (just_released(KEY_CHAIN)) {
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    2e0e:	88 23       	and	r24, r24
    2e10:	61 f1       	breq	.+88     	; 0x2e6a <do_patterntrack_play+0x1cc>
    2e12:	eb ec       	ldi	r30, 0xCB	; 203
    2e14:	f3 e0       	ldi	r31, 0x03	; 3
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	80 e0       	ldi	r24, 0x00	; 0
        next_chain[i] = buff_chain[i];
    2e1a:	21 91       	ld	r18, Z+
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	a7 57       	subi	r26, 0x77	; 119
    2e20:	bc 4f       	sbci	r27, 0xFC	; 252
    2e22:	2c 93       	st	X, r18
    2e24:	01 96       	adiw	r24, 0x01	; 1
      for (i = 0; i < MAX_CHAIN; i++) {
    2e26:	80 32       	cpi	r24, 0x20	; 32
    2e28:	91 05       	cpc	r25, r1
    2e2a:	b9 f7       	brne	.-18     	; 0x2e1a <do_patterntrack_play+0x17c>
      if (!playing) {
    2e2c:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    2e30:	81 11       	cpse	r24, r1
    2e32:	18 c0       	rjmp	.+48     	; 0x2e64 <do_patterntrack_play+0x1c6>
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	80 e0       	ldi	r24, 0x00	; 0
          curr_chain[i] = next_chain[i];
    2e38:	fc 01       	movw	r30, r24
    2e3a:	e7 57       	subi	r30, 0x77	; 119
    2e3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2e3e:	20 81       	ld	r18, Z
    2e40:	fc 01       	movw	r30, r24
    2e42:	e7 55       	subi	r30, 0x57	; 87
    2e44:	fc 4f       	sbci	r31, 0xFC	; 252
    2e46:	20 83       	st	Z, r18
    2e48:	01 96       	adiw	r24, 0x01	; 1
        for (i = 0; i < MAX_CHAIN; i++)
    2e4a:	80 32       	cpi	r24, 0x20	; 32
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	a1 f7       	brne	.-24     	; 0x2e38 <do_patterntrack_play+0x19a>
        curr_pitch_shift = next_pitch_shift;
    2e50:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
    2e54:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
        clear_led(LED_UP);
    2e58:	83 e0       	ldi	r24, 0x03	; 3
    2e5a:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
        clear_led(LED_DOWN);
    2e5e:	84 e0       	ldi	r24, 0x04	; 4
    2e60:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
      clear_led(LED_CHAIN);
    2e64:	82 e2       	ldi	r24, 0x22	; 34
    2e66:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    if (is_pressed(KEY_CHAIN)) {
    2e6a:	80 e0       	ldi	r24, 0x00	; 0
    2e6c:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    2e70:	88 23       	and	r24, r24
    2e72:	09 f4       	brne	.+2      	; 0x2e76 <do_patterntrack_play+0x1d8>
    2e74:	79 c0       	rjmp	.+242    	; 0x2f68 <do_patterntrack_play+0x2ca>
      for (i = 0; i < buff_chain_len; i++) {
    2e76:	d0 e0       	ldi	r29, 0x00	; 0
    2e78:	0b c0       	rjmp	.+22     	; 0x2e90 <do_patterntrack_play+0x1f2>
        if (buff_chain[i] >= 8)
    2e7a:	ed 2f       	mov	r30, r29
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	e5 53       	subi	r30, 0x35	; 53
    2e80:	fc 4f       	sbci	r31, 0xFC	; 252
    2e82:	80 81       	ld	r24, Z
    2e84:	88 30       	cpi	r24, 0x08	; 8
    2e86:	40 f4       	brcc	.+16     	; 0x2e98 <do_patterntrack_play+0x1fa>
        set_numkey_led(buff_chain[i] + 1);
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
      for (i = 0; i < buff_chain_len; i++) {
    2e8e:	df 5f       	subi	r29, 0xFF	; 255
    2e90:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <buff_chain_len>
    2e94:	d8 17       	cp	r29, r24
    2e96:	88 f3       	brcs	.-30     	; 0x2e7a <do_patterntrack_play+0x1dc>
      i = get_lowest_numkey_just_pressed();
    2e98:	0e 94 90 09 	call	0x1320	; 0x1320 <get_lowest_numkey_just_pressed>
      if ((i != 0) && (buff_chain_len < MAX_CHAIN)) {
    2e9c:	88 23       	and	r24, r24
    2e9e:	91 f0       	breq	.+36     	; 0x2ec4 <do_patterntrack_play+0x226>
    2ea0:	e0 91 8f 02 	lds	r30, 0x028F	; 0x80028f <buff_chain_len>
    2ea4:	e0 32       	cpi	r30, 0x20	; 32
    2ea6:	70 f4       	brcc	.+28     	; 0x2ec4 <do_patterntrack_play+0x226>
        buff_chain[buff_chain_len++] = i - 1;
    2ea8:	91 e0       	ldi	r25, 0x01	; 1
    2eaa:	9e 0f       	add	r25, r30
    2eac:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <buff_chain_len>
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	e5 53       	subi	r30, 0x35	; 53
    2eb4:	fc 4f       	sbci	r31, 0xFC	; 252
    2eb6:	81 50       	subi	r24, 0x01	; 1
    2eb8:	80 83       	st	Z, r24
        buff_chain[buff_chain_len] = 0xFF;
    2eba:	e9 2f       	mov	r30, r25
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	e5 53       	subi	r30, 0x35	; 53
    2ec0:	fc 4f       	sbci	r31, 0xFC	; 252
    2ec2:	d0 82       	st	Z, r13
    if (sync == MIDI_SYNC) {
    2ec4:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2ec8:	82 30       	cpi	r24, 0x02	; 2
    2eca:	b1 f5       	brne	.+108    	; 0x2f38 <do_patterntrack_play+0x29a>
      midi_cmd = midi_recv_cmd(); // returns 0 if no midi commands waiting
    2ecc:	0e 94 10 07 	call	0xe20	; 0xe20 <midi_recv_cmd>
    2ed0:	c8 2f       	mov	r28, r24
      if ((midi_cmd >> 4 == 0xc) && ((midi_cmd & 0xF) == midi_in_addr) && midi_getch()) {
    2ed2:	82 95       	swap	r24
    2ed4:	8f 70       	andi	r24, 0x0F	; 15
    2ed6:	8c 30       	cpi	r24, 0x0C	; 12
    2ed8:	79 f5       	brne	.+94     	; 0x2f38 <do_patterntrack_play+0x29a>
    2eda:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <midi_in_addr>
    2ede:	8c 2f       	mov	r24, r28
    2ee0:	8f 70       	andi	r24, 0x0F	; 15
    2ee2:	98 13       	cpse	r25, r24
    2ee4:	29 c0       	rjmp	.+82     	; 0x2f38 <do_patterntrack_play+0x29a>
    2ee6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <midi_getch>
    2eea:	89 2b       	or	r24, r25
    2eec:	29 f1       	breq	.+74     	; 0x2f38 <do_patterntrack_play+0x29a>
        midi_cmd = midi_getchar();
    2eee:	0e 94 f7 06 	call	0xdee	; 0xdee <midi_getchar>
    2ef2:	c8 2f       	mov	r28, r24
        if (! (midi_cmd & 0x80))  {
    2ef4:	87 fd       	sbrc	r24, 7
    2ef6:	20 c0       	rjmp	.+64     	; 0x2f38 <do_patterntrack_play+0x29a>
          curr_bank = midi_cmd / 8; // override the bank!
    2ef8:	86 95       	lsr	r24
    2efa:	86 95       	lsr	r24
    2efc:	86 95       	lsr	r24
    2efe:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <curr_bank>
          curr_chain[0] = buff_chain[0] = next_chain[0] = midi_cmd % 8;
    2f02:	c7 70       	andi	r28, 0x07	; 7
    2f04:	c0 93 89 03 	sts	0x0389, r28	; 0x800389 <next_chain>
    2f08:	c0 93 cb 03 	sts	0x03CB, r28	; 0x8003cb <buff_chain>
    2f0c:	c0 93 a9 03 	sts	0x03A9, r28	; 0x8003a9 <curr_chain>
          curr_chain[1] = buff_chain[1] = next_chain[1] = 0xFF;
    2f10:	d0 92 8a 03 	sts	0x038A, r13	; 0x80038a <next_chain+0x1>
    2f14:	d0 92 cc 03 	sts	0x03CC, r13	; 0x8003cc <buff_chain+0x1>
    2f18:	d0 92 aa 03 	sts	0x03AA, r13	; 0x8003aa <curr_chain+0x1>
          load_pattern(bank, curr_chain[0]);
    2f1c:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <curr_chain>
    2f20:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    2f24:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
          clear_numkey_leds();
    2f28:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <clear_numkey_leds>
          set_numkey_led(curr_chain[0]+1);
    2f2c:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <curr_chain>
    2f30:	8f 5f       	subi	r24, 0xFF	; 255
    2f32:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
          midi_cmd = 0;
    2f36:	c0 e0       	ldi	r28, 0x00	; 0
    if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS) && playing) ||
    2f38:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    2f3c:	88 23       	and	r24, r24
    2f3e:	09 f4       	brne	.+2      	; 0x2f42 <do_patterntrack_play+0x2a4>
    2f40:	11 c1       	rjmp	.+546    	; 0x3164 <do_patterntrack_play+0x4c6>
        ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    2f42:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS) && playing) ||
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	09 f0       	breq	.+2      	; 0x2f4c <do_patterntrack_play+0x2ae>
    2f4a:	55 c1       	rjmp	.+682    	; 0x31f6 <do_patterntrack_play+0x558>
        ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    2f4c:	cc 3f       	cpi	r28, 0xFC	; 252
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <do_patterntrack_play+0x2b4>
    2f50:	14 c1       	rjmp	.+552    	; 0x317a <do_patterntrack_play+0x4dc>
               ((sync == MIDI_SYNC) &&
    2f52:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    } else if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS) && !playing) ||
    2f56:	82 30       	cpi	r24, 0x02	; 2
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <do_patterntrack_play+0x2be>
    2f5a:	96 c1       	rjmp	.+812    	; 0x3288 <do_patterntrack_play+0x5ea>
                ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
    2f5c:	86 e0       	ldi	r24, 0x06	; 6
    2f5e:	8c 0f       	add	r24, r28
               ((sync == MIDI_SYNC) &&
    2f60:	82 30       	cpi	r24, 0x02	; 2
    2f62:	08 f0       	brcs	.+2      	; 0x2f66 <do_patterntrack_play+0x2c8>
    2f64:	2a c1       	rjmp	.+596    	; 0x31ba <do_patterntrack_play+0x51c>
    2f66:	5b c1       	rjmp	.+694    	; 0x321e <do_patterntrack_play+0x580>
    else if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    2f68:	8f e0       	ldi	r24, 0x0F	; 15
    2f6a:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    2f6e:	88 23       	and	r24, r24
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <do_patterntrack_play+0x2d6>
    2f72:	42 c0       	rjmp	.+132    	; 0x2ff8 <do_patterntrack_play+0x35a>
      int8_t notekey = get_lowest_notekey_pressed();
    2f74:	0e 94 64 09 	call	0x12c8	; 0x12c8 <get_lowest_notekey_pressed>
    2f78:	d8 2f       	mov	r29, r24
      if (just_pressed(KEY_UP) || just_pressed(KEY_DOWN)) {
    2f7a:	8f e0       	ldi	r24, 0x0F	; 15
    2f7c:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2f80:	81 11       	cpse	r24, r1
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <do_patterntrack_play+0x2f0>
    2f84:	8e e0       	ldi	r24, 0x0E	; 14
    2f86:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    2f8a:	88 23       	and	r24, r24
    2f8c:	39 f0       	breq	.+14     	; 0x2f9c <do_patterntrack_play+0x2fe>
        clear_notekey_leds();
    2f8e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
        clear_blinking_leds();
    2f92:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
        clear_led(LED_CHAIN);
    2f96:	82 e2       	ldi	r24, 0x22	; 34
    2f98:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
      if (is_pressed(KEY_UP)) {
    2f9c:	8f e0       	ldi	r24, 0x0F	; 15
    2f9e:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    2fa2:	88 23       	and	r24, r24
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <do_patterntrack_play+0x30a>
    2fa6:	60 c0       	rjmp	.+192    	; 0x3068 <do_patterntrack_play+0x3ca>
        clear_led(LED_DOWN);
    2fa8:	84 e0       	ldi	r24, 0x04	; 4
    2faa:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
        set_led(LED_UP);
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
        if (notekey != -1)
    2fb4:	df 3f       	cpi	r29, 0xFF	; 255
    2fb6:	11 f0       	breq	.+4      	; 0x2fbc <do_patterntrack_play+0x31e>
          next_pitch_shift = notekey;
    2fb8:	d0 93 85 02 	sts	0x0285, r29	; 0x800285 <next_pitch_shift>
        if (curr_pitch_shift >= 0) {
    2fbc:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curr_pitch_shift>
    2fc0:	87 fd       	sbrc	r24, 7
    2fc2:	0a c0       	rjmp	.+20     	; 0x2fd8 <do_patterntrack_play+0x33a>
          if (!is_notekey_led_blink(curr_pitch_shift)) {
    2fc4:	0e 94 24 0b 	call	0x1648	; 0x1648 <is_notekey_led_blink>
    2fc8:	81 11       	cpse	r24, r1
    2fca:	06 c0       	rjmp	.+12     	; 0x2fd8 <do_patterntrack_play+0x33a>
            clear_blinking_leds();
    2fcc:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
            set_notekey_led_blink(curr_pitch_shift);
    2fd0:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curr_pitch_shift>
    2fd4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <set_notekey_led_blink>
        if (next_pitch_shift != curr_pitch_shift)
    2fd8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
    2fdc:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curr_pitch_shift>
    2fe0:	89 13       	cpse	r24, r25
          set_notekey_led(OCTAVE + next_pitch_shift);
    2fe2:	0e 94 06 0b 	call	0x160c	; 0x160c <set_notekey_led>
      if (!playing)
    2fe6:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    2fea:	81 11       	cpse	r24, r1
    2fec:	6b cf       	rjmp	.-298    	; 0x2ec4 <do_patterntrack_play+0x226>
        curr_pitch_shift = next_pitch_shift;
    2fee:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
    2ff2:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
    2ff6:	66 cf       	rjmp	.-308    	; 0x2ec4 <do_patterntrack_play+0x226>
    else if (is_pressed(KEY_UP) || is_pressed(KEY_DOWN)) {
    2ff8:	8e e0       	ldi	r24, 0x0E	; 14
    2ffa:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    2ffe:	81 11       	cpse	r24, r1
    3000:	b9 cf       	rjmp	.-142    	; 0x2f74 <do_patterntrack_play+0x2d6>
      if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    3002:	8f e0       	ldi	r24, 0x0F	; 15
    3004:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    3008:	88 23       	and	r24, r24
    300a:	09 f4       	brne	.+2      	; 0x300e <do_patterntrack_play+0x370>
    300c:	57 c0       	rjmp	.+174    	; 0x30bc <do_patterntrack_play+0x41e>
        clear_notekey_leds();
    300e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <clear_notekey_leds>
        clear_blinking_leds();
    3012:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
      i = get_lowest_numkey_pressed();
    3016:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <get_lowest_numkey_pressed>
    301a:	d8 2f       	mov	r29, r24
      if ((i != 0) || has_bank_knob_changed()) {
    301c:	81 11       	cpse	r24, r1
    301e:	ba c1       	rjmp	.+884    	; 0x3394 <do_patterntrack_play+0x6f6>
    3020:	0e 94 a6 09 	call	0x134c	; 0x134c <has_bank_knob_changed>
    3024:	81 11       	cpse	r24, r1
    3026:	a1 c1       	rjmp	.+834    	; 0x336a <do_patterntrack_play+0x6cc>
      if (!chains_equiv(next_chain, curr_chain)) {
    3028:	69 ea       	ldi	r22, 0xA9	; 169
    302a:	73 e0       	ldi	r23, 0x03	; 3
    302c:	89 e8       	ldi	r24, 0x89	; 137
    302e:	93 e0       	ldi	r25, 0x03	; 3
    3030:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <chains_equiv>
    3034:	81 11       	cpse	r24, r1
    3036:	57 c0       	rjmp	.+174    	; 0x30e6 <do_patterntrack_play+0x448>
        if (next_chain[1] == END_OF_CHAIN && curr_chain[1] == END_OF_CHAIN) {
    3038:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <next_chain+0x1>
    303c:	8f 3f       	cpi	r24, 0xFF	; 255
    303e:	49 f4       	brne	.+18     	; 0x3052 <do_patterntrack_play+0x3b4>
    3040:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <curr_chain+0x1>
    3044:	8f 3f       	cpi	r24, 0xFF	; 255
    3046:	29 f4       	brne	.+10     	; 0x3052 <do_patterntrack_play+0x3b4>
          set_numkey_led_blink(curr_chain[0] + 1);
    3048:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <curr_chain>
    304c:	8f 5f       	subi	r24, 0xFF	; 255
    304e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <set_numkey_led_blink>
    3052:	f1 2c       	mov	r15, r1
    3054:	e1 2c       	mov	r14, r1
          if (next_chain[i] > 8)
    3056:	f7 01       	movw	r30, r14
    3058:	e7 57       	subi	r30, 0x77	; 119
    305a:	fc 4f       	sbci	r31, 0xFC	; 252
    305c:	80 81       	ld	r24, Z
    305e:	89 30       	cpi	r24, 0x09	; 9
    3060:	a8 f1       	brcs	.+106    	; 0x30cc <do_patterntrack_play+0x42e>
      display_curr_pitch_shift_ud();
    3062:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <display_curr_pitch_shift_ud>
    3066:	2e cf       	rjmp	.-420    	; 0x2ec4 <do_patterntrack_play+0x226>
      } else if (is_pressed(KEY_DOWN)) {
    3068:	8e e0       	ldi	r24, 0x0E	; 14
    306a:	0e 94 13 09 	call	0x1226	; 0x1226 <is_pressed>
    306e:	88 23       	and	r24, r24
    3070:	09 f4       	brne	.+2      	; 0x3074 <do_patterntrack_play+0x3d6>
    3072:	b9 cf       	rjmp	.-142    	; 0x2fe6 <do_patterntrack_play+0x348>
        clear_led(LED_UP);
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
        set_led(LED_DOWN);
    307a:	84 e0       	ldi	r24, 0x04	; 4
    307c:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
        if (notekey != -1)
    3080:	df 3f       	cpi	r29, 0xFF	; 255
    3082:	19 f0       	breq	.+6      	; 0x308a <do_patterntrack_play+0x3ec>
          next_pitch_shift = notekey - OCTAVE; // invert direction
    3084:	dc 50       	subi	r29, 0x0C	; 12
    3086:	d0 93 85 02 	sts	0x0285, r29	; 0x800285 <next_pitch_shift>
        if (curr_pitch_shift <= 0) {
    308a:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curr_pitch_shift>
    308e:	18 16       	cp	r1, r24
    3090:	64 f0       	brlt	.+24     	; 0x30aa <do_patterntrack_play+0x40c>
          if (!is_notekey_led_blink(OCTAVE + curr_pitch_shift)) {
    3092:	84 5f       	subi	r24, 0xF4	; 244
    3094:	0e 94 24 0b 	call	0x1648	; 0x1648 <is_notekey_led_blink>
    3098:	81 11       	cpse	r24, r1
    309a:	07 c0       	rjmp	.+14     	; 0x30aa <do_patterntrack_play+0x40c>
            clear_blinking_leds();
    309c:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
            set_notekey_led_blink(OCTAVE + curr_pitch_shift);
    30a0:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curr_pitch_shift>
    30a4:	84 5f       	subi	r24, 0xF4	; 244
    30a6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <set_notekey_led_blink>
        if (next_pitch_shift != curr_pitch_shift)
    30aa:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
    30ae:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curr_pitch_shift>
    30b2:	89 17       	cp	r24, r25
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <do_patterntrack_play+0x41a>
    30b6:	97 cf       	rjmp	.-210    	; 0x2fe6 <do_patterntrack_play+0x348>
          set_notekey_led(OCTAVE + next_pitch_shift);
    30b8:	84 5f       	subi	r24, 0xF4	; 244
    30ba:	93 cf       	rjmp	.-218    	; 0x2fe2 <do_patterntrack_play+0x344>
      if (just_released(KEY_UP) || just_released(KEY_DOWN)) {
    30bc:	8e e0       	ldi	r24, 0x0E	; 14
    30be:	0e 94 41 09 	call	0x1282	; 0x1282 <just_released>
    30c2:	81 11       	cpse	r24, r1
    30c4:	a4 cf       	rjmp	.-184    	; 0x300e <do_patterntrack_play+0x370>
    30c6:	a7 cf       	rjmp	.-178    	; 0x3016 <do_patterntrack_play+0x378>
            next_bank = bank % 8;
    30c8:	87 70       	andi	r24, 0x07	; 7
    30ca:	59 c1       	rjmp	.+690    	; 0x337e <do_patterntrack_play+0x6e0>
          set_numkey_led(next_chain[i] + 1);
    30cc:	80 81       	ld	r24, Z
    30ce:	8f 5f       	subi	r24, 0xFF	; 255
    30d0:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
    30d4:	ff ef       	ldi	r31, 0xFF	; 255
    30d6:	ef 1a       	sub	r14, r31
    30d8:	ff 0a       	sbc	r15, r31
        for (i = 0; i < MAX_CHAIN; i++) {
    30da:	20 e2       	ldi	r18, 0x20	; 32
    30dc:	e2 16       	cp	r14, r18
    30de:	f1 04       	cpc	r15, r1
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <do_patterntrack_play+0x446>
    30e2:	b9 cf       	rjmp	.-142    	; 0x3056 <do_patterntrack_play+0x3b8>
    30e4:	be cf       	rjmp	.-132    	; 0x3062 <do_patterntrack_play+0x3c4>
    30e6:	b1 2c       	mov	r11, r1
    30e8:	a1 2c       	mov	r10, r1
          if (curr_chain[i] > 8)
    30ea:	c5 01       	movw	r24, r10
    30ec:	87 55       	subi	r24, 0x57	; 87
    30ee:	9c 4f       	sbci	r25, 0xFC	; 252
    30f0:	7c 01       	movw	r14, r24
    30f2:	fc 01       	movw	r30, r24
    30f4:	80 81       	ld	r24, Z
    30f6:	89 30       	cpi	r24, 0x09	; 9
    30f8:	08 f0       	brcs	.+2      	; 0x30fc <do_patterntrack_play+0x45e>
    30fa:	b3 cf       	rjmp	.-154    	; 0x3062 <do_patterntrack_play+0x3c4>
          if (playing && (curr_chain[i] == curr_chain[curr_chain_index])) {
    30fc:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    3100:	88 23       	and	r24, r24
    3102:	11 f1       	breq	.+68     	; 0x3148 <do_patterntrack_play+0x4aa>
    3104:	90 81       	ld	r25, Z
    3106:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <curr_chain_index>
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	e7 55       	subi	r30, 0x57	; 87
    310e:	fc 4f       	sbci	r31, 0xFC	; 252
    3110:	80 81       	ld	r24, Z
    3112:	98 13       	cpse	r25, r24
    3114:	19 c0       	rjmp	.+50     	; 0x3148 <do_patterntrack_play+0x4aa>
            if (!is_numkey_led_blink(curr_chain[i] + 1)) {
    3116:	f7 01       	movw	r30, r14
    3118:	80 81       	ld	r24, Z
    311a:	8f 5f       	subi	r24, 0xFF	; 255
    311c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <is_numkey_led_blink>
    3120:	81 11       	cpse	r24, r1
    3122:	0a c0       	rjmp	.+20     	; 0x3138 <do_patterntrack_play+0x49a>
              clear_numkey_led(curr_chain[i] + 1);
    3124:	f7 01       	movw	r30, r14
    3126:	80 81       	ld	r24, Z
    3128:	8f 5f       	subi	r24, 0xFF	; 255
    312a:	0e 94 c5 0a 	call	0x158a	; 0x158a <clear_numkey_led>
              set_numkey_led_blink(curr_chain[i] + 1);
    312e:	f7 01       	movw	r30, r14
    3130:	80 81       	ld	r24, Z
    3132:	8f 5f       	subi	r24, 0xFF	; 255
    3134:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <set_numkey_led_blink>
    3138:	ff ef       	ldi	r31, 0xFF	; 255
    313a:	af 1a       	sub	r10, r31
    313c:	bf 0a       	sbc	r11, r31
        for (i = 0; i < MAX_CHAIN; i++) {
    313e:	20 e2       	ldi	r18, 0x20	; 32
    3140:	a2 16       	cp	r10, r18
    3142:	b1 04       	cpc	r11, r1
    3144:	91 f6       	brne	.-92     	; 0x30ea <do_patterntrack_play+0x44c>
    3146:	8d cf       	rjmp	.-230    	; 0x3062 <do_patterntrack_play+0x3c4>
            if (is_numkey_led_blink(curr_chain[i] + 1))
    3148:	f7 01       	movw	r30, r14
    314a:	80 81       	ld	r24, Z
    314c:	8f 5f       	subi	r24, 0xFF	; 255
    314e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <is_numkey_led_blink>
    3152:	81 11       	cpse	r24, r1
              clear_blinking_leds();
    3154:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
            set_numkey_led(curr_chain[i] + 1);
    3158:	f7 01       	movw	r30, r14
    315a:	80 81       	ld	r24, Z
    315c:	8f 5f       	subi	r24, 0xFF	; 255
    315e:	0e 94 9f 0a 	call	0x153e	; 0x153e <set_numkey_led>
    3162:	ea cf       	rjmp	.-44     	; 0x3138 <do_patterntrack_play+0x49a>
    if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS) && playing) ||
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    316a:	88 23       	and	r24, r24
    316c:	09 f4       	brne	.+2      	; 0x3170 <do_patterntrack_play+0x4d2>
    316e:	e9 ce       	rjmp	.-558    	; 0x2f42 <do_patterntrack_play+0x2a4>
    3170:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    3174:	88 23       	and	r24, r24
    3176:	09 f4       	brne	.+2      	; 0x317a <do_patterntrack_play+0x4dc>
    3178:	e4 ce       	rjmp	.-568    	; 0x2f42 <do_patterntrack_play+0x2a4>
      playing = FALSE;
    317a:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <playing>
      note_off(0);
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <note_off>
      midi_stop();
    3184:	0e 94 a5 07 	call	0xf4a	; 0xf4a <midi_stop>
      if (sync != DIN_SYNC)
    3188:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	11 f0       	breq	.+4      	; 0x3194 <do_patterntrack_play+0x4f6>
        dinsync_stop();
    3190:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <dinsync_stop>
      clear_led(LED_RS);
    3194:	81 e2       	ldi	r24, 0x21	; 33
    3196:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
      clear_blinking_leds();
    319a:	0e 94 80 0b 	call	0x1700	; 0x1700 <clear_blinking_leds>
      clear_bank_leds();
    319e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
      if (ANYPATTERNPLAYFUNC)
    31a2:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    31a6:	8b 30       	cpi	r24, 0x0B	; 11
    31a8:	21 f0       	breq	.+8      	; 0x31b2 <do_patterntrack_play+0x514>
    31aa:	87 7f       	andi	r24, 0xF7	; 247
    31ac:	87 30       	cpi	r24, 0x07	; 7
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <do_patterntrack_play+0x514>
    31b0:	67 c0       	rjmp	.+206    	; 0x3280 <do_patterntrack_play+0x5e2>
        set_bank_led(bank);
    31b2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
        set_bank_led(bank % 8);
    31b6:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
    if (playing) {
    31ba:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    31be:	88 23       	and	r24, r24
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <do_patterntrack_play+0x526>
    31c2:	92 c0       	rjmp	.+292    	; 0x32e8 <do_patterntrack_play+0x64a>
      if ((sync == MIDI_SYNC) && (midisync_clocked > 0)) {
    31c4:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    31c8:	82 30       	cpi	r24, 0x02	; 2
    31ca:	09 f0       	breq	.+2      	; 0x31ce <do_patterntrack_play+0x530>
    31cc:	7a c0       	rjmp	.+244    	; 0x32c2 <do_patterntrack_play+0x624>
    31ce:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <midisync_clocked>
    31d2:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <midisync_clocked+0x1>
    31d6:	18 16       	cp	r1, r24
    31d8:	19 06       	cpc	r1, r25
    31da:	0c f0       	brlt	.+2      	; 0x31de <do_patterntrack_play+0x540>
    31dc:	85 c0       	rjmp	.+266    	; 0x32e8 <do_patterntrack_play+0x64a>
        midisync_clocked -= MIDISYNC_PPQ / 8;
    31de:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <midisync_clocked>
    31e2:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <midisync_clocked+0x1>
    31e6:	03 97       	sbiw	r24, 0x03	; 3
    31e8:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <midisync_clocked+0x1>
    31ec:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <midisync_clocked>
        do_tempo();
    31f0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <do_tempo>
        continue;
    31f4:	a5 cd       	rjmp	.-1206   	; 0x2d40 <do_patterntrack_play+0xa2>
        ((sync == MIDI_SYNC) && (midi_cmd == MIDI_STOP)) ||
    31f6:	81 30       	cpi	r24, 0x01	; 1
    31f8:	21 f4       	brne	.+8      	; 0x3202 <do_patterntrack_play+0x564>
        ((sync == DIN_SYNC) && dinsync_stopped())) {
    31fa:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <dinsync_stopped>
    31fe:	81 11       	cpse	r24, r1
    3200:	bc cf       	rjmp	.-136    	; 0x317a <do_patterntrack_play+0x4dc>
    } else if (((sync == INTERNAL_SYNC) && just_pressed(KEY_RS) && !playing) ||
    3202:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    3206:	81 11       	cpse	r24, r1
    3208:	a4 ce       	rjmp	.-696    	; 0x2f52 <do_patterntrack_play+0x2b4>
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    3210:	88 23       	and	r24, r24
    3212:	09 f4       	brne	.+2      	; 0x3216 <do_patterntrack_play+0x578>
    3214:	9e ce       	rjmp	.-708    	; 0x2f52 <do_patterntrack_play+0x2b4>
    3216:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    321a:	81 11       	cpse	r24, r1
    321c:	9a ce       	rjmp	.-716    	; 0x2f52 <do_patterntrack_play+0x2b4>
      set_led(LED_RS);
    321e:	81 e2       	ldi	r24, 0x21	; 33
    3220:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
      if (ANYPATTERNPLAYFUNC)
    3224:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    3228:	8b 30       	cpi	r24, 0x0B	; 11
    322a:	b1 f5       	brne	.+108    	; 0x3298 <do_patterntrack_play+0x5fa>
        load_pattern(bank, curr_chain[0]);
    322c:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <curr_chain>
    3230:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    3234:	0e 94 85 12 	call	0x250a	; 0x250a <load_pattern>
      curr_note = REST;
    3238:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <curr_note>
      if (!((sync == MIDI_SYNC) && (midi_cmd == MIDI_CONTINUE))) {
    323c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    3240:	82 30       	cpi	r24, 0x02	; 2
    3242:	11 f4       	brne	.+4      	; 0x3248 <do_patterntrack_play+0x5aa>
    3244:	cb 3f       	cpi	r28, 0xFB	; 251
    3246:	31 f0       	breq	.+12     	; 0x3254 <do_patterntrack_play+0x5b6>
        curr_chain_index = 0;   // index into current chain
    3248:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <curr_chain_index>
        curr_pattern_index = 0; // index into current pattern in chain
    324c:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <curr_pattern_index>
        curr_track_index = 0;   // index into current pattern in chain
    3250:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <curr_track_index>
      note_counter = 0;
    3254:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <note_counter>
      dinsync_counter = 0;
    3258:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <dinsync_counter>
      dinsync_clocked = 0;
    325c:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <dinsync_clocked+0x1>
    3260:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <dinsync_clocked>
      playing = TRUE;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <playing>
      midi_putchar(MIDI_START);
    326a:	8a ef       	ldi	r24, 0xFA	; 250
    326c:	0e 94 bd 06 	call	0xd7a	; 0xd7a <midi_putchar>
      if (sync != DIN_SYNC)
    3270:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <sync>
    3274:	81 30       	cpi	r24, 0x01	; 1
    3276:	09 f4       	brne	.+2      	; 0x327a <do_patterntrack_play+0x5dc>
    3278:	a0 cf       	rjmp	.-192    	; 0x31ba <do_patterntrack_play+0x51c>
        dinsync_start();
    327a:	0e 94 af 07 	call	0xf5e	; 0xf5e <dinsync_start>
    327e:	9d cf       	rjmp	.-198    	; 0x31ba <do_patterntrack_play+0x51c>
        set_bank_led(bank % 8);
    3280:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    3284:	87 70       	andi	r24, 0x07	; 7
    3286:	97 cf       	rjmp	.-210    	; 0x31b6 <do_patterntrack_play+0x518>
                ((midi_cmd == MIDI_START) || (midi_cmd == MIDI_CONTINUE))) ||
    3288:	81 30       	cpi	r24, 0x01	; 1
    328a:	09 f0       	breq	.+2      	; 0x328e <do_patterntrack_play+0x5f0>
    328c:	96 cf       	rjmp	.-212    	; 0x31ba <do_patterntrack_play+0x51c>
               ((sync == DIN_SYNC) && dinsync_started())) {
    328e:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <dinsync_started>
    3292:	81 11       	cpse	r24, r1
    3294:	c4 cf       	rjmp	.-120    	; 0x321e <do_patterntrack_play+0x580>
    3296:	91 cf       	rjmp	.-222    	; 0x31ba <do_patterntrack_play+0x51c>
      if (ANYPATTERNPLAYFUNC)
    3298:	87 7f       	andi	r24, 0xF7	; 247
    329a:	87 30       	cpi	r24, 0x07	; 7
    329c:	39 f2       	breq	.-114    	; 0x322c <do_patterntrack_play+0x58e>
        load_track(bank % 8, curr_chain[0]);
    329e:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <curr_chain>
    32a2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    32a6:	87 70       	andi	r24, 0x07	; 7
    32a8:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <load_track>
        curr_patt = track_buff[0];
    32ac:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <track_buff>
    32b0:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <track_buff+0x1>
    32b4:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <curr_patt+0x1>
    32b8:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <curr_patt>
        load_curr_patt(); // ignore pitch shift returned
    32bc:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <load_curr_patt>
    32c0:	bb cf       	rjmp	.-138    	; 0x3238 <do_patterntrack_play+0x59a>
      else if ((sync == DIN_SYNC) && (dinsync_clocked > 0)) {
    32c2:	81 30       	cpi	r24, 0x01	; 1
    32c4:	89 f4       	brne	.+34     	; 0x32e8 <do_patterntrack_play+0x64a>
    32c6:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <dinsync_clocked>
    32ca:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <dinsync_clocked+0x1>
    32ce:	18 16       	cp	r1, r24
    32d0:	19 06       	cpc	r1, r25
    32d2:	54 f4       	brge	.+20     	; 0x32e8 <do_patterntrack_play+0x64a>
        dinsync_clocked -= DINSYNC_PPQ / 8;
    32d4:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <dinsync_clocked>
    32d8:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <dinsync_clocked+0x1>
    32dc:	03 97       	sbiw	r24, 0x03	; 3
    32de:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <dinsync_clocked+0x1>
    32e2:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <dinsync_clocked>
    32e6:	84 cf       	rjmp	.-248    	; 0x31f0 <do_patterntrack_play+0x552>
    if (just_pressed(KEY_SLIDE)) {
    32e8:	86 e1       	ldi	r24, 0x16	; 22
    32ea:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    32ee:	88 23       	and	r24, r24
    32f0:	61 f0       	breq	.+24     	; 0x330a <do_patterntrack_play+0x66c>
      all_slide = !all_slide;
    32f2:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <all_slide>
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	81 11       	cpse	r24, r1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <all_slide>
      if (all_slide)
    3300:	81 11       	cpse	r24, r1
    3302:	27 c0       	rjmp	.+78     	; 0x3352 <do_patterntrack_play+0x6b4>
        set_led(LED_SLIDE);
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    if (just_pressed(KEY_ACCENT)) {
    330a:	85 e1       	ldi	r24, 0x15	; 21
    330c:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    3310:	88 23       	and	r24, r24
    3312:	61 f0       	breq	.+24     	; 0x332c <do_patterntrack_play+0x68e>
      all_accent = !all_accent;
    3314:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <all_accent>
    3318:	91 e0       	ldi	r25, 0x01	; 1
    331a:	81 11       	cpse	r24, r1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <all_accent>
      if (all_accent)
    3322:	81 11       	cpse	r24, r1
    3324:	1a c0       	rjmp	.+52     	; 0x335a <do_patterntrack_play+0x6bc>
        set_led(LED_ACCENT);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    if (just_pressed(KEY_REST)) {
    332c:	84 e1       	ldi	r24, 0x14	; 20
    332e:	0e 94 2a 09 	call	0x1254	; 0x1254 <just_pressed>
    3332:	88 23       	and	r24, r24
    3334:	09 f4       	brne	.+2      	; 0x3338 <do_patterntrack_play+0x69a>
    3336:	04 cd       	rjmp	.-1528   	; 0x2d40 <do_patterntrack_play+0xa2>
      all_rest = !all_rest;
    3338:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <all_rest>
    333c:	91 e0       	ldi	r25, 0x01	; 1
    333e:	81 11       	cpse	r24, r1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <all_rest>
      if (all_rest)
    3346:	81 11       	cpse	r24, r1
    3348:	0c c0       	rjmp	.+24     	; 0x3362 <do_patterntrack_play+0x6c4>
        set_led(LED_REST);
    334a:	88 e0       	ldi	r24, 0x08	; 8
    334c:	0e 94 bf 09 	call	0x137e	; 0x137e <set_led>
    3350:	f7 cc       	rjmp	.-1554   	; 0x2d40 <do_patterntrack_play+0xa2>
        clear_led(LED_SLIDE);
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    3358:	d8 cf       	rjmp	.-80     	; 0x330a <do_patterntrack_play+0x66c>
        clear_led(LED_ACCENT);
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    3360:	e5 cf       	rjmp	.-54     	; 0x332c <do_patterntrack_play+0x68e>
        clear_led(LED_REST);
    3362:	88 e0       	ldi	r24, 0x08	; 8
    3364:	0e 94 12 0a 	call	0x1424	; 0x1424 <clear_led>
    3368:	eb cc       	rjmp	.-1578   	; 0x2d40 <do_patterntrack_play+0xa2>
          if (ANYPATTERNPLAYFUNC)
    336a:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <function>
    336e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <bank>
    3372:	9b 30       	cpi	r25, 0x0B	; 11
    3374:	21 f0       	breq	.+8      	; 0x337e <do_patterntrack_play+0x6e0>
    3376:	97 7f       	andi	r25, 0xF7	; 247
    3378:	97 30       	cpi	r25, 0x07	; 7
    337a:	09 f0       	breq	.+2      	; 0x337e <do_patterntrack_play+0x6e0>
    337c:	a5 ce       	rjmp	.-694    	; 0x30c8 <do_patterntrack_play+0x42a>
            next_bank = bank % 8;
    337e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <next_bank>
          if (!playing)
    3382:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    3386:	81 11       	cpse	r24, r1
    3388:	4f ce       	rjmp	.-866    	; 0x3028 <do_patterntrack_play+0x38a>
            curr_bank = next_bank;
    338a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <next_bank>
    338e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <curr_bank>
    3392:	1d c0       	rjmp	.+58     	; 0x33ce <do_patterntrack_play+0x730>
          clear_numkey_leds();
    3394:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <clear_numkey_leds>
          buff_chain[0] = next_chain[0] = i - 1;
    3398:	d1 50       	subi	r29, 0x01	; 1
    339a:	d0 93 89 03 	sts	0x0389, r29	; 0x800389 <next_chain>
    339e:	d0 93 cb 03 	sts	0x03CB, r29	; 0x8003cb <buff_chain>
          buff_chain[1] = next_chain[1] = 0xFF;
    33a2:	d0 92 8a 03 	sts	0x038A, r13	; 0x80038a <next_chain+0x1>
    33a6:	d0 92 cc 03 	sts	0x03CC, r13	; 0x8003cc <buff_chain+0x1>
          if (!playing)
    33aa:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <playing>
    33ae:	81 11       	cpse	r24, r1
    33b0:	3b ce       	rjmp	.-906    	; 0x3028 <do_patterntrack_play+0x38a>
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
              curr_chain[i] = next_chain[i];
    33b6:	fc 01       	movw	r30, r24
    33b8:	e7 57       	subi	r30, 0x77	; 119
    33ba:	fc 4f       	sbci	r31, 0xFC	; 252
    33bc:	20 81       	ld	r18, Z
    33be:	fc 01       	movw	r30, r24
    33c0:	e7 55       	subi	r30, 0x57	; 87
    33c2:	fc 4f       	sbci	r31, 0xFC	; 252
    33c4:	20 83       	st	Z, r18
    33c6:	01 96       	adiw	r24, 0x01	; 1
            for (i = 0; i < MAX_CHAIN; i++)
    33c8:	80 32       	cpi	r24, 0x20	; 32
    33ca:	91 05       	cpc	r25, r1
    33cc:	a1 f7       	brne	.-24     	; 0x33b6 <do_patterntrack_play+0x718>
          clear_bank_leds();
    33ce:	0e 94 3a 0a 	call	0x1474	; 0x1474 <clear_bank_leds>
          set_bank_led(next_bank);
    33d2:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <next_bank>
    33d6:	0e 94 48 0a 	call	0x1490	; 0x1490 <set_bank_led>
          curr_pitch_shift = next_pitch_shift;
    33da:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <next_pitch_shift>
    33de:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curr_pitch_shift>
    33e2:	22 ce       	rjmp	.-956    	; 0x3028 <do_patterntrack_play+0x38a>

000033e4 <main>:
  ioinit(); // set up IO ports and the UART
    33e4:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <ioinit>
  init_tempo();
    33e8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <init_tempo>
  init_timer0();
    33ec:	0e 94 98 00 	call	0x130	; 0x130 <init_timer0>
  rand = tempo; // stupid initialization, do better?
    33f0:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <tempo>
    33f4:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <rand>
  dinsync_set_out(); // output DINSYNC
    33f8:	0e 94 fd 07 	call	0xffa	; 0xffa <dinsync_set_out>
  init_midi();
    33fc:	0e 94 8c 06 	call	0xd18	; 0xd18 <init_midi>
  sei(); // enable interrupts
    3400:	78 94       	sei
      sync = MIDI_SYNC;
    3402:	c2 e0       	ldi	r28, 0x02	; 2
      sync = DIN_SYNC;
    3404:	d1 e0       	ldi	r29, 0x01	; 1
    read_switches();
    3406:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
    switch (function) {
    340a:	e0 91 c1 02 	lds	r30, 0x02C1	; 0x8002c1 <function>
    340e:	e0 31       	cpi	r30, 0x10	; 16
    3410:	d0 f7       	brcc	.-12     	; 0x3406 <main+0x22>
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	eb 55       	subi	r30, 0x5B	; 91
    3416:	f5 4e       	sbci	r31, 0xE5	; 229
    3418:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__tablejump2__>
      sync = INTERNAL_SYNC;
    341c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      do_computer_control();
    3420:	0e 94 31 0c 	call	0x1862	; 0x1862 <do_computer_control>
      break;
    3424:	f0 cf       	rjmp	.-32     	; 0x3406 <main+0x22>
      sync = INTERNAL_SYNC;
    3426:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      do_pattern_edit();
    342a:	0e 94 37 13 	call	0x266e	; 0x266e <do_pattern_edit>
      break;
    342e:	eb cf       	rjmp	.-42     	; 0x3406 <main+0x22>
      sync = INTERNAL_SYNC;
    3430:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      do_patterntrack_play();
    3434:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <do_patterntrack_play>
      break;
    3438:	e6 cf       	rjmp	.-52     	; 0x3406 <main+0x22>
      sync = DIN_SYNC;
    343a:	d0 93 67 02 	sts	0x0267, r29	; 0x800267 <sync>
    343e:	fa cf       	rjmp	.-12     	; 0x3434 <main+0x50>
      sync = MIDI_SYNC;
    3440:	c0 93 67 02 	sts	0x0267, r28	; 0x800267 <sync>
      do_patterntrack_play();
    3444:	f7 cf       	rjmp	.-18     	; 0x3434 <main+0x50>
      sync = INTERNAL_SYNC;
    3446:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      do_track_edit();
    344a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <do_track_edit>
      break;
    344e:	db cf       	rjmp	.-74     	; 0x3406 <main+0x22>
      sync = INTERNAL_SYNC;
    3450:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      do_midi_mode();
    3454:	0e 94 35 07 	call	0xe6a	; 0xe6a <do_midi_mode>
      break;
    3458:	d6 cf       	rjmp	.-84     	; 0x3406 <main+0x22>
      sync = INTERNAL_SYNC;
    345a:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      do_keyboard_mode();
    345e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <do_keyboard_mode>
      break;
    3462:	d1 cf       	rjmp	.-94     	; 0x3406 <main+0x22>
      sync = INTERNAL_SYNC;
    3464:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <sync>
      turn_on_tempo();
    3468:	0e 94 a8 00 	call	0x150	; 0x150 <turn_on_tempo>
      clear_all_leds();
    346c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
        read_switches();
    3470:	0e 94 43 08 	call	0x1086	; 0x1086 <read_switches>
        if (function != RANDOM_MODE_FUNC) {
    3474:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <function>
    3478:	88 30       	cpi	r24, 0x08	; 8
    347a:	d1 f3       	breq	.-12     	; 0x3470 <main+0x8c>
          turn_off_tempo();
    347c:	0e 94 ae 00 	call	0x15c	; 0x15c <turn_off_tempo>
      break;
    3480:	c2 cf       	rjmp	.-124    	; 0x3406 <main+0x22>
      sync = MIDI_SYNC;
    3482:	c0 93 67 02 	sts	0x0267, r28	; 0x800267 <sync>
    3486:	d1 cf       	rjmp	.-94     	; 0x342a <main+0x46>
      clear_all_leds();
    3488:	0e 94 2b 0a 	call	0x1456	; 0x1456 <clear_all_leds>
      clock_leds();
    348c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <clock_leds>
    3490:	ba cf       	rjmp	.-140    	; 0x3406 <main+0x22>

00003492 <__udivmodhi4>:
    3492:	aa 1b       	sub	r26, r26
    3494:	bb 1b       	sub	r27, r27
    3496:	51 e1       	ldi	r21, 0x11	; 17
    3498:	07 c0       	rjmp	.+14     	; 0x34a8 <__udivmodhi4_ep>

0000349a <__udivmodhi4_loop>:
    349a:	aa 1f       	adc	r26, r26
    349c:	bb 1f       	adc	r27, r27
    349e:	a6 17       	cp	r26, r22
    34a0:	b7 07       	cpc	r27, r23
    34a2:	10 f0       	brcs	.+4      	; 0x34a8 <__udivmodhi4_ep>
    34a4:	a6 1b       	sub	r26, r22
    34a6:	b7 0b       	sbc	r27, r23

000034a8 <__udivmodhi4_ep>:
    34a8:	88 1f       	adc	r24, r24
    34aa:	99 1f       	adc	r25, r25
    34ac:	5a 95       	dec	r21
    34ae:	a9 f7       	brne	.-22     	; 0x349a <__udivmodhi4_loop>
    34b0:	80 95       	com	r24
    34b2:	90 95       	com	r25
    34b4:	bc 01       	movw	r22, r24
    34b6:	cd 01       	movw	r24, r26
    34b8:	08 95       	ret

000034ba <__udivmodsi4>:
    34ba:	a1 e2       	ldi	r26, 0x21	; 33
    34bc:	1a 2e       	mov	r1, r26
    34be:	aa 1b       	sub	r26, r26
    34c0:	bb 1b       	sub	r27, r27
    34c2:	fd 01       	movw	r30, r26
    34c4:	0d c0       	rjmp	.+26     	; 0x34e0 <__udivmodsi4_ep>

000034c6 <__udivmodsi4_loop>:
    34c6:	aa 1f       	adc	r26, r26
    34c8:	bb 1f       	adc	r27, r27
    34ca:	ee 1f       	adc	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	a2 17       	cp	r26, r18
    34d0:	b3 07       	cpc	r27, r19
    34d2:	e4 07       	cpc	r30, r20
    34d4:	f5 07       	cpc	r31, r21
    34d6:	20 f0       	brcs	.+8      	; 0x34e0 <__udivmodsi4_ep>
    34d8:	a2 1b       	sub	r26, r18
    34da:	b3 0b       	sbc	r27, r19
    34dc:	e4 0b       	sbc	r30, r20
    34de:	f5 0b       	sbc	r31, r21

000034e0 <__udivmodsi4_ep>:
    34e0:	66 1f       	adc	r22, r22
    34e2:	77 1f       	adc	r23, r23
    34e4:	88 1f       	adc	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	1a 94       	dec	r1
    34ea:	69 f7       	brne	.-38     	; 0x34c6 <__udivmodsi4_loop>
    34ec:	60 95       	com	r22
    34ee:	70 95       	com	r23
    34f0:	80 95       	com	r24
    34f2:	90 95       	com	r25
    34f4:	9b 01       	movw	r18, r22
    34f6:	ac 01       	movw	r20, r24
    34f8:	bd 01       	movw	r22, r26
    34fa:	cf 01       	movw	r24, r30
    34fc:	08 95       	ret

000034fe <__tablejump2__>:
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	05 90       	lpm	r0, Z+
    3504:	f4 91       	lpm	r31, Z
    3506:	e0 2d       	mov	r30, r0
    3508:	09 94       	ijmp

0000350a <_exit>:
    350a:	f8 94       	cli

0000350c <__stop_program>:
    350c:	ff cf       	rjmp	.-2      	; 0x350c <__stop_program>
    350e:	d1 01       	movw	r26, r2
    3510:	bf 01       	movw	r22, r30
    3512:	2b 02       	muls	r18, r27
    3514:	bf 01       	movw	r22, r30
    3516:	df 02       	muls	r29, r31
    3518:	bf 01       	movw	r22, r30
    351a:	4e 02       	muls	r20, r30
    351c:	b8 01       	movw	r22, r16
    351e:	df 02       	muls	r29, r31
    3520:	bf 01       	movw	r22, r30
    3522:	4e 02       	muls	r20, r30
    3524:	2b 02       	muls	r18, r27
    3526:	df 02       	muls	r29, r31
    3528:	bf 01       	movw	r22, r30
    352a:	4e 02       	muls	r20, r30
    352c:	a5 03       	fmuls	r18, r21
    352e:	bf 01       	movw	r22, r30
    3530:	fa 03       	fmulsu	r23, r18
    3532:	bf 01       	movw	r22, r30
    3534:	2c 04       	cpc	r2, r12
    3536:	bf 01       	movw	r22, r30
    3538:	22 04       	cpc	r2, r2
    353a:	8f 03       	fmulsu	r16, r23
    353c:	2c 04       	cpc	r2, r12
    353e:	bf 01       	movw	r22, r30
    3540:	22 04       	cpc	r2, r2
    3542:	fa 03       	fmulsu	r23, r18
    3544:	2c 04       	cpc	r2, r12
    3546:	bf 01       	movw	r22, r30
    3548:	22 04       	cpc	r2, r2
    354a:	28 1a       	sub	r2, r24
    354c:	23 1a       	sub	r2, r19
    354e:	44 1a       	sub	r4, r20
    3550:	13 1a       	sub	r1, r19
    3552:	2d 1a       	sub	r2, r29
    3554:	1d 1a       	sub	r1, r29
    3556:	03 1a       	sub	r0, r19
    3558:	1d 1a       	sub	r1, r29
    355a:	32 1a       	sub	r3, r18
    355c:	20 1a       	sub	r2, r16
    355e:	44 1a       	sub	r4, r20
    3560:	20 1a       	sub	r2, r16
    3562:	41 1a       	sub	r4, r17
    3564:	18 1a       	sub	r1, r24
    3566:	0e 1a       	sub	r0, r30
    3568:	18 1a       	sub	r1, r24
