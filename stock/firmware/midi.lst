   1               		.file	"midi.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_19
  12               	__vector_19:
  13               	.LFB1:
  14               		.file 1 "midi.c"
   1:midi.c        **** /*
   2:midi.c        ****  * The software for the x0xb0x is available for use in accordance with the
   3:midi.c        ****  * following open source license (MIT License). For more information about
   4:midi.c        ****  * OS licensing, please visit -> http://www.opensource.org/
   5:midi.c        ****  *
   6:midi.c        ****  * For more information about the x0xb0x project, please visit
   7:midi.c        ****  * -> http://www.ladyada.net/make/x0xb0x
   8:midi.c        ****  *
   9:midi.c        ****  *                                     *****
  10:midi.c        ****  * Copyright (c) 2005 Limor Fried
  11:midi.c        ****  *
  12:midi.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a
  13:midi.c        ****  * copy of this software and associated documentation files (the "Software"),
  14:midi.c        ****  * to deal in the Software without restriction, including without limitation
  15:midi.c        ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense,
  16:midi.c        ****  * and/or sell copies of the Software, and to permit persons to whom the
  17:midi.c        ****  * Software is furnished to do so, subject to the following conditions:
  18:midi.c        ****  *
  19:midi.c        ****  * The above copyright notice and this permission notice shall be included in
  20:midi.c        ****  * all copies or substantial portions of the Software.
  21:midi.c        ****  *
  22:midi.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  23:midi.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  24:midi.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  25:midi.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  26:midi.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  27:midi.c        ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  28:midi.c        ****  * IN THE SOFTWARE.
  29:midi.c        ****  *                                     *****
  30:midi.c        ****  *
  31:midi.c        ****  */
  32:midi.c        **** 
  33:midi.c        **** #include <avr/io.h>
  34:midi.c        **** #include <avr/interrupt.h>
  35:midi.c        **** #include <avr/signal.h>
  36:midi.c        **** #include <stdio.h>
  37:midi.c        **** #include "midi.h"
  38:midi.c        **** #include "switch.h"
  39:midi.c        **** #include "synth.h"
  40:midi.c        **** #include "main.h"
  41:midi.c        **** #include "led.h"
  42:midi.c        **** #include "dinsync.h"
  43:midi.c        **** #include "delay.h"
  44:midi.c        **** 
  45:midi.c        **** uint8_t midion_accent_velocity = 127;
  46:midi.c        **** uint8_t midioff_velocity = 32;
  47:midi.c        **** uint8_t midion_noaccent_velocity = 100;
  48:midi.c        **** 
  49:midi.c        **** uint8_t midi_out_addr; // store this in EEPROM
  50:midi.c        **** uint8_t midi_in_addr;  // store this in EEPROM, too!
  51:midi.c        **** 
  52:midi.c        **** extern volatile uint8_t dinsync_clock_timeout;
  53:midi.c        **** 
  54:midi.c        **** uint8_t midi_running_status = 0; // suck!
  55:midi.c        **** volatile int16_t midisync_clocked = 0;
  56:midi.c        **** 
  57:midi.c        **** extern uint8_t function, bank;
  58:midi.c        **** #define function_changed (function != MIDI_CONTROL_FUNC)
  59:midi.c        **** 
  60:midi.c        **** extern uint8_t playing;
  61:midi.c        **** extern uint8_t sync;
  62:midi.c        **** 
  63:midi.c        **** extern uint8_t prev_note;
  64:midi.c        **** 
  65:midi.c        **** #define ACCENT_THRESH 100
  66:midi.c        **** 
  67:midi.c        **** #define MIDI_Q_SIZE 32
  68:midi.c        **** volatile uint8_t midi_q[MIDI_Q_SIZE]; // cyclic queue for midi msgs
  69:midi.c        **** volatile static uint8_t head_idx = 0;
  70:midi.c        **** volatile static uint8_t tail_idx = 0;
  71:midi.c        **** 
  72:midi.c        **** // interrupt on receive char
  73:midi.c        **** SIGNAL(SIG_USART0_RECV) {
  15               		.loc 1 73 25 view -0
  16               		.cfi_startproc
  17 0000 1F92 1FB6 		__gcc_isr 1
  17      1F92 1124 
  17      8F93 
  18 000a 9F93      		push r25
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 25, -2
  21 000c EF93      		push r30
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 30, -3
  24 000e FF93      		push r31
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 31, -4
  27               	/* prologue: Signal */
  28               	/* frame size = 0 */
  29               	/* stack size = 3...7 */
  30               	.L__stack_usage = 3 + __gcc_isr.n_pushed
  74:midi.c        ****   char c = UDR0;
  31               		.loc 1 74 3 view .LVU1
  32               		.loc 1 74 8 is_stmt 0 view .LVU2
  33 0010 8CB1      		in r24,0xc
  34               	.LVL0:
  75:midi.c        **** 
  76:midi.c        ****   if (c == MIDI_START) {
  35               		.loc 1 76 3 is_stmt 1 view .LVU3
  36               		.loc 1 76 6 is_stmt 0 view .LVU4
  37 0012 8A3F      		cpi r24,lo8(-6)
  38 0014 01F4      		brne .L2
  77:midi.c        ****     // we handle the clock counter here so that it is processed in order, otherwise
  78:midi.c        ****     // we potentially skip a clock
  79:midi.c        **** 
  80:midi.c        ****     midisync_clocked = 0;
  39               		.loc 1 80 5 is_stmt 1 view .LVU5
  40               		.loc 1 80 22 is_stmt 0 view .LVU6
  41 0016 1092 0000 		sts midisync_clocked+1,__zero_reg__
  42 001a 1092 0000 		sts midisync_clocked,__zero_reg__
  43               	.L3:
  81:midi.c        ****     
  82:midi.c        ****     // don't return, let MIDI_START be enqueued for the rest of the start logic
  83:midi.c        ****   } else if (c == MIDI_CLOCK) {
  84:midi.c        **** 
  85:midi.c        ****     // raise dinsync clk immediately, and also sched. to drop clock
  86:midi.c        ****     // (MIDISYNC -> DINSYNC conversion);
  87:midi.c        ****     if (sync != DIN_SYNC) {
  88:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  89:midi.c        ****       dinsync_clock_timeout = 5;      // in 5ms drop the edge, is this enough?
  90:midi.c        ****     }
  91:midi.c        **** 
  92:midi.c        ****     //if (!playing)
  93:midi.c        ****     //  return;
  94:midi.c        ****     midisync_clocked++;
  95:midi.c        ****     return;
  96:midi.c        ****   }
  97:midi.c        **** 
  98:midi.c        ****   // putstring("0x"); putnum_uh(c); putstring("   ");
  99:midi.c        ****   midi_q[tail_idx++] = c; // place at end of q
  44               		.loc 1 99 3 is_stmt 1 view .LVU7
  45               		.loc 1 99 18 is_stmt 0 view .LVU8
  46 001e E091 0000 		lds r30,tail_idx
  47 0022 91E0      		ldi r25,lo8(1)
  48 0024 9E0F      		add r25,r30
  49 0026 9093 0000 		sts tail_idx,r25
  50 002a F0E0      		ldi r31,0
  51               		.loc 1 99 22 view .LVU9
  52 002c E050      		subi r30,lo8(-(midi_q))
  53 002e F040      		sbci r31,hi8(-(midi_q))
  54 0030 8083      		st Z,r24
 100:midi.c        ****   tail_idx %= MIDI_Q_SIZE;
  55               		.loc 1 100 3 is_stmt 1 view .LVU10
  56               		.loc 1 100 12 is_stmt 0 view .LVU11
  57 0032 8091 0000 		lds r24,tail_idx
  58               	.LVL1:
  59               		.loc 1 100 12 view .LVU12
  60 0036 8F71      		andi r24,lo8(31)
  61 0038 8093 0000 		sts tail_idx,r24
  62               	.LVL2:
 101:midi.c        **** 
 102:midi.c        ****   if (tail_idx == head_idx) {
  63               		.loc 1 102 3 is_stmt 1 view .LVU13
  64               		.loc 1 102 16 is_stmt 0 view .LVU14
  65 003c 9091 0000 		lds r25,tail_idx
  66 0040 8091 0000 		lds r24,head_idx
  67               		.loc 1 102 6 view .LVU15
  68 0044 9813      		cpse r25,r24
  69 0046 00C0      		rjmp .L1
 103:midi.c        ****     // i.e. there are too many msgs in the q
 104:midi.c        ****     // drop the oldest msg?
 105:midi.c        ****     head_idx++;
  70               		.loc 1 105 5 is_stmt 1 view .LVU16
  71               		.loc 1 105 13 is_stmt 0 view .LVU17
  72 0048 8091 0000 		lds r24,head_idx
  73 004c 8F5F      		subi r24,lo8(-(1))
  74 004e 8093 0000 		sts head_idx,r24
 106:midi.c        ****     head_idx %= MIDI_Q_SIZE;
  75               		.loc 1 106 5 is_stmt 1 view .LVU18
  76               		.loc 1 106 14 is_stmt 0 view .LVU19
  77 0052 8091 0000 		lds r24,head_idx
  78 0056 8F71      		andi r24,lo8(31)
  79 0058 8093 0000 		sts head_idx,r24
  80 005c 00C0      		rjmp .L1
  81               	.LVL3:
  82               	.L2:
  83:midi.c        **** 
  83               		.loc 1 83 10 is_stmt 1 view .LVU20
  83:midi.c        **** 
  84               		.loc 1 83 13 is_stmt 0 view .LVU21
  85 005e 883F      		cpi r24,lo8(-8)
  86 0060 01F4      		brne .L3
  87:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  87               		.loc 1 87 5 is_stmt 1 view .LVU22
  87:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  88               		.loc 1 87 8 is_stmt 0 view .LVU23
  89 0062 8091 0000 		lds r24,sync
  90               	.LVL4:
  87:midi.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
  91               		.loc 1 87 8 view .LVU24
  92 0066 8130      		cpi r24,lo8(1)
  93 0068 01F0      		breq .L4
  88:midi.c        ****       dinsync_clock_timeout = 5;      // in 5ms drop the edge, is this enough?
  94               		.loc 1 88 7 is_stmt 1 view .LVU25
  95 006a 949A      		sbi 0x12,4
  89:midi.c        ****     }
  96               		.loc 1 89 7 view .LVU26
  89:midi.c        ****     }
  97               		.loc 1 89 29 is_stmt 0 view .LVU27
  98 006c 85E0      		ldi r24,lo8(5)
  99 006e 8093 0000 		sts dinsync_clock_timeout,r24
 100               	.L4:
  94:midi.c        ****     return;
 101               		.loc 1 94 5 is_stmt 1 view .LVU28
  94:midi.c        ****     return;
 102               		.loc 1 94 21 is_stmt 0 view .LVU29
 103 0072 8091 0000 		lds r24,midisync_clocked
 104 0076 9091 0000 		lds r25,midisync_clocked+1
 105 007a 0196      		adiw r24,1
 106 007c 9093 0000 		sts midisync_clocked+1,r25
 107 0080 8093 0000 		sts midisync_clocked,r24
  95:midi.c        ****   }
 108               		.loc 1 95 5 is_stmt 1 view .LVU30
 109               	.L1:
 110               	/* epilogue start */
 107:midi.c        ****   }
 108:midi.c        **** }
 111               		.loc 1 108 1 is_stmt 0 view .LVU31
 112 0084 FF91      		pop r31
 113 0086 EF91      		pop r30
 114 0088 9F91      		pop r25
 115 008a 8F91 1F90 		__gcc_isr 2
 115      1FBE 1F90 
 116 0092 1895      		reti
 117               		__gcc_isr 0,r24
 118               		.cfi_endproc
 119               	.LFE1:
 121               	.global	get_midi_addr
 123               	get_midi_addr:
 124               	.LVL5:
 125               	.LFB2:
 109:midi.c        **** 
 110:midi.c        **** uint8_t get_midi_addr(uint8_t eeaddr) {
 126               		.loc 1 110 39 is_stmt 1 view -0
 127               		.cfi_startproc
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
 111:midi.c        ****   uint8_t midi_addr;
 132               		.loc 1 111 3 view .LVU33
 112:midi.c        **** 
 113:midi.c        ****   midi_addr = internal_eeprom_read8(eeaddr);
 133               		.loc 1 113 3 view .LVU34
 134               		.loc 1 113 15 is_stmt 0 view .LVU35
 135 0094 90E0      		ldi r25,0
 136 0096 0E94 0000 		call internal_eeprom_read8
 137               	.LVL6:
 114:midi.c        ****   if (midi_addr > 15)
 138               		.loc 1 114 3 is_stmt 1 view .LVU36
 115:midi.c        ****     midi_addr = 15;
 116:midi.c        ****   return midi_addr;
 139               		.loc 1 116 3 view .LVU37
 140               		.loc 1 116 10 is_stmt 0 view .LVU38
 141 009a 8031      		cpi r24,lo8(16)
 142 009c 00F0      		brlo .L10
 143 009e 8FE0      		ldi r24,lo8(15)
 144               	.L10:
 145               	/* epilogue start */
 117:midi.c        **** }
 146               		.loc 1 117 1 view .LVU39
 147 00a0 0895      		ret
 148               		.cfi_endproc
 149               	.LFE2:
 151               	.global	init_midi
 153               	init_midi:
 154               	.LFB3:
 118:midi.c        **** 
 119:midi.c        **** void init_midi(void) {
 155               		.loc 1 119 22 is_stmt 1 view -0
 156               		.cfi_startproc
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
 120:midi.c        ****   midi_in_addr = get_midi_addr(MIDIIN_ADDR_EEADDR);
 161               		.loc 1 120 3 view .LVU41
 162               		.loc 1 120 18 is_stmt 0 view .LVU42
 163 00a2 83E0      		ldi r24,lo8(3)
 164 00a4 0E94 0000 		call get_midi_addr
 165               	.LVL7:
 166               		.loc 1 120 16 view .LVU43
 167 00a8 8093 0000 		sts midi_in_addr,r24
 121:midi.c        ****   midi_out_addr = get_midi_addr(MIDIOUT_ADDR_EEADDR);
 168               		.loc 1 121 3 is_stmt 1 view .LVU44
 169               		.loc 1 121 19 is_stmt 0 view .LVU45
 170 00ac 84E0      		ldi r24,lo8(4)
 171 00ae 0E94 0000 		call get_midi_addr
 172               	.LVL8:
 173               		.loc 1 121 17 view .LVU46
 174 00b2 8093 0000 		sts midi_out_addr,r24
 175               	/* epilogue start */
 122:midi.c        **** }
 176               		.loc 1 122 1 view .LVU47
 177 00b6 0895      		ret
 178               		.cfi_endproc
 179               	.LFE3:
 181               	.global	midi_note_off
 183               	midi_note_off:
 184               	.LVL9:
 185               	.LFB6:
 123:midi.c        **** 
 124:midi.c        **** void do_midi_mode(void) {
 125:midi.c        ****   char c;
 126:midi.c        ****   uint8_t last_bank;
 127:midi.c        ****   uint8_t note, velocity;
 128:midi.c        **** 
 129:midi.c        ****   // turn tempo off!
 130:midi.c        ****   turn_off_tempo();
 131:midi.c        **** 
 132:midi.c        ****   // show midi addr on bank leds
 133:midi.c        ****   clear_bank_leds();
 134:midi.c        ****   set_bank_led(midi_in_addr);
 135:midi.c        **** 
 136:midi.c        ****   read_switches();
 137:midi.c        ****   delay_ms(100);
 138:midi.c        ****   read_switches();
 139:midi.c        ****   delay_ms(100);
 140:midi.c        ****   read_switches();
 141:midi.c        ****   last_bank = bank;
 142:midi.c        ****   prev_note = 255; // no notes played yet
 143:midi.c        **** 
 144:midi.c        ****   while (1) {
 145:midi.c        ****     read_switches();
 146:midi.c        ****     if (function_changed) {
 147:midi.c        ****       midi_notesoff(); // clear any stuck notes
 148:midi.c        ****       return;
 149:midi.c        ****     }
 150:midi.c        **** 
 151:midi.c        ****     if (last_bank != bank) {
 152:midi.c        ****       // bank knob was changed, change the midi address
 153:midi.c        ****       midi_in_addr = bank;
 154:midi.c        **** 
 155:midi.c        ****       // set the new midi address (burn to EEPROM)
 156:midi.c        ****       internal_eeprom_write8(MIDIIN_ADDR_EEADDR, midi_in_addr);
 157:midi.c        **** 
 158:midi.c        ****       clear_bank_leds();
 159:midi.c        ****       set_bank_led(midi_in_addr);
 160:midi.c        **** 
 161:midi.c        ****       last_bank = bank;
 162:midi.c        ****     }
 163:midi.c        **** 
 164:midi.c        ****     // if theres a char waiting in midi queue...
 165:midi.c        ****     if (midi_getch()) {
 166:midi.c        ****       // if its a command & either for our address or 0xF,
 167:midi.c        ****       // set the midi_running_status
 168:midi.c        ****       c = midi_getchar();
 169:midi.c        **** 
 170:midi.c        ****       if (c >> 7) {            // if the top bit is high, this is a command
 171:midi.c        ****         if ((c >> 4 == 0xF) || // universal cmd, no addressing
 172:midi.c        ****             ((c & 0xF) == midi_in_addr)) { // matches our addr
 173:midi.c        ****           midi_running_status = c >> 4;
 174:midi.c        ****         } else {
 175:midi.c        ****           // not for us, continue!
 176:midi.c        ****           midi_running_status = MIDI_IGNORE;
 177:midi.c        ****           continue;
 178:midi.c        ****         }
 179:midi.c        ****       }
 180:midi.c        **** 
 181:midi.c        ****       switch (midi_running_status) {
 182:midi.c        ****       case MIDI_IGNORE: {
 183:midi.c        ****         // somebody else's data, ignore
 184:midi.c        ****         break;
 185:midi.c        ****       }
 186:midi.c        ****       case MIDI_NOTE_ON: {
 187:midi.c        ****         if (c >>
 188:midi.c        ****             7) // if the last byte was a command then we have to get the note
 189:midi.c        ****           note = midi_getchar();
 190:midi.c        ****         else
 191:midi.c        ****           note = c; // otherwise, this was a running status, and c is the note
 192:midi.c        **** 
 193:midi.c        ****         velocity = midi_getchar();
 194:midi.c        ****         /*
 195:midi.c        ****           putstring("MIDI note on (note "); putnum_ud(note);
 196:midi.c        ****           putstring(") (velocity "); putnum_ud(velocity);
 197:midi.c        ****           putstring(")\n\r");
 198:midi.c        ****         */
 199:midi.c        **** 
 200:midi.c        ****         midi_note_on(note, velocity);
 201:midi.c        ****         break;
 202:midi.c        ****       }
 203:midi.c        ****       case MIDI_NOTE_OFF: {
 204:midi.c        ****         if (c >> 7)
 205:midi.c        ****           note = midi_getchar();
 206:midi.c        ****         else
 207:midi.c        ****           note = c;
 208:midi.c        **** 
 209:midi.c        ****         velocity = midi_getchar();
 210:midi.c        ****         /*
 211:midi.c        ****           putstring("MIDI note off (note "); putnum_ud(note);
 212:midi.c        ****           putstring(") (velocity "); putnum_ud(velocity);
 213:midi.c        ****           putstring(")\n\r");
 214:midi.c        ****         */
 215:midi.c        **** 
 216:midi.c        ****         midi_note_off(note, velocity);
 217:midi.c        **** 
 218:midi.c        ****         break;
 219:midi.c        ****       }
 220:midi.c        ****       case MIDI_PITCHBEND: {
 221:midi.c        ****         // putstring("MIDI Slide\n\r");
 222:midi.c        **** 
 223:midi.c        ****         break;
 224:midi.c        ****       }
 225:midi.c        ****       default:
 226:midi.c        ****         /*putstring("Received Unknown MIDI: 0x"); putnum_uh(c);
 227:midi.c        ****           putstring("\n\r"); */
 228:midi.c        ****         break;
 229:midi.c        ****       }
 230:midi.c        ****     }
 231:midi.c        ****   }
 232:midi.c        **** }
 233:midi.c        **** // midi handling code!
 234:midi.c        **** 
 235:midi.c        **** uint8_t midi_recv_cmd(void) {
 236:midi.c        ****   uint8_t c;
 237:midi.c        **** 
 238:midi.c        ****   if (midi_getch()) {
 239:midi.c        ****     c = midi_getchar();
 240:midi.c        ****     if (c >> 7) {        // if the top bit is high, this is a command
 241:midi.c        ****       if (c >> 4 == 0xF) // universal cmd, no addressing
 242:midi.c        ****         return c;
 243:midi.c        **** 
 244:midi.c        ****       if ((c & 0xF) == midi_in_addr) {
 245:midi.c        ****         midi_running_status = c >> 4;
 246:midi.c        ****         return c;
 247:midi.c        ****       }
 248:midi.c        ****     }
 249:midi.c        ****   }
 250:midi.c        ****   return 0;
 251:midi.c        **** }
 252:midi.c        **** 
 253:midi.c        **** void midi_note_off(uint8_t note, uint8_t velocity) {
 186               		.loc 1 253 52 is_stmt 1 view -0
 187               		.cfi_startproc
 188               	/* prologue: function */
 189               	/* frame size = 0 */
 190               	/* stack size = 0 */
 191               	.L__stack_usage = 0
 254:midi.c        ****   if (note == prev_note) {
 192               		.loc 1 254 3 view .LVU49
 193               		.loc 1 254 6 is_stmt 0 view .LVU50
 194 00b8 9091 0000 		lds r25,prev_note
 195 00bc 9813      		cpse r25,r24
 196 00be 00C0      		rjmp .L12
 197               	.LBB4:
 198               	.LBI4:
 253:midi.c        ****   if (note == prev_note) {
 199               		.loc 1 253 6 is_stmt 1 view .LVU51
 200               	.LVL10:
 201               	.LBB5:
 255:midi.c        ****     note_off(0);
 202               		.loc 1 255 5 view .LVU52
 203 00c0 80E0      		ldi r24,0
 204               	.LVL11:
 205               		.loc 1 255 5 is_stmt 0 view .LVU53
 206 00c2 0E94 0000 		call note_off
 207               	.LVL12:
 256:midi.c        ****     prev_note = 255;
 208               		.loc 1 256 5 is_stmt 1 view .LVU54
 209               		.loc 1 256 15 is_stmt 0 view .LVU55
 210 00c6 8FEF      		ldi r24,lo8(-1)
 211 00c8 8093 0000 		sts prev_note,r24
 212               	.LVL13:
 213               	.L12:
 214               	/* epilogue start */
 215               		.loc 1 256 15 view .LVU56
 216               	.LBE5:
 217               	.LBE4:
 257:midi.c        ****   }
 258:midi.c        **** }
 218               		.loc 1 258 1 view .LVU57
 219 00cc 0895      		ret
 220               		.cfi_endproc
 221               	.LFE6:
 223               	.global	midi_note_on
 225               	midi_note_on:
 226               	.LVL14:
 227               	.LFB7:
 259:midi.c        **** 
 260:midi.c        **** void midi_note_on(uint8_t note, uint8_t velocity) {
 228               		.loc 1 260 51 is_stmt 1 view -0
 229               		.cfi_startproc
 230               		.loc 1 260 51 is_stmt 0 view .LVU59
 231 00ce CF93      		push r28
 232               		.cfi_def_cfa_offset 3
 233               		.cfi_offset 28, -2
 234               	/* prologue: function */
 235               	/* frame size = 0 */
 236               	/* stack size = 1 */
 237               	.L__stack_usage = 1
 238 00d0 C82F      		mov r28,r24
 239 00d2 962F      		mov r25,r22
 261:midi.c        ****   uint8_t slide = 0;
 240               		.loc 1 261 3 is_stmt 1 view .LVU60
 241               	.LVL15:
 262:midi.c        **** 
 263:midi.c        ****   if (velocity == 0) {
 242               		.loc 1 263 3 view .LVU61
 243               		.loc 1 263 6 is_stmt 0 view .LVU62
 244 00d4 6111      		cpse r22,__zero_reg__
 245 00d6 00C0      		rjmp .L15
 264:midi.c        ****     // strange midi thing: velocity 0 -> note off!
 265:midi.c        ****     midi_note_off(note, velocity);
 246               		.loc 1 265 5 is_stmt 1 view .LVU63
 247 00d8 60E0      		ldi r22,0
 248               	.LVL16:
 249               	/* epilogue start */
 266:midi.c        ****   } else {
 267:midi.c        ****     if (prev_note != 255)
 268:midi.c        ****       slide = 1;
 269:midi.c        **** 
 270:midi.c        ****     if (velocity > ACCENT_THRESH) {
 271:midi.c        ****       note_on(note - 0x19, slide, 1); // with accent
 272:midi.c        ****     } else {
 273:midi.c        ****       note_on(note - 0x19, slide, 0); // no accent
 274:midi.c        ****     }
 275:midi.c        **** 
 276:midi.c        ****     prev_note = note;
 277:midi.c        ****   }
 278:midi.c        **** }
 250               		.loc 1 278 1 is_stmt 0 view .LVU64
 251 00da CF91      		pop r28
 265:midi.c        ****   } else {
 252               		.loc 1 265 5 view .LVU65
 253 00dc 0C94 0000 		jmp midi_note_off
 254               	.LVL17:
 255               	.L15:
 256               	.LBB8:
 257               	.LBI8:
 260:midi.c        ****   uint8_t slide = 0;
 258               		.loc 1 260 6 is_stmt 1 view .LVU66
 259               	.LBB9:
 267:midi.c        ****       slide = 1;
 260               		.loc 1 267 5 view .LVU67
 267:midi.c        ****       slide = 1;
 261               		.loc 1 267 8 is_stmt 0 view .LVU68
 262 00e0 61E0      		ldi r22,lo8(1)
 263               	.LVL18:
 267:midi.c        ****       slide = 1;
 264               		.loc 1 267 8 view .LVU69
 265 00e2 8091 0000 		lds r24,prev_note
 266               	.LVL19:
 267:midi.c        ****       slide = 1;
 267               		.loc 1 267 8 view .LVU70
 268 00e6 8F3F      		cpi r24,lo8(-1)
 269 00e8 01F4      		brne .L16
 270 00ea 60E0      		ldi r22,0
 271               	.L16:
 272               	.LVL20:
 270:midi.c        ****       note_on(note - 0x19, slide, 1); // with accent
 273               		.loc 1 270 5 is_stmt 1 view .LVU71
 274 00ec 87EE      		ldi r24,lo8(-25)
 275 00ee 8C0F      		add r24,r28
 271:midi.c        ****     } else {
 276               		.loc 1 271 7 is_stmt 0 view .LVU72
 277 00f0 41E0      		ldi r20,lo8(1)
 270:midi.c        ****       note_on(note - 0x19, slide, 1); // with accent
 278               		.loc 1 270 8 view .LVU73
 279 00f2 9536      		cpi r25,lo8(101)
 280 00f4 00F4      		brsh .L19
 273:midi.c        ****     }
 281               		.loc 1 273 7 is_stmt 1 view .LVU74
 282 00f6 40E0      		ldi r20,0
 283               	.L19:
 284 00f8 0E94 0000 		call note_on
 285               	.LVL21:
 276:midi.c        ****   }
 286               		.loc 1 276 5 view .LVU75
 276:midi.c        ****   }
 287               		.loc 1 276 15 is_stmt 0 view .LVU76
 288 00fc C093 0000 		sts prev_note,r28
 289               	.LVL22:
 290               	/* epilogue start */
 276:midi.c        ****   }
 291               		.loc 1 276 15 view .LVU77
 292               	.LBE9:
 293               	.LBE8:
 294               		.loc 1 278 1 view .LVU78
 295 0100 CF91      		pop r28
 296               	.LVL23:
 297               		.loc 1 278 1 view .LVU79
 298 0102 0895      		ret
 299               		.cfi_endproc
 300               	.LFE7:
 302               	.global	midi_putchar
 304               	midi_putchar:
 305               	.LFB10:
 279:midi.c        **** 
 280:midi.c        **** void midi_send_note_on(uint8_t note) {
 281:midi.c        ****   midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
 282:midi.c        **** 
 283:midi.c        ****   if ((note & 0x3F) == 0)
 284:midi.c        ****     midi_putchar(0); // rest
 285:midi.c        ****   else
 286:midi.c        ****     midi_putchar((note & 0x3F) + 0x19); // note
 287:midi.c        **** 
 288:midi.c        ****   if ((note >> 6) & 0x1) // if theres an accent, give high velocity
 289:midi.c        ****     midi_putchar(midion_accent_velocity);
 290:midi.c        ****   else
 291:midi.c        ****     midi_putchar(midion_noaccent_velocity);
 292:midi.c        **** }
 293:midi.c        **** 
 294:midi.c        **** void midi_send_note_off(uint8_t note) {
 295:midi.c        ****   midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr); // command
 296:midi.c        **** 
 297:midi.c        ****   if ((note & 0x3F) == 0)
 298:midi.c        ****     midi_putchar(0); // rest
 299:midi.c        ****   else
 300:midi.c        ****     midi_putchar((note & 0x3F) + 0x19); // note
 301:midi.c        **** 
 302:midi.c        ****   midi_putchar(midioff_velocity); // velocity
 303:midi.c        **** }
 304:midi.c        **** 
 305:midi.c        **** int midi_putchar(char c) {
 306               		.loc 1 305 26 is_stmt 1 view -0
 307               		.cfi_startproc
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 0 */
 311               	.L__stack_usage = 0
 312               	.LVL24:
 313               	.L21:
 306:midi.c        ****   loop_until_bit_is_set(UCSR0A, UDRE0);
 314               		.loc 1 306 3 discriminator 1 view .LVU81
 315               		.loc 1 306 3 discriminator 1 view .LVU82
 316 0104 5D9B      		sbis 0xb,5
 317 0106 00C0      		rjmp .L21
 307:midi.c        ****   UDR0 = c;
 318               		.loc 1 307 3 view .LVU83
 319               		.loc 1 307 8 is_stmt 0 view .LVU84
 320 0108 8CB9      		out 0xc,r24
 308:midi.c        ****   return 0;
 321               		.loc 1 308 3 is_stmt 1 view .LVU85
 309:midi.c        **** }
 322               		.loc 1 309 1 is_stmt 0 view .LVU86
 323 010a 90E0      		ldi r25,0
 324 010c 80E0      		ldi r24,0
 325               	.LVL25:
 326               	/* epilogue start */
 327               		.loc 1 309 1 view .LVU87
 328 010e 0895      		ret
 329               		.cfi_endproc
 330               	.LFE10:
 332               	.global	midi_send_note_on
 334               	midi_send_note_on:
 335               	.LVL26:
 336               	.LFB8:
 280:midi.c        ****   midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
 337               		.loc 1 280 38 is_stmt 1 view -0
 338               		.cfi_startproc
 280:midi.c        ****   midi_putchar((MIDI_NOTE_ON << 4) | midi_out_addr);
 339               		.loc 1 280 38 is_stmt 0 view .LVU89
 340 0110 CF93      		push r28
 341               		.cfi_def_cfa_offset 3
 342               		.cfi_offset 28, -2
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 1 */
 346               	.L__stack_usage = 1
 347 0112 C82F      		mov r28,r24
 281:midi.c        **** 
 348               		.loc 1 281 3 is_stmt 1 view .LVU90
 349 0114 8091 0000 		lds r24,midi_out_addr
 350               	.LVL27:
 281:midi.c        **** 
 351               		.loc 1 281 3 is_stmt 0 view .LVU91
 352 0118 8069      		ori r24,lo8(-112)
 353 011a 0E94 0000 		call midi_putchar
 354               	.LVL28:
 283:midi.c        ****     midi_putchar(0); // rest
 355               		.loc 1 283 3 is_stmt 1 view .LVU92
 356 011e 8C2F      		mov r24,r28
 357 0120 8F73      		andi r24,lo8(63)
 283:midi.c        ****     midi_putchar(0); // rest
 358               		.loc 1 283 6 is_stmt 0 view .LVU93
 359 0122 01F4      		brne .L25
 360               	.L28:
 286:midi.c        **** 
 361               		.loc 1 286 5 view .LVU94
 362 0124 0E94 0000 		call midi_putchar
 363               	.LVL29:
 288:midi.c        ****     midi_putchar(midion_accent_velocity);
 364               		.loc 1 288 3 is_stmt 1 view .LVU95
 289:midi.c        ****   else
 365               		.loc 1 289 5 is_stmt 0 view .LVU96
 366 0128 8091 0000 		lds r24,midion_accent_velocity
 288:midi.c        ****     midi_putchar(midion_accent_velocity);
 367               		.loc 1 288 6 view .LVU97
 368 012c C6FF      		sbrs r28,6
 291:midi.c        **** }
 369               		.loc 1 291 5 is_stmt 1 view .LVU98
 370 012e 8091 0000 		lds r24,midion_noaccent_velocity
 371               	.L29:
 372               	/* epilogue start */
 292:midi.c        **** 
 373               		.loc 1 292 1 is_stmt 0 view .LVU99
 374 0132 CF91      		pop r28
 375               	.LVL30:
 291:midi.c        **** }
 376               		.loc 1 291 5 view .LVU100
 377 0134 0C94 0000 		jmp midi_putchar
 378               	.LVL31:
 379               	.L25:
 286:midi.c        **** 
 380               		.loc 1 286 5 is_stmt 1 view .LVU101
 381 0138 875E      		subi r24,lo8(-(25))
 382 013a 00C0      		rjmp .L28
 383               		.cfi_endproc
 384               	.LFE8:
 386               	.global	midi_send_note_off
 388               	midi_send_note_off:
 389               	.LVL32:
 390               	.LFB9:
 294:midi.c        ****   midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr); // command
 391               		.loc 1 294 39 view -0
 392               		.cfi_startproc
 294:midi.c        ****   midi_putchar((MIDI_NOTE_OFF << 4) | midi_out_addr); // command
 393               		.loc 1 294 39 is_stmt 0 view .LVU103
 394 013c CF93      		push r28
 395               		.cfi_def_cfa_offset 3
 396               		.cfi_offset 28, -2
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 399               	/* stack size = 1 */
 400               	.L__stack_usage = 1
 401 013e C82F      		mov r28,r24
 295:midi.c        **** 
 402               		.loc 1 295 3 is_stmt 1 view .LVU104
 403 0140 8091 0000 		lds r24,midi_out_addr
 404               	.LVL33:
 295:midi.c        **** 
 405               		.loc 1 295 3 is_stmt 0 view .LVU105
 406 0144 8068      		ori r24,lo8(-128)
 407 0146 0E94 0000 		call midi_putchar
 408               	.LVL34:
 297:midi.c        ****     midi_putchar(0); // rest
 409               		.loc 1 297 3 is_stmt 1 view .LVU106
 410 014a 8C2F      		mov r24,r28
 411 014c 8F73      		andi r24,lo8(63)
 297:midi.c        ****     midi_putchar(0); // rest
 412               		.loc 1 297 6 is_stmt 0 view .LVU107
 413 014e 01F4      		brne .L31
 414               	.L33:
 300:midi.c        **** 
 415               		.loc 1 300 5 view .LVU108
 416 0150 0E94 0000 		call midi_putchar
 417               	.LVL35:
 302:midi.c        **** }
 418               		.loc 1 302 3 is_stmt 1 view .LVU109
 419 0154 8091 0000 		lds r24,midioff_velocity
 420               	/* epilogue start */
 303:midi.c        **** 
 421               		.loc 1 303 1 is_stmt 0 view .LVU110
 422 0158 CF91      		pop r28
 423               	.LVL36:
 302:midi.c        **** }
 424               		.loc 1 302 3 view .LVU111
 425 015a 0C94 0000 		jmp midi_putchar
 426               	.LVL37:
 427               	.L31:
 300:midi.c        **** 
 428               		.loc 1 300 5 is_stmt 1 view .LVU112
 429 015e 875E      		subi r24,lo8(-(25))
 430 0160 00C0      		rjmp .L33
 431               		.cfi_endproc
 432               	.LFE9:
 434               	.global	midi_getch
 436               	midi_getch:
 437               	.LFB11:
 310:midi.c        **** 
 311:midi.c        **** int midi_getch(void) { // checks if there is a character waiting!
 438               		.loc 1 311 22 view -0
 439               		.cfi_startproc
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
 312:midi.c        ****   if (head_idx != tail_idx)
 444               		.loc 1 312 3 view .LVU114
 445               		.loc 1 312 16 is_stmt 0 view .LVU115
 446 0162 3091 0000 		lds r19,head_idx
 447 0166 2091 0000 		lds r18,tail_idx
 448               		.loc 1 312 6 view .LVU116
 449 016a 81E0      		ldi r24,lo8(1)
 450 016c 90E0      		ldi r25,0
 451 016e 3213      		cpse r19,r18
 452 0170 00C0      		rjmp .L35
 453 0172 90E0      		ldi r25,0
 454 0174 80E0      		ldi r24,0
 455               	.L35:
 456               	/* epilogue start */
 313:midi.c        ****     return 1;
 314:midi.c        ****   return 0;
 315:midi.c        **** }
 457               		.loc 1 315 1 view .LVU117
 458 0176 0895      		ret
 459               		.cfi_endproc
 460               	.LFE11:
 462               	.global	midi_getchar
 464               	midi_getchar:
 465               	.LFB12:
 316:midi.c        **** 
 317:midi.c        **** int midi_getchar(void) {
 466               		.loc 1 317 24 is_stmt 1 view -0
 467               		.cfi_startproc
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 0 */
 471               	.L__stack_usage = 0
 472               	.L37:
 318:midi.c        ****   char c;
 319:midi.c        **** 
 320:midi.c        ****   while (head_idx == tail_idx)
 321:midi.c        ****     ;
 473               		.loc 1 321 5 discriminator 1 view .LVU119
 320:midi.c        ****     ;
 474               		.loc 1 320 19 is_stmt 0 discriminator 1 view .LVU120
 475 0178 9091 0000 		lds r25,head_idx
 476 017c 8091 0000 		lds r24,tail_idx
 320:midi.c        ****     ;
 477               		.loc 1 320 9 discriminator 1 view .LVU121
 478 0180 9817      		cp r25,r24
 479 0182 01F0      		breq .L37
 322:midi.c        **** 
 323:midi.c        ****   cli();
 480               		.loc 1 323 3 is_stmt 1 view .LVU122
 481               	/* #APP */
 482               	 ;  323 "midi.c" 1
 483 0184 F894      		cli
 484               	 ;  0 "" 2
 324:midi.c        ****   c = midi_q[head_idx++];
 485               		.loc 1 324 3 view .LVU123
 486               		.loc 1 324 22 is_stmt 0 view .LVU124
 487               	/* #NOAPP */
 488 0186 E091 0000 		lds r30,head_idx
 489 018a 81E0      		ldi r24,lo8(1)
 490 018c 8E0F      		add r24,r30
 491 018e 8093 0000 		sts head_idx,r24
 492 0192 F0E0      		ldi r31,0
 493               		.loc 1 324 5 view .LVU125
 494 0194 E050      		subi r30,lo8(-(midi_q))
 495 0196 F040      		sbci r31,hi8(-(midi_q))
 496 0198 8081      		ld r24,Z
 497               	.LVL38:
 325:midi.c        ****   head_idx %= MIDI_Q_SIZE;
 498               		.loc 1 325 3 is_stmt 1 view .LVU126
 499               		.loc 1 325 12 is_stmt 0 view .LVU127
 500 019a 9091 0000 		lds r25,head_idx
 501 019e 9F71      		andi r25,lo8(31)
 502 01a0 9093 0000 		sts head_idx,r25
 326:midi.c        ****   sei();
 503               		.loc 1 326 3 is_stmt 1 view .LVU128
 504               	/* #APP */
 505               	 ;  326 "midi.c" 1
 506 01a4 7894      		sei
 507               	 ;  0 "" 2
 327:midi.c        **** 
 328:midi.c        ****   return c;
 508               		.loc 1 328 3 view .LVU129
 329:midi.c        **** }
 509               		.loc 1 329 1 is_stmt 0 view .LVU130
 510               	/* #NOAPP */
 511 01a6 90E0      		ldi r25,0
 512               	/* epilogue start */
 513 01a8 0895      		ret
 514               		.cfi_endproc
 515               	.LFE12:
 517               	.global	midi_recv_cmd
 519               	midi_recv_cmd:
 520               	.LFB5:
 235:midi.c        ****   uint8_t c;
 521               		.loc 1 235 29 is_stmt 1 view -0
 522               		.cfi_startproc
 523               	/* prologue: function */
 524               	/* frame size = 0 */
 525               	/* stack size = 0 */
 526               	.L__stack_usage = 0
 236:midi.c        **** 
 527               		.loc 1 236 3 view .LVU132
 238:midi.c        ****     c = midi_getchar();
 528               		.loc 1 238 3 view .LVU133
 238:midi.c        ****     c = midi_getchar();
 529               		.loc 1 238 7 is_stmt 0 view .LVU134
 530 01aa 0E94 0000 		call midi_getch
 531               	.LVL39:
 238:midi.c        ****     c = midi_getchar();
 532               		.loc 1 238 6 view .LVU135
 533 01ae 892B      		or r24,r25
 534 01b0 01F4      		brne .L40
 535               	.L42:
 250:midi.c        **** }
 536               		.loc 1 250 10 view .LVU136
 537 01b2 80E0      		ldi r24,0
 538 01b4 0895      		ret
 539               	.L40:
 239:midi.c        ****     if (c >> 7) {        // if the top bit is high, this is a command
 540               		.loc 1 239 5 is_stmt 1 view .LVU137
 239:midi.c        ****     if (c >> 7) {        // if the top bit is high, this is a command
 541               		.loc 1 239 9 is_stmt 0 view .LVU138
 542 01b6 0E94 0000 		call midi_getchar
 543               	.LVL40:
 544 01ba 9C01      		movw r18,r24
 545               	.LVL41:
 240:midi.c        ****       if (c >> 4 == 0xF) // universal cmd, no addressing
 546               		.loc 1 240 5 is_stmt 1 view .LVU139
 240:midi.c        ****       if (c >> 4 == 0xF) // universal cmd, no addressing
 547               		.loc 1 240 8 is_stmt 0 view .LVU140
 548 01bc 87FF      		sbrs r24,7
 549 01be 00C0      		rjmp .L42
 241:midi.c        ****         return c;
 550               		.loc 1 241 7 is_stmt 1 view .LVU141
 241:midi.c        ****         return c;
 551               		.loc 1 241 18 is_stmt 0 view .LVU142
 552 01c0 982F      		mov r25,r24
 553 01c2 9295      		swap r25
 554 01c4 9F70      		andi r25,lo8(15)
 241:midi.c        ****         return c;
 555               		.loc 1 241 10 view .LVU143
 556 01c6 9F30      		cpi r25,lo8(15)
 557 01c8 01F0      		breq .L39
 244:midi.c        ****         midi_running_status = c >> 4;
 558               		.loc 1 244 7 is_stmt 1 view .LVU144
 244:midi.c        ****         midi_running_status = c >> 4;
 559               		.loc 1 244 14 is_stmt 0 view .LVU145
 560 01ca 2F70      		andi r18,15
 561 01cc 3327      		clr r19
 562               	.LVL42:
 244:midi.c        ****         midi_running_status = c >> 4;
 563               		.loc 1 244 21 view .LVU146
 564 01ce 4091 0000 		lds r20,midi_in_addr
 244:midi.c        ****         midi_running_status = c >> 4;
 565               		.loc 1 244 10 view .LVU147
 566 01d2 4217      		cp r20,r18
 567 01d4 1306      		cpc __zero_reg__,r19
 568 01d6 01F4      		brne .L42
 245:midi.c        ****         return c;
 569               		.loc 1 245 9 is_stmt 1 view .LVU148
 245:midi.c        ****         return c;
 570               		.loc 1 245 29 is_stmt 0 view .LVU149
 571 01d8 9093 0000 		sts midi_running_status,r25
 246:midi.c        ****       }
 572               		.loc 1 246 9 is_stmt 1 view .LVU150
 573               	.L39:
 574               	/* epilogue start */
 251:midi.c        **** 
 575               		.loc 1 251 1 is_stmt 0 view .LVU151
 576 01dc 0895      		ret
 577               		.cfi_endproc
 578               	.LFE5:
 580               	.global	midi_notesoff
 582               	midi_notesoff:
 583               	.LFB14:
 330:midi.c        **** 
 331:midi.c        **** // sends a midi stop and 'all notes off' message
 332:midi.c        **** void midi_stop(void) {
 333:midi.c        ****   // if we were generating midi, stop all notes and send a clockstop signal
 334:midi.c        ****   if (sync != MIDI_SYNC) {
 335:midi.c        ****     midi_putchar(MIDI_STOP);
 336:midi.c        ****     midi_notesoff();
 337:midi.c        ****   }
 338:midi.c        **** }
 339:midi.c        **** 
 340:midi.c        **** void midi_notesoff(void) {
 584               		.loc 1 340 26 is_stmt 1 view -0
 585               		.cfi_startproc
 586               	/* prologue: function */
 587               	/* frame size = 0 */
 588               	/* stack size = 0 */
 589               	.L__stack_usage = 0
 341:midi.c        ****   midi_putchar((MIDI_CONTROLLER << 4) | midi_out_addr);
 590               		.loc 1 341 3 view .LVU153
 591 01de 8091 0000 		lds r24,midi_out_addr
 592 01e2 806B      		ori r24,lo8(-80)
 593 01e4 0E94 0000 		call midi_putchar
 594               	.LVL43:
 342:midi.c        ****   midi_putchar(MIDI_ALL_NOTES_OFF);
 595               		.loc 1 342 3 view .LVU154
 596 01e8 8BE7      		ldi r24,lo8(123)
 597 01ea 0E94 0000 		call midi_putchar
 598               	.LVL44:
 343:midi.c        ****   midi_putchar(0);
 599               		.loc 1 343 3 view .LVU155
 600 01ee 80E0      		ldi r24,0
 601 01f0 0C94 0000 		jmp midi_putchar
 602               	.LVL45:
 603               		.cfi_endproc
 604               	.LFE14:
 606               	.global	do_midi_mode
 608               	do_midi_mode:
 609               	.LFB4:
 124:midi.c        ****   char c;
 610               		.loc 1 124 25 view -0
 611               		.cfi_startproc
 612 01f4 CF93      		push r28
 613               		.cfi_def_cfa_offset 3
 614               		.cfi_offset 28, -2
 615 01f6 DF93      		push r29
 616               		.cfi_def_cfa_offset 4
 617               		.cfi_offset 29, -3
 618               	/* prologue: function */
 619               	/* frame size = 0 */
 620               	/* stack size = 2 */
 621               	.L__stack_usage = 2
 125:midi.c        ****   uint8_t last_bank;
 622               		.loc 1 125 3 view .LVU157
 126:midi.c        ****   uint8_t note, velocity;
 623               		.loc 1 126 3 view .LVU158
 127:midi.c        **** 
 624               		.loc 1 127 3 view .LVU159
 130:midi.c        **** 
 625               		.loc 1 130 3 view .LVU160
 626 01f8 0E94 0000 		call turn_off_tempo
 627               	.LVL46:
 133:midi.c        ****   set_bank_led(midi_in_addr);
 628               		.loc 1 133 3 view .LVU161
 629 01fc 0E94 0000 		call clear_bank_leds
 630               	.LVL47:
 134:midi.c        **** 
 631               		.loc 1 134 3 view .LVU162
 632 0200 8091 0000 		lds r24,midi_in_addr
 633 0204 0E94 0000 		call set_bank_led
 634               	.LVL48:
 136:midi.c        ****   delay_ms(100);
 635               		.loc 1 136 3 view .LVU163
 636 0208 0E94 0000 		call read_switches
 637               	.LVL49:
 137:midi.c        ****   read_switches();
 638               		.loc 1 137 3 view .LVU164
 639 020c 84E6      		ldi r24,lo8(100)
 640 020e 0E94 0000 		call delay_ms
 641               	.LVL50:
 138:midi.c        ****   delay_ms(100);
 642               		.loc 1 138 3 view .LVU165
 643 0212 0E94 0000 		call read_switches
 644               	.LVL51:
 139:midi.c        ****   read_switches();
 645               		.loc 1 139 3 view .LVU166
 646 0216 84E6      		ldi r24,lo8(100)
 647 0218 0E94 0000 		call delay_ms
 648               	.LVL52:
 140:midi.c        ****   last_bank = bank;
 649               		.loc 1 140 3 view .LVU167
 650 021c 0E94 0000 		call read_switches
 651               	.LVL53:
 141:midi.c        ****   prev_note = 255; // no notes played yet
 652               		.loc 1 141 3 view .LVU168
 141:midi.c        ****   prev_note = 255; // no notes played yet
 653               		.loc 1 141 13 is_stmt 0 view .LVU169
 654 0220 D091 0000 		lds r29,bank
 655               	.LVL54:
 142:midi.c        **** 
 656               		.loc 1 142 3 is_stmt 1 view .LVU170
 142:midi.c        **** 
 657               		.loc 1 142 13 is_stmt 0 view .LVU171
 658 0224 8FEF      		ldi r24,lo8(-1)
 659 0226 8093 0000 		sts prev_note,r24
 660               	.L48:
 144:midi.c        ****     read_switches();
 661               		.loc 1 144 3 is_stmt 1 view .LVU172
 145:midi.c        ****     if (function_changed) {
 662               		.loc 1 145 5 view .LVU173
 663 022a 0E94 0000 		call read_switches
 664               	.LVL55:
 146:midi.c        ****       midi_notesoff(); // clear any stuck notes
 665               		.loc 1 146 5 view .LVU174
 146:midi.c        ****       midi_notesoff(); // clear any stuck notes
 666               		.loc 1 146 8 is_stmt 0 view .LVU175
 667 022e 8091 0000 		lds r24,function
 668 0232 8823      		tst r24
 669 0234 01F0      		breq .L49
 147:midi.c        ****       return;
 670               		.loc 1 147 7 is_stmt 1 view .LVU176
 671               	/* epilogue start */
 232:midi.c        **** // midi handling code!
 672               		.loc 1 232 1 is_stmt 0 view .LVU177
 673 0236 DF91      		pop r29
 674               	.LVL56:
 232:midi.c        **** // midi handling code!
 675               		.loc 1 232 1 view .LVU178
 676 0238 CF91      		pop r28
 147:midi.c        ****       return;
 677               		.loc 1 147 7 view .LVU179
 678 023a 0C94 0000 		jmp midi_notesoff
 679               	.LVL57:
 680               	.L49:
 151:midi.c        ****       // bank knob was changed, change the midi address
 681               		.loc 1 151 5 is_stmt 1 view .LVU180
 151:midi.c        ****       // bank knob was changed, change the midi address
 682               		.loc 1 151 19 is_stmt 0 view .LVU181
 683 023e 6091 0000 		lds r22,bank
 151:midi.c        ****       // bank knob was changed, change the midi address
 684               		.loc 1 151 8 view .LVU182
 685 0242 6D17      		cp r22,r29
 686 0244 01F0      		breq .L50
 153:midi.c        **** 
 687               		.loc 1 153 7 is_stmt 1 view .LVU183
 153:midi.c        **** 
 688               		.loc 1 153 20 is_stmt 0 view .LVU184
 689 0246 6093 0000 		sts midi_in_addr,r22
 156:midi.c        **** 
 690               		.loc 1 156 7 is_stmt 1 view .LVU185
 691 024a 83E0      		ldi r24,lo8(3)
 692 024c 90E0      		ldi r25,0
 693 024e 0E94 0000 		call internal_eeprom_write8
 694               	.LVL58:
 158:midi.c        ****       set_bank_led(midi_in_addr);
 695               		.loc 1 158 7 view .LVU186
 696 0252 0E94 0000 		call clear_bank_leds
 697               	.LVL59:
 159:midi.c        **** 
 698               		.loc 1 159 7 view .LVU187
 699 0256 8091 0000 		lds r24,midi_in_addr
 700 025a 0E94 0000 		call set_bank_led
 701               	.LVL60:
 161:midi.c        ****     }
 702               		.loc 1 161 7 view .LVU188
 161:midi.c        ****     }
 703               		.loc 1 161 17 is_stmt 0 view .LVU189
 704 025e D091 0000 		lds r29,bank
 705               	.LVL61:
 706               	.L50:
 165:midi.c        ****       // if its a command & either for our address or 0xF,
 707               		.loc 1 165 5 is_stmt 1 view .LVU190
 165:midi.c        ****       // if its a command & either for our address or 0xF,
 708               		.loc 1 165 9 is_stmt 0 view .LVU191
 709 0262 0E94 0000 		call midi_getch
 710               	.LVL62:
 165:midi.c        ****       // if its a command & either for our address or 0xF,
 711               		.loc 1 165 8 view .LVU192
 712 0266 892B      		or r24,r25
 713 0268 01F0      		breq .L48
 168:midi.c        **** 
 714               		.loc 1 168 7 is_stmt 1 view .LVU193
 168:midi.c        **** 
 715               		.loc 1 168 11 is_stmt 0 view .LVU194
 716 026a 0E94 0000 		call midi_getchar
 717               	.LVL63:
 718 026e 9C01      		movw r18,r24
 168:midi.c        **** 
 719               		.loc 1 168 9 view .LVU195
 720 0270 C82F      		mov r28,r24
 721               	.LVL64:
 170:midi.c        ****         if ((c >> 4 == 0xF) || // universal cmd, no addressing
 722               		.loc 1 170 7 is_stmt 1 view .LVU196
 170:midi.c        ****         if ((c >> 4 == 0xF) || // universal cmd, no addressing
 723               		.loc 1 170 10 is_stmt 0 view .LVU197
 724 0272 87FF      		sbrs r24,7
 725 0274 00C0      		rjmp .L52
 171:midi.c        ****             ((c & 0xF) == midi_in_addr)) { // matches our addr
 726               		.loc 1 171 9 is_stmt 1 view .LVU198
 171:midi.c        ****             ((c & 0xF) == midi_in_addr)) { // matches our addr
 727               		.loc 1 171 21 is_stmt 0 view .LVU199
 728 0276 982F      		mov r25,r24
 729 0278 9295      		swap r25
 730 027a 9F70      		andi r25,lo8(15)
 171:midi.c        ****             ((c & 0xF) == midi_in_addr)) { // matches our addr
 731               		.loc 1 171 12 view .LVU200
 732 027c 9F30      		cpi r25,lo8(15)
 733 027e 01F0      		breq .L53
 172:midi.c        ****           midi_running_status = c >> 4;
 734               		.loc 1 172 17 discriminator 1 view .LVU201
 735 0280 2F70      		andi r18,15
 736 0282 3327      		clr r19
 737               	.LVL65:
 172:midi.c        ****           midi_running_status = c >> 4;
 738               		.loc 1 172 24 discriminator 1 view .LVU202
 739 0284 4091 0000 		lds r20,midi_in_addr
 171:midi.c        ****             ((c & 0xF) == midi_in_addr)) { // matches our addr
 740               		.loc 1 171 29 discriminator 1 view .LVU203
 741 0288 4217      		cp r20,r18
 742 028a 1306      		cpc __zero_reg__,r19
 743 028c 01F4      		brne .L54
 744               	.L53:
 173:midi.c        ****         } else {
 745               		.loc 1 173 11 is_stmt 1 view .LVU204
 173:midi.c        ****         } else {
 746               		.loc 1 173 31 is_stmt 0 view .LVU205
 747 028e 9093 0000 		sts midi_running_status,r25
 748               	.L52:
 181:midi.c        ****       case MIDI_IGNORE: {
 749               		.loc 1 181 7 is_stmt 1 view .LVU206
 750 0292 9091 0000 		lds r25,midi_running_status
 751 0296 9830      		cpi r25,lo8(8)
 752 0298 01F0      		breq .L55
 753 029a 9930      		cpi r25,lo8(9)
 754 029c 01F4      		brne .L48
 187:midi.c        ****             7) // if the last byte was a command then we have to get the note
 755               		.loc 1 187 9 view .LVU207
 187:midi.c        ****             7) // if the last byte was a command then we have to get the note
 756               		.loc 1 187 12 is_stmt 0 view .LVU208
 757 029e 87FF      		sbrs r24,7
 758 02a0 00C0      		rjmp .L56
 189:midi.c        ****         else
 759               		.loc 1 189 11 is_stmt 1 view .LVU209
 189:midi.c        ****         else
 760               		.loc 1 189 18 is_stmt 0 view .LVU210
 761 02a2 0E94 0000 		call midi_getchar
 762               	.LVL66:
 189:midi.c        ****         else
 763               		.loc 1 189 18 view .LVU211
 764 02a6 C82F      		mov r28,r24
 765               	.LVL67:
 766               	.L56:
 193:midi.c        ****         /*
 767               		.loc 1 193 9 is_stmt 1 view .LVU212
 193:midi.c        ****         /*
 768               		.loc 1 193 20 is_stmt 0 view .LVU213
 769 02a8 0E94 0000 		call midi_getchar
 770               	.LVL68:
 771 02ac 682F      		mov r22,r24
 772               	.LVL69:
 200:midi.c        ****         break;
 773               		.loc 1 200 9 is_stmt 1 view .LVU214
 774 02ae 8C2F      		mov r24,r28
 775 02b0 0E94 0000 		call midi_note_on
 776               	.LVL70:
 201:midi.c        ****       }
 777               		.loc 1 201 9 view .LVU215
 778 02b4 00C0      		rjmp .L48
 779               	.LVL71:
 780               	.L54:
 176:midi.c        ****           continue;
 781               		.loc 1 176 11 view .LVU216
 176:midi.c        ****           continue;
 782               		.loc 1 176 31 is_stmt 0 view .LVU217
 783 02b6 1092 0000 		sts midi_running_status,__zero_reg__
 177:midi.c        ****         }
 784               		.loc 1 177 11 is_stmt 1 view .LVU218
 785 02ba 00C0      		rjmp .L48
 786               	.L55:
 204:midi.c        ****           note = midi_getchar();
 787               		.loc 1 204 9 view .LVU219
 204:midi.c        ****           note = midi_getchar();
 788               		.loc 1 204 12 is_stmt 0 view .LVU220
 789 02bc 87FF      		sbrs r24,7
 790 02be 00C0      		rjmp .L57
 205:midi.c        ****         else
 791               		.loc 1 205 11 is_stmt 1 view .LVU221
 205:midi.c        ****         else
 792               		.loc 1 205 18 is_stmt 0 view .LVU222
 793 02c0 0E94 0000 		call midi_getchar
 794               	.LVL72:
 205:midi.c        ****         else
 795               		.loc 1 205 18 view .LVU223
 796 02c4 C82F      		mov r28,r24
 797               	.LVL73:
 798               	.L57:
 209:midi.c        ****         /*
 799               		.loc 1 209 9 is_stmt 1 view .LVU224
 209:midi.c        ****         /*
 800               		.loc 1 209 20 is_stmt 0 view .LVU225
 801 02c6 0E94 0000 		call midi_getchar
 802               	.LVL74:
 803 02ca 682F      		mov r22,r24
 804               	.LVL75:
 216:midi.c        **** 
 805               		.loc 1 216 9 is_stmt 1 view .LVU226
 806 02cc 8C2F      		mov r24,r28
 807 02ce 0E94 0000 		call midi_note_off
 808               	.LVL76:
 218:midi.c        ****       }
 809               		.loc 1 218 9 view .LVU227
 810 02d2 00C0      		rjmp .L48
 811               		.cfi_endproc
 812               	.LFE4:
 814               	.global	midi_stop
 816               	midi_stop:
 817               	.LFB13:
 332:midi.c        ****   // if we were generating midi, stop all notes and send a clockstop signal
 818               		.loc 1 332 22 view -0
 819               		.cfi_startproc
 820               	/* prologue: function */
 821               	/* frame size = 0 */
 822               	/* stack size = 0 */
 823               	.L__stack_usage = 0
 334:midi.c        ****     midi_putchar(MIDI_STOP);
 824               		.loc 1 334 3 view .LVU229
 334:midi.c        ****     midi_putchar(MIDI_STOP);
 825               		.loc 1 334 6 is_stmt 0 view .LVU230
 826 02d4 8091 0000 		lds r24,sync
 827 02d8 8230      		cpi r24,lo8(2)
 828 02da 01F0      		breq .L64
 335:midi.c        ****     midi_notesoff();
 829               		.loc 1 335 5 is_stmt 1 view .LVU231
 830 02dc 8CEF      		ldi r24,lo8(-4)
 831 02de 0E94 0000 		call midi_putchar
 832               	.LVL77:
 336:midi.c        ****   }
 833               		.loc 1 336 5 view .LVU232
 834 02e2 0C94 0000 		jmp midi_notesoff
 835               	.LVL78:
 836               	.L64:
 837               	/* epilogue start */
 338:midi.c        **** 
 838               		.loc 1 338 1 is_stmt 0 view .LVU233
 839 02e6 0895      		ret
 840               		.cfi_endproc
 841               	.LFE13:
 843               		.local	tail_idx
 844               		.comm	tail_idx,1,1
 845               		.local	head_idx
 846               		.comm	head_idx,1,1
 847               		.comm	midi_q,32,1
 848               	.global	midisync_clocked
 849               		.section .bss
 852               	midisync_clocked:
 853 0000 0000      		.zero	2
 854               	.global	midi_running_status
 857               	midi_running_status:
 858 0002 00        		.zero	1
 859               		.comm	midi_in_addr,1,1
 860               		.comm	midi_out_addr,1,1
 861               	.global	midion_noaccent_velocity
 862               		.data
 865               	midion_noaccent_velocity:
 866 0000 64        		.byte	100
 867               	.global	midioff_velocity
 870               	midioff_velocity:
 871 0001 20        		.byte	32
 872               	.global	midion_accent_velocity
 875               	midion_accent_velocity:
 876 0002 7F        		.byte	127
 877               		.text
 878               	.Letext0:
 879               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 880               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 881               		.file 4 "main.h"
 882               		.file 5 "led.h"
 883               		.file 6 "switch.h"
 884               		.file 7 "delay.h"
 885               		.file 8 "synth.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 midi.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:12     .text:0000000000000000 __vector_19
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:852    .bss:0000000000000000 midisync_clocked
                             .bss:0000000000000003 tail_idx
                            *COM*:0000000000000020 midi_q
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:844    .bss:0000000000000004 head_idx
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:123    .text:0000000000000094 get_midi_addr
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:153    .text:00000000000000a2 init_midi
                            *COM*:0000000000000001 midi_in_addr
                            *COM*:0000000000000001 midi_out_addr
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:183    .text:00000000000000b8 midi_note_off
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:225    .text:00000000000000ce midi_note_on
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:304    .text:0000000000000104 midi_putchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:334    .text:0000000000000110 midi_send_note_on
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:875    .data:0000000000000002 midion_accent_velocity
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:865    .data:0000000000000000 midion_noaccent_velocity
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:388    .text:000000000000013c midi_send_note_off
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:870    .data:0000000000000001 midioff_velocity
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:436    .text:0000000000000162 midi_getch
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:464    .text:0000000000000178 midi_getchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:519    .text:00000000000001aa midi_recv_cmd
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:857    .bss:0000000000000002 midi_running_status
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:582    .text:00000000000001de midi_notesoff
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:608    .text:00000000000001f4 do_midi_mode
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//cco0knMt.s:816    .text:00000000000002d4 midi_stop

UNDEFINED SYMBOLS
sync
dinsync_clock_timeout
internal_eeprom_read8
prev_note
note_off
note_on
turn_off_tempo
clear_bank_leds
set_bank_led
read_switches
delay_ms
bank
function
internal_eeprom_write8
__do_copy_data
__do_clear_bss
