   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	__vector_4
  12               	__vector_4:
  13               	.LFB4:
  14               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * The software for the x0xb0x is available for use in accordance with the
   3:main.c        ****  * following open source license (MIT License). For more information about
   4:main.c        ****  * OS licensing, please visit -> http://www.opensource.org/
   5:main.c        ****  *
   6:main.c        ****  * For more information about the x0xb0x project, please visit
   7:main.c        ****  * -> http://www.ladyada.net/make/x0xb0x
   8:main.c        ****  *
   9:main.c        ****  *                                     *****
  10:main.c        ****  * Copyright (c) 2005 Limor Fried
  11:main.c        ****  *
  12:main.c        ****  * Permission is hereby granted, free of charge, to any person obtaining a
  13:main.c        ****  * copy of this software and associated documentation files (the "Software"),
  14:main.c        ****  * to deal in the Software without restriction, including without limitation
  15:main.c        ****  * the rights to use, copy, modify, merge, publish, distribute, sublicense,
  16:main.c        ****  * and/or sell copies of the Software, and to permit persons to whom the
  17:main.c        ****  * Software is furnished to do so, subject to the following conditions:
  18:main.c        ****  *
  19:main.c        ****  * The above copyright notice and this permission notice shall be included in
  20:main.c        ****  * all copies or substantial portions of the Software.
  21:main.c        ****  *
  22:main.c        ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  23:main.c        ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  24:main.c        ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  25:main.c        ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  26:main.c        ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  27:main.c        ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  28:main.c        ****  * IN THE SOFTWARE.
  29:main.c        ****  *                                     *****
  30:main.c        ****  *
  31:main.c        ****  */
  32:main.c        **** 
  33:main.c        **** #include <avr/io.h>
  34:main.c        **** #include <avr/interrupt.h>
  35:main.c        **** #include <avr/signal.h>
  36:main.c        **** #include <stdio.h>
  37:main.c        **** #include "main.h"
  38:main.c        **** #include "led.h"
  39:main.c        **** #include "switch.h"
  40:main.c        **** #include "delay.h"
  41:main.c        **** #include "pattern.h"
  42:main.c        **** #include "track.h"
  43:main.c        **** #include "compcontrol.h"
  44:main.c        **** #include "keyboard.h"
  45:main.c        **** #include "midi.h"
  46:main.c        **** #include "eeprom.h"
  47:main.c        **** #include "synth.h"
  48:main.c        **** #include "dinsync.h"
  49:main.c        **** 
  50:main.c        **** #define UART_BAUDRATE 19200UL
  51:main.c        **** #define MIDI_BAUDRATE 31250UL // the MIDI spec baudrate
  52:main.c        **** uint8_t rand;
  53:main.c        **** 
  54:main.c        **** uint16_t tempo;
  55:main.c        **** uint16_t
  56:main.c        ****     newtempo; // changed by the interrupt then updated to the current tempo?
  57:main.c        **** 
  58:main.c        **** uint8_t sync = INTERNAL_SYNC;
  59:main.c        **** 
  60:main.c        **** uint16_t timer3_init; // the value timer 3 is initialized
  61:main.c        **** 
  62:main.c        **** extern volatile uint8_t bank, function; // in switch.c
  63:main.c        **** extern uint8_t midi_addr;               // in midi.c
  64:main.c        **** 
  65:main.c        **** ///////////////////////////////////////// TEMPO
  66:main.c        **** uint8_t next_random_note;
  67:main.c        **** volatile uint8_t note_counter = 0;
  68:main.c        **** 
  69:main.c        **** extern int8_t curr_pitch_shift;
  70:main.c        **** extern int8_t next_pitch_shift;
  71:main.c        **** 
  72:main.c        **** // from track_edit.c
  73:main.c        **** extern volatile uint8_t curr_track_index;
  74:main.c        **** extern volatile uint8_t play_loaded_track;
  75:main.c        **** extern volatile uint16_t track_buff[TRACK_SIZE]; // the 'loaded' pattern buffer
  76:main.c        **** extern volatile uint16_t curr_patt; // the current pattern playing in the track
  77:main.c        **** 
  78:main.c        **** // from pattern_edit.c
  79:main.c        **** extern volatile uint8_t curr_pattern_index;
  80:main.c        **** extern volatile uint8_t play_loaded_pattern;     // are we playing?
  81:main.c        **** extern volatile uint8_t pattern_buff[PATT_SIZE]; // the 'loaded' pattern buffer
  82:main.c        **** uint8_t curr_note, prev_note = 0;
  83:main.c        **** 
  84:main.c        **** // from pattern_play.c
  85:main.c        **** extern volatile uint8_t curr_chain[MAX_CHAIN];
  86:main.c        **** extern volatile uint8_t next_chain[MAX_CHAIN];
  87:main.c        **** extern volatile uint8_t curr_chain_index;
  88:main.c        **** extern volatile uint8_t curr_bank, next_bank;
  89:main.c        **** extern volatile uint8_t all_accent, all_slide, all_rest; // all the time
  90:main.c        **** extern volatile uint8_t playing;
  91:main.c        **** 
  92:main.c        **** extern volatile uint8_t dinsync_counter; // defined in dinsync.c
  93:main.c        **** 
  94:main.c        **** // the 'tempo' interrupt! (on timer 3)
  95:main.c        **** // gets called 2*4*DINSYNC_PPQ times per beat (192 calls per beat @ sync24)
  96:main.c        **** // fastest is 300BPM -> 1ms
  97:main.c        **** SIGNAL(SIG_OVERFLOW3) {
  98:main.c        ****   TCNT3 = timer3_init; // FIXME, use CTC mode
  99:main.c        ****   do_tempo();
 100:main.c        **** }
 101:main.c        **** 
 102:main.c        **** // for all intents and purposes, this is basically a software interrupt!
 103:main.c        **** // call sei() before returning, since interrupts are disabled during tempo
 104:main.c        **** void do_tempo(void) {
 105:main.c        ****   uint8_t i;
 106:main.c        **** 
 107:main.c        ****   cli();
 108:main.c        **** 
 109:main.c        ****   // if the sync is internal or whatever, we have to generate dinsync/midisync
 110:main.c        ****   // msgs
 111:main.c        ****   if ((sync != MIDI_SYNC) && (sync != DIN_SYNC) &&
 112:main.c        ****       (function != KEYBOARD_MODE_FUNC)) {
 113:main.c        ****     if (dinsync_counter >= DINSYNC_PPQ / 4)
 114:main.c        ****       dinsync_counter = 0;
 115:main.c        **** 
 116:main.c        ****     // 24 pulses per quarter, increment
 117:main.c        ****     if (dinsync_counter & 0x1)
 118:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 119:main.c        ****     else {
 120:main.c        ****       sbi(DINSYNC_PORT, DINSYNC_CLK); // rising edge on note start
 121:main.c        ****       midi_putchar(MIDI_CLOCK);
 122:main.c        ****     }
 123:main.c        ****     // make sure that all notes actually start on the zero count
 124:main.c        ****     // so that tempo and SYNC are aligned.
 125:main.c        **** 
 126:main.c        ****     if (dinsync_counter != 0) {
 127:main.c        ****       dinsync_counter++;
 128:main.c        ****       sei();
 129:main.c        ****       return;
 130:main.c        ****     } else {
 131:main.c        ****       dinsync_counter++;
 132:main.c        ****     }
 133:main.c        ****   }
 134:main.c        **** 
 135:main.c        ****   // reset note counter
 136:main.c        ****   if (note_counter >= 8)
 137:main.c        ****     note_counter = 0;
 138:main.c        **** 
 139:main.c        ****   if (note_counter & 0x1) { // sixteenth notes
 140:main.c        ****     switch (function) {
 141:main.c        ****     case RANDOM_MODE_FUNC:
 142:main.c        ****       note_off(0);
 143:main.c        ****       midi_send_note_off(curr_note);
 144:main.c        ****       break;
 145:main.c        **** 
 146:main.c        ****     case EDIT_TRACK_FUNC:
 147:main.c        ****       if (play_loaded_pattern || play_loaded_track) {
 148:main.c        ****         if (curr_note != 0xFF) {
 149:main.c        ****           note_off(((curr_note >> 7) & 0x1) | all_slide); // slide
 150:main.c        ****         }
 151:main.c        ****       }
 152:main.c        ****       if (play_loaded_track) {
 153:main.c        ****         // last note of this pattern this pattern?
 154:main.c        ****         if ((curr_pattern_index >= PATT_SIZE) ||
 155:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 156:main.c        **** 
 157:main.c        ****           curr_pattern_index = 0; // start next pattern in chain
 158:main.c        ****           curr_track_index++;     // go to next patt in chain
 159:main.c        ****           // last pattern in this chain?
 160:main.c        ****           if ((curr_track_index >= TRACK_SIZE) ||
 161:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 162:main.c        ****             // putstring("track loop\n\r");
 163:main.c        ****             curr_track_index = 0;
 164:main.c        ****           }
 165:main.c        **** 
 166:main.c        ****           curr_patt = track_buff[curr_track_index];
 167:main.c        ****           if (curr_patt == END_OF_TRACK) {
 168:main.c        ****             // dont load the pattern, but make sure the pattern buffer wont play
 169:main.c        ****             pattern_buff[0] = END_OF_PATTERN;
 170:main.c        ****           } else {
 171:main.c        ****             curr_pitch_shift = load_curr_patt();
 172:main.c        ****             clear_bank_leds();
 173:main.c        ****           }
 174:main.c        ****         }
 175:main.c        ****       }
 176:main.c        **** 
 177:main.c        ****       break;
 178:main.c        **** 
 179:main.c        ****     case A_FUNC:
 180:main.c        ****     case EDIT_PATTERN_FUNC:
 181:main.c        ****       if (play_loaded_pattern) {
 182:main.c        ****         if (curr_note != 0xFF) {
 183:main.c        ****           note_off((curr_note >> 7) & 0x1); // slide
 184:main.c        ****         }
 185:main.c        ****         curr_pattern_index++;
 186:main.c        ****         if ((curr_pattern_index >= PATT_SIZE) ||
 187:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 188:main.c        ****           curr_pattern_index = 0;
 189:main.c        ****         }
 190:main.c        ****       }
 191:main.c        ****       break;
 192:main.c        **** 
 193:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 194:main.c        ****     case PLAY_PATTERN_DINSYNC_FUNC:
 195:main.c        ****     case PLAY_PATTERN_FUNC:
 196:main.c        ****       if (playing) {
 197:main.c        ****         if (curr_note != 0xFF) {
 198:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 199:main.c        ****             // check if the note had slide on it
 200:main.c        ****             note_off(1); // slide
 201:main.c        ****             // DONT send a midi note off
 202:main.c        ****           } else {
 203:main.c        ****             note_off(0);                 // no slide
 204:main.c        ****             if ((curr_note & 0x3F) != 0) // not rest
 205:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift);
 206:main.c        ****             else
 207:main.c        ****               midi_send_note_off(curr_note);
 208:main.c        ****           }
 209:main.c        ****         }
 210:main.c        **** 
 211:main.c        ****         if ((prev_note != 0xFF) && (((prev_note >> 7) & 0x1) | all_slide)) {
 212:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 213:main.c        ****             midi_send_note_off(prev_note + curr_pitch_shift);
 214:main.c        ****           else
 215:main.c        ****             midi_send_note_off(prev_note);
 216:main.c        ****         }
 217:main.c        **** 
 218:main.c        ****         // last note of this pattern?
 219:main.c        ****         if ((curr_pattern_index >= PATT_SIZE) ||
 220:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 221:main.c        **** 
 222:main.c        ****           curr_pattern_index = 0; // start next pattern in chain
 223:main.c        ****           curr_chain_index++;     // go to next patt in chain
 224:main.c        ****           // last pattern in this chain?
 225:main.c        ****           if ((curr_chain_index >= MAX_CHAIN) ||
 226:main.c        ****               (curr_chain[curr_chain_index] == 0xFF)) {
 227:main.c        ****             curr_chain_index = 0;
 228:main.c        ****           }
 229:main.c        **** 
 230:main.c        ****           if (!chains_equiv(next_chain, curr_chain) ||
 231:main.c        ****               (curr_bank != next_bank)) {
 232:main.c        **** 
 233:main.c        ****             // copy next pattern chain into current pattern chain
 234:main.c        ****             for (i = 0; i < MAX_CHAIN; i++)
 235:main.c        ****               curr_chain[i] = next_chain[i];
 236:main.c        **** 
 237:main.c        ****             curr_chain_index = 0; // reset to beginning
 238:main.c        **** 
 239:main.c        ****             // reset the pitch
 240:main.c        ****             next_pitch_shift = curr_pitch_shift = 0;
 241:main.c        **** 
 242:main.c        ****             clear_notekey_leds();
 243:main.c        ****             clear_blinking_leds();
 244:main.c        ****           }
 245:main.c        **** 
 246:main.c        ****           curr_bank = next_bank;
 247:main.c        ****           curr_pitch_shift = next_pitch_shift;
 248:main.c        **** 
 249:main.c        ****           load_pattern(curr_bank, curr_chain[curr_chain_index]);
 250:main.c        ****         }
 251:main.c        ****       }
 252:main.c        ****       break;
 253:main.c        **** 
 254:main.c        ****     case PLAY_TRACK_MIDISYNC_FUNC:
 255:main.c        ****     case PLAY_TRACK_DINSYNC_FUNC:
 256:main.c        ****     case PLAY_TRACK_FUNC:
 257:main.c        ****       if (playing) {
 258:main.c        ****         if (curr_note != 0xFF) {
 259:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 260:main.c        ****             // check if the note had slide on it
 261:main.c        ****             note_off(1); // slide
 262:main.c        ****             // DONT send a midi note off
 263:main.c        ****           } else {
 264:main.c        ****             note_off(0);                 // no slide
 265:main.c        ****             if ((curr_note & 0x3F) != 0) // not rest
 266:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift +
 267:main.c        ****                                  get_pitchshift_from_patt(curr_patt));
 268:main.c        ****             else
 269:main.c        ****               midi_send_note_off(curr_note);
 270:main.c        ****           }
 271:main.c        ****         }
 272:main.c        **** 
 273:main.c        ****         // if this is the last note in the pattern, go to the next in track
 274:main.c        ****         if ((curr_pattern_index >= PATT_SIZE) ||
 275:main.c        ****             (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 276:main.c        ****           curr_pattern_index = 0; // start next pattern in track
 277:main.c        ****           curr_track_index++;     // go to next patt in chain
 278:main.c        ****           /*
 279:main.c        ****           putstring("Next Pattern in track #"); putnum_ud(curr_track_index);
 280:main.c        ****           putstring(" = 0x"); putnum_ud(track_buff[curr_track_index]);
 281:main.c        ****           putstring("\n\r");
 282:main.c        ****           */
 283:main.c        ****           // if this is the end of the track, go to the next one in the chain
 284:main.c        ****           if ((curr_track_index >= TRACK_SIZE) ||
 285:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 286:main.c        ****             curr_track_index = 0;
 287:main.c        ****             curr_chain_index++; // go to next track in chain
 288:main.c        ****             /*
 289:main.c        ****             putstring("Next track in chain #"); putnum_ud(curr_chain_index);
 290:main.c        ****             putstring(" = 0x"); putnum_ud(curr_chain[curr_chain_index]);
 291:main.c        ****             putstring("\n\r");
 292:main.c        **** 
 293:main.c        ****             putstring("curr chain = ");
 294:main.c        ****             for (i=0; i<MAX_CHAIN; i++) {
 295:main.c        ****               if (curr_chain[i] >= 8)
 296:main.c        ****                 break;
 297:main.c        ****               putnum_ud(curr_chain[i]);
 298:main.c        ****               uart_putchar(' ');
 299:main.c        ****             }
 300:main.c        ****             putstring("\n\r");
 301:main.c        ****             */
 302:main.c        ****             // last pattern in this chain, go to next chain
 303:main.c        ****             if ((curr_chain_index >= MAX_CHAIN) ||
 304:main.c        ****                 (curr_chain[curr_chain_index] == 0xFF)) {
 305:main.c        ****               curr_chain_index = 0;
 306:main.c        **** 
 307:main.c        ****               if (!chains_equiv(next_chain, curr_chain) ||
 308:main.c        ****                   (curr_bank != next_bank)) {
 309:main.c        **** 
 310:main.c        ****                 // copy next pattern chain into current pattern chain
 311:main.c        ****                 for (i = 0; i < MAX_CHAIN; i++)
 312:main.c        ****                   curr_chain[i] = next_chain[i];
 313:main.c        **** 
 314:main.c        ****                 // reset the pitch
 315:main.c        ****                 next_pitch_shift = curr_pitch_shift = 0;
 316:main.c        **** 
 317:main.c        ****                 clear_notekey_leds();
 318:main.c        ****                 clear_blinking_leds();
 319:main.c        ****               }
 320:main.c        ****               // putnum_ud(next_pitch_shift);
 321:main.c        ****               curr_bank = next_bank;
 322:main.c        ****               curr_pitch_shift = next_pitch_shift;
 323:main.c        ****             }
 324:main.c        ****             load_track(curr_bank, curr_chain[curr_chain_index]);
 325:main.c        ****           }
 326:main.c        ****           curr_patt = track_buff[curr_track_index];
 327:main.c        ****           load_curr_patt();
 328:main.c        ****         }
 329:main.c        ****       }
 330:main.c        ****       break;
 331:main.c        ****     }
 332:main.c        ****   } else {
 333:main.c        ****     switch (function) {
 334:main.c        ****     case RANDOM_MODE_FUNC:
 335:main.c        ****       prev_note = curr_note;
 336:main.c        ****       curr_note = next_random_note;
 337:main.c        ****       next_random_note = random();
 338:main.c        **** 
 339:main.c        ****       note_on(curr_note & 0x3f,
 340:main.c        ****               0,  // next_random_note>>6) & 0x1,
 341:main.c        ****               0); // next_random_note>>7);
 342:main.c        ****       midi_send_note_on(curr_note);
 343:main.c        ****       break;
 344:main.c        **** 
 345:main.c        ****     case EDIT_TRACK_FUNC:
 346:main.c        ****       if (play_loaded_pattern || play_loaded_track) {
 347:main.c        **** 
 348:main.c        ****         if (play_loaded_pattern) {
 349:main.c        ****           // load up the next note
 350:main.c        ****           if ((curr_pattern_index >= PATT_SIZE) ||
 351:main.c        ****               (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 352:main.c        ****             curr_pattern_index = 0;
 353:main.c        ****           }
 354:main.c        ****         }
 355:main.c        **** 
 356:main.c        ****         prev_note = curr_note;
 357:main.c        ****         curr_note = pattern_buff[curr_pattern_index++];
 358:main.c        **** 
 359:main.c        ****         if (curr_note != 0xFF) {
 360:main.c        ****           if (all_rest)
 361:main.c        ****             curr_note &= 0xC0;
 362:main.c        **** 
 363:main.c        ****           if ((curr_note & 0x3F) != 0) { // not rest
 364:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift,
 365:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 366:main.c        ****                     ((curr_note >> 6) & 0x1) | all_accent); // accent
 367:main.c        ****           } else {
 368:main.c        ****             note_on((curr_note & 0x3F),
 369:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 370:main.c        ****                     ((curr_note >> 6) & 0x1) | all_accent); // accent
 371:main.c        ****           }
 372:main.c        ****         }
 373:main.c        ****       }
 374:main.c        ****       break;
 375:main.c        **** 
 376:main.c        ****     case A_FUNC:
 377:main.c        ****     case EDIT_PATTERN_FUNC:
 378:main.c        ****       if (play_loaded_pattern) {
 379:main.c        ****         // load up the next note
 380:main.c        ****         clear_bank_leds();
 381:main.c        ****         set_bank_led(curr_pattern_index);
 382:main.c        ****         prev_note = curr_note;
 383:main.c        ****         curr_note = pattern_buff[curr_pattern_index];
 384:main.c        **** 
 385:main.c        ****         // putstring("\n\rlocation "); putnum_ud(curr_pattern_index);
 386:main.c        ****         // putstring(" note: 0x"); putnum_uh(curr_note);
 387:main.c        **** 
 388:main.c        ****         if (curr_note != 0xFF) {
 389:main.c        ****           set_note_led(curr_note);
 390:main.c        ****           note_on(curr_note & 0x3F,
 391:main.c        ****                   prev_note >> 7,          // slide is on /prev/ note!
 392:main.c        ****                   (curr_note >> 6) & 0x1); // accent
 393:main.c        ****         }
 394:main.c        ****       }
 395:main.c        ****       break;
 396:main.c        **** 
 397:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 398:main.c        ****     case PLAY_PATTERN_DINSYNC_FUNC:
 399:main.c        ****     case PLAY_PATTERN_FUNC:
 400:main.c        ****       if (playing) {
 401:main.c        ****         // in pattern play we show each note indexed in the pattern
 402:main.c        ****         clear_bank_leds();
 403:main.c        ****         set_bank_led(curr_pattern_index);
 404:main.c        ****       }
 405:main.c        ****       // no break here! continue on to shared track/pattern play code...
 406:main.c        ****     case PLAY_TRACK_MIDISYNC_FUNC:
 407:main.c        ****     case PLAY_TRACK_DINSYNC_FUNC:
 408:main.c        ****     case PLAY_TRACK_FUNC:
 409:main.c        ****       if (playing) {
 410:main.c        ****         // in track play, we blink the track location but thats
 411:main.c        ****         // taken care of in the note off portion (when patterns are loaded)
 412:main.c        **** 
 413:main.c        ****         prev_note = curr_note;
 414:main.c        ****         curr_note = pattern_buff[curr_pattern_index++];
 415:main.c        **** 
 416:main.c        ****         // end of pattern? (either memory or 0xFF)
 417:main.c        ****         if (curr_note != 0xFF) {
 418:main.c        ****           if (all_rest)
 419:main.c        ****             curr_note &= 0xC0;
 420:main.c        **** 
 421:main.c        ****           if ((curr_note & 0x3F) != 0) { // not rest
 422:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift +
 423:main.c        ****                         get_pitchshift_from_patt(curr_patt),
 424:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 425:main.c        ****                     ((curr_note >> 6) & 0x1) | all_accent); // accent
 426:main.c        ****             midi_send_note_on(curr_note + curr_pitch_shift +
 427:main.c        ****                               get_pitchshift_from_patt(curr_patt));
 428:main.c        ****           } else {
 429:main.c        ****             note_on((curr_note & 0x3F),
 430:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 431:main.c        ****                     ((curr_note >> 6) & 0x1) | all_accent); // accent
 432:main.c        ****             midi_send_note_on(curr_note);
 433:main.c        ****           }
 434:main.c        ****         }
 435:main.c        ****       }
 436:main.c        ****       break;
 437:main.c        ****     }
 438:main.c        ****   }
 439:main.c        **** 
 440:main.c        ****   // blinkie the tempo led & any other LEDs!
 441:main.c        ****   if (note_counter < 4) {
 442:main.c        ****     set_led(LED_TEMPO);
 443:main.c        ****     blink_leds_off();
 444:main.c        ****   } else if (note_counter < 8) {
 445:main.c        ****     clear_led(LED_TEMPO);
 446:main.c        ****     blink_leds_on();
 447:main.c        ****   }
 448:main.c        **** 
 449:main.c        ****   clock_leds();
 450:main.c        **** 
 451:main.c        ****   note_counter++;
 452:main.c        **** 
 453:main.c        ****   sei();
 454:main.c        **** }
 455:main.c        **** 
 456:main.c        **** ///////////////////////////////////// 'RTC' 1ms timer/counter
 457:main.c        **** volatile extern uint8_t debounce_timer;   // in switch.c
 458:main.c        **** volatile extern uint16_t tap_tempo_timer; // in pattern_play.c
 459:main.c        **** volatile extern uint8_t last_dinsync_c;
 460:main.c        **** volatile extern int16_t dinsync_clocked, dinsync_clock_timeout;
 461:main.c        **** volatile extern uint16_t uart_timeout;
 462:main.c        **** 
 463:main.c        **** volatile uint8_t blinktimer = 0;
 464:main.c        **** 
 465:main.c        **** SIGNAL(SIG_OUTPUT_COMPARE0) {
 466:main.c        ****   uint8_t curr_dinsync_c;
 467:main.c        **** 
 468:main.c        ****   if (debounce_timer != 0xFF)
 469:main.c        ****     debounce_timer++;
 470:main.c        ****   if (tap_tempo_timer != 0xFFFF)
 471:main.c        ****     tap_tempo_timer++;
 472:main.c        ****   if (uart_timeout != 0xFFFF)
 473:main.c        ****     uart_timeout++;
 474:main.c        **** 
 475:main.c        ****   if ((sync != DIN_SYNC) && (dinsync_clock_timeout != 0)) {
 476:main.c        ****     dinsync_clock_timeout--;
 477:main.c        ****     if (dinsync_clock_timeout == 0) {
 478:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK); // lower the clock
 479:main.c        ****     }
 480:main.c        ****   }
 481:main.c        **** 
 482:main.c        ****   if (sync == DIN_SYNC) {
 483:main.c        ****     curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
 484:main.c        **** 
 485:main.c        ****     if (!last_dinsync_c && curr_dinsync_c) {
 486:main.c        ****       dinsync_clocked++;        // notify a clock was recv'd
 487:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 488:main.c        ****       // (DINSYNC to MIDISYNC conversion)
 489:main.c        ****       last_dinsync_c = curr_dinsync_c;
 490:main.c        ****     } else {
 491:main.c        ****       last_dinsync_c = curr_dinsync_c;
 492:main.c        ****     }
 493:main.c        ****   }
 494:main.c        **** 
 495:main.c        ****   if (!is_tempo_running()) {
 496:main.c        ****     if (blinktimer == 200) {
 497:main.c        ****       blinktimer = 0;
 498:main.c        ****       // turn off
 499:main.c        ****       blink_leds_off();
 500:main.c        ****     } else if (blinktimer == 100) {
 501:main.c        ****       // turn on
 502:main.c        ****       blink_leds_on();
 503:main.c        ****     }
 504:main.c        ****     blinktimer++;
 505:main.c        ****   }
 506:main.c        **** }
 507:main.c        **** 
 508:main.c        **** ///////////////////////////////////// pin change interrupts
 509:main.c        **** uint8_t last_tempo;
 510:main.c        **** SIGNAL(SIG_PIN_CHANGE0) {
  15               		.loc 1 510 25 view -0
  16               		.cfi_startproc
  17 0000 1F92 1FB6 		__gcc_isr 1
  17      1F92 1124 
  17      2F93 
  18 000a 3F93      		push r19
  19               		.cfi_def_cfa_offset 3
  20               		.cfi_offset 19, -2
  21 000c 8F93      		push r24
  22               		.cfi_def_cfa_offset 4
  23               		.cfi_offset 24, -3
  24 000e 9F93      		push r25
  25               		.cfi_def_cfa_offset 5
  26               		.cfi_offset 25, -4
  27               	/* prologue: Signal */
  28               	/* frame size = 0 */
  29               	/* stack size = 3...7 */
  30               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 511:main.c        **** 
 512:main.c        ****   uint8_t curr_tempo;
  31               		.loc 1 512 3 view .LVU1
 513:main.c        **** 
 514:main.c        ****   // tempo knob change!
 515:main.c        **** 
 516:main.c        ****   curr_tempo = TEMPO_PIN & 0x3; // pins A0 and A1
  32               		.loc 1 516 3 view .LVU2
  33               		.loc 1 516 26 is_stmt 0 view .LVU3
  34 0010 89B3      		in r24,0x19
  35               		.loc 1 516 14 view .LVU4
  36 0012 8370      		andi r24,lo8(3)
  37               	.LVL0:
 517:main.c        **** 
 518:main.c        ****   if (curr_tempo != last_tempo) {
  38               		.loc 1 518 3 is_stmt 1 view .LVU5
  39               		.loc 1 518 18 is_stmt 0 view .LVU6
  40 0014 9091 0000 		lds r25,last_tempo
  41               		.loc 1 518 6 view .LVU7
  42 0018 9817      		cp r25,r24
  43 001a 01F0      		breq .L1
 519:main.c        ****     if ((last_tempo == 3) && (curr_tempo == 2)) {
  44               		.loc 1 519 5 is_stmt 1 view .LVU8
  45 001c 2091 0000 		lds r18,newtempo
  46 0020 3091 0000 		lds r19,newtempo+1
  47               		.loc 1 519 8 is_stmt 0 view .LVU9
  48 0024 9330      		cpi r25,lo8(3)
  49 0026 01F4      		brne .L3
 520:main.c        ****       newtempo--;
  50               		.loc 1 520 15 discriminator 1 view .LVU10
  51 0028 2150      		subi r18,1
  52 002a 3109      		sbc r19,__zero_reg__
 519:main.c        ****     if ((last_tempo == 3) && (curr_tempo == 2)) {
  53               		.loc 1 519 27 discriminator 1 view .LVU11
  54 002c 8230      		cpi r24,lo8(2)
  55 002e 01F0      		breq .L8
  56               	.L7:
 521:main.c        ****     }
 522:main.c        ****     if ((last_tempo == 2) && (curr_tempo == 3)) {
 523:main.c        ****       newtempo++;
 524:main.c        ****     }
 525:main.c        **** 
 526:main.c        ****     if (newtempo > MAX_TEMPO)
  57               		.loc 1 526 5 is_stmt 1 view .LVU12
  58               		.loc 1 526 18 is_stmt 0 view .LVU13
  59 0030 2091 0000 		lds r18,newtempo
  60 0034 3091 0000 		lds r19,newtempo+1
  61               		.loc 1 526 8 view .LVU14
  62 0038 2D32      		cpi r18,45
  63 003a 91E0      		ldi r25,1
  64 003c 3907      		cpc r19,r25
  65 003e 00F0      		brlo .L5
 527:main.c        ****       newtempo = MAX_TEMPO;
  66               		.loc 1 527 7 is_stmt 1 view .LVU15
  67               		.loc 1 527 16 is_stmt 0 view .LVU16
  68 0040 2CE2      		ldi r18,lo8(44)
  69 0042 31E0      		ldi r19,lo8(1)
  70               	.L9:
 528:main.c        ****     if (newtempo < MIN_TEMPO)
 529:main.c        ****       newtempo = MIN_TEMPO;
  71               		.loc 1 529 16 view .LVU17
  72 0044 3093 0000 		sts newtempo+1,r19
  73 0048 2093 0000 		sts newtempo,r18
  74               	.L6:
 530:main.c        ****     last_tempo = curr_tempo;
  75               		.loc 1 530 5 is_stmt 1 view .LVU18
  76               		.loc 1 530 16 is_stmt 0 view .LVU19
  77 004c 8093 0000 		sts last_tempo,r24
  78               	.L1:
  79               	/* epilogue start */
 531:main.c        ****   }
 532:main.c        **** }
  80               		.loc 1 532 1 view .LVU20
  81 0050 9F91      		pop r25
  82 0052 8F91      		pop r24
  83               	.LVL1:
  84               		.loc 1 532 1 view .LVU21
  85 0054 3F91      		pop r19
  86 0056 2F91 1F90 		__gcc_isr 2
  86      1FBE 1F90 
  87 005e 1895      		reti
  88               	.LVL2:
  89               	.L3:
 522:main.c        ****       newtempo++;
  90               		.loc 1 522 5 is_stmt 1 view .LVU22
 522:main.c        ****       newtempo++;
  91               		.loc 1 522 8 is_stmt 0 view .LVU23
  92 0060 9230      		cpi r25,lo8(2)
  93 0062 01F4      		brne .L7
 522:main.c        ****       newtempo++;
  94               		.loc 1 522 27 discriminator 1 view .LVU24
  95 0064 8330      		cpi r24,lo8(3)
  96 0066 01F4      		brne .L7
 523:main.c        ****     }
  97               		.loc 1 523 7 is_stmt 1 view .LVU25
 523:main.c        ****     }
  98               		.loc 1 523 15 is_stmt 0 view .LVU26
  99 0068 2F5F      		subi r18,-1
 100 006a 3F4F      		sbci r19,-1
 101               	.L8:
 102 006c 3093 0000 		sts newtempo+1,r19
 103 0070 2093 0000 		sts newtempo,r18
 104 0074 00C0      		rjmp .L7
 105               	.L5:
 528:main.c        ****       newtempo = MIN_TEMPO;
 106               		.loc 1 528 5 is_stmt 1 view .LVU27
 528:main.c        ****       newtempo = MIN_TEMPO;
 107               		.loc 1 528 8 is_stmt 0 view .LVU28
 108 0076 2431      		cpi r18,20
 109 0078 3105      		cpc r19,__zero_reg__
 110 007a 00F4      		brsh .L6
 529:main.c        ****     last_tempo = curr_tempo;
 111               		.loc 1 529 7 is_stmt 1 view .LVU29
 529:main.c        ****     last_tempo = curr_tempo;
 112               		.loc 1 529 16 is_stmt 0 view .LVU30
 113 007c 24E1      		ldi r18,lo8(20)
 114 007e 30E0      		ldi r19,0
 115 0080 00C0      		rjmp .L9
 116               		__gcc_isr 0,r18
 117               		.cfi_endproc
 118               	.LFE4:
 120               	.global	init_timer0
 122               	init_timer0:
 123               	.LFB6:
 533:main.c        **** 
 534:main.c        **** ////////////////////////////////// main()
 535:main.c        **** int main(void) {
 536:main.c        ****   ioinit(); // set up IO ports and the UART
 537:main.c        **** 
 538:main.c        ****   // start the tempo timer
 539:main.c        ****   init_tempo();
 540:main.c        **** 
 541:main.c        ****   // start the 'rtc' timer0
 542:main.c        ****   init_timer0();
 543:main.c        **** 
 544:main.c        ****   // start the 'dinsync' timer2
 545:main.c        ****   // init_timer2();
 546:main.c        **** 
 547:main.c        ****   rand = tempo; // stupid initialization, do better?
 548:main.c        **** 
 549:main.c        ****   dinsync_set_out(); // output DINSYNC
 550:main.c        **** 
 551:main.c        ****   init_midi();
 552:main.c        **** 
 553:main.c        ****   sei(); // enable interrupts
 554:main.c        **** 
 555:main.c        ****   // the main loop!
 556:main.c        ****   while (1) {
 557:main.c        ****     read_switches();
 558:main.c        ****     switch (function) {
 559:main.c        ****     case COMPUTER_CONTROL_FUNC:
 560:main.c        ****       // putstring("CompControl\n\r");
 561:main.c        ****       sync = INTERNAL_SYNC;
 562:main.c        ****       do_computer_control();
 563:main.c        ****       break;
 564:main.c        ****     case EDIT_PATTERN_FUNC:
 565:main.c        ****       // putstring("PattEdit\n\r");
 566:main.c        ****       sync = INTERNAL_SYNC;
 567:main.c        ****       do_pattern_edit();
 568:main.c        ****       break;
 569:main.c        ****     case PLAY_PATTERN_FUNC:
 570:main.c        ****       // putstring("PattPlay\n\r");
 571:main.c        ****       sync = INTERNAL_SYNC;
 572:main.c        ****       do_patterntrack_play();
 573:main.c        ****       break;
 574:main.c        ****     case PLAY_PATTERN_DINSYNC_FUNC:
 575:main.c        ****       // putstring("PattPlay DINSYNC\n\r");
 576:main.c        ****       sync = DIN_SYNC;
 577:main.c        ****       do_patterntrack_play();
 578:main.c        ****       break;
 579:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 580:main.c        ****       // putstring("PattPlay MidiSYNC\n\r");
 581:main.c        ****       sync = MIDI_SYNC;
 582:main.c        ****       do_patterntrack_play();
 583:main.c        ****       break;
 584:main.c        ****     case EDIT_TRACK_FUNC:
 585:main.c        ****       // putstring("TrackEdit\n\r");
 586:main.c        ****       sync = INTERNAL_SYNC;
 587:main.c        ****       do_track_edit();
 588:main.c        ****       break;
 589:main.c        ****     case PLAY_TRACK_FUNC:
 590:main.c        ****       // putstring("TrackPlay\n\r");
 591:main.c        ****       sync = INTERNAL_SYNC;
 592:main.c        ****       do_patterntrack_play();
 593:main.c        ****       break;
 594:main.c        ****     case PLAY_TRACK_DINSYNC_FUNC:
 595:main.c        ****       // putstring("TrackPlay DINSYNC\n\r");
 596:main.c        ****       sync = DIN_SYNC;
 597:main.c        ****       do_patterntrack_play();
 598:main.c        ****       break;
 599:main.c        ****     case PLAY_TRACK_MIDISYNC_FUNC:
 600:main.c        ****       // putstring("TrackPlay MIDISync\n\r");
 601:main.c        ****       sync = MIDI_SYNC;
 602:main.c        ****       do_patterntrack_play();
 603:main.c        ****       break;
 604:main.c        ****     case MIDI_CONTROL_FUNC:
 605:main.c        ****       // putstring("MIDIControl\n\r");
 606:main.c        ****       sync = INTERNAL_SYNC;
 607:main.c        ****       do_midi_mode();
 608:main.c        ****       break;
 609:main.c        ****     case KEYBOARD_MODE_FUNC:
 610:main.c        ****       // putstring("Keyboard\n\r");
 611:main.c        ****       sync = INTERNAL_SYNC;
 612:main.c        ****       do_keyboard_mode();
 613:main.c        ****       break;
 614:main.c        ****     case RANDOM_MODE_FUNC: {
 615:main.c        ****       // uint8_t dinsync_started = 0; // stopped
 616:main.c        ****       // uint8_t dinsync_lastpulse = 0; //
 617:main.c        ****       // putstring("rAnD0m\n\r");
 618:main.c        ****       sync = INTERNAL_SYNC;
 619:main.c        ****       turn_on_tempo();
 620:main.c        ****       clear_all_leds();
 621:main.c        ****       // dinsync_start();
 622:main.c        ****       while (1) {
 623:main.c        ****         read_switches();
 624:main.c        **** 
 625:main.c        ****         if (function != RANDOM_MODE_FUNC) {
 626:main.c        ****           // dinsync_stop();
 627:main.c        ****           turn_off_tempo();
 628:main.c        ****           break;
 629:main.c        ****         }
 630:main.c        ****       }
 631:main.c        ****       break;
 632:main.c        ****     }
 633:main.c        ****     case A_FUNC:
 634:main.c        ****       // edit the pattern with the midi sync axxxion
 635:main.c        ****       sync = MIDI_SYNC;
 636:main.c        ****       do_pattern_edit();
 637:main.c        ****       break;
 638:main.c        ****     case B_FUNC:
 639:main.c        ****     case C_FUNC:
 640:main.c        ****       clear_all_leds();
 641:main.c        ****       clock_leds();
 642:main.c        ****     default:
 643:main.c        ****       // putstring("???"); putnum_ud(function);
 644:main.c        ****       // something else
 645:main.c        ****       break;
 646:main.c        ****     }
 647:main.c        ****   }
 648:main.c        **** }
 649:main.c        **** 
 650:main.c        **** /********************* */
 651:main.c        **** void init_timer0(void) {
 124               		.loc 1 651 24 is_stmt 1 view -0
 125               		.cfi_startproc
 126               	/* prologue: function */
 127               	/* frame size = 0 */
 128               	/* stack size = 0 */
 129               	.L__stack_usage = 0
 652:main.c        ****   sbi(TIMSK, 0);              // timer0 overflow interrupt enable
 130               		.loc 1 652 3 view .LVU32
 131 0082 89B7      		in r24,0x39
 132 0084 8160      		ori r24,lo8(1)
 133 0086 89BF      		out 0x39,r24
 653:main.c        ****   TCCR0 = (1 << WGM01) | 0x3; // compare mode, clk/64
 134               		.loc 1 653 3 view .LVU33
 135               		.loc 1 653 9 is_stmt 0 view .LVU34
 136 0088 8BE0      		ldi r24,lo8(11)
 137 008a 83BF      		out 0x33,r24
 654:main.c        ****   OCR0 = 250;                 // 1KHz
 138               		.loc 1 654 3 is_stmt 1 view .LVU35
 139               		.loc 1 654 8 is_stmt 0 view .LVU36
 140 008c 8AEF      		ldi r24,lo8(-6)
 141 008e 81BF      		out 0x31,r24
 142               	/* epilogue start */
 655:main.c        **** }
 143               		.loc 1 655 1 view .LVU37
 144 0090 0895      		ret
 145               		.cfi_endproc
 146               	.LFE6:
 148               	.global	init_timer2
 150               	init_timer2:
 151               	.LFB7:
 656:main.c        **** 
 657:main.c        **** void init_timer2(void) {
 152               		.loc 1 657 24 is_stmt 1 view -0
 153               		.cfi_startproc
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 658:main.c        ****   sbi(TIMSK, 0);
 158               		.loc 1 658 3 view .LVU39
 159 0092 89B7      		in r24,0x39
 160 0094 8160      		ori r24,lo8(1)
 161 0096 89BF      		out 0x39,r24
 659:main.c        ****   TCCR2 = (1 << WGM21) | 0x3; // compare mode, clk/32
 162               		.loc 1 659 3 view .LVU40
 163               		.loc 1 659 9 is_stmt 0 view .LVU41
 164 0098 8BE0      		ldi r24,lo8(11)
 165 009a 87BD      		out 0x27,r24
 660:main.c        ****   OCR2 = 50;                  // 10khz
 166               		.loc 1 660 3 is_stmt 1 view .LVU42
 167               		.loc 1 660 8 is_stmt 0 view .LVU43
 168 009c 82E3      		ldi r24,lo8(50)
 169 009e 82BD      		out 0x22,r24
 170               	/* epilogue start */
 661:main.c        **** }
 171               		.loc 1 661 1 view .LVU44
 172 00a0 0895      		ret
 173               		.cfi_endproc
 174               	.LFE7:
 176               	.global	turn_on_tempo
 178               	turn_on_tempo:
 179               	.LFB9:
 662:main.c        **** 
 663:main.c        **** void init_tempo(void) {
 664:main.c        ****   sbi(PCMSK0, PCINT0); // detect change on pin A0
 665:main.c        ****   sbi(PCMSK0, PCINT1); // detect change on pin A1
 666:main.c        ****   sbi(GICR, PCIE0);    // enable pin change interrupt for tempo knob detect
 667:main.c        **** 
 668:main.c        ****   change_tempo((internal_eeprom_read8(TEMPO_EEADDR) << 8) |
 669:main.c        ****                internal_eeprom_read8(TEMPO_EEADDR + 1));
 670:main.c        ****   note_counter = 0;
 671:main.c        ****   sbi(ETIMSK, TOIE3); // enable tempo interrupt
 672:main.c        **** }
 673:main.c        **** 
 674:main.c        **** // reset the note counter. change the tempo back.
 675:main.c        **** void turn_on_tempo() { sbi(ETIMSK, TOIE3); }
 180               		.loc 1 675 22 is_stmt 1 view -0
 181               		.cfi_startproc
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 0 */
 185               	.L__stack_usage = 0
 186               		.loc 1 675 24 view .LVU46
 187 00a2 EDE7      		ldi r30,lo8(125)
 188 00a4 F0E0      		ldi r31,0
 189 00a6 8081      		ld r24,Z
 190 00a8 8460      		ori r24,lo8(4)
 191 00aa 8083      		st Z,r24
 192               	/* epilogue start */
 193               		.loc 1 675 1 is_stmt 0 view .LVU47
 194 00ac 0895      		ret
 195               		.cfi_endproc
 196               	.LFE9:
 198               	.global	turn_off_tempo
 200               	turn_off_tempo:
 201               	.LFB10:
 676:main.c        **** 
 677:main.c        **** void turn_off_tempo() {
 202               		.loc 1 677 23 is_stmt 1 view -0
 203               		.cfi_startproc
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 678:main.c        ****   clear_led(LED_TEMPO);
 208               		.loc 1 678 3 view .LVU49
 209 00ae 85E2      		ldi r24,lo8(37)
 210 00b0 0E94 0000 		call clear_led
 211               	.LVL3:
 679:main.c        ****   cbi(ETIMSK, TOIE3);
 212               		.loc 1 679 3 view .LVU50
 213 00b4 EDE7      		ldi r30,lo8(125)
 214 00b6 F0E0      		ldi r31,0
 215 00b8 8081      		ld r24,Z
 216 00ba 8B7F      		andi r24,lo8(-5)
 217 00bc 8083      		st Z,r24
 218               	/* epilogue start */
 680:main.c        **** }
 219               		.loc 1 680 1 is_stmt 0 view .LVU51
 220 00be 0895      		ret
 221               		.cfi_endproc
 222               	.LFE10:
 224               	.global	is_tempo_running
 226               	is_tempo_running:
 227               	.LFB11:
 681:main.c        **** 
 682:main.c        **** uint8_t is_tempo_running() { return (ETIMSK >> TOIE3) & 0x1; }
 228               		.loc 1 682 28 is_stmt 1 view -0
 229               		.cfi_startproc
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 0 */
 233               	.L__stack_usage = 0
 234               		.loc 1 682 30 view .LVU53
 235               		.loc 1 682 38 is_stmt 0 view .LVU54
 236 00c0 8091 7D00 		lds r24,125
 237               		.loc 1 682 1 view .LVU55
 238 00c4 82FB      		bst r24,2
 239 00c6 8827      		clr r24
 240 00c8 80F9      		bld r24,0
 241               	/* epilogue start */
 242 00ca 0895      		ret
 243               		.cfi_endproc
 244               	.LFE11:
 246               	.global	__vector_16
 248               	__vector_16:
 249               	.LFB3:
 465:main.c        ****   uint8_t curr_dinsync_c;
 250               		.loc 1 465 29 is_stmt 1 view -0
 251               		.cfi_startproc
 252 00cc 1F92      		push r1
 253               		.cfi_def_cfa_offset 3
 254               		.cfi_offset 1, -2
 255 00ce 0F92      		push r0
 256               		.cfi_def_cfa_offset 4
 257               		.cfi_offset 0, -3
 258 00d0 0FB6      		in r0,__SREG__
 259 00d2 0F92      		push r0
 260 00d4 1124      		clr __zero_reg__
 261 00d6 2F93      		push r18
 262               		.cfi_def_cfa_offset 5
 263               		.cfi_offset 18, -4
 264 00d8 3F93      		push r19
 265               		.cfi_def_cfa_offset 6
 266               		.cfi_offset 19, -5
 267 00da 4F93      		push r20
 268               		.cfi_def_cfa_offset 7
 269               		.cfi_offset 20, -6
 270 00dc 5F93      		push r21
 271               		.cfi_def_cfa_offset 8
 272               		.cfi_offset 21, -7
 273 00de 6F93      		push r22
 274               		.cfi_def_cfa_offset 9
 275               		.cfi_offset 22, -8
 276 00e0 7F93      		push r23
 277               		.cfi_def_cfa_offset 10
 278               		.cfi_offset 23, -9
 279 00e2 8F93      		push r24
 280               		.cfi_def_cfa_offset 11
 281               		.cfi_offset 24, -10
 282 00e4 9F93      		push r25
 283               		.cfi_def_cfa_offset 12
 284               		.cfi_offset 25, -11
 285 00e6 AF93      		push r26
 286               		.cfi_def_cfa_offset 13
 287               		.cfi_offset 26, -12
 288 00e8 BF93      		push r27
 289               		.cfi_def_cfa_offset 14
 290               		.cfi_offset 27, -13
 291 00ea EF93      		push r30
 292               		.cfi_def_cfa_offset 15
 293               		.cfi_offset 30, -14
 294 00ec FF93      		push r31
 295               		.cfi_def_cfa_offset 16
 296               		.cfi_offset 31, -15
 297               	/* prologue: Signal */
 298               	/* frame size = 0 */
 299               	/* stack size = 15 */
 300               	.L__stack_usage = 15
 466:main.c        **** 
 301               		.loc 1 466 3 view .LVU57
 468:main.c        ****     debounce_timer++;
 302               		.loc 1 468 3 view .LVU58
 468:main.c        ****     debounce_timer++;
 303               		.loc 1 468 22 is_stmt 0 view .LVU59
 304 00ee 8091 0000 		lds r24,debounce_timer
 468:main.c        ****     debounce_timer++;
 305               		.loc 1 468 6 view .LVU60
 306 00f2 8F3F      		cpi r24,lo8(-1)
 307 00f4 01F0      		breq .L16
 469:main.c        ****   if (tap_tempo_timer != 0xFFFF)
 308               		.loc 1 469 5 is_stmt 1 view .LVU61
 469:main.c        ****   if (tap_tempo_timer != 0xFFFF)
 309               		.loc 1 469 19 is_stmt 0 view .LVU62
 310 00f6 8091 0000 		lds r24,debounce_timer
 311 00fa 8F5F      		subi r24,lo8(-(1))
 312 00fc 8093 0000 		sts debounce_timer,r24
 313               	.L16:
 470:main.c        ****     tap_tempo_timer++;
 314               		.loc 1 470 3 is_stmt 1 view .LVU63
 470:main.c        ****     tap_tempo_timer++;
 315               		.loc 1 470 23 is_stmt 0 view .LVU64
 316 0100 8091 0000 		lds r24,tap_tempo_timer
 317 0104 9091 0000 		lds r25,tap_tempo_timer+1
 470:main.c        ****     tap_tempo_timer++;
 318               		.loc 1 470 6 view .LVU65
 319 0108 0196      		adiw r24,1
 320 010a 01F0      		breq .L17
 471:main.c        ****   if (uart_timeout != 0xFFFF)
 321               		.loc 1 471 5 is_stmt 1 view .LVU66
 471:main.c        ****   if (uart_timeout != 0xFFFF)
 322               		.loc 1 471 20 is_stmt 0 view .LVU67
 323 010c 8091 0000 		lds r24,tap_tempo_timer
 324 0110 9091 0000 		lds r25,tap_tempo_timer+1
 325 0114 0196      		adiw r24,1
 326 0116 9093 0000 		sts tap_tempo_timer+1,r25
 327 011a 8093 0000 		sts tap_tempo_timer,r24
 328               	.L17:
 472:main.c        ****     uart_timeout++;
 329               		.loc 1 472 3 is_stmt 1 view .LVU68
 472:main.c        ****     uart_timeout++;
 330               		.loc 1 472 20 is_stmt 0 view .LVU69
 331 011e 8091 0000 		lds r24,uart_timeout
 332 0122 9091 0000 		lds r25,uart_timeout+1
 472:main.c        ****     uart_timeout++;
 333               		.loc 1 472 6 view .LVU70
 334 0126 0196      		adiw r24,1
 335 0128 01F0      		breq .L18
 473:main.c        **** 
 336               		.loc 1 473 5 is_stmt 1 view .LVU71
 473:main.c        **** 
 337               		.loc 1 473 17 is_stmt 0 view .LVU72
 338 012a 8091 0000 		lds r24,uart_timeout
 339 012e 9091 0000 		lds r25,uart_timeout+1
 340 0132 0196      		adiw r24,1
 341 0134 9093 0000 		sts uart_timeout+1,r25
 342 0138 8093 0000 		sts uart_timeout,r24
 343               	.L18:
 475:main.c        ****     dinsync_clock_timeout--;
 344               		.loc 1 475 3 is_stmt 1 view .LVU73
 475:main.c        ****     dinsync_clock_timeout--;
 345               		.loc 1 475 6 is_stmt 0 view .LVU74
 346 013c 8091 0000 		lds r24,sync
 347 0140 8130      		cpi r24,lo8(1)
 348 0142 01F4      		brne .L19
 349               	.L23:
 483:main.c        **** 
 350               		.loc 1 483 5 is_stmt 1 view .LVU75
 483:main.c        **** 
 351               		.loc 1 483 23 is_stmt 0 view .LVU76
 352 0144 80B3      		in r24,0x10
 483:main.c        **** 
 353               		.loc 1 483 20 view .LVU77
 354 0146 8295      		swap r24
 355 0148 8170      		andi r24,1
 356               	.LVL4:
 485:main.c        ****       dinsync_clocked++;        // notify a clock was recv'd
 357               		.loc 1 485 5 is_stmt 1 view .LVU78
 485:main.c        ****       dinsync_clocked++;        // notify a clock was recv'd
 358               		.loc 1 485 9 is_stmt 0 view .LVU79
 359 014a 9091 0000 		lds r25,last_dinsync_c
 485:main.c        ****       dinsync_clocked++;        // notify a clock was recv'd
 360               		.loc 1 485 8 view .LVU80
 361 014e 9923      		tst r25
 362 0150 01F4      		brne .+2
 363 0152 00C0      		rjmp .L20
 364               	.LVL5:
 365               	.L21:
 491:main.c        ****     }
 366               		.loc 1 491 7 is_stmt 1 view .LVU81
 491:main.c        ****     }
 367               		.loc 1 491 22 is_stmt 0 view .LVU82
 368 0154 8093 0000 		sts last_dinsync_c,r24
 369 0158 00C0      		rjmp .L25
 370               	.L19:
 475:main.c        ****     dinsync_clock_timeout--;
 371               		.loc 1 475 52 discriminator 1 view .LVU83
 372 015a 8091 0000 		lds r24,dinsync_clock_timeout
 373 015e 9091 0000 		lds r25,dinsync_clock_timeout+1
 475:main.c        ****     dinsync_clock_timeout--;
 374               		.loc 1 475 26 discriminator 1 view .LVU84
 375 0162 892B      		or r24,r25
 376 0164 01F0      		breq .L25
 476:main.c        ****     if (dinsync_clock_timeout == 0) {
 377               		.loc 1 476 5 is_stmt 1 view .LVU85
 476:main.c        ****     if (dinsync_clock_timeout == 0) {
 378               		.loc 1 476 26 is_stmt 0 view .LVU86
 379 0166 8091 0000 		lds r24,dinsync_clock_timeout
 380 016a 9091 0000 		lds r25,dinsync_clock_timeout+1
 381 016e 0197      		sbiw r24,1
 382 0170 9093 0000 		sts dinsync_clock_timeout+1,r25
 383 0174 8093 0000 		sts dinsync_clock_timeout,r24
 477:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK); // lower the clock
 384               		.loc 1 477 5 is_stmt 1 view .LVU87
 477:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK); // lower the clock
 385               		.loc 1 477 31 is_stmt 0 view .LVU88
 386 0178 8091 0000 		lds r24,dinsync_clock_timeout
 387 017c 9091 0000 		lds r25,dinsync_clock_timeout+1
 477:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK); // lower the clock
 388               		.loc 1 477 8 view .LVU89
 389 0180 892B      		or r24,r25
 390 0182 01F4      		brne .L25
 478:main.c        ****     }
 391               		.loc 1 478 7 is_stmt 1 view .LVU90
 392 0184 9498      		cbi 0x12,4
 482:main.c        ****     curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
 393               		.loc 1 482 3 view .LVU91
 482:main.c        ****     curr_dinsync_c = (DINSYNC_PIN >> DINSYNC_CLK) & 0x1;
 394               		.loc 1 482 6 is_stmt 0 view .LVU92
 395 0186 8091 0000 		lds r24,sync
 396 018a 8130      		cpi r24,lo8(1)
 397 018c 01F0      		breq .L23
 398               	.L25:
 495:main.c        ****     if (blinktimer == 200) {
 399               		.loc 1 495 3 is_stmt 1 view .LVU93
 495:main.c        ****     if (blinktimer == 200) {
 400               		.loc 1 495 8 is_stmt 0 view .LVU94
 401 018e 0E94 0000 		call is_tempo_running
 402               	.LVL6:
 495:main.c        ****     if (blinktimer == 200) {
 403               		.loc 1 495 6 view .LVU95
 404 0192 8111      		cpse r24,__zero_reg__
 405 0194 00C0      		rjmp .L15
 496:main.c        ****       blinktimer = 0;
 406               		.loc 1 496 5 is_stmt 1 view .LVU96
 496:main.c        ****       blinktimer = 0;
 407               		.loc 1 496 20 is_stmt 0 view .LVU97
 408 0196 8091 0000 		lds r24,blinktimer
 496:main.c        ****       blinktimer = 0;
 409               		.loc 1 496 8 view .LVU98
 410 019a 883C      		cpi r24,lo8(-56)
 411 019c 01F4      		brne .L27
 497:main.c        ****       // turn off
 412               		.loc 1 497 7 is_stmt 1 view .LVU99
 497:main.c        ****       // turn off
 413               		.loc 1 497 18 is_stmt 0 view .LVU100
 414 019e 1092 0000 		sts blinktimer,__zero_reg__
 499:main.c        ****     } else if (blinktimer == 100) {
 415               		.loc 1 499 7 is_stmt 1 view .LVU101
 416 01a2 0E94 0000 		call blink_leds_off
 417               	.LVL7:
 418               	.L28:
 504:main.c        ****   }
 419               		.loc 1 504 5 view .LVU102
 504:main.c        ****   }
 420               		.loc 1 504 15 is_stmt 0 view .LVU103
 421 01a6 8091 0000 		lds r24,blinktimer
 422 01aa 8F5F      		subi r24,lo8(-(1))
 423 01ac 8093 0000 		sts blinktimer,r24
 424               	.L15:
 425               	/* epilogue start */
 506:main.c        **** 
 426               		.loc 1 506 1 view .LVU104
 427 01b0 FF91      		pop r31
 428 01b2 EF91      		pop r30
 429 01b4 BF91      		pop r27
 430 01b6 AF91      		pop r26
 431 01b8 9F91      		pop r25
 432 01ba 8F91      		pop r24
 433 01bc 7F91      		pop r23
 434 01be 6F91      		pop r22
 435 01c0 5F91      		pop r21
 436 01c2 4F91      		pop r20
 437 01c4 3F91      		pop r19
 438 01c6 2F91      		pop r18
 439 01c8 0F90      		pop r0
 440 01ca 0FBE      		out __SREG__,r0
 441 01cc 0F90      		pop r0
 442 01ce 1F90      		pop r1
 443 01d0 1895      		reti
 444               	.LVL8:
 445               	.L20:
 485:main.c        ****       dinsync_clocked++;        // notify a clock was recv'd
 446               		.loc 1 485 25 discriminator 1 view .LVU105
 447 01d2 8823      		tst r24
 448 01d4 01F4      		brne .+2
 449 01d6 00C0      		rjmp .L21
 486:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 450               		.loc 1 486 7 is_stmt 1 view .LVU106
 486:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 451               		.loc 1 486 22 is_stmt 0 view .LVU107
 452 01d8 8091 0000 		lds r24,dinsync_clocked
 453 01dc 9091 0000 		lds r25,dinsync_clocked+1
 454               	.LVL9:
 486:main.c        ****       midi_putchar(MIDI_CLOCK); // send a midi clock message immediately
 455               		.loc 1 486 22 view .LVU108
 456 01e0 0196      		adiw r24,1
 457 01e2 9093 0000 		sts dinsync_clocked+1,r25
 458 01e6 8093 0000 		sts dinsync_clocked,r24
 487:main.c        ****       // (DINSYNC to MIDISYNC conversion)
 459               		.loc 1 487 7 is_stmt 1 view .LVU109
 460 01ea 88EF      		ldi r24,lo8(-8)
 461 01ec 0E94 0000 		call midi_putchar
 462               	.LVL10:
 489:main.c        ****     } else {
 463               		.loc 1 489 7 view .LVU110
 489:main.c        ****     } else {
 464               		.loc 1 489 22 is_stmt 0 view .LVU111
 465 01f0 81E0      		ldi r24,lo8(1)
 466 01f2 00C0      		rjmp .L21
 467               	.L27:
 500:main.c        ****       // turn on
 468               		.loc 1 500 12 is_stmt 1 view .LVU112
 500:main.c        ****       // turn on
 469               		.loc 1 500 27 is_stmt 0 view .LVU113
 470 01f4 8091 0000 		lds r24,blinktimer
 500:main.c        ****       // turn on
 471               		.loc 1 500 15 view .LVU114
 472 01f8 8436      		cpi r24,lo8(100)
 473 01fa 01F4      		brne .L28
 502:main.c        ****     }
 474               		.loc 1 502 7 is_stmt 1 view .LVU115
 475 01fc 0E94 0000 		call blink_leds_on
 476               	.LVL11:
 477 0200 00C0      		rjmp .L28
 478               		.cfi_endproc
 479               	.LFE3:
 481               	.global	random
 483               	random:
 484               	.LFB13:
 683:main.c        **** 
 684:main.c        **** void change_tempo(uint16_t set_tempo) {
 685:main.c        ****   uint16_t t3_prescale;
 686:main.c        ****   uint32_t num_instr;
 687:main.c        ****   uint16_t top_num_instr;
 688:main.c        **** 
 689:main.c        ****   if (set_tempo > MAX_TEMPO) {
 690:main.c        ****     set_tempo = MAX_TEMPO;
 691:main.c        ****   }
 692:main.c        ****   if (set_tempo < MIN_TEMPO) {
 693:main.c        ****     set_tempo = MIN_TEMPO;
 694:main.c        ****   }
 695:main.c        **** 
 696:main.c        ****   newtempo = tempo = set_tempo;
 697:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 698:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR + 1, tempo & 0xFF);
 699:main.c        **** 
 700:main.c        ****   /*
 701:main.c        ****     putnum_ud(tempo);
 702:main.c        ****     putstring(" BPM\n\r");
 703:main.c        ****   */
 704:main.c        ****   send_tempo(tempo);
 705:main.c        **** 
 706:main.c        ****   // figure out what the interrupt should be!
 707:main.c        ****   // (use counter 3 for finest resolution!)
 708:main.c        ****   num_instr = F_CPU * 60;
 709:main.c        ****   num_instr /= set_tempo;
 710:main.c        ****   num_instr /= 4;               // sixteenth notes!
 711:main.c        ****   num_instr /= 2;               // call twice per quarter
 712:main.c        ****   num_instr /= DINSYNC_PPQ / 4; // do dinsync on same interrupt
 713:main.c        **** 
 714:main.c        ****   top_num_instr = num_instr >> 16;
 715:main.c        ****   if (!top_num_instr) {
 716:main.c        ****     t3_prescale = 1;
 717:main.c        ****     timer3_init = num_instr;
 718:main.c        ****     TCCR3B = 1;
 719:main.c        ****   } else if ((top_num_instr & ~0x7) == 0) {
 720:main.c        ****     t3_prescale = 8;
 721:main.c        ****     timer3_init = num_instr >> 3;
 722:main.c        ****     TCCR3B = 2;
 723:main.c        ****   } else if ((top_num_instr & ~0xF) == 0) {
 724:main.c        ****     t3_prescale = 16;
 725:main.c        ****     timer3_init = num_instr >> 4;
 726:main.c        ****     TCCR3B = 6;
 727:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 728:main.c        ****     t3_prescale = 32;
 729:main.c        ****     timer3_init = num_instr >> 5;
 730:main.c        ****     TCCR3B = 7;
 731:main.c        ****   } else if ((top_num_instr & ~0x3F) == 0) {
 732:main.c        ****     t3_prescale = 64;
 733:main.c        ****     timer3_init = num_instr >> 6;
 734:main.c        ****     TCCR3B = 3;
 735:main.c        ****   } else if ((top_num_instr & ~0xFF) == 0) {
 736:main.c        ****     t3_prescale = 256;
 737:main.c        ****     timer3_init = num_instr >> 8;
 738:main.c        ****     TCCR3B = 4;
 739:main.c        ****   } else if ((top_num_instr & ~0x3FF) == 0) {
 740:main.c        ****     t3_prescale = 1024;
 741:main.c        ****     timer3_init = num_instr >> 10;
 742:main.c        ****     TCCR3B = 5;
 743:main.c        ****   } else {
 744:main.c        ****     t3_prescale = 0;
 745:main.c        ****     TCCR3B = 0;
 746:main.c        ****   }
 747:main.c        **** 
 748:main.c        ****   timer3_init *= -1;
 749:main.c        **** 
 750:main.c        ****   // printf("T3 Prescale: %d. Init: 0x%x\n\r", t3_prescale, timer3_init);
 751:main.c        ****   TCNT3 = timer3_init;
 752:main.c        **** }
 753:main.c        **** 
 754:main.c        **** /********************* Utilities *********************/
 755:main.c        **** /*
 756:main.c        **** void step() {
 757:main.c        ****   uart_getchar();
 758:main.c        **** }
 759:main.c        **** 
 760:main.c        **** 
 761:main.c        **** void halt() {
 762:main.c        ****   putstring("halting");
 763:main.c        ****   // turn off interrupts??
 764:main.c        ****   while (1) {
 765:main.c        ****   }
 766:main.c        **** }
 767:main.c        **** */
 768:main.c        **** 
 769:main.c        **** uint8_t random(void) {
 485               		.loc 1 769 22 view -0
 486               		.cfi_startproc
 487               	/* prologue: function */
 488               	/* frame size = 0 */
 489               	/* stack size = 0 */
 490               	.L__stack_usage = 0
 770:main.c        ****   rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2)) & 00000001) |
 491               		.loc 1 770 3 view .LVU117
 492               		.loc 1 770 68 is_stmt 0 view .LVU118
 493 0202 9091 0000 		lds r25,rand
 494 0206 892F      		mov r24,r25
 495 0208 881F      		rol r24
 496 020a 8827      		clr r24
 497 020c 881F      		rol r24
 498 020e 292F      		mov r18,r25
 499 0210 2295      		swap r18
 500 0212 2695      		lsr r18
 501 0214 2695      		lsr r18
 502 0216 2370      		andi r18,lo8(3)
 503 0218 8227      		eor r24,r18
 504 021a 292F      		mov r18,r25
 505 021c 2295      		swap r18
 506 021e 2F70      		andi r18,lo8(15)
 507 0220 8227      		eor r24,r18
 508 0222 292F      		mov r18,r25
 509 0224 2695      		lsr r18
 510 0226 2695      		lsr r18
 511 0228 8227      		eor r24,r18
 512 022a 8170      		andi r24,lo8(1)
 771:main.c        ****           (rand << 1)); /*Or with the register shifted right.*/
 513               		.loc 1 771 17 view .LVU119
 514 022c 990F      		lsl r25
 770:main.c        ****   rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2)) & 00000001) |
 515               		.loc 1 770 80 view .LVU120
 516 022e 892B      		or r24,r25
 770:main.c        ****   rand = ((((rand >> 7) ^ (rand >> 6) ^ (rand >> 4) ^ (rand >> 2)) & 00000001) |
 517               		.loc 1 770 8 view .LVU121
 518 0230 8093 0000 		sts rand,r24
 772:main.c        ****   return rand;          /*Return the first bit.*/
 519               		.loc 1 772 3 is_stmt 1 view .LVU122
 520               	/* epilogue start */
 773:main.c        **** }
 521               		.loc 1 773 1 is_stmt 0 view .LVU123
 522 0234 0895      		ret
 523               		.cfi_endproc
 524               	.LFE13:
 526               	.global	do_tempo
 528               	do_tempo:
 529               	.LFB2:
 104:main.c        ****   uint8_t i;
 530               		.loc 1 104 21 is_stmt 1 view -0
 531               		.cfi_startproc
 532 0236 0F93      		push r16
 533               		.cfi_def_cfa_offset 3
 534               		.cfi_offset 16, -2
 535 0238 1F93      		push r17
 536               		.cfi_def_cfa_offset 4
 537               		.cfi_offset 17, -3
 538 023a CF93      		push r28
 539               		.cfi_def_cfa_offset 5
 540               		.cfi_offset 28, -4
 541 023c DF93      		push r29
 542               		.cfi_def_cfa_offset 6
 543               		.cfi_offset 29, -5
 544               	/* prologue: function */
 545               	/* frame size = 0 */
 546               	/* stack size = 4 */
 547               	.L__stack_usage = 4
 105:main.c        **** 
 548               		.loc 1 105 3 view .LVU125
 107:main.c        **** 
 549               		.loc 1 107 3 view .LVU126
 550               	/* #APP */
 551               	 ;  107 "main.c" 1
 552 023e F894      		cli
 553               	 ;  0 "" 2
 111:main.c        ****       (function != KEYBOARD_MODE_FUNC)) {
 554               		.loc 1 111 3 view .LVU127
 111:main.c        ****       (function != KEYBOARD_MODE_FUNC)) {
 555               		.loc 1 111 27 is_stmt 0 view .LVU128
 556               	/* #NOAPP */
 557 0240 8091 0000 		lds r24,sync
 558 0244 8150      		subi r24,lo8(-(-1))
 111:main.c        ****       (function != KEYBOARD_MODE_FUNC)) {
 559               		.loc 1 111 6 view .LVU129
 560 0246 8230      		cpi r24,lo8(2)
 561 0248 00F0      		brlo .L49
 112:main.c        ****     if (dinsync_counter >= DINSYNC_PPQ / 4)
 562               		.loc 1 112 17 discriminator 1 view .LVU130
 563 024a 8091 0000 		lds r24,function
 111:main.c        ****       (function != KEYBOARD_MODE_FUNC)) {
 564               		.loc 1 111 49 discriminator 1 view .LVU131
 565 024e 8430      		cpi r24,lo8(4)
 566 0250 01F0      		breq .L49
 113:main.c        ****       dinsync_counter = 0;
 567               		.loc 1 113 5 is_stmt 1 view .LVU132
 113:main.c        ****       dinsync_counter = 0;
 568               		.loc 1 113 25 is_stmt 0 view .LVU133
 569 0252 8091 0000 		lds r24,dinsync_counter
 113:main.c        ****       dinsync_counter = 0;
 570               		.loc 1 113 8 view .LVU134
 571 0256 8630      		cpi r24,lo8(6)
 572 0258 00F0      		brlo .L50
 114:main.c        **** 
 573               		.loc 1 114 7 is_stmt 1 view .LVU135
 114:main.c        **** 
 574               		.loc 1 114 23 is_stmt 0 view .LVU136
 575 025a 1092 0000 		sts dinsync_counter,__zero_reg__
 576               	.L50:
 117:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 577               		.loc 1 117 5 is_stmt 1 view .LVU137
 117:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 578               		.loc 1 117 25 is_stmt 0 view .LVU138
 579 025e 8091 0000 		lds r24,dinsync_counter
 117:main.c        ****       cbi(DINSYNC_PORT, DINSYNC_CLK);
 580               		.loc 1 117 8 view .LVU139
 581 0262 80FF      		sbrs r24,0
 582 0264 00C0      		rjmp .L51
 118:main.c        ****     else {
 583               		.loc 1 118 7 is_stmt 1 view .LVU140
 584 0266 9498      		cbi 0x12,4
 585               	.L52:
 126:main.c        ****       dinsync_counter++;
 586               		.loc 1 126 5 view .LVU141
 126:main.c        ****       dinsync_counter++;
 587               		.loc 1 126 25 is_stmt 0 view .LVU142
 588 0268 8091 0000 		lds r24,dinsync_counter
 126:main.c        ****       dinsync_counter++;
 589               		.loc 1 126 8 view .LVU143
 590 026c 8823      		tst r24
 591 026e 01F0      		breq .L53
 127:main.c        ****       sei();
 592               		.loc 1 127 7 is_stmt 1 view .LVU144
 127:main.c        ****       sei();
 593               		.loc 1 127 22 is_stmt 0 view .LVU145
 594 0270 8091 0000 		lds r24,dinsync_counter
 595 0274 8F5F      		subi r24,lo8(-(1))
 596 0276 8093 0000 		sts dinsync_counter,r24
 128:main.c        ****       return;
 597               		.loc 1 128 7 is_stmt 1 view .LVU146
 598               	.L181:
 453:main.c        **** }
 599               		.loc 1 453 3 view .LVU147
 600               	/* #APP */
 601               	 ;  453 "main.c" 1
 602 027a 7894      		sei
 603               	 ;  0 "" 2
 604               	/* #NOAPP */
 605               	/* epilogue start */
 454:main.c        **** 
 606               		.loc 1 454 1 is_stmt 0 view .LVU148
 607 027c DF91      		pop r29
 608 027e CF91      		pop r28
 609 0280 1F91      		pop r17
 610 0282 0F91      		pop r16
 611 0284 0895      		ret
 612               	.L51:
 120:main.c        ****       midi_putchar(MIDI_CLOCK);
 613               		.loc 1 120 7 is_stmt 1 view .LVU149
 614 0286 949A      		sbi 0x12,4
 121:main.c        ****     }
 615               		.loc 1 121 7 view .LVU150
 616 0288 88EF      		ldi r24,lo8(-8)
 617 028a 0E94 0000 		call midi_putchar
 618               	.LVL12:
 619 028e 00C0      		rjmp .L52
 620               	.L53:
 131:main.c        ****     }
 621               		.loc 1 131 7 view .LVU151
 131:main.c        ****     }
 622               		.loc 1 131 22 is_stmt 0 view .LVU152
 623 0290 8091 0000 		lds r24,dinsync_counter
 624 0294 8F5F      		subi r24,lo8(-(1))
 625 0296 8093 0000 		sts dinsync_counter,r24
 626               	.L49:
 136:main.c        ****     note_counter = 0;
 627               		.loc 1 136 3 is_stmt 1 view .LVU153
 136:main.c        ****     note_counter = 0;
 628               		.loc 1 136 20 is_stmt 0 view .LVU154
 629 029a 8091 0000 		lds r24,note_counter
 136:main.c        ****     note_counter = 0;
 630               		.loc 1 136 6 view .LVU155
 631 029e 8830      		cpi r24,lo8(8)
 632 02a0 00F0      		brlo .L55
 137:main.c        **** 
 633               		.loc 1 137 5 is_stmt 1 view .LVU156
 137:main.c        **** 
 634               		.loc 1 137 18 is_stmt 0 view .LVU157
 635 02a2 1092 0000 		sts note_counter,__zero_reg__
 636               	.L55:
 139:main.c        ****     switch (function) {
 637               		.loc 1 139 3 is_stmt 1 view .LVU158
 139:main.c        ****     switch (function) {
 638               		.loc 1 139 20 is_stmt 0 view .LVU159
 639 02a6 8091 0000 		lds r24,note_counter
 140:main.c        ****     case RANDOM_MODE_FUNC:
 640               		.loc 1 140 5 view .LVU160
 641 02aa E091 0000 		lds r30,function
 642 02ae E150      		subi r30,lo8(-(-1))
 139:main.c        ****     switch (function) {
 643               		.loc 1 139 6 view .LVU161
 644 02b0 80FF      		sbrs r24,0
 645 02b2 00C0      		rjmp .L56
 140:main.c        ****     case RANDOM_MODE_FUNC:
 646               		.loc 1 140 5 is_stmt 1 view .LVU162
 647 02b4 EF30      		cpi r30,lo8(15)
 648 02b6 00F4      		brsh .L57
 649 02b8 F0E0      		ldi r31,0
 650 02ba E050      		subi r30,lo8(-(gs(.L59)))
 651 02bc F040      		sbci r31,hi8(-(gs(.L59)))
 652 02be 0C94 0000 		jmp __tablejump2__
 653               		.section	.jumptables.gcc.do_tempo,"a",@progbits
 654               		.p2align	1
 655               	.L59:
 656 0000 0000      		.word gs(.L63)
 657 0002 0000      		.word gs(.L57)
 658 0004 0000      		.word gs(.L61)
 659 0006 0000      		.word gs(.L57)
 660 0008 0000      		.word gs(.L60)
 661 000a 0000      		.word gs(.L57)
 662 000c 0000      		.word gs(.L58)
 663 000e 0000      		.word gs(.L62)
 664 0010 0000      		.word gs(.L60)
 665 0012 0000      		.word gs(.L57)
 666 0014 0000      		.word gs(.L58)
 667 0016 0000      		.word gs(.L61)
 668 0018 0000      		.word gs(.L60)
 669 001a 0000      		.word gs(.L57)
 670 001c 0000      		.word gs(.L58)
 671               		.text
 672               	.L62:
 142:main.c        ****       midi_send_note_off(curr_note);
 673               		.loc 1 142 7 view .LVU163
 674 02c2 80E0      		ldi r24,0
 675 02c4 0E94 0000 		call note_off
 676               	.LVL13:
 143:main.c        ****       break;
 677               		.loc 1 143 7 view .LVU164
 678 02c8 8091 0000 		lds r24,curr_note
 679 02cc 0E94 0000 		call midi_send_note_off
 680               	.LVL14:
 144:main.c        **** 
 681               		.loc 1 144 7 view .LVU165
 682               	.L57:
 441:main.c        ****     set_led(LED_TEMPO);
 683               		.loc 1 441 3 view .LVU166
 441:main.c        ****     set_led(LED_TEMPO);
 684               		.loc 1 441 20 is_stmt 0 view .LVU167
 685 02d0 8091 0000 		lds r24,note_counter
 441:main.c        ****     set_led(LED_TEMPO);
 686               		.loc 1 441 6 view .LVU168
 687 02d4 8430      		cpi r24,lo8(4)
 688 02d6 00F0      		brlo .+2
 689 02d8 00C0      		rjmp .L109
 442:main.c        ****     blink_leds_off();
 690               		.loc 1 442 5 is_stmt 1 view .LVU169
 691 02da 85E2      		ldi r24,lo8(37)
 692 02dc 0E94 0000 		call set_led
 693               	.LVL15:
 443:main.c        ****   } else if (note_counter < 8) {
 694               		.loc 1 443 5 view .LVU170
 695 02e0 0E94 0000 		call blink_leds_off
 696               	.LVL16:
 697               	.L110:
 449:main.c        **** 
 698               		.loc 1 449 3 view .LVU171
 699 02e4 0E94 0000 		call clock_leds
 700               	.LVL17:
 451:main.c        **** 
 701               		.loc 1 451 3 view .LVU172
 451:main.c        **** 
 702               		.loc 1 451 15 is_stmt 0 view .LVU173
 703 02e8 8091 0000 		lds r24,note_counter
 704 02ec 8F5F      		subi r24,lo8(-(1))
 705 02ee 8093 0000 		sts note_counter,r24
 706 02f2 00C0      		rjmp .L181
 707               	.L63:
 147:main.c        ****         if (curr_note != 0xFF) {
 708               		.loc 1 147 7 is_stmt 1 view .LVU174
 147:main.c        ****         if (curr_note != 0xFF) {
 709               		.loc 1 147 11 is_stmt 0 view .LVU175
 710 02f4 8091 0000 		lds r24,play_loaded_pattern
 147:main.c        ****         if (curr_note != 0xFF) {
 711               		.loc 1 147 10 view .LVU176
 712 02f8 8111      		cpse r24,__zero_reg__
 713 02fa 00C0      		rjmp .L64
 147:main.c        ****         if (curr_note != 0xFF) {
 714               		.loc 1 147 31 discriminator 1 view .LVU177
 715 02fc 8091 0000 		lds r24,play_loaded_track
 716 0300 8823      		tst r24
 717 0302 01F0      		breq .L65
 718               	.L64:
 148:main.c        ****           note_off(((curr_note >> 7) & 0x1) | all_slide); // slide
 719               		.loc 1 148 9 is_stmt 1 view .LVU178
 148:main.c        ****           note_off(((curr_note >> 7) & 0x1) | all_slide); // slide
 720               		.loc 1 148 23 is_stmt 0 view .LVU179
 721 0304 9091 0000 		lds r25,curr_note
 148:main.c        ****           note_off(((curr_note >> 7) & 0x1) | all_slide); // slide
 722               		.loc 1 148 12 view .LVU180
 723 0308 9F3F      		cpi r25,lo8(-1)
 724 030a 01F0      		breq .L65
 149:main.c        ****         }
 725               		.loc 1 149 11 is_stmt 1 view .LVU181
 149:main.c        ****         }
 726               		.loc 1 149 45 is_stmt 0 view .LVU182
 727 030c 8091 0000 		lds r24,all_slide
 728 0310 991F      		rol r25
 729 0312 9927      		clr r25
 730 0314 991F      		rol r25
 149:main.c        ****         }
 731               		.loc 1 149 11 view .LVU183
 732 0316 892B      		or r24,r25
 733 0318 0E94 0000 		call note_off
 734               	.LVL18:
 735               	.L65:
 152:main.c        ****         // last note of this pattern this pattern?
 736               		.loc 1 152 7 is_stmt 1 view .LVU184
 152:main.c        ****         // last note of this pattern this pattern?
 737               		.loc 1 152 11 is_stmt 0 view .LVU185
 738 031c 8091 0000 		lds r24,play_loaded_track
 152:main.c        ****         // last note of this pattern this pattern?
 739               		.loc 1 152 10 view .LVU186
 740 0320 8823      		tst r24
 741 0322 01F0      		breq .L57
 154:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 742               		.loc 1 154 9 is_stmt 1 view .LVU187
 154:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 743               		.loc 1 154 33 is_stmt 0 view .LVU188
 744 0324 8091 0000 		lds r24,curr_pattern_index
 154:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 745               		.loc 1 154 12 view .LVU189
 746 0328 8031      		cpi r24,lo8(16)
 747 032a 00F4      		brsh .L67
 155:main.c        **** 
 748               		.loc 1 155 26 discriminator 1 view .LVU190
 749 032c E091 0000 		lds r30,curr_pattern_index
 750 0330 F0E0      		ldi r31,0
 751 0332 E050      		subi r30,lo8(-(pattern_buff))
 752 0334 F040      		sbci r31,hi8(-(pattern_buff))
 753 0336 8081      		ld r24,Z
 154:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 754               		.loc 1 154 47 discriminator 1 view .LVU191
 755 0338 8F3F      		cpi r24,lo8(-1)
 756 033a 01F4      		brne .L57
 757               	.L67:
 157:main.c        ****           curr_track_index++;     // go to next patt in chain
 758               		.loc 1 157 11 is_stmt 1 view .LVU192
 157:main.c        ****           curr_track_index++;     // go to next patt in chain
 759               		.loc 1 157 30 is_stmt 0 view .LVU193
 760 033c 1092 0000 		sts curr_pattern_index,__zero_reg__
 158:main.c        ****           // last pattern in this chain?
 761               		.loc 1 158 11 is_stmt 1 view .LVU194
 158:main.c        ****           // last pattern in this chain?
 762               		.loc 1 158 27 is_stmt 0 view .LVU195
 763 0340 8091 0000 		lds r24,curr_track_index
 764 0344 8F5F      		subi r24,lo8(-(1))
 765 0346 8093 0000 		sts curr_track_index,r24
 160:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 766               		.loc 1 160 11 is_stmt 1 view .LVU196
 160:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 767               		.loc 1 160 33 is_stmt 0 view .LVU197
 768 034a 8091 0000 		lds r24,curr_track_index
 160:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 769               		.loc 1 160 14 view .LVU198
 770 034e 8031      		cpi r24,lo8(16)
 771 0350 00F4      		brsh .L69
 161:main.c        ****             // putstring("track loop\n\r");
 772               		.loc 1 161 26 discriminator 1 view .LVU199
 773 0352 E091 0000 		lds r30,curr_track_index
 774 0356 F0E0      		ldi r31,0
 775 0358 EE0F      		lsl r30
 776 035a FF1F      		rol r31
 777 035c E050      		subi r30,lo8(-(track_buff))
 778 035e F040      		sbci r31,hi8(-(track_buff))
 779 0360 8081      		ld r24,Z
 780 0362 9181      		ldd r25,Z+1
 160:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 781               		.loc 1 160 48 discriminator 1 view .LVU200
 782 0364 0196      		adiw r24,1
 783 0366 01F4      		brne .L70
 784               	.L69:
 163:main.c        ****           }
 785               		.loc 1 163 13 is_stmt 1 view .LVU201
 163:main.c        ****           }
 786               		.loc 1 163 30 is_stmt 0 view .LVU202
 787 0368 1092 0000 		sts curr_track_index,__zero_reg__
 788               	.L70:
 166:main.c        ****           if (curr_patt == END_OF_TRACK) {
 789               		.loc 1 166 11 is_stmt 1 view .LVU203
 166:main.c        ****           if (curr_patt == END_OF_TRACK) {
 790               		.loc 1 166 33 is_stmt 0 view .LVU204
 791 036c E091 0000 		lds r30,curr_track_index
 792 0370 F0E0      		ldi r31,0
 793 0372 EE0F      		lsl r30
 794 0374 FF1F      		rol r31
 795 0376 E050      		subi r30,lo8(-(track_buff))
 796 0378 F040      		sbci r31,hi8(-(track_buff))
 797 037a 8081      		ld r24,Z
 798 037c 9181      		ldd r25,Z+1
 166:main.c        ****           if (curr_patt == END_OF_TRACK) {
 799               		.loc 1 166 21 view .LVU205
 800 037e 9093 0000 		sts curr_patt+1,r25
 801 0382 8093 0000 		sts curr_patt,r24
 167:main.c        ****             // dont load the pattern, but make sure the pattern buffer wont play
 802               		.loc 1 167 11 is_stmt 1 view .LVU206
 167:main.c        ****             // dont load the pattern, but make sure the pattern buffer wont play
 803               		.loc 1 167 25 is_stmt 0 view .LVU207
 804 0386 8091 0000 		lds r24,curr_patt
 805 038a 9091 0000 		lds r25,curr_patt+1
 167:main.c        ****             // dont load the pattern, but make sure the pattern buffer wont play
 806               		.loc 1 167 14 view .LVU208
 807 038e 0196      		adiw r24,1
 808 0390 01F4      		brne .L71
 169:main.c        ****           } else {
 809               		.loc 1 169 13 is_stmt 1 view .LVU209
 169:main.c        ****           } else {
 810               		.loc 1 169 29 is_stmt 0 view .LVU210
 811 0392 8FEF      		ldi r24,lo8(-1)
 812 0394 8093 0000 		sts pattern_buff,r24
 813 0398 00C0      		rjmp .L57
 814               	.L71:
 171:main.c        ****             clear_bank_leds();
 815               		.loc 1 171 13 is_stmt 1 view .LVU211
 171:main.c        ****             clear_bank_leds();
 816               		.loc 1 171 32 is_stmt 0 view .LVU212
 817 039a 0E94 0000 		call load_curr_patt
 818               	.LVL19:
 171:main.c        ****             clear_bank_leds();
 819               		.loc 1 171 30 view .LVU213
 820 039e 8093 0000 		sts curr_pitch_shift,r24
 172:main.c        ****           }
 821               		.loc 1 172 13 is_stmt 1 view .LVU214
 822 03a2 0E94 0000 		call clear_bank_leds
 823               	.LVL20:
 824 03a6 00C0      		rjmp .L57
 825               	.L61:
 181:main.c        ****         if (curr_note != 0xFF) {
 826               		.loc 1 181 7 view .LVU215
 181:main.c        ****         if (curr_note != 0xFF) {
 827               		.loc 1 181 11 is_stmt 0 view .LVU216
 828 03a8 8091 0000 		lds r24,play_loaded_pattern
 181:main.c        ****         if (curr_note != 0xFF) {
 829               		.loc 1 181 10 view .LVU217
 830 03ac 8823      		tst r24
 831 03ae 01F4      		brne .+2
 832 03b0 00C0      		rjmp .L57
 182:main.c        ****           note_off((curr_note >> 7) & 0x1); // slide
 833               		.loc 1 182 9 is_stmt 1 view .LVU218
 182:main.c        ****           note_off((curr_note >> 7) & 0x1); // slide
 834               		.loc 1 182 23 is_stmt 0 view .LVU219
 835 03b2 8091 0000 		lds r24,curr_note
 182:main.c        ****           note_off((curr_note >> 7) & 0x1); // slide
 836               		.loc 1 182 12 view .LVU220
 837 03b6 8F3F      		cpi r24,lo8(-1)
 838 03b8 01F0      		breq .L72
 183:main.c        ****         }
 839               		.loc 1 183 11 is_stmt 1 view .LVU221
 840 03ba 881F      		rol r24
 841 03bc 8827      		clr r24
 842 03be 881F      		rol r24
 843 03c0 0E94 0000 		call note_off
 844               	.LVL21:
 845               	.L72:
 185:main.c        ****         if ((curr_pattern_index >= PATT_SIZE) ||
 846               		.loc 1 185 9 view .LVU222
 185:main.c        ****         if ((curr_pattern_index >= PATT_SIZE) ||
 847               		.loc 1 185 27 is_stmt 0 view .LVU223
 848 03c4 8091 0000 		lds r24,curr_pattern_index
 849 03c8 8F5F      		subi r24,lo8(-(1))
 850 03ca 8093 0000 		sts curr_pattern_index,r24
 186:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 851               		.loc 1 186 9 is_stmt 1 view .LVU224
 186:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 852               		.loc 1 186 33 is_stmt 0 view .LVU225
 853 03ce 8091 0000 		lds r24,curr_pattern_index
 186:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 854               		.loc 1 186 12 view .LVU226
 855 03d2 8031      		cpi r24,lo8(16)
 856 03d4 00F4      		brsh .L73
 187:main.c        ****           curr_pattern_index = 0;
 857               		.loc 1 187 26 discriminator 1 view .LVU227
 858 03d6 E091 0000 		lds r30,curr_pattern_index
 859 03da F0E0      		ldi r31,0
 860 03dc E050      		subi r30,lo8(-(pattern_buff))
 861 03de F040      		sbci r31,hi8(-(pattern_buff))
 862 03e0 8081      		ld r24,Z
 186:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 863               		.loc 1 186 47 discriminator 1 view .LVU228
 864 03e2 8F3F      		cpi r24,lo8(-1)
 865 03e4 01F0      		breq .+2
 866 03e6 00C0      		rjmp .L57
 867               	.L73:
 188:main.c        ****         }
 868               		.loc 1 188 11 is_stmt 1 view .LVU229
 188:main.c        ****         }
 869               		.loc 1 188 30 is_stmt 0 view .LVU230
 870 03e8 1092 0000 		sts curr_pattern_index,__zero_reg__
 871 03ec 00C0      		rjmp .L57
 872               	.L58:
 196:main.c        ****         if (curr_note != 0xFF) {
 873               		.loc 1 196 7 is_stmt 1 view .LVU231
 196:main.c        ****         if (curr_note != 0xFF) {
 874               		.loc 1 196 11 is_stmt 0 view .LVU232
 875 03ee 8091 0000 		lds r24,playing
 196:main.c        ****         if (curr_note != 0xFF) {
 876               		.loc 1 196 10 view .LVU233
 877 03f2 8823      		tst r24
 878 03f4 01F4      		brne .+2
 879 03f6 00C0      		rjmp .L57
 197:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 880               		.loc 1 197 9 is_stmt 1 view .LVU234
 197:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 881               		.loc 1 197 23 is_stmt 0 view .LVU235
 882 03f8 8091 0000 		lds r24,curr_note
 197:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 883               		.loc 1 197 12 view .LVU236
 884 03fc 8F3F      		cpi r24,lo8(-1)
 885 03fe 01F0      		breq .L74
 198:main.c        ****             // check if the note had slide on it
 886               		.loc 1 198 11 is_stmt 1 view .LVU237
 198:main.c        ****             // check if the note had slide on it
 887               		.loc 1 198 40 is_stmt 0 view .LVU238
 888 0400 9091 0000 		lds r25,all_slide
 198:main.c        ****             // check if the note had slide on it
 889               		.loc 1 198 33 view .LVU239
 890 0404 881F      		rol r24
 891 0406 8827      		clr r24
 892 0408 881F      		rol r24
 198:main.c        ****             // check if the note had slide on it
 893               		.loc 1 198 14 view .LVU240
 894 040a 892B      		or r24,r25
 895 040c 01F4      		brne .+2
 896 040e 00C0      		rjmp .L75
 200:main.c        ****             // DONT send a midi note off
 897               		.loc 1 200 13 is_stmt 1 view .LVU241
 898 0410 81E0      		ldi r24,lo8(1)
 899 0412 0E94 0000 		call note_off
 900               	.LVL22:
 901               	.L74:
 211:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 902               		.loc 1 211 9 view .LVU242
 211:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 903               		.loc 1 211 24 is_stmt 0 view .LVU243
 904 0416 8091 0000 		lds r24,prev_note
 211:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 905               		.loc 1 211 12 view .LVU244
 906 041a 8F3F      		cpi r24,lo8(-1)
 907 041c 01F0      		breq .L77
 211:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 908               		.loc 1 211 62 discriminator 1 view .LVU245
 909 041e 2091 0000 		lds r18,all_slide
 211:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 910               		.loc 1 211 55 discriminator 1 view .LVU246
 911 0422 982F      		mov r25,r24
 912 0424 991F      		rol r25
 913 0426 9927      		clr r25
 914 0428 991F      		rol r25
 211:main.c        ****           if ((prev_note & 0x3F) != 0) // not rest
 915               		.loc 1 211 33 discriminator 1 view .LVU247
 916 042a 922B      		or r25,r18
 917 042c 01F0      		breq .L77
 212:main.c        ****             midi_send_note_off(prev_note + curr_pitch_shift);
 918               		.loc 1 212 11 is_stmt 1 view .LVU248
 212:main.c        ****             midi_send_note_off(prev_note + curr_pitch_shift);
 919               		.loc 1 212 14 is_stmt 0 view .LVU249
 920 042e 982F      		mov r25,r24
 921 0430 9F73      		andi r25,lo8(63)
 922 0432 01F0      		breq .L78
 213:main.c        ****           else
 923               		.loc 1 213 13 is_stmt 1 view .LVU250
 924 0434 9091 0000 		lds r25,curr_pitch_shift
 925 0438 890F      		add r24,r25
 926               	.L78:
 215:main.c        ****         }
 927               		.loc 1 215 13 view .LVU251
 928 043a 0E94 0000 		call midi_send_note_off
 929               	.LVL23:
 930               	.L77:
 219:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 931               		.loc 1 219 9 view .LVU252
 219:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 932               		.loc 1 219 33 is_stmt 0 view .LVU253
 933 043e 8091 0000 		lds r24,curr_pattern_index
 219:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 934               		.loc 1 219 12 view .LVU254
 935 0442 8031      		cpi r24,lo8(16)
 936 0444 00F4      		brsh .L79
 220:main.c        **** 
 937               		.loc 1 220 26 discriminator 1 view .LVU255
 938 0446 E091 0000 		lds r30,curr_pattern_index
 939 044a F0E0      		ldi r31,0
 940 044c E050      		subi r30,lo8(-(pattern_buff))
 941 044e F040      		sbci r31,hi8(-(pattern_buff))
 942 0450 8081      		ld r24,Z
 219:main.c        ****             (pattern_buff[curr_pattern_index] == 0xFF)) {
 943               		.loc 1 219 47 discriminator 1 view .LVU256
 944 0452 8F3F      		cpi r24,lo8(-1)
 945 0454 01F0      		breq .+2
 946 0456 00C0      		rjmp .L57
 947               	.L79:
 222:main.c        ****           curr_chain_index++;     // go to next patt in chain
 948               		.loc 1 222 11 is_stmt 1 view .LVU257
 222:main.c        ****           curr_chain_index++;     // go to next patt in chain
 949               		.loc 1 222 30 is_stmt 0 view .LVU258
 950 0458 1092 0000 		sts curr_pattern_index,__zero_reg__
 223:main.c        ****           // last pattern in this chain?
 951               		.loc 1 223 11 is_stmt 1 view .LVU259
 223:main.c        ****           // last pattern in this chain?
 952               		.loc 1 223 27 is_stmt 0 view .LVU260
 953 045c 8091 0000 		lds r24,curr_chain_index
 954 0460 8F5F      		subi r24,lo8(-(1))
 955 0462 8093 0000 		sts curr_chain_index,r24
 225:main.c        ****               (curr_chain[curr_chain_index] == 0xFF)) {
 956               		.loc 1 225 11 is_stmt 1 view .LVU261
 225:main.c        ****               (curr_chain[curr_chain_index] == 0xFF)) {
 957               		.loc 1 225 33 is_stmt 0 view .LVU262
 958 0466 8091 0000 		lds r24,curr_chain_index
 225:main.c        ****               (curr_chain[curr_chain_index] == 0xFF)) {
 959               		.loc 1 225 14 view .LVU263
 960 046a 8032      		cpi r24,lo8(32)
 961 046c 00F4      		brsh .L80
 226:main.c        ****             curr_chain_index = 0;
 962               		.loc 1 226 26 discriminator 1 view .LVU264
 963 046e E091 0000 		lds r30,curr_chain_index
 964 0472 F0E0      		ldi r31,0
 965 0474 E050      		subi r30,lo8(-(curr_chain))
 966 0476 F040      		sbci r31,hi8(-(curr_chain))
 967 0478 8081      		ld r24,Z
 225:main.c        ****               (curr_chain[curr_chain_index] == 0xFF)) {
 968               		.loc 1 225 47 discriminator 1 view .LVU265
 969 047a 8F3F      		cpi r24,lo8(-1)
 970 047c 01F4      		brne .L81
 971               	.L80:
 227:main.c        ****           }
 972               		.loc 1 227 13 is_stmt 1 view .LVU266
 227:main.c        ****           }
 973               		.loc 1 227 30 is_stmt 0 view .LVU267
 974 047e 1092 0000 		sts curr_chain_index,__zero_reg__
 975               	.L81:
 230:main.c        ****               (curr_bank != next_bank)) {
 976               		.loc 1 230 11 is_stmt 1 view .LVU268
 230:main.c        ****               (curr_bank != next_bank)) {
 977               		.loc 1 230 16 is_stmt 0 view .LVU269
 978 0482 60E0      		ldi r22,lo8(curr_chain)
 979 0484 70E0      		ldi r23,hi8(curr_chain)
 980 0486 80E0      		ldi r24,lo8(next_chain)
 981 0488 90E0      		ldi r25,hi8(next_chain)
 982 048a 0E94 0000 		call chains_equiv
 983               	.LVL24:
 230:main.c        ****               (curr_bank != next_bank)) {
 984               		.loc 1 230 14 view .LVU270
 985 048e 8823      		tst r24
 986 0490 01F0      		breq .L111
 231:main.c        **** 
 987               		.loc 1 231 26 discriminator 1 view .LVU271
 988 0492 9091 0000 		lds r25,curr_bank
 989 0496 8091 0000 		lds r24,next_bank
 230:main.c        ****               (curr_bank != next_bank)) {
 990               		.loc 1 230 53 discriminator 1 view .LVU272
 991 049a 9817      		cp r25,r24
 992 049c 01F0      		breq .L83
 993               	.L111:
 994 049e 90E0      		ldi r25,0
 995 04a0 80E0      		ldi r24,0
 996               	.L84:
 997               	.LVL25:
 235:main.c        **** 
 998               		.loc 1 235 15 is_stmt 1 discriminator 3 view .LVU273
 235:main.c        **** 
 999               		.loc 1 235 41 is_stmt 0 discriminator 3 view .LVU274
 1000 04a2 FC01      		movw r30,r24
 1001 04a4 E050      		subi r30,lo8(-(next_chain))
 1002 04a6 F040      		sbci r31,hi8(-(next_chain))
 1003 04a8 2081      		ld r18,Z
 235:main.c        **** 
 1004               		.loc 1 235 29 discriminator 3 view .LVU275
 1005 04aa FC01      		movw r30,r24
 1006 04ac E050      		subi r30,lo8(-(curr_chain))
 1007 04ae F040      		sbci r31,hi8(-(curr_chain))
 1008 04b0 2083      		st Z,r18
 1009               	.LVL26:
 235:main.c        **** 
 1010               		.loc 1 235 29 discriminator 3 view .LVU276
 1011 04b2 0196      		adiw r24,1
 1012               	.LVL27:
 234:main.c        ****               curr_chain[i] = next_chain[i];
 1013               		.loc 1 234 13 discriminator 3 view .LVU277
 1014 04b4 8032      		cpi r24,32
 1015 04b6 9105      		cpc r25,__zero_reg__
 1016 04b8 01F4      		brne .L84
 237:main.c        **** 
 1017               		.loc 1 237 13 is_stmt 1 view .LVU278
 237:main.c        **** 
 1018               		.loc 1 237 30 is_stmt 0 view .LVU279
 1019 04ba 1092 0000 		sts curr_chain_index,__zero_reg__
 240:main.c        **** 
 1020               		.loc 1 240 13 is_stmt 1 view .LVU280
 240:main.c        **** 
 1021               		.loc 1 240 49 is_stmt 0 view .LVU281
 1022 04be 1092 0000 		sts curr_pitch_shift,__zero_reg__
 240:main.c        **** 
 1023               		.loc 1 240 30 view .LVU282
 1024 04c2 1092 0000 		sts next_pitch_shift,__zero_reg__
 242:main.c        ****             clear_blinking_leds();
 1025               		.loc 1 242 13 is_stmt 1 view .LVU283
 1026 04c6 0E94 0000 		call clear_notekey_leds
 1027               	.LVL28:
 243:main.c        ****           }
 1028               		.loc 1 243 13 view .LVU284
 1029 04ca 0E94 0000 		call clear_blinking_leds
 1030               	.LVL29:
 1031               	.L83:
 246:main.c        ****           curr_pitch_shift = next_pitch_shift;
 1032               		.loc 1 246 11 view .LVU285
 246:main.c        ****           curr_pitch_shift = next_pitch_shift;
 1033               		.loc 1 246 21 is_stmt 0 view .LVU286
 1034 04ce 8091 0000 		lds r24,next_bank
 1035 04d2 8093 0000 		sts curr_bank,r24
 247:main.c        **** 
 1036               		.loc 1 247 11 is_stmt 1 view .LVU287
 247:main.c        **** 
 1037               		.loc 1 247 28 is_stmt 0 view .LVU288
 1038 04d6 8091 0000 		lds r24,next_pitch_shift
 1039 04da 8093 0000 		sts curr_pitch_shift,r24
 249:main.c        ****         }
 1040               		.loc 1 249 11 is_stmt 1 view .LVU289
 1041 04de E091 0000 		lds r30,curr_chain_index
 1042 04e2 F0E0      		ldi r31,0
 1043 04e4 E050      		subi r30,lo8(-(curr_chain))
 1044 04e6 F040      		sbci r31,hi8(-(curr_chain))
 1045 04e8 6081      		ld r22,Z
 1046 04ea 8091 0000 		lds r24,curr_bank
 1047 04ee 0E94 0000 		call load_pattern
 1048               	.LVL30:
 1049 04f2 00C0      		rjmp .L57
 1050               	.L75:
 203:main.c        ****             if ((curr_note & 0x3F) != 0) // not rest
 1051               		.loc 1 203 13 view .LVU290
 1052 04f4 80E0      		ldi r24,0
 1053 04f6 0E94 0000 		call note_off
 1054               	.LVL31:
 204:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift);
 1055               		.loc 1 204 13 view .LVU291
 204:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift);
 1056               		.loc 1 204 28 is_stmt 0 view .LVU292
 1057 04fa 8091 0000 		lds r24,curr_note
 204:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift);
 1058               		.loc 1 204 16 view .LVU293
 1059 04fe 982F      		mov r25,r24
 1060 0500 9F73      		andi r25,lo8(63)
 1061 0502 01F0      		breq .L76
 205:main.c        ****             else
 1062               		.loc 1 205 15 is_stmt 1 view .LVU294
 1063 0504 9091 0000 		lds r25,curr_pitch_shift
 1064 0508 890F      		add r24,r25
 1065               	.L76:
 207:main.c        ****           }
 1066               		.loc 1 207 15 view .LVU295
 1067 050a 0E94 0000 		call midi_send_note_off
 1068               	.LVL32:
 1069 050e 00C0      		rjmp .L74
 1070               	.L60:
 257:main.c        ****         if (curr_note != 0xFF) {
 1071               		.loc 1 257 7 view .LVU296
 257:main.c        ****         if (curr_note != 0xFF) {
 1072               		.loc 1 257 11 is_stmt 0 view .LVU297
 1073 0510 8091 0000 		lds r24,playing
 257:main.c        ****         if (curr_note != 0xFF) {
 1074               		.loc 1 257 10 view .LVU298
 1075 0514 8823      		tst r24
 1076 0516 01F4      		brne .+2
 1077 0518 00C0      		rjmp .L57
 258:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 1078               		.loc 1 258 9 is_stmt 1 view .LVU299
 258:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 1079               		.loc 1 258 23 is_stmt 0 view .LVU300
 1080 051a 8091 0000 		lds r24,curr_note
 258:main.c        ****           if (((curr_note >> 7) & 0x1) | all_slide) {
 1081               		.loc 1 258 12 view .LVU301
 1082 051e 8F3F      		cpi r24,lo8(-1)
 1083 0520 01F0      		breq .L85
 259:main.c        ****             // check if the note had slide on it
 1084               		.loc 1 259 11 is_stmt 1 view .LVU302
 259:main.c        ****             // check if the note had slide on it
 1085               		.loc 1 259 40 is_stmt 0 view .LVU303
 1086 0522 9091 0000 		lds r25,all_slide
 259:main.c        ****             // check if the note had slide on it
 1087               		.loc 1 259 33 view .LVU304
 1088 0526 881F      		rol r24
 1089 0528 8827      		clr r24
 1090 052a 881F      		rol r24
 259:main.c        ****             // check if the note had slide on it
 1091               		.loc 1 259 14 view .LVU305
 1092 052c 892B      		or r24,r25
 1093 052e 01F4      		brne .+2
 1094 0530 00C0      		rjmp .L86
 261:main.c        ****             // DONT send a midi note off
 1095               		.loc 1 261 13 is_stmt 1 view .LVU306
 1096 0532 81E0      		ldi r24,lo8(1)
 1097 0534 0E94 0000 		call note_off
 1098               	.LVL33:
 1099               	.L85:
 274:main.c        ****             (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1100               		.loc 1 274 9 view .LVU307
 274:main.c        ****             (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1101               		.loc 1 274 33 is_stmt 0 view .LVU308
 1102 0538 8091 0000 		lds r24,curr_pattern_index
 274:main.c        ****             (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1103               		.loc 1 274 12 view .LVU309
 1104 053c 8031      		cpi r24,lo8(16)
 1105 053e 00F4      		brsh .L88
 275:main.c        ****           curr_pattern_index = 0; // start next pattern in track
 1106               		.loc 1 275 26 discriminator 1 view .LVU310
 1107 0540 E091 0000 		lds r30,curr_pattern_index
 1108 0544 F0E0      		ldi r31,0
 1109 0546 E050      		subi r30,lo8(-(pattern_buff))
 1110 0548 F040      		sbci r31,hi8(-(pattern_buff))
 1111 054a 8081      		ld r24,Z
 274:main.c        ****             (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1112               		.loc 1 274 47 discriminator 1 view .LVU311
 1113 054c 8F3F      		cpi r24,lo8(-1)
 1114 054e 01F0      		breq .+2
 1115 0550 00C0      		rjmp .L57
 1116               	.L88:
 276:main.c        ****           curr_track_index++;     // go to next patt in chain
 1117               		.loc 1 276 11 is_stmt 1 view .LVU312
 276:main.c        ****           curr_track_index++;     // go to next patt in chain
 1118               		.loc 1 276 30 is_stmt 0 view .LVU313
 1119 0552 1092 0000 		sts curr_pattern_index,__zero_reg__
 277:main.c        ****           /*
 1120               		.loc 1 277 11 is_stmt 1 view .LVU314
 277:main.c        ****           /*
 1121               		.loc 1 277 27 is_stmt 0 view .LVU315
 1122 0556 8091 0000 		lds r24,curr_track_index
 1123 055a 8F5F      		subi r24,lo8(-(1))
 1124 055c 8093 0000 		sts curr_track_index,r24
 284:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 1125               		.loc 1 284 11 is_stmt 1 view .LVU316
 284:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 1126               		.loc 1 284 33 is_stmt 0 view .LVU317
 1127 0560 8091 0000 		lds r24,curr_track_index
 284:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 1128               		.loc 1 284 14 view .LVU318
 1129 0564 8031      		cpi r24,lo8(16)
 1130 0566 00F4      		brsh .L89
 285:main.c        ****             curr_track_index = 0;
 1131               		.loc 1 285 26 discriminator 1 view .LVU319
 1132 0568 E091 0000 		lds r30,curr_track_index
 1133 056c F0E0      		ldi r31,0
 1134 056e EE0F      		lsl r30
 1135 0570 FF1F      		rol r31
 1136 0572 E050      		subi r30,lo8(-(track_buff))
 1137 0574 F040      		sbci r31,hi8(-(track_buff))
 1138 0576 8081      		ld r24,Z
 1139 0578 9181      		ldd r25,Z+1
 284:main.c        ****               (track_buff[curr_track_index] == END_OF_TRACK)) {
 1140               		.loc 1 284 48 discriminator 1 view .LVU320
 1141 057a 0196      		adiw r24,1
 1142 057c 01F0      		breq .+2
 1143 057e 00C0      		rjmp .L90
 1144               	.L89:
 286:main.c        ****             curr_chain_index++; // go to next track in chain
 1145               		.loc 1 286 13 is_stmt 1 view .LVU321
 286:main.c        ****             curr_chain_index++; // go to next track in chain
 1146               		.loc 1 286 30 is_stmt 0 view .LVU322
 1147 0580 1092 0000 		sts curr_track_index,__zero_reg__
 287:main.c        ****             /*
 1148               		.loc 1 287 13 is_stmt 1 view .LVU323
 287:main.c        ****             /*
 1149               		.loc 1 287 29 is_stmt 0 view .LVU324
 1150 0584 8091 0000 		lds r24,curr_chain_index
 1151 0588 8F5F      		subi r24,lo8(-(1))
 1152 058a 8093 0000 		sts curr_chain_index,r24
 303:main.c        ****                 (curr_chain[curr_chain_index] == 0xFF)) {
 1153               		.loc 1 303 13 is_stmt 1 view .LVU325
 303:main.c        ****                 (curr_chain[curr_chain_index] == 0xFF)) {
 1154               		.loc 1 303 35 is_stmt 0 view .LVU326
 1155 058e 8091 0000 		lds r24,curr_chain_index
 303:main.c        ****                 (curr_chain[curr_chain_index] == 0xFF)) {
 1156               		.loc 1 303 16 view .LVU327
 1157 0592 8032      		cpi r24,lo8(32)
 1158 0594 00F4      		brsh .L91
 304:main.c        ****               curr_chain_index = 0;
 1159               		.loc 1 304 28 discriminator 1 view .LVU328
 1160 0596 E091 0000 		lds r30,curr_chain_index
 1161 059a F0E0      		ldi r31,0
 1162 059c E050      		subi r30,lo8(-(curr_chain))
 1163 059e F040      		sbci r31,hi8(-(curr_chain))
 1164 05a0 8081      		ld r24,Z
 303:main.c        ****                 (curr_chain[curr_chain_index] == 0xFF)) {
 1165               		.loc 1 303 49 discriminator 1 view .LVU329
 1166 05a2 8F3F      		cpi r24,lo8(-1)
 1167 05a4 01F4      		brne .L92
 1168               	.L91:
 305:main.c        **** 
 1169               		.loc 1 305 15 is_stmt 1 view .LVU330
 305:main.c        **** 
 1170               		.loc 1 305 32 is_stmt 0 view .LVU331
 1171 05a6 1092 0000 		sts curr_chain_index,__zero_reg__
 307:main.c        ****                   (curr_bank != next_bank)) {
 1172               		.loc 1 307 15 is_stmt 1 view .LVU332
 307:main.c        ****                   (curr_bank != next_bank)) {
 1173               		.loc 1 307 20 is_stmt 0 view .LVU333
 1174 05aa 60E0      		ldi r22,lo8(curr_chain)
 1175 05ac 70E0      		ldi r23,hi8(curr_chain)
 1176 05ae 80E0      		ldi r24,lo8(next_chain)
 1177 05b0 90E0      		ldi r25,hi8(next_chain)
 1178 05b2 0E94 0000 		call chains_equiv
 1179               	.LVL34:
 307:main.c        ****                   (curr_bank != next_bank)) {
 1180               		.loc 1 307 18 view .LVU334
 1181 05b6 8823      		tst r24
 1182 05b8 01F0      		breq .L112
 308:main.c        **** 
 1183               		.loc 1 308 30 discriminator 1 view .LVU335
 1184 05ba 9091 0000 		lds r25,curr_bank
 1185 05be 8091 0000 		lds r24,next_bank
 307:main.c        ****                   (curr_bank != next_bank)) {
 1186               		.loc 1 307 57 discriminator 1 view .LVU336
 1187 05c2 9817      		cp r25,r24
 1188 05c4 01F0      		breq .L94
 1189               	.L112:
 1190 05c6 90E0      		ldi r25,0
 1191 05c8 80E0      		ldi r24,0
 1192               	.L95:
 1193               	.LVL35:
 312:main.c        **** 
 1194               		.loc 1 312 19 is_stmt 1 discriminator 3 view .LVU337
 312:main.c        **** 
 1195               		.loc 1 312 45 is_stmt 0 discriminator 3 view .LVU338
 1196 05ca FC01      		movw r30,r24
 1197 05cc E050      		subi r30,lo8(-(next_chain))
 1198 05ce F040      		sbci r31,hi8(-(next_chain))
 1199 05d0 2081      		ld r18,Z
 312:main.c        **** 
 1200               		.loc 1 312 33 discriminator 3 view .LVU339
 1201 05d2 FC01      		movw r30,r24
 1202 05d4 E050      		subi r30,lo8(-(curr_chain))
 1203 05d6 F040      		sbci r31,hi8(-(curr_chain))
 1204 05d8 2083      		st Z,r18
 1205               	.LVL36:
 312:main.c        **** 
 1206               		.loc 1 312 33 discriminator 3 view .LVU340
 1207 05da 0196      		adiw r24,1
 1208               	.LVL37:
 311:main.c        ****                   curr_chain[i] = next_chain[i];
 1209               		.loc 1 311 17 discriminator 3 view .LVU341
 1210 05dc 8032      		cpi r24,32
 1211 05de 9105      		cpc r25,__zero_reg__
 1212 05e0 01F4      		brne .L95
 315:main.c        **** 
 1213               		.loc 1 315 17 is_stmt 1 view .LVU342
 315:main.c        **** 
 1214               		.loc 1 315 53 is_stmt 0 view .LVU343
 1215 05e2 1092 0000 		sts curr_pitch_shift,__zero_reg__
 315:main.c        **** 
 1216               		.loc 1 315 34 view .LVU344
 1217 05e6 1092 0000 		sts next_pitch_shift,__zero_reg__
 317:main.c        ****                 clear_blinking_leds();
 1218               		.loc 1 317 17 is_stmt 1 view .LVU345
 1219 05ea 0E94 0000 		call clear_notekey_leds
 1220               	.LVL38:
 318:main.c        ****               }
 1221               		.loc 1 318 17 view .LVU346
 1222 05ee 0E94 0000 		call clear_blinking_leds
 1223               	.LVL39:
 1224               	.L94:
 321:main.c        ****               curr_pitch_shift = next_pitch_shift;
 1225               		.loc 1 321 15 view .LVU347
 321:main.c        ****               curr_pitch_shift = next_pitch_shift;
 1226               		.loc 1 321 25 is_stmt 0 view .LVU348
 1227 05f2 8091 0000 		lds r24,next_bank
 1228 05f6 8093 0000 		sts curr_bank,r24
 322:main.c        ****             }
 1229               		.loc 1 322 15 is_stmt 1 view .LVU349
 322:main.c        ****             }
 1230               		.loc 1 322 32 is_stmt 0 view .LVU350
 1231 05fa 8091 0000 		lds r24,next_pitch_shift
 1232 05fe 8093 0000 		sts curr_pitch_shift,r24
 1233               	.L92:
 324:main.c        ****           }
 1234               		.loc 1 324 13 is_stmt 1 view .LVU351
 1235 0602 E091 0000 		lds r30,curr_chain_index
 1236 0606 F0E0      		ldi r31,0
 1237 0608 E050      		subi r30,lo8(-(curr_chain))
 1238 060a F040      		sbci r31,hi8(-(curr_chain))
 1239 060c 6081      		ld r22,Z
 1240 060e 8091 0000 		lds r24,curr_bank
 1241 0612 0E94 0000 		call load_track
 1242               	.LVL40:
 1243               	.L90:
 326:main.c        ****           load_curr_patt();
 1244               		.loc 1 326 11 view .LVU352
 326:main.c        ****           load_curr_patt();
 1245               		.loc 1 326 33 is_stmt 0 view .LVU353
 1246 0616 E091 0000 		lds r30,curr_track_index
 1247 061a F0E0      		ldi r31,0
 1248 061c EE0F      		lsl r30
 1249 061e FF1F      		rol r31
 1250 0620 E050      		subi r30,lo8(-(track_buff))
 1251 0622 F040      		sbci r31,hi8(-(track_buff))
 1252 0624 8081      		ld r24,Z
 1253 0626 9181      		ldd r25,Z+1
 326:main.c        ****           load_curr_patt();
 1254               		.loc 1 326 21 view .LVU354
 1255 0628 9093 0000 		sts curr_patt+1,r25
 1256 062c 8093 0000 		sts curr_patt,r24
 327:main.c        ****         }
 1257               		.loc 1 327 11 is_stmt 1 view .LVU355
 1258 0630 0E94 0000 		call load_curr_patt
 1259               	.LVL41:
 1260 0634 00C0      		rjmp .L57
 1261               	.L86:
 264:main.c        ****             if ((curr_note & 0x3F) != 0) // not rest
 1262               		.loc 1 264 13 view .LVU356
 1263 0636 80E0      		ldi r24,0
 1264 0638 0E94 0000 		call note_off
 1265               	.LVL42:
 265:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift +
 1266               		.loc 1 265 13 view .LVU357
 265:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift +
 1267               		.loc 1 265 28 is_stmt 0 view .LVU358
 1268 063c 8091 0000 		lds r24,curr_note
 265:main.c        ****               midi_send_note_off(curr_note + curr_pitch_shift +
 1269               		.loc 1 265 16 view .LVU359
 1270 0640 982F      		mov r25,r24
 1271 0642 9F73      		andi r25,lo8(63)
 1272 0644 01F0      		breq .L87
 266:main.c        ****                                  get_pitchshift_from_patt(curr_patt));
 1273               		.loc 1 266 15 is_stmt 1 view .LVU360
 266:main.c        ****                                  get_pitchshift_from_patt(curr_patt));
 1274               		.loc 1 266 44 is_stmt 0 view .LVU361
 1275 0646 C091 0000 		lds r28,curr_pitch_shift
 1276 064a C80F      		add r28,r24
 267:main.c        ****             else
 1277               		.loc 1 267 34 view .LVU362
 1278 064c 8091 0000 		lds r24,curr_patt
 1279 0650 9091 0000 		lds r25,curr_patt+1
 1280 0654 0E94 0000 		call get_pitchshift_from_patt
 1281               	.LVL43:
 266:main.c        ****                                  get_pitchshift_from_patt(curr_patt));
 1282               		.loc 1 266 15 view .LVU363
 1283 0658 8C0F      		add r24,r28
 1284               	.L87:
 269:main.c        ****           }
 1285               		.loc 1 269 15 is_stmt 1 view .LVU364
 1286 065a 0E94 0000 		call midi_send_note_off
 1287               	.LVL44:
 1288 065e 00C0      		rjmp .L85
 1289               	.L56:
 333:main.c        ****     case RANDOM_MODE_FUNC:
 1290               		.loc 1 333 5 view .LVU365
 1291 0660 EF30      		cpi r30,lo8(15)
 1292 0662 00F0      		brlo .+2
 1293 0664 00C0      		rjmp .L57
 1294 0666 F0E0      		ldi r31,0
 1295 0668 E050      		subi r30,lo8(-(gs(.L97)))
 1296 066a F040      		sbci r31,hi8(-(gs(.L97)))
 1297 066c 0C94 0000 		jmp __tablejump2__
 1298               		.section	.jumptables.gcc.do_tempo,"a",@progbits
 1299               		.p2align	1
 1300               	.L97:
 1301 001e 0000      		.word gs(.L101)
 1302 0020 0000      		.word gs(.L57)
 1303 0022 0000      		.word gs(.L99)
 1304 0024 0000      		.word gs(.L57)
 1305 0026 0000      		.word gs(.L98)
 1306 0028 0000      		.word gs(.L57)
 1307 002a 0000      		.word gs(.L96)
 1308 002c 0000      		.word gs(.L100)
 1309 002e 0000      		.word gs(.L98)
 1310 0030 0000      		.word gs(.L57)
 1311 0032 0000      		.word gs(.L96)
 1312 0034 0000      		.word gs(.L99)
 1313 0036 0000      		.word gs(.L98)
 1314 0038 0000      		.word gs(.L57)
 1315 003a 0000      		.word gs(.L96)
 1316               		.text
 1317               	.L100:
 335:main.c        ****       curr_note = next_random_note;
 1318               		.loc 1 335 7 view .LVU366
 335:main.c        ****       curr_note = next_random_note;
 1319               		.loc 1 335 17 is_stmt 0 view .LVU367
 1320 0670 8091 0000 		lds r24,curr_note
 1321 0674 8093 0000 		sts prev_note,r24
 336:main.c        ****       next_random_note = random();
 1322               		.loc 1 336 7 is_stmt 1 view .LVU368
 336:main.c        ****       next_random_note = random();
 1323               		.loc 1 336 17 is_stmt 0 view .LVU369
 1324 0678 8091 0000 		lds r24,next_random_note
 1325 067c 8093 0000 		sts curr_note,r24
 337:main.c        **** 
 1326               		.loc 1 337 7 is_stmt 1 view .LVU370
 337:main.c        **** 
 1327               		.loc 1 337 26 is_stmt 0 view .LVU371
 1328 0680 0E94 0000 		call random
 1329               	.LVL45:
 337:main.c        **** 
 1330               		.loc 1 337 24 view .LVU372
 1331 0684 8093 0000 		sts next_random_note,r24
 339:main.c        ****               0,  // next_random_note>>6) & 0x1,
 1332               		.loc 1 339 7 is_stmt 1 view .LVU373
 1333 0688 8091 0000 		lds r24,curr_note
 1334 068c 40E0      		ldi r20,0
 1335 068e 60E0      		ldi r22,0
 1336 0690 8F73      		andi r24,lo8(63)
 1337               	.L180:
 429:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1338               		.loc 1 429 13 is_stmt 0 view .LVU374
 1339 0692 0E94 0000 		call note_on
 1340               	.LVL46:
 432:main.c        ****           }
 1341               		.loc 1 432 13 is_stmt 1 view .LVU375
 1342 0696 8091 0000 		lds r24,curr_note
 1343 069a 00C0      		rjmp .L179
 1344               	.L101:
 346:main.c        **** 
 1345               		.loc 1 346 7 view .LVU376
 346:main.c        **** 
 1346               		.loc 1 346 11 is_stmt 0 view .LVU377
 1347 069c 8091 0000 		lds r24,play_loaded_pattern
 346:main.c        **** 
 1348               		.loc 1 346 10 view .LVU378
 1349 06a0 8111      		cpse r24,__zero_reg__
 1350 06a2 00C0      		rjmp .L102
 346:main.c        **** 
 1351               		.loc 1 346 31 discriminator 1 view .LVU379
 1352 06a4 8091 0000 		lds r24,play_loaded_track
 1353 06a8 8823      		tst r24
 1354 06aa 01F4      		brne .+2
 1355 06ac 00C0      		rjmp .L57
 1356               	.L102:
 348:main.c        ****           // load up the next note
 1357               		.loc 1 348 9 is_stmt 1 view .LVU380
 348:main.c        ****           // load up the next note
 1358               		.loc 1 348 13 is_stmt 0 view .LVU381
 1359 06ae 8091 0000 		lds r24,play_loaded_pattern
 348:main.c        ****           // load up the next note
 1360               		.loc 1 348 12 view .LVU382
 1361 06b2 8823      		tst r24
 1362 06b4 01F0      		breq .L103
 350:main.c        ****               (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1363               		.loc 1 350 11 is_stmt 1 view .LVU383
 350:main.c        ****               (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1364               		.loc 1 350 35 is_stmt 0 view .LVU384
 1365 06b6 8091 0000 		lds r24,curr_pattern_index
 350:main.c        ****               (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1366               		.loc 1 350 14 view .LVU385
 1367 06ba 8031      		cpi r24,lo8(16)
 1368 06bc 00F4      		brsh .L104
 351:main.c        ****             curr_pattern_index = 0;
 1369               		.loc 1 351 28 discriminator 1 view .LVU386
 1370 06be E091 0000 		lds r30,curr_pattern_index
 1371 06c2 F0E0      		ldi r31,0
 1372 06c4 E050      		subi r30,lo8(-(pattern_buff))
 1373 06c6 F040      		sbci r31,hi8(-(pattern_buff))
 1374 06c8 8081      		ld r24,Z
 350:main.c        ****               (pattern_buff[curr_pattern_index] == END_OF_PATTERN)) {
 1375               		.loc 1 350 49 discriminator 1 view .LVU387
 1376 06ca 8F3F      		cpi r24,lo8(-1)
 1377 06cc 01F4      		brne .L103
 1378               	.L104:
 352:main.c        ****           }
 1379               		.loc 1 352 13 is_stmt 1 view .LVU388
 352:main.c        ****           }
 1380               		.loc 1 352 32 is_stmt 0 view .LVU389
 1381 06ce 1092 0000 		sts curr_pattern_index,__zero_reg__
 1382               	.L103:
 356:main.c        ****         curr_note = pattern_buff[curr_pattern_index++];
 1383               		.loc 1 356 9 is_stmt 1 view .LVU390
 356:main.c        ****         curr_note = pattern_buff[curr_pattern_index++];
 1384               		.loc 1 356 19 is_stmt 0 view .LVU391
 1385 06d2 6091 0000 		lds r22,curr_note
 1386 06d6 6093 0000 		sts prev_note,r22
 357:main.c        **** 
 1387               		.loc 1 357 9 is_stmt 1 view .LVU392
 357:main.c        **** 
 1388               		.loc 1 357 52 is_stmt 0 view .LVU393
 1389 06da E091 0000 		lds r30,curr_pattern_index
 1390 06de 81E0      		ldi r24,lo8(1)
 1391 06e0 8E0F      		add r24,r30
 1392 06e2 8093 0000 		sts curr_pattern_index,r24
 1393 06e6 F0E0      		ldi r31,0
 357:main.c        **** 
 1394               		.loc 1 357 33 view .LVU394
 1395 06e8 E050      		subi r30,lo8(-(pattern_buff))
 1396 06ea F040      		sbci r31,hi8(-(pattern_buff))
 1397 06ec 8081      		ld r24,Z
 357:main.c        **** 
 1398               		.loc 1 357 19 view .LVU395
 1399 06ee 8093 0000 		sts curr_note,r24
 359:main.c        ****           if (all_rest)
 1400               		.loc 1 359 9 is_stmt 1 view .LVU396
 359:main.c        ****           if (all_rest)
 1401               		.loc 1 359 12 is_stmt 0 view .LVU397
 1402 06f2 8F3F      		cpi r24,lo8(-1)
 1403 06f4 01F4      		brne .+2
 1404 06f6 00C0      		rjmp .L57
 360:main.c        ****             curr_note &= 0xC0;
 1405               		.loc 1 360 11 is_stmt 1 view .LVU398
 360:main.c        ****             curr_note &= 0xC0;
 1406               		.loc 1 360 15 is_stmt 0 view .LVU399
 1407 06f8 9091 0000 		lds r25,all_rest
 360:main.c        ****             curr_note &= 0xC0;
 1408               		.loc 1 360 14 view .LVU400
 1409 06fc 9923      		tst r25
 1410 06fe 01F0      		breq .L105
 361:main.c        **** 
 1411               		.loc 1 361 13 is_stmt 1 view .LVU401
 361:main.c        **** 
 1412               		.loc 1 361 23 is_stmt 0 view .LVU402
 1413 0700 807C      		andi r24,lo8(-64)
 1414 0702 8093 0000 		sts curr_note,r24
 1415               	.L105:
 363:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift,
 1416               		.loc 1 363 11 is_stmt 1 view .LVU403
 363:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift,
 1417               		.loc 1 363 26 is_stmt 0 view .LVU404
 1418 0706 4091 0000 		lds r20,curr_note
 1419 070a 842F      		mov r24,r20
 1420 070c 8F73      		andi r24,lo8(63)
 1421 070e 46FB      		bst r20,6
 1422 0710 4427      		clr r20
 1423 0712 40F9      		bld r20,0
 1424 0714 661F      		rol r22
 1425 0716 6627      		clr r22
 1426 0718 661F      		rol r22
 363:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift,
 1427               		.loc 1 363 14 view .LVU405
 1428 071a 8823      		tst r24
 1429 071c 01F0      		breq .L106
 364:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1430               		.loc 1 364 13 is_stmt 1 view .LVU406
 366:main.c        ****           } else {
 1431               		.loc 1 366 46 is_stmt 0 view .LVU407
 1432 071e 2091 0000 		lds r18,all_accent
 364:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1433               		.loc 1 364 13 view .LVU408
 1434 0722 9091 0000 		lds r25,all_slide
 366:main.c        ****           } else {
 1435               		.loc 1 366 46 view .LVU409
 1436 0726 422B      		or r20,r18
 364:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1437               		.loc 1 364 13 view .LVU410
 1438 0728 692B      		or r22,r25
 1439 072a 9091 0000 		lds r25,curr_pitch_shift
 1440 072e 890F      		add r24,r25
 1441               	.L178:
 390:main.c        ****                   prev_note >> 7,          // slide is on /prev/ note!
 1442               		.loc 1 390 11 view .LVU411
 1443 0730 0E94 0000 		call note_on
 1444               	.LVL47:
 1445 0734 00C0      		rjmp .L57
 1446               	.L106:
 368:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1447               		.loc 1 368 13 is_stmt 1 view .LVU412
 370:main.c        ****           }
 1448               		.loc 1 370 46 is_stmt 0 view .LVU413
 1449 0736 9091 0000 		lds r25,all_accent
 368:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1450               		.loc 1 368 13 view .LVU414
 1451 073a 8091 0000 		lds r24,all_slide
 370:main.c        ****           }
 1452               		.loc 1 370 46 view .LVU415
 1453 073e 492B      		or r20,r25
 368:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1454               		.loc 1 368 13 view .LVU416
 1455 0740 682B      		or r22,r24
 1456 0742 80E0      		ldi r24,0
 1457 0744 00C0      		rjmp .L178
 1458               	.L99:
 378:main.c        ****         // load up the next note
 1459               		.loc 1 378 7 is_stmt 1 view .LVU417
 378:main.c        ****         // load up the next note
 1460               		.loc 1 378 11 is_stmt 0 view .LVU418
 1461 0746 8091 0000 		lds r24,play_loaded_pattern
 378:main.c        ****         // load up the next note
 1462               		.loc 1 378 10 view .LVU419
 1463 074a 8823      		tst r24
 1464 074c 01F4      		brne .+2
 1465 074e 00C0      		rjmp .L57
 380:main.c        ****         set_bank_led(curr_pattern_index);
 1466               		.loc 1 380 9 is_stmt 1 view .LVU420
 1467 0750 0E94 0000 		call clear_bank_leds
 1468               	.LVL48:
 381:main.c        ****         prev_note = curr_note;
 1469               		.loc 1 381 9 view .LVU421
 1470 0754 8091 0000 		lds r24,curr_pattern_index
 1471 0758 0E94 0000 		call set_bank_led
 1472               	.LVL49:
 382:main.c        ****         curr_note = pattern_buff[curr_pattern_index];
 1473               		.loc 1 382 9 view .LVU422
 382:main.c        ****         curr_note = pattern_buff[curr_pattern_index];
 1474               		.loc 1 382 19 is_stmt 0 view .LVU423
 1475 075c 8091 0000 		lds r24,curr_note
 1476 0760 8093 0000 		sts prev_note,r24
 383:main.c        **** 
 1477               		.loc 1 383 9 is_stmt 1 view .LVU424
 383:main.c        **** 
 1478               		.loc 1 383 33 is_stmt 0 view .LVU425
 1479 0764 E091 0000 		lds r30,curr_pattern_index
 1480 0768 F0E0      		ldi r31,0
 1481 076a E050      		subi r30,lo8(-(pattern_buff))
 1482 076c F040      		sbci r31,hi8(-(pattern_buff))
 1483 076e 8081      		ld r24,Z
 383:main.c        **** 
 1484               		.loc 1 383 19 view .LVU426
 1485 0770 8093 0000 		sts curr_note,r24
 388:main.c        ****           set_note_led(curr_note);
 1486               		.loc 1 388 9 is_stmt 1 view .LVU427
 388:main.c        ****           set_note_led(curr_note);
 1487               		.loc 1 388 12 is_stmt 0 view .LVU428
 1488 0774 8F3F      		cpi r24,lo8(-1)
 1489 0776 01F4      		brne .+2
 1490 0778 00C0      		rjmp .L57
 389:main.c        ****           note_on(curr_note & 0x3F,
 1491               		.loc 1 389 11 is_stmt 1 view .LVU429
 1492 077a 0E94 0000 		call set_note_led
 1493               	.LVL50:
 390:main.c        ****                   prev_note >> 7,          // slide is on /prev/ note!
 1494               		.loc 1 390 11 view .LVU430
 392:main.c        ****         }
 1495               		.loc 1 392 36 is_stmt 0 view .LVU431
 1496 077e 8091 0000 		lds r24,curr_note
 390:main.c        ****                   prev_note >> 7,          // slide is on /prev/ note!
 1497               		.loc 1 390 11 view .LVU432
 1498 0782 86FB      		bst r24,6
 1499 0784 4427      		clr r20
 1500 0786 40F9      		bld r20,0
 1501 0788 6091 0000 		lds r22,prev_note
 1502 078c 661F      		rol r22
 1503 078e 6627      		clr r22
 1504 0790 661F      		rol r22
 1505 0792 8F73      		andi r24,lo8(63)
 1506 0794 00C0      		rjmp .L178
 1507               	.L96:
 400:main.c        ****         // in pattern play we show each note indexed in the pattern
 1508               		.loc 1 400 7 is_stmt 1 view .LVU433
 400:main.c        ****         // in pattern play we show each note indexed in the pattern
 1509               		.loc 1 400 11 is_stmt 0 view .LVU434
 1510 0796 8091 0000 		lds r24,playing
 400:main.c        ****         // in pattern play we show each note indexed in the pattern
 1511               		.loc 1 400 10 view .LVU435
 1512 079a 8823      		tst r24
 1513 079c 01F0      		breq .L98
 402:main.c        ****         set_bank_led(curr_pattern_index);
 1514               		.loc 1 402 9 is_stmt 1 view .LVU436
 1515 079e 0E94 0000 		call clear_bank_leds
 1516               	.LVL51:
 403:main.c        ****       }
 1517               		.loc 1 403 9 view .LVU437
 1518 07a2 8091 0000 		lds r24,curr_pattern_index
 1519 07a6 0E94 0000 		call set_bank_led
 1520               	.LVL52:
 1521               	.L98:
 409:main.c        ****         // in track play, we blink the track location but thats
 1522               		.loc 1 409 7 view .LVU438
 409:main.c        ****         // in track play, we blink the track location but thats
 1523               		.loc 1 409 11 is_stmt 0 view .LVU439
 1524 07aa 8091 0000 		lds r24,playing
 409:main.c        ****         // in track play, we blink the track location but thats
 1525               		.loc 1 409 10 view .LVU440
 1526 07ae 8823      		tst r24
 1527 07b0 01F4      		brne .+2
 1528 07b2 00C0      		rjmp .L57
 413:main.c        ****         curr_note = pattern_buff[curr_pattern_index++];
 1529               		.loc 1 413 9 is_stmt 1 view .LVU441
 413:main.c        ****         curr_note = pattern_buff[curr_pattern_index++];
 1530               		.loc 1 413 19 is_stmt 0 view .LVU442
 1531 07b4 6091 0000 		lds r22,curr_note
 1532 07b8 6093 0000 		sts prev_note,r22
 414:main.c        **** 
 1533               		.loc 1 414 9 is_stmt 1 view .LVU443
 414:main.c        **** 
 1534               		.loc 1 414 52 is_stmt 0 view .LVU444
 1535 07bc E091 0000 		lds r30,curr_pattern_index
 1536 07c0 81E0      		ldi r24,lo8(1)
 1537 07c2 8E0F      		add r24,r30
 1538 07c4 8093 0000 		sts curr_pattern_index,r24
 1539 07c8 F0E0      		ldi r31,0
 414:main.c        **** 
 1540               		.loc 1 414 33 view .LVU445
 1541 07ca E050      		subi r30,lo8(-(pattern_buff))
 1542 07cc F040      		sbci r31,hi8(-(pattern_buff))
 1543 07ce 8081      		ld r24,Z
 414:main.c        **** 
 1544               		.loc 1 414 19 view .LVU446
 1545 07d0 8093 0000 		sts curr_note,r24
 417:main.c        ****           if (all_rest)
 1546               		.loc 1 417 9 is_stmt 1 view .LVU447
 417:main.c        ****           if (all_rest)
 1547               		.loc 1 417 12 is_stmt 0 view .LVU448
 1548 07d4 8F3F      		cpi r24,lo8(-1)
 1549 07d6 01F4      		brne .+2
 1550 07d8 00C0      		rjmp .L57
 418:main.c        ****             curr_note &= 0xC0;
 1551               		.loc 1 418 11 is_stmt 1 view .LVU449
 418:main.c        ****             curr_note &= 0xC0;
 1552               		.loc 1 418 15 is_stmt 0 view .LVU450
 1553 07da 9091 0000 		lds r25,all_rest
 418:main.c        ****             curr_note &= 0xC0;
 1554               		.loc 1 418 14 view .LVU451
 1555 07de 9923      		tst r25
 1556 07e0 01F0      		breq .L107
 419:main.c        **** 
 1557               		.loc 1 419 13 is_stmt 1 view .LVU452
 419:main.c        **** 
 1558               		.loc 1 419 23 is_stmt 0 view .LVU453
 1559 07e2 807C      		andi r24,lo8(-64)
 1560 07e4 8093 0000 		sts curr_note,r24
 1561               	.L107:
 421:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift +
 1562               		.loc 1 421 11 is_stmt 1 view .LVU454
 421:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift +
 1563               		.loc 1 421 26 is_stmt 0 view .LVU455
 1564 07e8 C091 0000 		lds r28,curr_note
 1565 07ec 8C2F      		mov r24,r28
 1566 07ee 8F73      		andi r24,lo8(63)
 1567 07f0 C6FB      		bst r28,6
 1568 07f2 CC27      		clr r28
 1569 07f4 C0F9      		bld r28,0
 1570 07f6 661F      		rol r22
 1571 07f8 6627      		clr r22
 1572 07fa 661F      		rol r22
 421:main.c        ****             note_on((curr_note & 0x3F) + curr_pitch_shift +
 1573               		.loc 1 421 14 view .LVU456
 1574 07fc 8823      		tst r24
 1575 07fe 01F0      		breq .L108
 422:main.c        ****                         get_pitchshift_from_patt(curr_patt),
 1576               		.loc 1 422 13 is_stmt 1 view .LVU457
 425:main.c        ****             midi_send_note_on(curr_note + curr_pitch_shift +
 1577               		.loc 1 425 46 is_stmt 0 view .LVU458
 1578 0800 0091 0000 		lds r16,all_accent
 422:main.c        ****                         get_pitchshift_from_patt(curr_patt),
 1579               		.loc 1 422 13 view .LVU459
 1580 0804 1091 0000 		lds r17,all_slide
 1581 0808 162B      		or r17,r22
 422:main.c        ****                         get_pitchshift_from_patt(curr_patt),
 1582               		.loc 1 422 40 view .LVU460
 1583 080a D091 0000 		lds r29,curr_pitch_shift
 1584 080e D80F      		add r29,r24
 423:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1585               		.loc 1 423 25 view .LVU461
 1586 0810 8091 0000 		lds r24,curr_patt
 1587 0814 9091 0000 		lds r25,curr_patt+1
 1588 0818 0E94 0000 		call get_pitchshift_from_patt
 1589               	.LVL53:
 425:main.c        ****             midi_send_note_on(curr_note + curr_pitch_shift +
 1590               		.loc 1 425 46 view .LVU462
 1591 081c 402F      		mov r20,r16
 1592 081e 4C2B      		or r20,r28
 422:main.c        ****                         get_pitchshift_from_patt(curr_patt),
 1593               		.loc 1 422 13 view .LVU463
 1594 0820 612F      		mov r22,r17
 1595 0822 8D0F      		add r24,r29
 1596 0824 0E94 0000 		call note_on
 1597               	.LVL54:
 426:main.c        ****                               get_pitchshift_from_patt(curr_patt));
 1598               		.loc 1 426 13 is_stmt 1 view .LVU464
 426:main.c        ****                               get_pitchshift_from_patt(curr_patt));
 1599               		.loc 1 426 41 is_stmt 0 view .LVU465
 1600 0828 C091 0000 		lds r28,curr_note
 1601 082c 8091 0000 		lds r24,curr_pitch_shift
 1602 0830 C80F      		add r28,r24
 427:main.c        ****           } else {
 1603               		.loc 1 427 31 view .LVU466
 1604 0832 8091 0000 		lds r24,curr_patt
 1605 0836 9091 0000 		lds r25,curr_patt+1
 1606 083a 0E94 0000 		call get_pitchshift_from_patt
 1607               	.LVL55:
 426:main.c        ****                               get_pitchshift_from_patt(curr_patt));
 1608               		.loc 1 426 13 view .LVU467
 1609 083e 8C0F      		add r24,r28
 1610               	.L179:
 432:main.c        ****           }
 1611               		.loc 1 432 13 view .LVU468
 1612 0840 0E94 0000 		call midi_send_note_on
 1613               	.LVL56:
 1614 0844 00C0      		rjmp .L57
 1615               	.L108:
 429:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1616               		.loc 1 429 13 is_stmt 1 view .LVU469
 431:main.c        ****             midi_send_note_on(curr_note);
 1617               		.loc 1 431 46 is_stmt 0 view .LVU470
 1618 0846 4091 0000 		lds r20,all_accent
 429:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1619               		.loc 1 429 13 view .LVU471
 1620 084a 8091 0000 		lds r24,all_slide
 431:main.c        ****             midi_send_note_on(curr_note);
 1621               		.loc 1 431 46 view .LVU472
 1622 084e 4C2B      		or r20,r28
 429:main.c        ****                     (prev_note >> 7) | all_slide, // slide is from prev note!
 1623               		.loc 1 429 13 view .LVU473
 1624 0850 682B      		or r22,r24
 1625 0852 80E0      		ldi r24,0
 1626 0854 00C0      		rjmp .L180
 1627               	.L109:
 444:main.c        ****     clear_led(LED_TEMPO);
 1628               		.loc 1 444 10 is_stmt 1 view .LVU474
 444:main.c        ****     clear_led(LED_TEMPO);
 1629               		.loc 1 444 27 is_stmt 0 view .LVU475
 1630 0856 8091 0000 		lds r24,note_counter
 444:main.c        ****     clear_led(LED_TEMPO);
 1631               		.loc 1 444 13 view .LVU476
 1632 085a 8830      		cpi r24,lo8(8)
 1633 085c 00F0      		brlo .+2
 1634 085e 00C0      		rjmp .L110
 445:main.c        ****     blink_leds_on();
 1635               		.loc 1 445 5 is_stmt 1 view .LVU477
 1636 0860 85E2      		ldi r24,lo8(37)
 1637 0862 0E94 0000 		call clear_led
 1638               	.LVL57:
 446:main.c        ****   }
 1639               		.loc 1 446 5 view .LVU478
 1640 0866 0E94 0000 		call blink_leds_on
 1641               	.LVL58:
 1642 086a 00C0      		rjmp .L110
 1643               		.cfi_endproc
 1644               	.LFE2:
 1646               	.global	__vector_9
 1648               	__vector_9:
 1649               	.LFB1:
  97:main.c        ****   TCNT3 = timer3_init; // FIXME, use CTC mode
 1650               		.loc 1 97 23 view -0
 1651               		.cfi_startproc
 1652 086c 1F92      		push r1
 1653               		.cfi_def_cfa_offset 3
 1654               		.cfi_offset 1, -2
 1655 086e 0F92      		push r0
 1656               		.cfi_def_cfa_offset 4
 1657               		.cfi_offset 0, -3
 1658 0870 0FB6      		in r0,__SREG__
 1659 0872 0F92      		push r0
 1660 0874 1124      		clr __zero_reg__
 1661 0876 2F93      		push r18
 1662               		.cfi_def_cfa_offset 5
 1663               		.cfi_offset 18, -4
 1664 0878 3F93      		push r19
 1665               		.cfi_def_cfa_offset 6
 1666               		.cfi_offset 19, -5
 1667 087a 4F93      		push r20
 1668               		.cfi_def_cfa_offset 7
 1669               		.cfi_offset 20, -6
 1670 087c 5F93      		push r21
 1671               		.cfi_def_cfa_offset 8
 1672               		.cfi_offset 21, -7
 1673 087e 6F93      		push r22
 1674               		.cfi_def_cfa_offset 9
 1675               		.cfi_offset 22, -8
 1676 0880 7F93      		push r23
 1677               		.cfi_def_cfa_offset 10
 1678               		.cfi_offset 23, -9
 1679 0882 8F93      		push r24
 1680               		.cfi_def_cfa_offset 11
 1681               		.cfi_offset 24, -10
 1682 0884 9F93      		push r25
 1683               		.cfi_def_cfa_offset 12
 1684               		.cfi_offset 25, -11
 1685 0886 AF93      		push r26
 1686               		.cfi_def_cfa_offset 13
 1687               		.cfi_offset 26, -12
 1688 0888 BF93      		push r27
 1689               		.cfi_def_cfa_offset 14
 1690               		.cfi_offset 27, -13
 1691 088a EF93      		push r30
 1692               		.cfi_def_cfa_offset 15
 1693               		.cfi_offset 30, -14
 1694 088c FF93      		push r31
 1695               		.cfi_def_cfa_offset 16
 1696               		.cfi_offset 31, -15
 1697               	/* prologue: Signal */
 1698               	/* frame size = 0 */
 1699               	/* stack size = 15 */
 1700               	.L__stack_usage = 15
  98:main.c        ****   do_tempo();
 1701               		.loc 1 98 3 view .LVU480
  98:main.c        ****   do_tempo();
 1702               		.loc 1 98 9 is_stmt 0 view .LVU481
 1703 088e 8091 0000 		lds r24,timer3_init
 1704 0892 9091 0000 		lds r25,timer3_init+1
 1705 0896 9093 8900 		sts 136+1,r25
 1706 089a 8093 8800 		sts 136,r24
  99:main.c        **** }
 1707               		.loc 1 99 3 is_stmt 1 view .LVU482
 1708 089e 0E94 0000 		call do_tempo
 1709               	.LVL59:
 1710               	/* epilogue start */
 100:main.c        **** 
 1711               		.loc 1 100 1 is_stmt 0 view .LVU483
 1712 08a2 FF91      		pop r31
 1713 08a4 EF91      		pop r30
 1714 08a6 BF91      		pop r27
 1715 08a8 AF91      		pop r26
 1716 08aa 9F91      		pop r25
 1717 08ac 8F91      		pop r24
 1718 08ae 7F91      		pop r23
 1719 08b0 6F91      		pop r22
 1720 08b2 5F91      		pop r21
 1721 08b4 4F91      		pop r20
 1722 08b6 3F91      		pop r19
 1723 08b8 2F91      		pop r18
 1724 08ba 0F90      		pop r0
 1725 08bc 0FBE      		out __SREG__,r0
 1726 08be 0F90      		pop r0
 1727 08c0 1F90      		pop r1
 1728 08c2 1895      		reti
 1729               		.cfi_endproc
 1730               	.LFE1:
 1732               	.global	uart_putchar
 1734               	uart_putchar:
 1735               	.LFB18:
 774:main.c        **** 
 775:main.c        **** /************************** UART *************************/
 776:main.c        **** void putstring(char *str) {
 777:main.c        ****   while (str[0] != 0) {
 778:main.c        ****     uart_putchar(str[0]);
 779:main.c        ****     str++;
 780:main.c        ****   }
 781:main.c        **** }
 782:main.c        **** 
 783:main.c        **** void putnum_ud(uint16_t n) {
 784:main.c        ****   uint16_t pow;
 785:main.c        **** 
 786:main.c        ****   for (pow = 10000UL; pow >= 10; pow /= 10) {
 787:main.c        ****     if (n / pow) {
 788:main.c        ****       uart_putchar((n / pow) + '0');
 789:main.c        ****       n %= pow;
 790:main.c        ****       pow /= 10;
 791:main.c        ****       break;
 792:main.c        ****     }
 793:main.c        ****     n %= pow;
 794:main.c        ****   }
 795:main.c        ****   for (; pow != 0; pow /= 10) {
 796:main.c        ****     uart_putchar((n / pow) + '0');
 797:main.c        ****     n %= pow;
 798:main.c        ****   }
 799:main.c        ****   return;
 800:main.c        **** }
 801:main.c        **** 
 802:main.c        **** void printhex(uint8_t hex) {
 803:main.c        ****   hex &= 0xF;
 804:main.c        ****   if (hex < 10)
 805:main.c        ****     uart_putchar(hex + '0');
 806:main.c        ****   else
 807:main.c        ****     uart_putchar(hex + 'A' - 10);
 808:main.c        **** }
 809:main.c        **** 
 810:main.c        **** void putnum_uh(uint16_t n) {
 811:main.c        ****   if (n >> 12)
 812:main.c        ****     printhex(n >> 12);
 813:main.c        ****   if (n >> 8)
 814:main.c        ****     printhex(n >> 8);
 815:main.c        ****   if (n >> 4)
 816:main.c        ****     printhex(n >> 4);
 817:main.c        ****   printhex(n);
 818:main.c        **** 
 819:main.c        ****   return;
 820:main.c        **** }
 821:main.c        **** 
 822:main.c        **** int uart_putchar(char c) {
 1736               		.loc 1 822 26 is_stmt 1 view -0
 1737               		.cfi_startproc
 1738               	/* prologue: function */
 1739               	/* frame size = 0 */
 1740               	/* stack size = 0 */
 1741               	.L__stack_usage = 0
 1742               	.LVL60:
 1743               	.L184:
 823:main.c        ****   loop_until_bit_is_set(UCSR1A, UDRE1);
 1744               		.loc 1 823 3 discriminator 1 view .LVU485
 1745               		.loc 1 823 3 discriminator 1 view .LVU486
 1746 08c4 159B      		sbis 0x2,5
 1747 08c6 00C0      		rjmp .L184
 824:main.c        ****   UDR1 = c;
 1748               		.loc 1 824 3 view .LVU487
 1749               		.loc 1 824 8 is_stmt 0 view .LVU488
 1750 08c8 83B9      		out 0x3,r24
 825:main.c        ****   return 0;
 1751               		.loc 1 825 3 is_stmt 1 view .LVU489
 826:main.c        **** }
 1752               		.loc 1 826 1 is_stmt 0 view .LVU490
 1753 08ca 90E0      		ldi r25,0
 1754 08cc 80E0      		ldi r24,0
 1755               	.LVL61:
 1756               	/* epilogue start */
 1757               		.loc 1 826 1 view .LVU491
 1758 08ce 0895      		ret
 1759               		.cfi_endproc
 1760               	.LFE18:
 1762               	.global	putstring
 1764               	putstring:
 1765               	.LVL62:
 1766               	.LFB14:
 776:main.c        ****   while (str[0] != 0) {
 1767               		.loc 1 776 27 is_stmt 1 view -0
 1768               		.cfi_startproc
 776:main.c        ****   while (str[0] != 0) {
 1769               		.loc 1 776 27 is_stmt 0 view .LVU493
 1770 08d0 CF93      		push r28
 1771               		.cfi_def_cfa_offset 3
 1772               		.cfi_offset 28, -2
 1773 08d2 DF93      		push r29
 1774               		.cfi_def_cfa_offset 4
 1775               		.cfi_offset 29, -3
 1776               	/* prologue: function */
 1777               	/* frame size = 0 */
 1778               	/* stack size = 2 */
 1779               	.L__stack_usage = 2
 1780 08d4 EC01      		movw r28,r24
 777:main.c        ****     uart_putchar(str[0]);
 1781               		.loc 1 777 3 is_stmt 1 view .LVU494
 1782               	.LVL63:
 1783               	.L188:
 777:main.c        ****     uart_putchar(str[0]);
 1784               		.loc 1 777 13 is_stmt 0 view .LVU495
 1785 08d6 8991      		ld r24,Y+
 1786               	.LVL64:
 777:main.c        ****     uart_putchar(str[0]);
 1787               		.loc 1 777 9 view .LVU496
 1788 08d8 8111      		cpse r24,__zero_reg__
 1789 08da 00C0      		rjmp .L189
 1790               	/* epilogue start */
 781:main.c        **** 
 1791               		.loc 1 781 1 view .LVU497
 1792 08dc DF91      		pop r29
 1793 08de CF91      		pop r28
 1794               	.LVL65:
 781:main.c        **** 
 1795               		.loc 1 781 1 view .LVU498
 1796 08e0 0895      		ret
 1797               	.LVL66:
 1798               	.L189:
 778:main.c        ****     str++;
 1799               		.loc 1 778 5 is_stmt 1 view .LVU499
 1800 08e2 0E94 0000 		call uart_putchar
 1801               	.LVL67:
 779:main.c        ****   }
 1802               		.loc 1 779 5 view .LVU500
 779:main.c        ****   }
 1803               		.loc 1 779 5 is_stmt 0 view .LVU501
 1804 08e6 00C0      		rjmp .L188
 1805               		.cfi_endproc
 1806               	.LFE14:
 1808               	.global	putnum_ud
 1810               	putnum_ud:
 1811               	.LVL68:
 1812               	.LFB15:
 783:main.c        ****   uint16_t pow;
 1813               		.loc 1 783 28 is_stmt 1 view -0
 1814               		.cfi_startproc
 783:main.c        ****   uint16_t pow;
 1815               		.loc 1 783 28 is_stmt 0 view .LVU503
 1816 08e8 EF92      		push r14
 1817               		.cfi_def_cfa_offset 3
 1818               		.cfi_offset 14, -2
 1819 08ea FF92      		push r15
 1820               		.cfi_def_cfa_offset 4
 1821               		.cfi_offset 15, -3
 1822 08ec 0F93      		push r16
 1823               		.cfi_def_cfa_offset 5
 1824               		.cfi_offset 16, -4
 1825 08ee 1F93      		push r17
 1826               		.cfi_def_cfa_offset 6
 1827               		.cfi_offset 17, -5
 1828 08f0 CF93      		push r28
 1829               		.cfi_def_cfa_offset 7
 1830               		.cfi_offset 28, -6
 1831 08f2 DF93      		push r29
 1832               		.cfi_def_cfa_offset 8
 1833               		.cfi_offset 29, -7
 1834               	/* prologue: function */
 1835               	/* frame size = 0 */
 1836               	/* stack size = 6 */
 1837               	.L__stack_usage = 6
 1838 08f4 9C01      		movw r18,r24
 784:main.c        **** 
 1839               		.loc 1 784 3 is_stmt 1 view .LVU504
 786:main.c        ****     if (n / pow) {
 1840               		.loc 1 786 3 view .LVU505
 1841               	.LVL69:
 783:main.c        ****   uint16_t pow;
 1842               		.loc 1 783 28 is_stmt 0 view .LVU506
 1843 08f6 04E0      		ldi r16,lo8(4)
 1844 08f8 10E0      		ldi r17,0
 786:main.c        ****     if (n / pow) {
 1845               		.loc 1 786 12 view .LVU507
 1846 08fa D0E1      		ldi r29,lo8(16)
 1847 08fc C7E2      		ldi r28,lo8(39)
 1848 08fe 8AE0      		ldi r24,lo8(10)
 1849 0900 E82E      		mov r14,r24
 1850 0902 F12C      		mov r15,__zero_reg__
 1851               	.LVL70:
 1852               	.L193:
 787:main.c        ****       uart_putchar((n / pow) + '0');
 1853               		.loc 1 787 5 is_stmt 1 view .LVU508
 1854 0904 ED2F      		mov r30,r29
 1855 0906 FC2F      		mov r31,r28
 1856 0908 8D2F      		mov r24,r29
 1857 090a 9C2F      		mov r25,r28
 1858 090c B701      		movw r22,r14
 1859 090e 0E94 0000 		call __udivmodhi4
 1860 0912 D62F      		mov r29,r22
 1861               	.LVL71:
 787:main.c        ****       uart_putchar((n / pow) + '0');
 1862               		.loc 1 787 5 is_stmt 0 view .LVU509
 1863 0914 C72F      		mov r28,r23
 1864               	.LVL72:
 787:main.c        ****       uart_putchar((n / pow) + '0');
 1865               		.loc 1 787 5 view .LVU510
 1866 0916 C901      		movw r24,r18
 1867 0918 BF01      		movw r22,r30
 1868 091a 0E94 0000 		call __udivmodhi4
 787:main.c        ****       uart_putchar((n / pow) + '0');
 1869               		.loc 1 787 8 view .LVU511
 1870 091e 2E17      		cp r18,r30
 1871 0920 3F07      		cpc r19,r31
 1872 0922 00F0      		brlo .L191
 788:main.c        ****       n %= pow;
 1873               		.loc 1 788 7 is_stmt 1 view .LVU512
 1874 0924 8C01      		movw r16,r24
 1875 0926 80E3      		ldi r24,lo8(48)
 1876 0928 860F      		add r24,r22
 1877 092a 0E94 0000 		call uart_putchar
 1878               	.LVL73:
 789:main.c        ****       pow /= 10;
 1879               		.loc 1 789 7 view .LVU513
 789:main.c        ****       pow /= 10;
 1880               		.loc 1 789 9 is_stmt 0 view .LVU514
 1881 092e 9801      		movw r18,r16
 1882               	.LVL74:
 790:main.c        ****       break;
 1883               		.loc 1 790 7 is_stmt 1 view .LVU515
 791:main.c        ****     }
 1884               		.loc 1 791 7 view .LVU516
 1885               	.L192:
 795:main.c        ****     uart_putchar((n / pow) + '0');
 1886               		.loc 1 795 24 is_stmt 0 discriminator 2 view .LVU517
 1887 0930 0AE0      		ldi r16,lo8(10)
 1888 0932 10E0      		ldi r17,0
 1889               	.L194:
 1890               	.LVL75:
 796:main.c        ****     n %= pow;
 1891               		.loc 1 796 5 is_stmt 1 discriminator 2 view .LVU518
 1892 0934 C901      		movw r24,r18
 1893 0936 6D2F      		mov r22,r29
 1894 0938 7C2F      		mov r23,r28
 1895 093a 0E94 0000 		call __udivmodhi4
 1896 093e 7C01      		movw r14,r24
 1897 0940 80E3      		ldi r24,lo8(48)
 1898 0942 860F      		add r24,r22
 1899 0944 0E94 0000 		call uart_putchar
 1900               	.LVL76:
 797:main.c        ****   }
 1901               		.loc 1 797 5 discriminator 2 view .LVU519
 797:main.c        ****   }
 1902               		.loc 1 797 7 is_stmt 0 discriminator 2 view .LVU520
 1903 0948 9701      		movw r18,r14
 1904               	.LVL77:
 797:main.c        ****   }
 1905               		.loc 1 797 7 discriminator 2 view .LVU521
 1906 094a ED2F      		mov r30,r29
 1907 094c FC2F      		mov r31,r28
 795:main.c        ****     uart_putchar((n / pow) + '0');
 1908               		.loc 1 795 24 discriminator 2 view .LVU522
 1909 094e 8D2F      		mov r24,r29
 1910 0950 9C2F      		mov r25,r28
 1911 0952 B801      		movw r22,r16
 1912 0954 0E94 0000 		call __udivmodhi4
 1913 0958 D62F      		mov r29,r22
 1914               	.LVL78:
 795:main.c        ****     uart_putchar((n / pow) + '0');
 1915               		.loc 1 795 24 discriminator 2 view .LVU523
 1916 095a C72F      		mov r28,r23
 1917               	.LVL79:
 795:main.c        ****     uart_putchar((n / pow) + '0');
 1918               		.loc 1 795 3 discriminator 2 view .LVU524
 1919 095c 3A97      		sbiw r30,10
 1920 095e 00F4      		brsh .L194
 1921               	/* epilogue start */
 800:main.c        **** 
 1922               		.loc 1 800 1 view .LVU525
 1923 0960 DF91      		pop r29
 1924 0962 CF91      		pop r28
 1925 0964 1F91      		pop r17
 1926 0966 0F91      		pop r16
 1927               	.LVL80:
 800:main.c        **** 
 1928               		.loc 1 800 1 view .LVU526
 1929 0968 FF90      		pop r15
 1930               	.LVL81:
 800:main.c        **** 
 1931               		.loc 1 800 1 view .LVU527
 1932 096a EF90      		pop r14
 800:main.c        **** 
 1933               		.loc 1 800 1 view .LVU528
 1934 096c 0895      		ret
 1935               	.LVL82:
 1936               	.L191:
 793:main.c        ****   }
 1937               		.loc 1 793 5 is_stmt 1 discriminator 2 view .LVU529
 793:main.c        ****   }
 1938               		.loc 1 793 7 is_stmt 0 discriminator 2 view .LVU530
 1939 096e 9C01      		movw r18,r24
 1940               	.LVL83:
 793:main.c        ****   }
 1941               		.loc 1 793 7 discriminator 2 view .LVU531
 1942 0970 0150      		subi r16,1
 1943 0972 1109      		sbc r17,__zero_reg__
 786:main.c        ****     if (n / pow) {
 1944               		.loc 1 786 3 discriminator 2 view .LVU532
 1945 0974 01F4      		brne .L193
 1946 0976 00C0      		rjmp .L192
 1947               		.cfi_endproc
 1948               	.LFE15:
 1950               	.global	printhex
 1952               	printhex:
 1953               	.LVL84:
 1954               	.LFB16:
 802:main.c        ****   hex &= 0xF;
 1955               		.loc 1 802 28 is_stmt 1 view -0
 1956               		.cfi_startproc
 1957               	/* prologue: function */
 1958               	/* frame size = 0 */
 1959               	/* stack size = 0 */
 1960               	.L__stack_usage = 0
 803:main.c        ****   if (hex < 10)
 1961               		.loc 1 803 3 view .LVU534
 803:main.c        ****   if (hex < 10)
 1962               		.loc 1 803 7 is_stmt 0 view .LVU535
 1963 0978 8F70      		andi r24,lo8(15)
 1964               	.LVL85:
 804:main.c        ****     uart_putchar(hex + '0');
 1965               		.loc 1 804 3 is_stmt 1 view .LVU536
 804:main.c        ****     uart_putchar(hex + '0');
 1966               		.loc 1 804 6 is_stmt 0 view .LVU537
 1967 097a 8A30      		cpi r24,lo8(10)
 1968 097c 00F4      		brsh .L198
 805:main.c        ****   else
 1969               		.loc 1 805 5 is_stmt 1 view .LVU538
 1970 097e 805D      		subi r24,lo8(-(48))
 1971               	.LVL86:
 1972               	.L199:
 807:main.c        **** }
 1973               		.loc 1 807 5 is_stmt 0 view .LVU539
 1974 0980 0C94 0000 		jmp uart_putchar
 1975               	.LVL87:
 1976               	.L198:
 807:main.c        **** }
 1977               		.loc 1 807 5 is_stmt 1 view .LVU540
 1978 0984 895C      		subi r24,lo8(-(55))
 1979               	.LVL88:
 807:main.c        **** }
 1980               		.loc 1 807 5 is_stmt 0 view .LVU541
 1981 0986 00C0      		rjmp .L199
 1982               		.cfi_endproc
 1983               	.LFE16:
 1985               	.global	putnum_uh
 1987               	putnum_uh:
 1988               	.LVL89:
 1989               	.LFB17:
 810:main.c        ****   if (n >> 12)
 1990               		.loc 1 810 28 is_stmt 1 view -0
 1991               		.cfi_startproc
 810:main.c        ****   if (n >> 12)
 1992               		.loc 1 810 28 is_stmt 0 view .LVU543
 1993 0988 CF93      		push r28
 1994               		.cfi_def_cfa_offset 3
 1995               		.cfi_offset 28, -2
 1996 098a DF93      		push r29
 1997               		.cfi_def_cfa_offset 4
 1998               		.cfi_offset 29, -3
 1999               	/* prologue: function */
 2000               	/* frame size = 0 */
 2001               	/* stack size = 2 */
 2002               	.L__stack_usage = 2
 2003 098c EC01      		movw r28,r24
 811:main.c        ****     printhex(n >> 12);
 2004               		.loc 1 811 3 is_stmt 1 view .LVU544
 811:main.c        ****     printhex(n >> 12);
 2005               		.loc 1 811 9 is_stmt 0 view .LVU545
 2006 098e 892F      		mov r24,r25
 2007 0990 9927      		clr r25
 2008 0992 8295      		swap r24
 2009 0994 8F70      		andi r24,0x0f
 2010               	.LVL90:
 811:main.c        ****     printhex(n >> 12);
 2011               		.loc 1 811 6 view .LVU546
 2012 0996 0097      		sbiw r24,0
 2013 0998 01F0      		breq .L201
 812:main.c        ****   if (n >> 8)
 2014               		.loc 1 812 5 is_stmt 1 view .LVU547
 2015 099a 0E94 0000 		call printhex
 2016               	.LVL91:
 2017               	.L201:
 813:main.c        ****     printhex(n >> 8);
 2018               		.loc 1 813 3 view .LVU548
 813:main.c        ****     printhex(n >> 8);
 2019               		.loc 1 813 9 is_stmt 0 view .LVU549
 2020 099e 8D2F      		mov r24,r29
 2021 09a0 9927      		clr r25
 813:main.c        ****     printhex(n >> 8);
 2022               		.loc 1 813 6 view .LVU550
 2023 09a2 0097      		sbiw r24,0
 2024 09a4 01F0      		breq .L202
 814:main.c        ****   if (n >> 4)
 2025               		.loc 1 814 5 is_stmt 1 view .LVU551
 2026 09a6 0E94 0000 		call printhex
 2027               	.LVL92:
 2028               	.L202:
 815:main.c        ****     printhex(n >> 4);
 2029               		.loc 1 815 3 view .LVU552
 815:main.c        ****     printhex(n >> 4);
 2030               		.loc 1 815 9 is_stmt 0 view .LVU553
 2031 09aa CE01      		movw r24,r28
 2032 09ac 24E0      		ldi r18,4
 2033               		1:
 2034 09ae 9695      		lsr r25
 2035 09b0 8795      		ror r24
 2036 09b2 2A95      		dec r18
 2037 09b4 01F4      		brne 1b
 815:main.c        ****     printhex(n >> 4);
 2038               		.loc 1 815 6 view .LVU554
 2039 09b6 0097      		sbiw r24,0
 2040 09b8 01F0      		breq .L203
 816:main.c        ****   printhex(n);
 2041               		.loc 1 816 5 is_stmt 1 view .LVU555
 2042 09ba 0E94 0000 		call printhex
 2043               	.LVL93:
 2044               	.L203:
 817:main.c        **** 
 2045               		.loc 1 817 3 view .LVU556
 2046 09be 8C2F      		mov r24,r28
 2047               	/* epilogue start */
 820:main.c        **** 
 2048               		.loc 1 820 1 is_stmt 0 view .LVU557
 2049 09c0 DF91      		pop r29
 2050 09c2 CF91      		pop r28
 2051               	.LVL94:
 817:main.c        **** 
 2052               		.loc 1 817 3 view .LVU558
 2053 09c4 0C94 0000 		jmp printhex
 2054               	.LVL95:
 2055               		.cfi_endproc
 2056               	.LFE17:
 2058               	.global	uart_getch
 2060               	uart_getch:
 2061               	.LFB19:
 827:main.c        **** 
 828:main.c        **** int uart_getch() { // checks if there is a character waiting!
 2062               		.loc 1 828 18 is_stmt 1 view -0
 2063               		.cfi_startproc
 2064               	/* prologue: function */
 2065               	/* frame size = 0 */
 2066               	/* stack size = 0 */
 2067               	.L__stack_usage = 0
 829:main.c        ****   if (bit_is_set(UCSR1A, RXC1))
 2068               		.loc 1 829 3 view .LVU560
 2069               		.loc 1 829 7 is_stmt 0 view .LVU561
 2070 09c8 82B1      		in r24,0x2
 2071               		.loc 1 829 6 view .LVU562
 2072 09ca 082E      		mov __tmp_reg__,r24
 2073 09cc 000C      		lsl r0
 2074 09ce 990B      		sbc r25,r25
 830:main.c        ****     return 1;
 831:main.c        ****   return 0;
 832:main.c        **** }
 2075               		.loc 1 832 1 view .LVU563
 2076 09d0 892F      		mov r24,r25
 2077 09d2 881F      		rol r24
 2078 09d4 8827      		clr r24
 2079 09d6 881F      		rol r24
 2080 09d8 90E0      		ldi r25,0
 2081               	/* epilogue start */
 2082 09da 0895      		ret
 2083               		.cfi_endproc
 2084               	.LFE19:
 2086               	.global	uart_getchar
 2088               	uart_getchar:
 2089               	.LFB20:
 833:main.c        **** 
 834:main.c        **** int uart_getchar(void) {
 2090               		.loc 1 834 24 is_stmt 1 view -0
 2091               		.cfi_startproc
 2092               	/* prologue: function */
 2093               	/* frame size = 0 */
 2094               	/* stack size = 0 */
 2095               	.L__stack_usage = 0
 2096               	.L215:
 835:main.c        ****   char c;
 2097               		.loc 1 835 3 discriminator 1 view .LVU565
 836:main.c        ****   loop_until_bit_is_set(UCSR1A, RXC1);
 2098               		.loc 1 836 3 discriminator 1 view .LVU566
 2099               		.loc 1 836 3 discriminator 1 view .LVU567
 2100 09dc 179B      		sbis 0x2,7
 2101 09de 00C0      		rjmp .L215
 837:main.c        ****   c = UDR1;
 2102               		.loc 1 837 3 view .LVU568
 2103               		.loc 1 837 5 is_stmt 0 view .LVU569
 2104 09e0 83B1      		in r24,0x3
 2105               	.LVL96:
 838:main.c        ****   return (int)c;
 2106               		.loc 1 838 3 is_stmt 1 view .LVU570
 839:main.c        **** }
 2107               		.loc 1 839 1 is_stmt 0 view .LVU571
 2108 09e2 90E0      		ldi r25,0
 2109               	/* epilogue start */
 2110 09e4 0895      		ret
 2111               		.cfi_endproc
 2112               	.LFE20:
 2114               	.global	internal_eeprom_read8
 2116               	internal_eeprom_read8:
 2117               	.LVL97:
 2118               	.LFB21:
 840:main.c        **** 
 841:main.c        **** //**************************************************
 842:main.c        **** //         Internal EEPROM
 843:main.c        **** //**************************************************
 844:main.c        **** 
 845:main.c        **** uint8_t internal_eeprom_read8(uint16_t addr) {
 2119               		.loc 1 845 46 is_stmt 1 view -0
 2120               		.cfi_startproc
 2121               	/* prologue: function */
 2122               	/* frame size = 0 */
 2123               	/* stack size = 0 */
 2124               	.L__stack_usage = 0
 2125               		.loc 1 845 46 is_stmt 0 view .LVU573
 2126 09e6 9C01      		movw r18,r24
 2127               	.L218:
 846:main.c        ****   loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
 2128               		.loc 1 846 3 is_stmt 1 discriminator 1 view .LVU574
 2129               		.loc 1 846 3 discriminator 1 view .LVU575
 2130 09e8 E199      		sbic 0x1c,1
 2131 09ea 00C0      		rjmp .L218
 847:main.c        ****   EEAR = addr;
 2132               		.loc 1 847 3 view .LVU576
 2133               		.loc 1 847 8 is_stmt 0 view .LVU577
 2134 09ec 3FBB      		out 0x1e+1,r19
 2135 09ee 2EBB      		out 0x1e,r18
 848:main.c        ****   sbi(EECR, EERE); // start EEPROM read
 2136               		.loc 1 848 3 is_stmt 1 view .LVU578
 2137 09f0 E09A      		sbi 0x1c,0
 849:main.c        ****   return EEDR;     // takes only 1 cycle
 2138               		.loc 1 849 3 view .LVU579
 2139               		.loc 1 849 10 is_stmt 0 view .LVU580
 2140 09f2 8DB3      		in r24,0x1d
 2141               	.LVL98:
 2142               	/* epilogue start */
 850:main.c        **** }
 2143               		.loc 1 850 1 view .LVU581
 2144 09f4 0895      		ret
 2145               		.cfi_endproc
 2146               	.LFE21:
 2148               	.global	internal_eeprom_write8
 2150               	internal_eeprom_write8:
 2151               	.LVL99:
 2152               	.LFB22:
 851:main.c        **** 
 852:main.c        **** void internal_eeprom_write8(uint16_t addr, uint8_t data) {
 2153               		.loc 1 852 58 is_stmt 1 view -0
 2154               		.cfi_startproc
 2155               	/* prologue: function */
 2156               	/* frame size = 0 */
 2157               	/* stack size = 0 */
 2158               	.L__stack_usage = 0
 2159               		.loc 1 852 58 is_stmt 0 view .LVU583
 2160 09f6 9C01      		movw r18,r24
 2161               	.L221:
 853:main.c        ****   // printf("writing %d to addr 0x%x...", data, addr);
 854:main.c        ****   loop_until_bit_is_clear(EECR, EEWE); // wait for last write to finish
 2162               		.loc 1 854 3 is_stmt 1 discriminator 1 view .LVU584
 2163               		.loc 1 854 3 discriminator 1 view .LVU585
 2164 09f8 E199      		sbic 0x1c,1
 2165 09fa 00C0      		rjmp .L221
 855:main.c        ****   EEAR = addr;
 2166               		.loc 1 855 3 view .LVU586
 2167               		.loc 1 855 8 is_stmt 0 view .LVU587
 2168 09fc 3FBB      		out 0x1e+1,r19
 2169 09fe 2EBB      		out 0x1e,r18
 856:main.c        ****   EEDR = data;
 2170               		.loc 1 856 3 is_stmt 1 view .LVU588
 2171               		.loc 1 856 8 is_stmt 0 view .LVU589
 2172 0a00 6DBB      		out 0x1d,r22
 857:main.c        ****   cli();            // turn off interrupts
 2173               		.loc 1 857 3 is_stmt 1 view .LVU590
 2174               	/* #APP */
 2175               	 ;  857 "main.c" 1
 2176 0a02 F894      		cli
 2177               	 ;  0 "" 2
 858:main.c        ****   sbi(EECR, EEMWE); // these instructions must happen within 4 cycles
 2178               		.loc 1 858 3 view .LVU591
 2179               	/* #NOAPP */
 2180 0a04 E29A      		sbi 0x1c,2
 859:main.c        ****   sbi(EECR, EEWE);
 2181               		.loc 1 859 3 view .LVU592
 2182 0a06 E19A      		sbi 0x1c,1
 860:main.c        ****   sei(); // turn on interrupts again
 2183               		.loc 1 860 3 view .LVU593
 2184               	/* #APP */
 2185               	 ;  860 "main.c" 1
 2186 0a08 7894      		sei
 2187               	 ;  0 "" 2
 2188               	/* #NOAPP */
 2189               	/* epilogue start */
 861:main.c        ****   // putstring("done\n\r");
 862:main.c        **** }
 2190               		.loc 1 862 1 is_stmt 0 view .LVU594
 2191 0a0a 0895      		ret
 2192               		.cfi_endproc
 2193               	.LFE22:
 2195               	.global	change_tempo
 2197               	change_tempo:
 2198               	.LVL100:
 2199               	.LFB12:
 684:main.c        ****   uint16_t t3_prescale;
 2200               		.loc 1 684 39 is_stmt 1 view -0
 2201               		.cfi_startproc
 684:main.c        ****   uint16_t t3_prescale;
 2202               		.loc 1 684 39 is_stmt 0 view .LVU596
 2203 0a0c CF93      		push r28
 2204               		.cfi_def_cfa_offset 3
 2205               		.cfi_offset 28, -2
 2206 0a0e DF93      		push r29
 2207               		.cfi_def_cfa_offset 4
 2208               		.cfi_offset 29, -3
 2209 0a10 00D0      		rcall .
 2210 0a12 00D0      		rcall .
 2211               		.cfi_def_cfa_offset 8
 2212 0a14 CDB7      		in r28,__SP_L__
 2213 0a16 DEB7      		in r29,__SP_H__
 2214               		.cfi_def_cfa_register 28
 2215               	/* prologue: function */
 2216               	/* frame size = 4 */
 2217               	/* stack size = 6 */
 2218               	.L__stack_usage = 6
 2219 0a18 8983      		std Y+1,r24
 2220 0a1a 9A83      		std Y+2,r25
 685:main.c        ****   uint32_t num_instr;
 2221               		.loc 1 685 3 is_stmt 1 view .LVU597
 686:main.c        ****   uint16_t top_num_instr;
 2222               		.loc 1 686 3 view .LVU598
 687:main.c        **** 
 2223               		.loc 1 687 3 view .LVU599
 689:main.c        ****     set_tempo = MAX_TEMPO;
 2224               		.loc 1 689 3 view .LVU600
 2225 0a1c 8981      		ldd r24,Y+1
 2226 0a1e 9A81      		ldd r25,Y+2
 2227               	.LVL101:
 689:main.c        ****     set_tempo = MAX_TEMPO;
 2228               		.loc 1 689 3 is_stmt 0 view .LVU601
 2229 0a20 4497      		sbiw r24,20
 2230 0a22 00F4      		brsh .L224
 2231 0a24 84E1      		ldi r24,lo8(20)
 2232 0a26 90E0      		ldi r25,0
 2233 0a28 9A83      		std Y+2,r25
 2234 0a2a 8983      		std Y+1,r24
 2235               	.L224:
 2236 0a2c 8981      		ldd r24,Y+1
 2237 0a2e 9A81      		ldd r25,Y+2
 2238 0a30 8D32      		cpi r24,45
 2239 0a32 9140      		sbci r25,1
 2240 0a34 00F0      		brlo .L225
 2241 0a36 8CE2      		ldi r24,lo8(44)
 2242 0a38 91E0      		ldi r25,lo8(1)
 2243 0a3a 9A83      		std Y+2,r25
 2244 0a3c 8983      		std Y+1,r24
 2245               	.L225:
 2246               	.LVL102:
 696:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 2247               		.loc 1 696 3 is_stmt 1 view .LVU602
 696:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 2248               		.loc 1 696 20 is_stmt 0 view .LVU603
 2249 0a3e 8981      		ldd r24,Y+1
 2250 0a40 9A81      		ldd r25,Y+2
 2251 0a42 9093 0000 		sts tempo+1,r25
 2252 0a46 8093 0000 		sts tempo,r24
 696:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR, tempo >> 8);
 2253               		.loc 1 696 12 view .LVU604
 2254 0a4a 9093 0000 		sts newtempo+1,r25
 2255 0a4e 8093 0000 		sts newtempo,r24
 697:main.c        ****   internal_eeprom_write8(TEMPO_EEADDR + 1, tempo & 0xFF);
 2256               		.loc 1 697 3 is_stmt 1 view .LVU605
 2257 0a52 6A81      		ldd r22,Y+2
 2258 0a54 85E0      		ldi r24,lo8(5)
 2259 0a56 90E0      		ldi r25,0
 2260 0a58 0E94 0000 		call internal_eeprom_write8
 2261               	.LVL103:
 698:main.c        **** 
 2262               		.loc 1 698 3 view .LVU606
 2263 0a5c 6091 0000 		lds r22,tempo
 2264 0a60 86E0      		ldi r24,lo8(6)
 2265 0a62 90E0      		ldi r25,0
 2266 0a64 0E94 0000 		call internal_eeprom_write8
 2267               	.LVL104:
 704:main.c        **** 
 2268               		.loc 1 704 3 view .LVU607
 2269 0a68 8091 0000 		lds r24,tempo
 2270 0a6c 9091 0000 		lds r25,tempo+1
 2271 0a70 0E94 0000 		call send_tempo
 2272               	.LVL105:
 708:main.c        ****   num_instr /= set_tempo;
 2273               		.loc 1 708 3 view .LVU608
 709:main.c        ****   num_instr /= 4;               // sixteenth notes!
 2274               		.loc 1 709 3 view .LVU609
 709:main.c        ****   num_instr /= 4;               // sixteenth notes!
 2275               		.loc 1 709 13 is_stmt 0 view .LVU610
 2276 0a74 8981      		ldd r24,Y+1
 2277 0a76 9A81      		ldd r25,Y+2
 2278 0a78 9C01      		movw r18,r24
 2279 0a7a 50E0      		ldi r21,0
 2280 0a7c 40E0      		ldi r20,0
 2281 0a7e 60E0      		ldi r22,0
 2282 0a80 70E7      		ldi r23,lo8(112)
 2283 0a82 88E3      		ldi r24,lo8(56)
 2284 0a84 99E3      		ldi r25,lo8(57)
 2285 0a86 0E94 0000 		call __udivmodsi4
 2286               	.LVL106:
 710:main.c        ****   num_instr /= 2;               // call twice per quarter
 2287               		.loc 1 710 3 is_stmt 1 view .LVU611
 711:main.c        ****   num_instr /= DINSYNC_PPQ / 4; // do dinsync on same interrupt
 2288               		.loc 1 711 3 view .LVU612
 712:main.c        **** 
 2289               		.loc 1 712 3 view .LVU613
 712:main.c        **** 
 2290               		.loc 1 712 13 is_stmt 0 view .LVU614
 2291 0a8a CA01      		movw r24,r20
 2292 0a8c B901      		movw r22,r18
 2293 0a8e 20E3      		ldi r18,lo8(48)
 2294 0a90 30E0      		ldi r19,0
 2295 0a92 40E0      		ldi r20,0
 2296 0a94 50E0      		ldi r21,0
 2297 0a96 0E94 0000 		call __udivmodsi4
 2298               	.LVL107:
 714:main.c        ****   if (!top_num_instr) {
 2299               		.loc 1 714 3 is_stmt 1 view .LVU615
 715:main.c        ****     t3_prescale = 1;
 2300               		.loc 1 715 3 view .LVU616
 719:main.c        ****     t3_prescale = 8;
 2301               		.loc 1 719 10 view .LVU617
 719:main.c        ****     t3_prescale = 8;
 2302               		.loc 1 719 29 is_stmt 0 view .LVU618
 2303 0a9a CA01      		movw r24,r20
 2304 0a9c 887F      		andi r24,248
 719:main.c        ****     t3_prescale = 8;
 2305               		.loc 1 719 13 view .LVU619
 2306 0a9e 892B      		or r24,r25
 2307 0aa0 01F4      		brne .L226
 720:main.c        ****     timer3_init = num_instr >> 3;
 2308               		.loc 1 720 5 is_stmt 1 view .LVU620
 2309               	.LVL108:
 721:main.c        ****     TCCR3B = 2;
 2310               		.loc 1 721 5 view .LVU621
 721:main.c        ****     TCCR3B = 2;
 2311               		.loc 1 721 29 is_stmt 0 view .LVU622
 2312 0aa2 93E0      		ldi r25,3
 2313               		1:
 2314 0aa4 5695      		lsr r21
 2315 0aa6 4795      		ror r20
 2316 0aa8 3795      		ror r19
 2317 0aaa 2795      		ror r18
 2318 0aac 9A95      		dec r25
 2319 0aae 01F4      		brne 1b
 2320               	.LVL109:
 721:main.c        ****     TCCR3B = 2;
 2321               		.loc 1 721 17 view .LVU623
 2322 0ab0 3093 0000 		sts timer3_init+1,r19
 2323 0ab4 2093 0000 		sts timer3_init,r18
 722:main.c        ****   } else if ((top_num_instr & ~0xF) == 0) {
 2324               		.loc 1 722 5 is_stmt 1 view .LVU624
 722:main.c        ****   } else if ((top_num_instr & ~0xF) == 0) {
 2325               		.loc 1 722 12 is_stmt 0 view .LVU625
 2326 0ab8 82E0      		ldi r24,lo8(2)
 2327               	.LVL110:
 2328               	.L228:
 726:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 2329               		.loc 1 726 12 view .LVU626
 2330 0aba 8093 8A00 		sts 138,r24
 2331               	.LVL111:
 748:main.c        **** 
 2332               		.loc 1 748 3 is_stmt 1 view .LVU627
 748:main.c        **** 
 2333               		.loc 1 748 15 is_stmt 0 view .LVU628
 2334 0abe 8091 0000 		lds r24,timer3_init
 2335 0ac2 9091 0000 		lds r25,timer3_init+1
 2336 0ac6 9195      		neg r25
 2337 0ac8 8195      		neg r24
 2338 0aca 9109      		sbc r25,__zero_reg__
 2339 0acc 9093 0000 		sts timer3_init+1,r25
 2340 0ad0 8093 0000 		sts timer3_init,r24
 751:main.c        **** }
 2341               		.loc 1 751 3 is_stmt 1 view .LVU629
 751:main.c        **** }
 2342               		.loc 1 751 9 is_stmt 0 view .LVU630
 2343 0ad4 9093 8900 		sts 136+1,r25
 2344 0ad8 8093 8800 		sts 136,r24
 2345               	/* epilogue start */
 752:main.c        **** 
 2346               		.loc 1 752 1 view .LVU631
 2347 0adc 0F90      		pop __tmp_reg__
 2348 0ade 0F90      		pop __tmp_reg__
 2349 0ae0 0F90      		pop __tmp_reg__
 2350 0ae2 0F90      		pop __tmp_reg__
 2351 0ae4 DF91      		pop r29
 2352 0ae6 CF91      		pop r28
 2353 0ae8 0895      		ret
 2354               	.LVL112:
 2355               	.L226:
 723:main.c        ****     t3_prescale = 16;
 2356               		.loc 1 723 10 is_stmt 1 view .LVU632
 724:main.c        ****     timer3_init = num_instr >> 4;
 2357               		.loc 1 724 5 view .LVU633
 725:main.c        ****     TCCR3B = 6;
 2358               		.loc 1 725 5 view .LVU634
 725:main.c        ****     TCCR3B = 6;
 2359               		.loc 1 725 29 is_stmt 0 view .LVU635
 2360 0aea 84E0      		ldi r24,4
 2361               		1:
 2362 0aec 5695      		lsr r21
 2363 0aee 4795      		ror r20
 2364 0af0 3795      		ror r19
 2365 0af2 2795      		ror r18
 2366 0af4 8A95      		dec r24
 2367 0af6 01F4      		brne 1b
 2368               	.LVL113:
 725:main.c        ****     TCCR3B = 6;
 2369               		.loc 1 725 17 view .LVU636
 2370 0af8 3093 0000 		sts timer3_init+1,r19
 2371 0afc 2093 0000 		sts timer3_init,r18
 726:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 2372               		.loc 1 726 5 is_stmt 1 view .LVU637
 726:main.c        ****   } else if ((top_num_instr & ~0x1F) == 0) {
 2373               		.loc 1 726 12 is_stmt 0 view .LVU638
 2374 0b00 86E0      		ldi r24,lo8(6)
 2375 0b02 00C0      		rjmp .L228
 2376               		.cfi_endproc
 2377               	.LFE12:
 2379               	.global	init_tempo
 2381               	init_tempo:
 2382               	.LFB8:
 663:main.c        ****   sbi(PCMSK0, PCINT0); // detect change on pin A0
 2383               		.loc 1 663 23 is_stmt 1 view -0
 2384               		.cfi_startproc
 2385 0b04 CF93      		push r28
 2386               		.cfi_def_cfa_offset 3
 2387               		.cfi_offset 28, -2
 2388               	/* prologue: function */
 2389               	/* frame size = 0 */
 2390               	/* stack size = 1 */
 2391               	.L__stack_usage = 1
 664:main.c        ****   sbi(PCMSK0, PCINT1); // detect change on pin A1
 2392               		.loc 1 664 3 view .LVU640
 2393 0b06 EBE6      		ldi r30,lo8(107)
 2394 0b08 F0E0      		ldi r31,0
 2395 0b0a 8081      		ld r24,Z
 2396 0b0c 8160      		ori r24,lo8(1)
 2397 0b0e 8083      		st Z,r24
 665:main.c        ****   sbi(GICR, PCIE0);    // enable pin change interrupt for tempo knob detect
 2398               		.loc 1 665 3 view .LVU641
 2399 0b10 8081      		ld r24,Z
 2400 0b12 8260      		ori r24,lo8(2)
 2401 0b14 8083      		st Z,r24
 666:main.c        **** 
 2402               		.loc 1 666 3 view .LVU642
 2403 0b16 8BB7      		in r24,0x3b
 2404 0b18 8860      		ori r24,lo8(8)
 2405 0b1a 8BBF      		out 0x3b,r24
 668:main.c        ****                internal_eeprom_read8(TEMPO_EEADDR + 1));
 2406               		.loc 1 668 3 view .LVU643
 668:main.c        ****                internal_eeprom_read8(TEMPO_EEADDR + 1));
 2407               		.loc 1 668 17 is_stmt 0 view .LVU644
 2408 0b1c 85E0      		ldi r24,lo8(5)
 2409 0b1e 90E0      		ldi r25,0
 2410 0b20 0E94 0000 		call internal_eeprom_read8
 2411               	.LVL114:
 2412 0b24 C82F      		mov r28,r24
 669:main.c        ****   note_counter = 0;
 2413               		.loc 1 669 16 view .LVU645
 2414 0b26 86E0      		ldi r24,lo8(6)
 2415 0b28 90E0      		ldi r25,0
 2416 0b2a 0E94 0000 		call internal_eeprom_read8
 2417               	.LVL115:
 668:main.c        ****                internal_eeprom_read8(TEMPO_EEADDR + 1));
 2418               		.loc 1 668 3 view .LVU646
 2419 0b2e 9C2F      		mov r25,r28
 2420 0b30 0E94 0000 		call change_tempo
 2421               	.LVL116:
 670:main.c        ****   sbi(ETIMSK, TOIE3); // enable tempo interrupt
 2422               		.loc 1 670 3 is_stmt 1 view .LVU647
 670:main.c        ****   sbi(ETIMSK, TOIE3); // enable tempo interrupt
 2423               		.loc 1 670 16 is_stmt 0 view .LVU648
 2424 0b34 1092 0000 		sts note_counter,__zero_reg__
 671:main.c        **** }
 2425               		.loc 1 671 3 is_stmt 1 view .LVU649
 2426 0b38 EDE7      		ldi r30,lo8(125)
 2427 0b3a F0E0      		ldi r31,0
 2428 0b3c 8081      		ld r24,Z
 2429 0b3e 8460      		ori r24,lo8(4)
 2430 0b40 8083      		st Z,r24
 2431               	/* epilogue start */
 672:main.c        **** 
 2432               		.loc 1 672 1 is_stmt 0 view .LVU650
 2433 0b42 CF91      		pop r28
 2434 0b44 0895      		ret
 2435               		.cfi_endproc
 2436               	.LFE8:
 2438               	.global	ioinit
 2440               	ioinit:
 2441               	.LFB23:
 863:main.c        **** 
 864:main.c        **** void ioinit() {
 2442               		.loc 1 864 15 is_stmt 1 view -0
 2443               		.cfi_startproc
 2444               	/* prologue: function */
 2445               	/* frame size = 0 */
 2446               	/* stack size = 0 */
 2447               	.L__stack_usage = 0
 865:main.c        ****   uint16_t baud = (F_CPU / (16 * UART_BAUDRATE)) - 1;
 2448               		.loc 1 865 3 view .LVU652
 2449               	.LVL117:
 866:main.c        **** 
 867:main.c        ****   /* setup the main UART */
 868:main.c        ****   UCSR1B |= (1 << RXEN1) | (1 << TXEN1); // read and write & intr
 2450               		.loc 1 868 3 view .LVU653
 2451               		.loc 1 868 10 is_stmt 0 view .LVU654
 2452 0b46 81B1      		in r24,0x1
 2453 0b48 8861      		ori r24,lo8(24)
 2454 0b4a 81B9      		out 0x1,r24
 869:main.c        ****   UBRR1L = (uint8_t)baud;                // set baudrate
 2455               		.loc 1 869 3 is_stmt 1 view .LVU655
 2456               		.loc 1 869 10 is_stmt 0 view .LVU656
 2457 0b4c 83E3      		ldi r24,lo8(51)
 2458 0b4e 80B9      		out 0,r24
 870:main.c        ****   UBRR1H = (uint8_t)(baud >> 8);
 2459               		.loc 1 870 3 is_stmt 1 view .LVU657
 2460               		.loc 1 870 10 is_stmt 0 view .LVU658
 2461 0b50 1CBE      		out 0x3c,__zero_reg__
 871:main.c        ****   // first flush the input
 872:main.c        ****   while (uart_getch()) {
 2462               		.loc 1 872 3 is_stmt 1 view .LVU659
 2463               	.L231:
 2464               		.loc 1 872 10 is_stmt 0 view .LVU660
 2465 0b52 0E94 0000 		call uart_getch
 2466               	.LVL118:
 2467               		.loc 1 872 9 view .LVU661
 2468 0b56 892B      		or r24,r25
 2469 0b58 01F4      		brne .L232
 873:main.c        ****     uart_getchar();
 874:main.c        ****     delay_ms(10);
 875:main.c        ****   }
 876:main.c        ****   UCSR1B |= (1 << RXCIE1); // now turn on interrupts
 2470               		.loc 1 876 3 is_stmt 1 view .LVU662
 2471               		.loc 1 876 10 is_stmt 0 view .LVU663
 2472 0b5a 0F9A      		sbi 0x1,7
 877:main.c        **** 
 878:main.c        ****   /* setup the MIDI UART */
 879:main.c        ****   baud = (F_CPU / (16 * MIDI_BAUDRATE)) - 1;
 2473               		.loc 1 879 3 is_stmt 1 view .LVU664
 2474               	.LVL119:
 880:main.c        ****   UCSR0B |= (1 << RXEN0) | (1 << TXEN0) |
 2475               		.loc 1 880 3 view .LVU665
 2476               		.loc 1 880 10 is_stmt 0 view .LVU666
 2477 0b5c 8AB1      		in r24,0xa
 2478 0b5e 8869      		ori r24,lo8(-104)
 2479 0b60 8AB9      		out 0xa,r24
 881:main.c        ****             (1 << RXCIE0); // read and write, interrupt on recv.
 882:main.c        ****   UBRR0L = (uint8_t)baud;  // set baudrate
 2480               		.loc 1 882 3 is_stmt 1 view .LVU667
 2481               		.loc 1 882 10 is_stmt 0 view .LVU668
 2482 0b62 8FE1      		ldi r24,lo8(31)
 2483 0b64 89B9      		out 0x9,r24
 883:main.c        ****   UBRR0H = (uint8_t)(baud >> 8);
 2484               		.loc 1 883 3 is_stmt 1 view .LVU669
 2485               		.loc 1 883 10 is_stmt 0 view .LVU670
 2486 0b66 10BC      		out 0x20,__zero_reg__
 884:main.c        **** 
 885:main.c        ****   DDRA = 0xC0;  // led latch (o), rotary com (o), rot1, rot2, rot4, ro8, tempoa,
 2487               		.loc 1 885 3 is_stmt 1 view .LVU671
 2488               		.loc 1 885 8 is_stmt 0 view .LVU672
 2489 0b68 80EC      		ldi r24,lo8(-64)
 2490 0b6a 8ABB      		out 0x1a,r24
 886:main.c        ****                 // tempob
 887:main.c        ****   PORTA = 0x3C; // pullups on rotary1,2,4,8
 2491               		.loc 1 887 3 is_stmt 1 view .LVU673
 2492               		.loc 1 887 9 is_stmt 0 view .LVU674
 2493 0b6c 8CE3      		ldi r24,lo8(60)
 2494 0b6e 8BBB      		out 0x1b,r24
 888:main.c        **** 
 889:main.c        ****   DDRB = 0xBB; // spi_clk, spi_in, spi_out, NC, TX, RX, NC, switch latch (o)
 2495               		.loc 1 889 3 is_stmt 1 view .LVU675
 2496               		.loc 1 889 8 is_stmt 0 view .LVU676
 2497 0b70 8BEB      		ldi r24,lo8(-69)
 2498 0b72 87BB      		out 0x17,r24
 890:main.c        ****   PORTB = 0x0;
 2499               		.loc 1 890 3 is_stmt 1 view .LVU677
 2500               		.loc 1 890 9 is_stmt 0 view .LVU678
 2501 0b74 18BA      		out 0x18,__zero_reg__
 891:main.c        **** 
 892:main.c        ****   DDRC = 0xFF; // accent, slide, note[0-5]
 2502               		.loc 1 892 3 is_stmt 1 view .LVU679
 2503               		.loc 1 892 8 is_stmt 0 view .LVU680
 2504 0b76 8FEF      		ldi r24,lo8(-1)
 2505 0b78 84BB      		out 0x14,r24
 893:main.c        **** 
 894:main.c        ****   DDRD = 0xFF; // dinsync1, 2, 3, 4 (outputs), NC, NC, MIDI TX & RX
 2506               		.loc 1 894 3 is_stmt 1 view .LVU681
 2507               		.loc 1 894 8 is_stmt 0 view .LVU682
 2508 0b7a 81BB      		out 0x11,r24
 895:main.c        ****   DDRE = 0xFF; // note latch, gate, NC
 2509               		.loc 1 895 3 is_stmt 1 view .LVU683
 2510               		.loc 1 895 8 is_stmt 0 view .LVU684
 2511 0b7c 86B9      		out 0x6,r24
 896:main.c        **** 
 897:main.c        ****   SPCR = (1 << SPE) | (1 << MSTR) | 0x1; // master spi, clk=fosc/8 = 2mhz
 2512               		.loc 1 897 3 is_stmt 1 view .LVU685
 2513               		.loc 1 897 8 is_stmt 0 view .LVU686
 2514 0b7e 81E5      		ldi r24,lo8(81)
 2515 0b80 8DB9      		out 0xd,r24
 2516               	/* epilogue start */
 898:main.c        **** }
 2517               		.loc 1 898 1 view .LVU687
 2518 0b82 0895      		ret
 2519               	.LVL120:
 2520               	.L232:
 873:main.c        ****     delay_ms(10);
 2521               		.loc 1 873 5 is_stmt 1 view .LVU688
 2522 0b84 0E94 0000 		call uart_getchar
 2523               	.LVL121:
 874:main.c        ****   }
 2524               		.loc 1 874 5 view .LVU689
 2525 0b88 8AE0      		ldi r24,lo8(10)
 2526 0b8a 0E94 0000 		call delay_ms
 2527               	.LVL122:
 2528 0b8e 00C0      		rjmp .L231
 2529               		.cfi_endproc
 2530               	.LFE23:
 2532               		.section	.text.startup,"ax",@progbits
 2533               	.global	main
 2535               	main:
 2536               	.LFB5:
 535:main.c        ****   ioinit(); // set up IO ports and the UART
 2537               		.loc 1 535 16 view -0
 2538               		.cfi_startproc
 2539               	/* prologue: function */
 2540               	/* frame size = 0 */
 2541               	/* stack size = 0 */
 2542               	.L__stack_usage = 0
 536:main.c        **** 
 2543               		.loc 1 536 3 view .LVU691
 2544 0000 0E94 0000 		call ioinit
 2545               	.LVL123:
 539:main.c        **** 
 2546               		.loc 1 539 3 view .LVU692
 2547 0004 0E94 0000 		call init_tempo
 2548               	.LVL124:
 542:main.c        **** 
 2549               		.loc 1 542 3 view .LVU693
 2550 0008 0E94 0000 		call init_timer0
 2551               	.LVL125:
 547:main.c        **** 
 2552               		.loc 1 547 3 view .LVU694
 547:main.c        **** 
 2553               		.loc 1 547 8 is_stmt 0 view .LVU695
 2554 000c 8091 0000 		lds r24,tempo
 2555 0010 8093 0000 		sts rand,r24
 549:main.c        **** 
 2556               		.loc 1 549 3 is_stmt 1 view .LVU696
 2557 0014 0E94 0000 		call dinsync_set_out
 2558               	.LVL126:
 551:main.c        **** 
 2559               		.loc 1 551 3 view .LVU697
 2560 0018 0E94 0000 		call init_midi
 2561               	.LVL127:
 553:main.c        **** 
 2562               		.loc 1 553 3 view .LVU698
 2563               	/* #APP */
 2564               	 ;  553 "main.c" 1
 2565 001c 7894      		sei
 2566               	 ;  0 "" 2
 635:main.c        ****       do_pattern_edit();
 2567               		.loc 1 635 12 is_stmt 0 view .LVU699
 2568               	/* #NOAPP */
 2569 001e C2E0      		ldi r28,lo8(2)
 576:main.c        ****       do_patterntrack_play();
 2570               		.loc 1 576 12 view .LVU700
 2571 0020 D1E0      		ldi r29,lo8(1)
 2572               	.L251:
 556:main.c        ****     read_switches();
 2573               		.loc 1 556 3 is_stmt 1 view .LVU701
 557:main.c        ****     switch (function) {
 2574               		.loc 1 557 5 view .LVU702
 2575 0022 0E94 0000 		call read_switches
 2576               	.LVL128:
 558:main.c        ****     case COMPUTER_CONTROL_FUNC:
 2577               		.loc 1 558 5 view .LVU703
 2578 0026 E091 0000 		lds r30,function
 2579 002a E031      		cpi r30,lo8(16)
 2580 002c 00F4      		brsh .L251
 2581 002e F0E0      		ldi r31,0
 2582 0030 E050      		subi r30,lo8(-(gs(.L237)))
 2583 0032 F040      		sbci r31,hi8(-(gs(.L237)))
 2584 0034 0C94 0000 		jmp __tablejump2__
 2585               		.section	.jumptables.gcc.main,"a",@progbits
 2586               		.p2align	1
 2587               	.L237:
 2588 0000 0000      		.word gs(.L247)
 2589 0002 0000      		.word gs(.L246)
 2590 0004 0000      		.word gs(.L241)
 2591 0006 0000      		.word gs(.L245)
 2592 0008 0000      		.word gs(.L244)
 2593 000a 0000      		.word gs(.L243)
 2594 000c 0000      		.word gs(.L251)
 2595 000e 0000      		.word gs(.L243)
 2596 0010 0000      		.word gs(.L242)
 2597 0012 0000      		.word gs(.L240)
 2598 0014 0000      		.word gs(.L241)
 2599 0016 0000      		.word gs(.L240)
 2600 0018 0000      		.word gs(.L239)
 2601 001a 0000      		.word gs(.L236)
 2602 001c 0000      		.word gs(.L238)
 2603 001e 0000      		.word gs(.L236)
 2604               		.section	.text.startup
 2605               	.L238:
 561:main.c        ****       do_computer_control();
 2606               		.loc 1 561 7 view .LVU704
 561:main.c        ****       do_computer_control();
 2607               		.loc 1 561 12 is_stmt 0 view .LVU705
 2608 0038 1092 0000 		sts sync,__zero_reg__
 562:main.c        ****       break;
 2609               		.loc 1 562 7 is_stmt 1 view .LVU706
 2610 003c 0E94 0000 		call do_computer_control
 2611               	.LVL129:
 563:main.c        ****     case EDIT_PATTERN_FUNC:
 2612               		.loc 1 563 7 view .LVU707
 2613 0040 00C0      		rjmp .L251
 2614               	.L245:
 566:main.c        ****       do_pattern_edit();
 2615               		.loc 1 566 7 view .LVU708
 566:main.c        ****       do_pattern_edit();
 2616               		.loc 1 566 12 is_stmt 0 view .LVU709
 2617 0042 1092 0000 		sts sync,__zero_reg__
 567:main.c        ****       break;
 2618               		.loc 1 567 7 is_stmt 1 view .LVU710
 2619               	.L253:
 636:main.c        ****       break;
 2620               		.loc 1 636 7 view .LVU711
 2621 0046 0E94 0000 		call do_pattern_edit
 2622               	.LVL130:
 637:main.c        ****     case B_FUNC:
 2623               		.loc 1 637 7 view .LVU712
 2624 004a 00C0      		rjmp .L251
 2625               	.L236:
 571:main.c        ****       do_patterntrack_play();
 2626               		.loc 1 571 7 view .LVU713
 571:main.c        ****       do_patterntrack_play();
 2627               		.loc 1 571 12 is_stmt 0 view .LVU714
 2628 004c 1092 0000 		sts sync,__zero_reg__
 572:main.c        ****       break;
 2629               		.loc 1 572 7 is_stmt 1 view .LVU715
 2630               	.L254:
 577:main.c        ****       break;
 2631               		.loc 1 577 7 view .LVU716
 2632 0050 0E94 0000 		call do_patterntrack_play
 2633               	.LVL131:
 578:main.c        ****     case PLAY_PATTERN_MIDISYNC_FUNC:
 2634               		.loc 1 578 7 view .LVU717
 2635 0054 00C0      		rjmp .L251
 2636               	.L243:
 576:main.c        ****       do_patterntrack_play();
 2637               		.loc 1 576 7 view .LVU718
 576:main.c        ****       do_patterntrack_play();
 2638               		.loc 1 576 12 is_stmt 0 view .LVU719
 2639 0056 D093 0000 		sts sync,r29
 2640 005a 00C0      		rjmp .L254
 2641               	.L240:
 581:main.c        ****       do_patterntrack_play();
 2642               		.loc 1 581 7 is_stmt 1 view .LVU720
 581:main.c        ****       do_patterntrack_play();
 2643               		.loc 1 581 12 is_stmt 0 view .LVU721
 2644 005c C093 0000 		sts sync,r28
 582:main.c        ****       break;
 2645               		.loc 1 582 7 is_stmt 1 view .LVU722
 2646 0060 00C0      		rjmp .L254
 2647               	.L246:
 586:main.c        ****       do_track_edit();
 2648               		.loc 1 586 7 view .LVU723
 586:main.c        ****       do_track_edit();
 2649               		.loc 1 586 12 is_stmt 0 view .LVU724
 2650 0062 1092 0000 		sts sync,__zero_reg__
 587:main.c        ****       break;
 2651               		.loc 1 587 7 is_stmt 1 view .LVU725
 2652 0066 0E94 0000 		call do_track_edit
 2653               	.LVL132:
 588:main.c        ****     case PLAY_TRACK_FUNC:
 2654               		.loc 1 588 7 view .LVU726
 2655 006a 00C0      		rjmp .L251
 2656               	.L247:
 606:main.c        ****       do_midi_mode();
 2657               		.loc 1 606 7 view .LVU727
 606:main.c        ****       do_midi_mode();
 2658               		.loc 1 606 12 is_stmt 0 view .LVU728
 2659 006c 1092 0000 		sts sync,__zero_reg__
 607:main.c        ****       break;
 2660               		.loc 1 607 7 is_stmt 1 view .LVU729
 2661 0070 0E94 0000 		call do_midi_mode
 2662               	.LVL133:
 608:main.c        ****     case KEYBOARD_MODE_FUNC:
 2663               		.loc 1 608 7 view .LVU730
 2664 0074 00C0      		rjmp .L251
 2665               	.L244:
 611:main.c        ****       do_keyboard_mode();
 2666               		.loc 1 611 7 view .LVU731
 611:main.c        ****       do_keyboard_mode();
 2667               		.loc 1 611 12 is_stmt 0 view .LVU732
 2668 0076 1092 0000 		sts sync,__zero_reg__
 612:main.c        ****       break;
 2669               		.loc 1 612 7 is_stmt 1 view .LVU733
 2670 007a 0E94 0000 		call do_keyboard_mode
 2671               	.LVL134:
 613:main.c        ****     case RANDOM_MODE_FUNC: {
 2672               		.loc 1 613 7 view .LVU734
 2673 007e 00C0      		rjmp .L251
 2674               	.L242:
 618:main.c        ****       turn_on_tempo();
 2675               		.loc 1 618 7 view .LVU735
 618:main.c        ****       turn_on_tempo();
 2676               		.loc 1 618 12 is_stmt 0 view .LVU736
 2677 0080 1092 0000 		sts sync,__zero_reg__
 619:main.c        ****       clear_all_leds();
 2678               		.loc 1 619 7 is_stmt 1 view .LVU737
 2679 0084 0E94 0000 		call turn_on_tempo
 2680               	.LVL135:
 620:main.c        ****       // dinsync_start();
 2681               		.loc 1 620 7 view .LVU738
 2682 0088 0E94 0000 		call clear_all_leds
 2683               	.LVL136:
 2684               	.L249:
 622:main.c        ****         read_switches();
 2685               		.loc 1 622 7 view .LVU739
 623:main.c        **** 
 2686               		.loc 1 623 9 view .LVU740
 2687 008c 0E94 0000 		call read_switches
 2688               	.LVL137:
 625:main.c        ****           // dinsync_stop();
 2689               		.loc 1 625 9 view .LVU741
 625:main.c        ****           // dinsync_stop();
 2690               		.loc 1 625 22 is_stmt 0 view .LVU742
 2691 0090 8091 0000 		lds r24,function
 625:main.c        ****           // dinsync_stop();
 2692               		.loc 1 625 12 view .LVU743
 2693 0094 8830      		cpi r24,lo8(8)
 2694 0096 01F0      		breq .L249
 627:main.c        ****           break;
 2695               		.loc 1 627 11 is_stmt 1 view .LVU744
 2696 0098 0E94 0000 		call turn_off_tempo
 2697               	.LVL138:
 628:main.c        ****         }
 2698               		.loc 1 628 11 view .LVU745
 631:main.c        ****     }
 2699               		.loc 1 631 7 view .LVU746
 2700 009c 00C0      		rjmp .L251
 2701               	.L239:
 635:main.c        ****       do_pattern_edit();
 2702               		.loc 1 635 7 view .LVU747
 635:main.c        ****       do_pattern_edit();
 2703               		.loc 1 635 12 is_stmt 0 view .LVU748
 2704 009e C093 0000 		sts sync,r28
 2705 00a2 00C0      		rjmp .L253
 2706               	.L241:
 640:main.c        ****       clock_leds();
 2707               		.loc 1 640 7 is_stmt 1 view .LVU749
 2708 00a4 0E94 0000 		call clear_all_leds
 2709               	.LVL139:
 641:main.c        ****     default:
 2710               		.loc 1 641 7 view .LVU750
 2711 00a8 0E94 0000 		call clock_leds
 2712               	.LVL140:
 2713 00ac 00C0      		rjmp .L251
 2714               		.cfi_endproc
 2715               	.LFE5:
 2717               		.comm	last_tempo,1,1
 2718               	.global	blinktimer
 2719               		.section .bss
 2722               	blinktimer:
 2723 0000 00        		.zero	1
 2724               	.global	prev_note
 2727               	prev_note:
 2728 0001 00        		.zero	1
 2729               		.comm	curr_note,1,1
 2730               	.global	note_counter
 2733               	note_counter:
 2734 0002 00        		.zero	1
 2735               		.comm	next_random_note,1,1
 2736               		.comm	timer3_init,2,1
 2737               	.global	sync
 2740               	sync:
 2741 0003 00        		.zero	1
 2742               		.comm	newtempo,2,1
 2743               		.comm	tempo,2,1
 2744               		.comm	rand,1,1
 2745               		.text
 2746               	.Letext0:
 2747               		.file 2 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdint.h"
 2748               		.file 3 "/usr/local/Cellar/avr-gcc/9.1.0/avr/include/stdio.h"
 2749               		.file 4 "delay.h"
 2750               		.file 5 "compcontrol.h"
 2751               		.file 6 "led.h"
 2752               		.file 7 "dinsync.h"
 2753               		.file 8 "midi.h"
 2754               		.file 9 "switch.h"
 2755               		.file 10 "pattern.h"
 2756               		.file 11 "track.h"
 2757               		.file 12 "keyboard.h"
 2758               		.file 13 "synth.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:4      *ABS*:000000000000003f __SREG__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:12     .text:0000000000000000 __vector_4
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
                            *COM*:0000000000000001 last_tempo
                            *COM*:0000000000000002 newtempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:122    .text:0000000000000082 init_timer0
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:150    .text:0000000000000092 init_timer2
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:178    .text:00000000000000a2 turn_on_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:200    .text:00000000000000ae turn_off_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:226    .text:00000000000000c0 is_tempo_running
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:248    .text:00000000000000cc __vector_16
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2740   .bss:0000000000000003 sync
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2722   .bss:0000000000000000 blinktimer
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:483    .text:0000000000000202 random
                            *COM*:0000000000000001 rand
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:528    .text:0000000000000236 do_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2733   .bss:0000000000000002 note_counter
                            *COM*:0000000000000001 curr_note
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2727   .bss:0000000000000001 prev_note
                            *COM*:0000000000000001 next_random_note
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:1648   .text:000000000000086c __vector_9
                            *COM*:0000000000000002 timer3_init
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:1734   .text:00000000000008c4 uart_putchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:1764   .text:00000000000008d0 putstring
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:1810   .text:00000000000008e8 putnum_ud
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:1952   .text:0000000000000978 printhex
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:1987   .text:0000000000000988 putnum_uh
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2060   .text:00000000000009c8 uart_getch
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2088   .text:00000000000009dc uart_getchar
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2116   .text:00000000000009e6 internal_eeprom_read8
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2150   .text:00000000000009f6 internal_eeprom_write8
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2197   .text:0000000000000a0c change_tempo
                            *COM*:0000000000000002 tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2381   .text:0000000000000b04 init_tempo
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2440   .text:0000000000000b46 ioinit
/var/folders/r8/bhw8rf6916j75xkgjmn833680000gn/T//ccPPCvqS.s:2535   .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
clear_led
debounce_timer
tap_tempo_timer
uart_timeout
last_dinsync_c
dinsync_clock_timeout
blink_leds_off
dinsync_clocked
midi_putchar
blink_leds_on
function
dinsync_counter
__tablejump2__
note_off
midi_send_note_off
set_led
clock_leds
play_loaded_pattern
play_loaded_track
all_slide
curr_pattern_index
pattern_buff
curr_track_index
track_buff
curr_patt
load_curr_patt
curr_pitch_shift
clear_bank_leds
playing
curr_chain_index
curr_chain
next_chain
chains_equiv
curr_bank
next_bank
next_pitch_shift
clear_notekey_leds
clear_blinking_leds
load_pattern
load_track
get_pitchshift_from_patt
note_on
all_rest
all_accent
set_bank_led
set_note_led
midi_send_note_on
__udivmodhi4
send_tempo
__udivmodsi4
delay_ms
dinsync_set_out
init_midi
read_switches
do_computer_control
do_pattern_edit
do_patterntrack_play
do_track_edit
do_midi_mode
do_keyboard_mode
clear_all_leds
__do_clear_bss
